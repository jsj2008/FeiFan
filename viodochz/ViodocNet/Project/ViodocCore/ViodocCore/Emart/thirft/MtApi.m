/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "MtReq.h"
#import "MtResp.h"

#import "MtApi.h"


@implementation NMTFMtApiConstants
+ (void) initialize {
}
@end

@interface NMTFgetMtBanners_args : NSObject <TBase, NSCoding> {
  NMTFGetMtBannersReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFGetMtBannersReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFGetMtBannersReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtBannersReq *) req;
- (void) setReq: (NMTFGetMtBannersReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFgetMtBanners_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFGetMtBannersReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFgetMtBanners_args class]]) {
    return NO;
  }
  NMTFgetMtBanners_args *other = (NMTFgetMtBanners_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtBannersReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFGetMtBannersReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtBannersReq *fieldValue = [[NMTFGetMtBannersReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMtBanners_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFgetMtBanners_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFGetMtBanners_result : NSObject <TBase, NSCoding> {
  NMTFGetMtBannersResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFGetMtBannersResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFGetMtBannersResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtBannersResp *) success;
- (void) setSuccess: (NMTFGetMtBannersResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFGetMtBanners_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFGetMtBannersResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtBanners_result class]]) {
    return NO;
  }
  NMTFGetMtBanners_result *other = (NMTFGetMtBanners_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtBannersResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFGetMtBannersResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtBannersResp *fieldValue = [[NMTFGetMtBannersResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtBanners_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtBanners_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFgetMtProCats_args : NSObject <TBase, NSCoding> {
  NMTFGetMtProCatsReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFGetMtProCatsReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFGetMtProCatsReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtProCatsReq *) req;
- (void) setReq: (NMTFGetMtProCatsReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFgetMtProCats_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFGetMtProCatsReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFgetMtProCats_args class]]) {
    return NO;
  }
  NMTFgetMtProCats_args *other = (NMTFgetMtProCats_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtProCatsReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFGetMtProCatsReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtProCatsReq *fieldValue = [[NMTFGetMtProCatsReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMtProCats_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFgetMtProCats_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFGetMtProCats_result : NSObject <TBase, NSCoding> {
  NMTFGetMtProCatsResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFGetMtProCatsResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFGetMtProCatsResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtProCatsResp *) success;
- (void) setSuccess: (NMTFGetMtProCatsResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFGetMtProCats_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFGetMtProCatsResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtProCats_result class]]) {
    return NO;
  }
  NMTFGetMtProCats_result *other = (NMTFGetMtProCats_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtProCatsResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFGetMtProCatsResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtProCatsResp *fieldValue = [[NMTFGetMtProCatsResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtProCats_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtProCats_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFgetMtMers_args : NSObject <TBase, NSCoding> {
  NMTFGetMtMersReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFGetMtMersReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFGetMtMersReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtMersReq *) req;
- (void) setReq: (NMTFGetMtMersReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFgetMtMers_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFGetMtMersReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFgetMtMers_args class]]) {
    return NO;
  }
  NMTFgetMtMers_args *other = (NMTFgetMtMers_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtMersReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFGetMtMersReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtMersReq *fieldValue = [[NMTFGetMtMersReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMtMers_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFgetMtMers_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFGetMtMers_result : NSObject <TBase, NSCoding> {
  NMTFGetMtMersResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFGetMtMersResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFGetMtMersResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtMersResp *) success;
- (void) setSuccess: (NMTFGetMtMersResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFGetMtMers_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFGetMtMersResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtMers_result class]]) {
    return NO;
  }
  NMTFGetMtMers_result *other = (NMTFGetMtMers_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtMersResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFGetMtMersResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtMersResp *fieldValue = [[NMTFGetMtMersResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtMers_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtMers_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFgetMtMerInfo_args : NSObject <TBase, NSCoding> {
  NMTFGetMtMerInfoReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFGetMtMerInfoReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFGetMtMerInfoReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtMerInfoReq *) req;
- (void) setReq: (NMTFGetMtMerInfoReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFgetMtMerInfo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFGetMtMerInfoReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFgetMtMerInfo_args class]]) {
    return NO;
  }
  NMTFgetMtMerInfo_args *other = (NMTFgetMtMerInfo_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtMerInfoReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFGetMtMerInfoReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtMerInfoReq *fieldValue = [[NMTFGetMtMerInfoReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMtMerInfo_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFgetMtMerInfo_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFGetMtMerInfo_result : NSObject <TBase, NSCoding> {
  NMTFGetMtMerInfoResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFGetMtMerInfoResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFGetMtMerInfoResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtMerInfoResp *) success;
- (void) setSuccess: (NMTFGetMtMerInfoResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFGetMtMerInfo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFGetMtMerInfoResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtMerInfo_result class]]) {
    return NO;
  }
  NMTFGetMtMerInfo_result *other = (NMTFGetMtMerInfo_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtMerInfoResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFGetMtMerInfoResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtMerInfoResp *fieldValue = [[NMTFGetMtMerInfoResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtMerInfo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtMerInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFgetMtMerStores_args : NSObject <TBase, NSCoding> {
  NMTFGetMtMerStoresReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFGetMtMerStoresReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFGetMtMerStoresReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtMerStoresReq *) req;
- (void) setReq: (NMTFGetMtMerStoresReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFgetMtMerStores_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFGetMtMerStoresReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFgetMtMerStores_args class]]) {
    return NO;
  }
  NMTFgetMtMerStores_args *other = (NMTFgetMtMerStores_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtMerStoresReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFGetMtMerStoresReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtMerStoresReq *fieldValue = [[NMTFGetMtMerStoresReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMtMerStores_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFgetMtMerStores_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFGetMtMerStores_result : NSObject <TBase, NSCoding> {
  NMTFGetMtMerStoresResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFGetMtMerStoresResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFGetMtMerStoresResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtMerStoresResp *) success;
- (void) setSuccess: (NMTFGetMtMerStoresResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFGetMtMerStores_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFGetMtMerStoresResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtMerStores_result class]]) {
    return NO;
  }
  NMTFGetMtMerStores_result *other = (NMTFGetMtMerStores_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtMerStoresResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFGetMtMerStoresResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtMerStoresResp *fieldValue = [[NMTFGetMtMerStoresResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtMerStores_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtMerStores_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFgetMtPros_args : NSObject <TBase, NSCoding> {
  NMTFGetMtProsReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFGetMtProsReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFGetMtProsReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtProsReq *) req;
- (void) setReq: (NMTFGetMtProsReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFgetMtPros_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFGetMtProsReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFgetMtPros_args class]]) {
    return NO;
  }
  NMTFgetMtPros_args *other = (NMTFgetMtPros_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtProsReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFGetMtProsReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtProsReq *fieldValue = [[NMTFGetMtProsReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMtPros_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFgetMtPros_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFGetMtPros_result : NSObject <TBase, NSCoding> {
  NMTFGetMtProsResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFGetMtProsResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFGetMtProsResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtProsResp *) success;
- (void) setSuccess: (NMTFGetMtProsResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFGetMtPros_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFGetMtProsResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtPros_result class]]) {
    return NO;
  }
  NMTFGetMtPros_result *other = (NMTFGetMtPros_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtProsResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFGetMtProsResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtProsResp *fieldValue = [[NMTFGetMtProsResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtPros_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtPros_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFgetMtProInfo_args : NSObject <TBase, NSCoding> {
  NMTFGetMtProInfoReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFGetMtProInfoReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFGetMtProInfoReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtProInfoReq *) req;
- (void) setReq: (NMTFGetMtProInfoReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFgetMtProInfo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFGetMtProInfoReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFgetMtProInfo_args class]]) {
    return NO;
  }
  NMTFgetMtProInfo_args *other = (NMTFgetMtProInfo_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtProInfoReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFGetMtProInfoReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtProInfoReq *fieldValue = [[NMTFGetMtProInfoReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMtProInfo_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFgetMtProInfo_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFGetMtProInfo_result : NSObject <TBase, NSCoding> {
  NMTFGetMtProInfoResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFGetMtProInfoResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFGetMtProInfoResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtProInfoResp *) success;
- (void) setSuccess: (NMTFGetMtProInfoResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFGetMtProInfo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFGetMtProInfoResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtProInfo_result class]]) {
    return NO;
  }
  NMTFGetMtProInfo_result *other = (NMTFGetMtProInfo_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtProInfoResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFGetMtProInfoResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtProInfoResp *fieldValue = [[NMTFGetMtProInfoResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtProInfo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtProInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFfindMtMerPros_args : NSObject <TBase, NSCoding> {
  NMTFFindMtMerProsReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFFindMtMerProsReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFFindMtMerProsReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFFindMtMerProsReq *) req;
- (void) setReq: (NMTFFindMtMerProsReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFfindMtMerPros_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFFindMtMerProsReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFfindMtMerPros_args class]]) {
    return NO;
  }
  NMTFfindMtMerPros_args *other = (NMTFfindMtMerPros_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFFindMtMerProsReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFFindMtMerProsReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFFindMtMerProsReq *fieldValue = [[NMTFFindMtMerProsReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"findMtMerPros_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFfindMtMerPros_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFFindMtMerPros_result : NSObject <TBase, NSCoding> {
  NMTFFindMtMerProsResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFFindMtMerProsResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFFindMtMerProsResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFFindMtMerProsResp *) success;
- (void) setSuccess: (NMTFFindMtMerProsResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFFindMtMerPros_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFFindMtMerProsResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFFindMtMerPros_result class]]) {
    return NO;
  }
  NMTFFindMtMerPros_result *other = (NMTFFindMtMerPros_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFFindMtMerProsResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFFindMtMerProsResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFFindMtMerProsResp *fieldValue = [[NMTFFindMtMerProsResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FindMtMerPros_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFFindMtMerPros_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFgetMtShipAdds_args : NSObject <TBase, NSCoding> {
  NMTFGetMtShipAddsReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFGetMtShipAddsReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFGetMtShipAddsReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtShipAddsReq *) req;
- (void) setReq: (NMTFGetMtShipAddsReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFgetMtShipAdds_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFGetMtShipAddsReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFgetMtShipAdds_args class]]) {
    return NO;
  }
  NMTFgetMtShipAdds_args *other = (NMTFgetMtShipAdds_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtShipAddsReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFGetMtShipAddsReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtShipAddsReq *fieldValue = [[NMTFGetMtShipAddsReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMtShipAdds_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFgetMtShipAdds_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFGetMtShipAdds_result : NSObject <TBase, NSCoding> {
  NMTFGetMtShipAddsResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFGetMtShipAddsResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFGetMtShipAddsResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtShipAddsResp *) success;
- (void) setSuccess: (NMTFGetMtShipAddsResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFGetMtShipAdds_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFGetMtShipAddsResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtShipAdds_result class]]) {
    return NO;
  }
  NMTFGetMtShipAdds_result *other = (NMTFGetMtShipAdds_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtShipAddsResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFGetMtShipAddsResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtShipAddsResp *fieldValue = [[NMTFGetMtShipAddsResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtShipAdds_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtShipAdds_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFeditMtShipAdd_args : NSObject <TBase, NSCoding> {
  NMTFEditMtShipAddReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFEditMtShipAddReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFEditMtShipAddReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFEditMtShipAddReq *) req;
- (void) setReq: (NMTFEditMtShipAddReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFeditMtShipAdd_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFEditMtShipAddReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFeditMtShipAdd_args class]]) {
    return NO;
  }
  NMTFeditMtShipAdd_args *other = (NMTFeditMtShipAdd_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFEditMtShipAddReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFEditMtShipAddReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFEditMtShipAddReq *fieldValue = [[NMTFEditMtShipAddReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"editMtShipAdd_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFeditMtShipAdd_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFEditMtShipAdd_result : NSObject <TBase, NSCoding> {
  NMTFEditMtShipAddResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFEditMtShipAddResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFEditMtShipAddResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFEditMtShipAddResp *) success;
- (void) setSuccess: (NMTFEditMtShipAddResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFEditMtShipAdd_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFEditMtShipAddResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFEditMtShipAdd_result class]]) {
    return NO;
  }
  NMTFEditMtShipAdd_result *other = (NMTFEditMtShipAdd_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFEditMtShipAddResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFEditMtShipAddResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFEditMtShipAddResp *fieldValue = [[NMTFEditMtShipAddResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EditMtShipAdd_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFEditMtShipAdd_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFgetMtCartProsCnt_args : NSObject <TBase, NSCoding> {
  NMTFGetMtCartProsCntReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFGetMtCartProsCntReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFGetMtCartProsCntReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtCartProsCntReq *) req;
- (void) setReq: (NMTFGetMtCartProsCntReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFgetMtCartProsCnt_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFGetMtCartProsCntReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFgetMtCartProsCnt_args class]]) {
    return NO;
  }
  NMTFgetMtCartProsCnt_args *other = (NMTFgetMtCartProsCnt_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtCartProsCntReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFGetMtCartProsCntReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtCartProsCntReq *fieldValue = [[NMTFGetMtCartProsCntReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMtCartProsCnt_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFgetMtCartProsCnt_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFGetMtCartProsCnt_result : NSObject <TBase, NSCoding> {
  NMTFGetMtCartProsCntResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFGetMtCartProsCntResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFGetMtCartProsCntResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtCartProsCntResp *) success;
- (void) setSuccess: (NMTFGetMtCartProsCntResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFGetMtCartProsCnt_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFGetMtCartProsCntResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtCartProsCnt_result class]]) {
    return NO;
  }
  NMTFGetMtCartProsCnt_result *other = (NMTFGetMtCartProsCnt_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtCartProsCntResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFGetMtCartProsCntResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtCartProsCntResp *fieldValue = [[NMTFGetMtCartProsCntResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtCartProsCnt_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtCartProsCnt_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFgetMtCartPros_args : NSObject <TBase, NSCoding> {
  NMTFGetMtCartProsReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFGetMtCartProsReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFGetMtCartProsReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtCartProsReq *) req;
- (void) setReq: (NMTFGetMtCartProsReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFgetMtCartPros_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFGetMtCartProsReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFgetMtCartPros_args class]]) {
    return NO;
  }
  NMTFgetMtCartPros_args *other = (NMTFgetMtCartPros_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtCartProsReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFGetMtCartProsReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtCartProsReq *fieldValue = [[NMTFGetMtCartProsReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMtCartPros_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFgetMtCartPros_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFGetMtCartPros_result : NSObject <TBase, NSCoding> {
  NMTFGetMtCartProsResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFGetMtCartProsResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFGetMtCartProsResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtCartProsResp *) success;
- (void) setSuccess: (NMTFGetMtCartProsResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFGetMtCartPros_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFGetMtCartProsResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtCartPros_result class]]) {
    return NO;
  }
  NMTFGetMtCartPros_result *other = (NMTFGetMtCartPros_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtCartProsResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFGetMtCartProsResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtCartProsResp *fieldValue = [[NMTFGetMtCartProsResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtCartPros_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtCartPros_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFeditMtCartPros_args : NSObject <TBase, NSCoding> {
  NMTFEditMtCartProsReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFEditMtCartProsReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFEditMtCartProsReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFEditMtCartProsReq *) req;
- (void) setReq: (NMTFEditMtCartProsReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFeditMtCartPros_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFEditMtCartProsReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFeditMtCartPros_args class]]) {
    return NO;
  }
  NMTFeditMtCartPros_args *other = (NMTFeditMtCartPros_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFEditMtCartProsReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFEditMtCartProsReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFEditMtCartProsReq *fieldValue = [[NMTFEditMtCartProsReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"editMtCartPros_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFeditMtCartPros_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFEditMtCartPros_result : NSObject <TBase, NSCoding> {
  NMTFEditMtCartProsResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFEditMtCartProsResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFEditMtCartProsResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFEditMtCartProsResp *) success;
- (void) setSuccess: (NMTFEditMtCartProsResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFEditMtCartPros_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFEditMtCartProsResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFEditMtCartPros_result class]]) {
    return NO;
  }
  NMTFEditMtCartPros_result *other = (NMTFEditMtCartPros_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFEditMtCartProsResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFEditMtCartProsResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFEditMtCartProsResp *fieldValue = [[NMTFEditMtCartProsResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EditMtCartPros_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFEditMtCartPros_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFcreateMtOrder_args : NSObject <TBase, NSCoding> {
  NMTFCreateMtOrderReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFCreateMtOrderReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFCreateMtOrderReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFCreateMtOrderReq *) req;
- (void) setReq: (NMTFCreateMtOrderReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFcreateMtOrder_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFCreateMtOrderReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFcreateMtOrder_args class]]) {
    return NO;
  }
  NMTFcreateMtOrder_args *other = (NMTFcreateMtOrder_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFCreateMtOrderReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFCreateMtOrderReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFCreateMtOrderReq *fieldValue = [[NMTFCreateMtOrderReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"createMtOrder_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFcreateMtOrder_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFCreateMtOrder_result : NSObject <TBase, NSCoding> {
  NMTFCreateMtOrderResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFCreateMtOrderResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFCreateMtOrderResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFCreateMtOrderResp *) success;
- (void) setSuccess: (NMTFCreateMtOrderResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFCreateMtOrder_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFCreateMtOrderResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFCreateMtOrder_result class]]) {
    return NO;
  }
  NMTFCreateMtOrder_result *other = (NMTFCreateMtOrder_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFCreateMtOrderResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFCreateMtOrderResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFCreateMtOrderResp *fieldValue = [[NMTFCreateMtOrderResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CreateMtOrder_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFCreateMtOrder_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFcancelMtOrder_args : NSObject <TBase, NSCoding> {
  NMTFCancelMtOrderReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFCancelMtOrderReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFCancelMtOrderReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFCancelMtOrderReq *) req;
- (void) setReq: (NMTFCancelMtOrderReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFcancelMtOrder_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFCancelMtOrderReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFcancelMtOrder_args class]]) {
    return NO;
  }
  NMTFcancelMtOrder_args *other = (NMTFcancelMtOrder_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFCancelMtOrderReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFCancelMtOrderReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFCancelMtOrderReq *fieldValue = [[NMTFCancelMtOrderReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"cancelMtOrder_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFcancelMtOrder_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFCancelMtOrder_result : NSObject <TBase, NSCoding> {
  NMTFCancelMtOrderResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFCancelMtOrderResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFCancelMtOrderResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFCancelMtOrderResp *) success;
- (void) setSuccess: (NMTFCancelMtOrderResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFCancelMtOrder_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFCancelMtOrderResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFCancelMtOrder_result class]]) {
    return NO;
  }
  NMTFCancelMtOrder_result *other = (NMTFCancelMtOrder_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFCancelMtOrderResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFCancelMtOrderResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFCancelMtOrderResp *fieldValue = [[NMTFCancelMtOrderResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CancelMtOrder_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFCancelMtOrder_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFdelMtOrder_args : NSObject <TBase, NSCoding> {
  NMTFDelMtOrderReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFDelMtOrderReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFDelMtOrderReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFDelMtOrderReq *) req;
- (void) setReq: (NMTFDelMtOrderReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFdelMtOrder_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFDelMtOrderReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFdelMtOrder_args class]]) {
    return NO;
  }
  NMTFdelMtOrder_args *other = (NMTFdelMtOrder_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFDelMtOrderReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFDelMtOrderReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFDelMtOrderReq *fieldValue = [[NMTFDelMtOrderReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"delMtOrder_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFdelMtOrder_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFDelMtOrder_result : NSObject <TBase, NSCoding> {
  NMTFDelMtOrderResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFDelMtOrderResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFDelMtOrderResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFDelMtOrderResp *) success;
- (void) setSuccess: (NMTFDelMtOrderResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFDelMtOrder_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFDelMtOrderResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFDelMtOrder_result class]]) {
    return NO;
  }
  NMTFDelMtOrder_result *other = (NMTFDelMtOrder_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFDelMtOrderResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFDelMtOrderResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFDelMtOrderResp *fieldValue = [[NMTFDelMtOrderResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DelMtOrder_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFDelMtOrder_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFprePayMtOrder_args : NSObject <TBase, NSCoding> {
  NMTFPrePayMtOrderReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFPrePayMtOrderReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFPrePayMtOrderReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFPrePayMtOrderReq *) req;
- (void) setReq: (NMTFPrePayMtOrderReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFprePayMtOrder_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFPrePayMtOrderReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFprePayMtOrder_args class]]) {
    return NO;
  }
  NMTFprePayMtOrder_args *other = (NMTFprePayMtOrder_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFPrePayMtOrderReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFPrePayMtOrderReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFPrePayMtOrderReq *fieldValue = [[NMTFPrePayMtOrderReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"prePayMtOrder_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFprePayMtOrder_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFPrePayMtOrder_result : NSObject <TBase, NSCoding> {
  NMTFPrePayMtOrderResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFPrePayMtOrderResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFPrePayMtOrderResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFPrePayMtOrderResp *) success;
- (void) setSuccess: (NMTFPrePayMtOrderResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFPrePayMtOrder_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFPrePayMtOrderResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFPrePayMtOrder_result class]]) {
    return NO;
  }
  NMTFPrePayMtOrder_result *other = (NMTFPrePayMtOrder_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFPrePayMtOrderResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFPrePayMtOrderResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFPrePayMtOrderResp *fieldValue = [[NMTFPrePayMtOrderResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PrePayMtOrder_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFPrePayMtOrder_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFpayMtOrder_args : NSObject <TBase, NSCoding> {
  NMTFPayMtOrderReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFPayMtOrderReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFPayMtOrderReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFPayMtOrderReq *) req;
- (void) setReq: (NMTFPayMtOrderReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFpayMtOrder_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFPayMtOrderReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFpayMtOrder_args class]]) {
    return NO;
  }
  NMTFpayMtOrder_args *other = (NMTFpayMtOrder_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFPayMtOrderReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFPayMtOrderReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFPayMtOrderReq *fieldValue = [[NMTFPayMtOrderReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"payMtOrder_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFpayMtOrder_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFPayMtOrder_result : NSObject <TBase, NSCoding> {
  NMTFPayMtOrderResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFPayMtOrderResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFPayMtOrderResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFPayMtOrderResp *) success;
- (void) setSuccess: (NMTFPayMtOrderResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFPayMtOrder_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFPayMtOrderResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFPayMtOrder_result class]]) {
    return NO;
  }
  NMTFPayMtOrder_result *other = (NMTFPayMtOrder_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFPayMtOrderResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFPayMtOrderResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFPayMtOrderResp *fieldValue = [[NMTFPayMtOrderResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PayMtOrder_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFPayMtOrder_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFreceiptMtPros_args : NSObject <TBase, NSCoding> {
  NMTFReceiptMtProsReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFReceiptMtProsReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFReceiptMtProsReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFReceiptMtProsReq *) req;
- (void) setReq: (NMTFReceiptMtProsReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFreceiptMtPros_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFReceiptMtProsReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFreceiptMtPros_args class]]) {
    return NO;
  }
  NMTFreceiptMtPros_args *other = (NMTFreceiptMtPros_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFReceiptMtProsReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFReceiptMtProsReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReceiptMtProsReq *fieldValue = [[NMTFReceiptMtProsReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"receiptMtPros_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFreceiptMtPros_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFReceiptMtPros_result : NSObject <TBase, NSCoding> {
  NMTFReceiptMtProsResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFReceiptMtProsResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFReceiptMtProsResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFReceiptMtProsResp *) success;
- (void) setSuccess: (NMTFReceiptMtProsResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFReceiptMtPros_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFReceiptMtProsResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFReceiptMtPros_result class]]) {
    return NO;
  }
  NMTFReceiptMtPros_result *other = (NMTFReceiptMtPros_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFReceiptMtProsResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFReceiptMtProsResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFReceiptMtProsResp *fieldValue = [[NMTFReceiptMtProsResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReceiptMtPros_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFReceiptMtPros_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFreqMtRefund_args : NSObject <TBase, NSCoding> {
  NMTFReqMtRefundReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFReqMtRefundReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFReqMtRefundReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFReqMtRefundReq *) req;
- (void) setReq: (NMTFReqMtRefundReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFreqMtRefund_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFReqMtRefundReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFreqMtRefund_args class]]) {
    return NO;
  }
  NMTFreqMtRefund_args *other = (NMTFreqMtRefund_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFReqMtRefundReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFReqMtRefundReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqMtRefundReq *fieldValue = [[NMTFReqMtRefundReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"reqMtRefund_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFreqMtRefund_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFReqMtRefund_result : NSObject <TBase, NSCoding> {
  NMTFReqMtRefundResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFReqMtRefundResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFReqMtRefundResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFReqMtRefundResp *) success;
- (void) setSuccess: (NMTFReqMtRefundResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFReqMtRefund_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFReqMtRefundResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFReqMtRefund_result class]]) {
    return NO;
  }
  NMTFReqMtRefund_result *other = (NMTFReqMtRefund_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFReqMtRefundResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFReqMtRefundResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFReqMtRefundResp *fieldValue = [[NMTFReqMtRefundResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReqMtRefund_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFReqMtRefund_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFgetUserOrderList_args : NSObject <TBase, NSCoding> {
  NMTFGetUserOrderListReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFGetUserOrderListReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFGetUserOrderListReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetUserOrderListReq *) req;
- (void) setReq: (NMTFGetUserOrderListReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFgetUserOrderList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFGetUserOrderListReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFgetUserOrderList_args class]]) {
    return NO;
  }
  NMTFgetUserOrderList_args *other = (NMTFgetUserOrderList_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFGetUserOrderListReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFGetUserOrderListReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFGetUserOrderListReq *fieldValue = [[NMTFGetUserOrderListReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getUserOrderList_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFgetUserOrderList_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFGetUserOrderList_result : NSObject <TBase, NSCoding> {
  NMTFGetUserOrderListResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFGetUserOrderListResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFGetUserOrderListResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetUserOrderListResp *) success;
- (void) setSuccess: (NMTFGetUserOrderListResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFGetUserOrderList_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFGetUserOrderListResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetUserOrderList_result class]]) {
    return NO;
  }
  NMTFGetUserOrderList_result *other = (NMTFGetUserOrderList_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFGetUserOrderListResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFGetUserOrderListResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFGetUserOrderListResp *fieldValue = [[NMTFGetUserOrderListResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUserOrderList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetUserOrderList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFgetPayBanks_args : NSObject <TBase, NSCoding> {
  NMTFGetPayBanksReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFGetPayBanksReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFGetPayBanksReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetPayBanksReq *) req;
- (void) setReq: (NMTFGetPayBanksReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFgetPayBanks_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFGetPayBanksReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFgetPayBanks_args class]]) {
    return NO;
  }
  NMTFgetPayBanks_args *other = (NMTFgetPayBanks_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFGetPayBanksReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFGetPayBanksReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFGetPayBanksReq *fieldValue = [[NMTFGetPayBanksReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getPayBanks_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFgetPayBanks_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFGetPayBanks_result : NSObject <TBase, NSCoding> {
  NMTFGetPayBanksResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFGetPayBanksResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFGetPayBanksResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetPayBanksResp *) success;
- (void) setSuccess: (NMTFGetPayBanksResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFGetPayBanks_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFGetPayBanksResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetPayBanks_result class]]) {
    return NO;
  }
  NMTFGetPayBanks_result *other = (NMTFGetPayBanks_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFGetPayBanksResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFGetPayBanksResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFGetPayBanksResp *fieldValue = [[NMTFGetPayBanksResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPayBanks_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetPayBanks_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFpreBindBankCard_args : NSObject <TBase, NSCoding> {
  NMTFPreBindBankCardReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFPreBindBankCardReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFPreBindBankCardReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFPreBindBankCardReq *) req;
- (void) setReq: (NMTFPreBindBankCardReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFpreBindBankCard_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFPreBindBankCardReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFpreBindBankCard_args class]]) {
    return NO;
  }
  NMTFpreBindBankCard_args *other = (NMTFpreBindBankCard_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFPreBindBankCardReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFPreBindBankCardReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFPreBindBankCardReq *fieldValue = [[NMTFPreBindBankCardReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"preBindBankCard_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFpreBindBankCard_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFPreBindBankCard_result : NSObject <TBase, NSCoding> {
  NMTFPreBindBankCardResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFPreBindBankCardResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFPreBindBankCardResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFPreBindBankCardResp *) success;
- (void) setSuccess: (NMTFPreBindBankCardResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFPreBindBankCard_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFPreBindBankCardResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFPreBindBankCard_result class]]) {
    return NO;
  }
  NMTFPreBindBankCard_result *other = (NMTFPreBindBankCard_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFPreBindBankCardResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFPreBindBankCardResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFPreBindBankCardResp *fieldValue = [[NMTFPreBindBankCardResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PreBindBankCard_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFPreBindBankCard_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFbindBankCard_args : NSObject <TBase, NSCoding> {
  NMTFBindBankCardReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFBindBankCardReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFBindBankCardReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFBindBankCardReq *) req;
- (void) setReq: (NMTFBindBankCardReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFbindBankCard_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFBindBankCardReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFbindBankCard_args class]]) {
    return NO;
  }
  NMTFbindBankCard_args *other = (NMTFbindBankCard_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFBindBankCardReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFBindBankCardReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFBindBankCardReq *fieldValue = [[NMTFBindBankCardReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"bindBankCard_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFbindBankCard_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFBindBankCard_result : NSObject <TBase, NSCoding> {
  NMTFBindBankCardResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFBindBankCardResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFBindBankCardResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFBindBankCardResp *) success;
- (void) setSuccess: (NMTFBindBankCardResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFBindBankCard_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFBindBankCardResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFBindBankCard_result class]]) {
    return NO;
  }
  NMTFBindBankCard_result *other = (NMTFBindBankCard_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFBindBankCardResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFBindBankCardResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFBindBankCardResp *fieldValue = [[NMTFBindBankCardResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BindBankCard_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFBindBankCard_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFgetMtBindings_args : NSObject <TBase, NSCoding> {
  NMTFGetMtBindingsReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFGetMtBindingsReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFGetMtBindingsReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtBindingsReq *) req;
- (void) setReq: (NMTFGetMtBindingsReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFgetMtBindings_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFGetMtBindingsReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFgetMtBindings_args class]]) {
    return NO;
  }
  NMTFgetMtBindings_args *other = (NMTFgetMtBindings_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtBindingsReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFGetMtBindingsReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtBindingsReq *fieldValue = [[NMTFGetMtBindingsReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMtBindings_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFgetMtBindings_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFGetMtBindings_result : NSObject <TBase, NSCoding> {
  NMTFGetMtBindingsResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFGetMtBindingsResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFGetMtBindingsResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtBindingsResp *) success;
- (void) setSuccess: (NMTFGetMtBindingsResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFGetMtBindings_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFGetMtBindingsResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtBindings_result class]]) {
    return NO;
  }
  NMTFGetMtBindings_result *other = (NMTFGetMtBindings_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtBindingsResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFGetMtBindingsResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtBindingsResp *fieldValue = [[NMTFGetMtBindingsResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtBindings_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtBindings_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFgetMtOrderDetail_args : NSObject <TBase, NSCoding> {
  NMTFGetMtOrderDetailReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) NMTFGetMtOrderDetailReq * req;
#endif

- (id) init;
- (id) initWithReq: (NMTFGetMtOrderDetailReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtOrderDetailReq *) req;
- (void) setReq: (NMTFGetMtOrderDetailReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation NMTFgetMtOrderDetail_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (NMTFGetMtOrderDetailReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __req_isset ? 2654435761 : 0;
  if (__req_isset)
  {
    hash = (hash * 31) ^ [__req hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFgetMtOrderDetail_args class]]) {
    return NO;
  }
  NMTFgetMtOrderDetail_args *other = (NMTFgetMtOrderDetail_args *)anObject;
  if ((__req_isset != other->__req_isset) ||
      (__req_isset && ((__req || other->__req) && ![__req isEqual:other->__req]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtOrderDetailReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (NMTFGetMtOrderDetailReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtOrderDetailReq *fieldValue = [[NMTFGetMtOrderDetailReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMtOrderDetail_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFgetMtOrderDetail_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NMTFGetMtOrderDetail_result : NSObject <TBase, NSCoding> {
  NMTFGetMtOrderDetailResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NMTFGetMtOrderDetailResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (NMTFGetMtOrderDetailResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NMTFGetMtOrderDetailResp *) success;
- (void) setSuccess: (NMTFGetMtOrderDetailResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation NMTFGetMtOrderDetail_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NMTFGetMtOrderDetailResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtOrderDetail_result class]]) {
    return NO;
  }
  NMTFGetMtOrderDetail_result *other = (NMTFGetMtOrderDetail_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NMTFGetMtOrderDetailResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NMTFGetMtOrderDetailResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NMTFGetMtOrderDetailResp *fieldValue = [[NMTFGetMtOrderDetailResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtOrderDetail_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtOrderDetail_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFEmartClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) send_getMtBanners: (NMTFGetMtBannersReq *) req
{
  [outProtocol writeMessageBeginWithName: @"getMtBanners" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMtBanners_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFGetMtBannersResp *) recv_getMtBanners
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFGetMtBanners_result * result = [[[NMTFGetMtBanners_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMtBanners failed: unknown result"];
}

- (NMTFGetMtBannersResp *) getMtBanners: (NMTFGetMtBannersReq *) req
{
  [self send_getMtBanners : req];
  [[outProtocol transport] flush];
  return [self recv_getMtBanners];
}

- (void) send_getMtProCats: (NMTFGetMtProCatsReq *) req
{
  [outProtocol writeMessageBeginWithName: @"getMtProCats" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMtProCats_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFGetMtProCatsResp *) recv_getMtProCats
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFGetMtProCats_result * result = [[[NMTFGetMtProCats_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMtProCats failed: unknown result"];
}

- (NMTFGetMtProCatsResp *) getMtProCats: (NMTFGetMtProCatsReq *) req
{
  [self send_getMtProCats : req];
  [[outProtocol transport] flush];
  return [self recv_getMtProCats];
}

- (void) send_getMtMers: (NMTFGetMtMersReq *) req
{
  [outProtocol writeMessageBeginWithName: @"getMtMers" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMtMers_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFGetMtMersResp *) recv_getMtMers
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFGetMtMers_result * result = [[[NMTFGetMtMers_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMtMers failed: unknown result"];
}

- (NMTFGetMtMersResp *) getMtMers: (NMTFGetMtMersReq *) req
{
  [self send_getMtMers : req];
  [[outProtocol transport] flush];
  return [self recv_getMtMers];
}

- (void) send_getMtMerInfo: (NMTFGetMtMerInfoReq *) req
{
  [outProtocol writeMessageBeginWithName: @"getMtMerInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMtMerInfo_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFGetMtMerInfoResp *) recv_getMtMerInfo
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFGetMtMerInfo_result * result = [[[NMTFGetMtMerInfo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMtMerInfo failed: unknown result"];
}

- (NMTFGetMtMerInfoResp *) getMtMerInfo: (NMTFGetMtMerInfoReq *) req
{
  [self send_getMtMerInfo : req];
  [[outProtocol transport] flush];
  return [self recv_getMtMerInfo];
}

- (void) send_getMtMerStores: (NMTFGetMtMerStoresReq *) req
{
  [outProtocol writeMessageBeginWithName: @"getMtMerStores" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMtMerStores_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFGetMtMerStoresResp *) recv_getMtMerStores
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFGetMtMerStores_result * result = [[[NMTFGetMtMerStores_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMtMerStores failed: unknown result"];
}

- (NMTFGetMtMerStoresResp *) getMtMerStores: (NMTFGetMtMerStoresReq *) req
{
  [self send_getMtMerStores : req];
  [[outProtocol transport] flush];
  return [self recv_getMtMerStores];
}

- (void) send_getMtPros: (NMTFGetMtProsReq *) req
{
  [outProtocol writeMessageBeginWithName: @"getMtPros" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMtPros_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFGetMtProsResp *) recv_getMtPros
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFGetMtPros_result * result = [[[NMTFGetMtPros_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMtPros failed: unknown result"];
}

- (NMTFGetMtProsResp *) getMtPros: (NMTFGetMtProsReq *) req
{
  [self send_getMtPros : req];
  [[outProtocol transport] flush];
  return [self recv_getMtPros];
}

- (void) send_getMtProInfo: (NMTFGetMtProInfoReq *) req
{
  [outProtocol writeMessageBeginWithName: @"getMtProInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMtProInfo_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFGetMtProInfoResp *) recv_getMtProInfo
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFGetMtProInfo_result * result = [[[NMTFGetMtProInfo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMtProInfo failed: unknown result"];
}

- (NMTFGetMtProInfoResp *) getMtProInfo: (NMTFGetMtProInfoReq *) req
{
  [self send_getMtProInfo : req];
  [[outProtocol transport] flush];
  return [self recv_getMtProInfo];
}

- (void) send_findMtMerPros: (NMTFFindMtMerProsReq *) req
{
  [outProtocol writeMessageBeginWithName: @"findMtMerPros" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"findMtMerPros_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFFindMtMerProsResp *) recv_findMtMerPros
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFFindMtMerPros_result * result = [[[NMTFFindMtMerPros_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"findMtMerPros failed: unknown result"];
}

- (NMTFFindMtMerProsResp *) findMtMerPros: (NMTFFindMtMerProsReq *) req
{
  [self send_findMtMerPros : req];
  [[outProtocol transport] flush];
  return [self recv_findMtMerPros];
}

- (void) send_getMtShipAdds: (NMTFGetMtShipAddsReq *) req
{
  [outProtocol writeMessageBeginWithName: @"getMtShipAdds" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMtShipAdds_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFGetMtShipAddsResp *) recv_getMtShipAdds
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFGetMtShipAdds_result * result = [[[NMTFGetMtShipAdds_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMtShipAdds failed: unknown result"];
}

- (NMTFGetMtShipAddsResp *) getMtShipAdds: (NMTFGetMtShipAddsReq *) req
{
  [self send_getMtShipAdds : req];
  [[outProtocol transport] flush];
  return [self recv_getMtShipAdds];
}

- (void) send_editMtShipAdd: (NMTFEditMtShipAddReq *) req
{
  [outProtocol writeMessageBeginWithName: @"editMtShipAdd" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"editMtShipAdd_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFEditMtShipAddResp *) recv_editMtShipAdd
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFEditMtShipAdd_result * result = [[[NMTFEditMtShipAdd_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"editMtShipAdd failed: unknown result"];
}

- (NMTFEditMtShipAddResp *) editMtShipAdd: (NMTFEditMtShipAddReq *) req
{
  [self send_editMtShipAdd : req];
  [[outProtocol transport] flush];
  return [self recv_editMtShipAdd];
}

- (void) send_getMtCartProsCnt: (NMTFGetMtCartProsCntReq *) req
{
  [outProtocol writeMessageBeginWithName: @"getMtCartProsCnt" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMtCartProsCnt_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFGetMtCartProsCntResp *) recv_getMtCartProsCnt
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFGetMtCartProsCnt_result * result = [[[NMTFGetMtCartProsCnt_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMtCartProsCnt failed: unknown result"];
}

- (NMTFGetMtCartProsCntResp *) getMtCartProsCnt: (NMTFGetMtCartProsCntReq *) req
{
  [self send_getMtCartProsCnt : req];
  [[outProtocol transport] flush];
  return [self recv_getMtCartProsCnt];
}

- (void) send_getMtCartPros: (NMTFGetMtCartProsReq *) req
{
  [outProtocol writeMessageBeginWithName: @"getMtCartPros" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMtCartPros_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFGetMtCartProsResp *) recv_getMtCartPros
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFGetMtCartPros_result * result = [[[NMTFGetMtCartPros_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMtCartPros failed: unknown result"];
}

- (NMTFGetMtCartProsResp *) getMtCartPros: (NMTFGetMtCartProsReq *) req
{
  [self send_getMtCartPros : req];
  [[outProtocol transport] flush];
  return [self recv_getMtCartPros];
}

- (void) send_editMtCartPros: (NMTFEditMtCartProsReq *) req
{
  [outProtocol writeMessageBeginWithName: @"editMtCartPros" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"editMtCartPros_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFEditMtCartProsResp *) recv_editMtCartPros
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFEditMtCartPros_result * result = [[[NMTFEditMtCartPros_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"editMtCartPros failed: unknown result"];
}

- (NMTFEditMtCartProsResp *) editMtCartPros: (NMTFEditMtCartProsReq *) req
{
  [self send_editMtCartPros : req];
  [[outProtocol transport] flush];
  return [self recv_editMtCartPros];
}

- (void) send_createMtOrder: (NMTFCreateMtOrderReq *) req
{
  [outProtocol writeMessageBeginWithName: @"createMtOrder" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"createMtOrder_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFCreateMtOrderResp *) recv_createMtOrder
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFCreateMtOrder_result * result = [[[NMTFCreateMtOrder_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"createMtOrder failed: unknown result"];
}

- (NMTFCreateMtOrderResp *) createMtOrder: (NMTFCreateMtOrderReq *) req
{
  [self send_createMtOrder : req];
  [[outProtocol transport] flush];
  return [self recv_createMtOrder];
}

- (void) send_cancelMtOrder: (NMTFCancelMtOrderReq *) req
{
  [outProtocol writeMessageBeginWithName: @"cancelMtOrder" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"cancelMtOrder_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFCancelMtOrderResp *) recv_cancelMtOrder
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFCancelMtOrder_result * result = [[[NMTFCancelMtOrder_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"cancelMtOrder failed: unknown result"];
}

- (NMTFCancelMtOrderResp *) cancelMtOrder: (NMTFCancelMtOrderReq *) req
{
  [self send_cancelMtOrder : req];
  [[outProtocol transport] flush];
  return [self recv_cancelMtOrder];
}

- (void) send_delMtOrder: (NMTFDelMtOrderReq *) req
{
  [outProtocol writeMessageBeginWithName: @"delMtOrder" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"delMtOrder_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFDelMtOrderResp *) recv_delMtOrder
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFDelMtOrder_result * result = [[[NMTFDelMtOrder_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"delMtOrder failed: unknown result"];
}

- (NMTFDelMtOrderResp *) delMtOrder: (NMTFDelMtOrderReq *) req
{
  [self send_delMtOrder : req];
  [[outProtocol transport] flush];
  return [self recv_delMtOrder];
}

- (void) send_prePayMtOrder: (NMTFPrePayMtOrderReq *) req
{
  [outProtocol writeMessageBeginWithName: @"prePayMtOrder" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"prePayMtOrder_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFPrePayMtOrderResp *) recv_prePayMtOrder
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFPrePayMtOrder_result * result = [[[NMTFPrePayMtOrder_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"prePayMtOrder failed: unknown result"];
}

- (NMTFPrePayMtOrderResp *) prePayMtOrder: (NMTFPrePayMtOrderReq *) req
{
  [self send_prePayMtOrder : req];
  [[outProtocol transport] flush];
  return [self recv_prePayMtOrder];
}

- (void) send_payMtOrder: (NMTFPayMtOrderReq *) req
{
  [outProtocol writeMessageBeginWithName: @"payMtOrder" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"payMtOrder_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFPayMtOrderResp *) recv_payMtOrder
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFPayMtOrder_result * result = [[[NMTFPayMtOrder_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"payMtOrder failed: unknown result"];
}

- (NMTFPayMtOrderResp *) payMtOrder: (NMTFPayMtOrderReq *) req
{
  [self send_payMtOrder : req];
  [[outProtocol transport] flush];
  return [self recv_payMtOrder];
}

- (void) send_receiptMtPros: (NMTFReceiptMtProsReq *) req
{
  [outProtocol writeMessageBeginWithName: @"receiptMtPros" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"receiptMtPros_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFReceiptMtProsResp *) recv_receiptMtPros
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFReceiptMtPros_result * result = [[[NMTFReceiptMtPros_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"receiptMtPros failed: unknown result"];
}

- (NMTFReceiptMtProsResp *) receiptMtPros: (NMTFReceiptMtProsReq *) req
{
  [self send_receiptMtPros : req];
  [[outProtocol transport] flush];
  return [self recv_receiptMtPros];
}

- (void) send_reqMtRefund: (NMTFReqMtRefundReq *) req
{
  [outProtocol writeMessageBeginWithName: @"reqMtRefund" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"reqMtRefund_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFReqMtRefundResp *) recv_reqMtRefund
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFReqMtRefund_result * result = [[[NMTFReqMtRefund_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"reqMtRefund failed: unknown result"];
}

- (NMTFReqMtRefundResp *) reqMtRefund: (NMTFReqMtRefundReq *) req
{
  [self send_reqMtRefund : req];
  [[outProtocol transport] flush];
  return [self recv_reqMtRefund];
}

- (void) send_getUserOrderList: (NMTFGetUserOrderListReq *) req
{
  [outProtocol writeMessageBeginWithName: @"getUserOrderList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getUserOrderList_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFGetUserOrderListResp *) recv_getUserOrderList
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFGetUserOrderList_result * result = [[[NMTFGetUserOrderList_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getUserOrderList failed: unknown result"];
}

- (NMTFGetUserOrderListResp *) getUserOrderList: (NMTFGetUserOrderListReq *) req
{
  [self send_getUserOrderList : req];
  [[outProtocol transport] flush];
  return [self recv_getUserOrderList];
}

- (void) send_getPayBanks: (NMTFGetPayBanksReq *) req
{
  [outProtocol writeMessageBeginWithName: @"getPayBanks" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getPayBanks_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFGetPayBanksResp *) recv_getPayBanks
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFGetPayBanks_result * result = [[[NMTFGetPayBanks_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getPayBanks failed: unknown result"];
}

- (NMTFGetPayBanksResp *) getPayBanks: (NMTFGetPayBanksReq *) req
{
  [self send_getPayBanks : req];
  [[outProtocol transport] flush];
  return [self recv_getPayBanks];
}

- (void) send_preBindBankCard: (NMTFPreBindBankCardReq *) req
{
  [outProtocol writeMessageBeginWithName: @"preBindBankCard" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"preBindBankCard_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFPreBindBankCardResp *) recv_preBindBankCard
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFPreBindBankCard_result * result = [[[NMTFPreBindBankCard_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"preBindBankCard failed: unknown result"];
}

- (NMTFPreBindBankCardResp *) preBindBankCard: (NMTFPreBindBankCardReq *) req
{
  [self send_preBindBankCard : req];
  [[outProtocol transport] flush];
  return [self recv_preBindBankCard];
}

- (void) send_bindBankCard: (NMTFBindBankCardReq *) req
{
  [outProtocol writeMessageBeginWithName: @"bindBankCard" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"bindBankCard_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFBindBankCardResp *) recv_bindBankCard
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFBindBankCard_result * result = [[[NMTFBindBankCard_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"bindBankCard failed: unknown result"];
}

- (NMTFBindBankCardResp *) bindBankCard: (NMTFBindBankCardReq *) req
{
  [self send_bindBankCard : req];
  [[outProtocol transport] flush];
  return [self recv_bindBankCard];
}

- (void) send_getMtBindings: (NMTFGetMtBindingsReq *) req
{
  [outProtocol writeMessageBeginWithName: @"getMtBindings" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMtBindings_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFGetMtBindingsResp *) recv_getMtBindings
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFGetMtBindings_result * result = [[[NMTFGetMtBindings_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMtBindings failed: unknown result"];
}

- (NMTFGetMtBindingsResp *) getMtBindings: (NMTFGetMtBindingsReq *) req
{
  [self send_getMtBindings : req];
  [[outProtocol transport] flush];
  return [self recv_getMtBindings];
}

- (void) send_getMtOrderDetail: (NMTFGetMtOrderDetailReq *) req
{
  [outProtocol writeMessageBeginWithName: @"getMtOrderDetail" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMtOrderDetail_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NMTFGetMtOrderDetailResp *) recv_getMtOrderDetail
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  NMTFGetMtOrderDetail_result * result = [[[NMTFGetMtOrderDetail_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMtOrderDetail failed: unknown result"];
}

- (NMTFGetMtOrderDetailResp *) getMtOrderDetail: (NMTFGetMtOrderDetailReq *) req
{
  [self send_getMtOrderDetail : req];
  [[outProtocol transport] flush];
  return [self recv_getMtOrderDetail];
}

@end

@implementation NMTFEmartProcessor

- (id) initWithEmart: (id <NMTFEmart>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_getMtBanners_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getMtBanners"];
}
{
  SEL s = @selector(process_getMtProCats_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getMtProCats"];
}
{
  SEL s = @selector(process_getMtMers_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getMtMers"];
}
{
  SEL s = @selector(process_getMtMerInfo_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getMtMerInfo"];
}
{
  SEL s = @selector(process_getMtMerStores_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getMtMerStores"];
}
{
  SEL s = @selector(process_getMtPros_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getMtPros"];
}
{
  SEL s = @selector(process_getMtProInfo_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getMtProInfo"];
}
{
  SEL s = @selector(process_findMtMerPros_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"findMtMerPros"];
}
{
  SEL s = @selector(process_getMtShipAdds_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getMtShipAdds"];
}
{
  SEL s = @selector(process_editMtShipAdd_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"editMtShipAdd"];
}
{
  SEL s = @selector(process_getMtCartProsCnt_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getMtCartProsCnt"];
}
{
  SEL s = @selector(process_getMtCartPros_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getMtCartPros"];
}
{
  SEL s = @selector(process_editMtCartPros_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"editMtCartPros"];
}
{
  SEL s = @selector(process_createMtOrder_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"createMtOrder"];
}
{
  SEL s = @selector(process_cancelMtOrder_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"cancelMtOrder"];
}
{
  SEL s = @selector(process_delMtOrder_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"delMtOrder"];
}
{
  SEL s = @selector(process_prePayMtOrder_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"prePayMtOrder"];
}
{
  SEL s = @selector(process_payMtOrder_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"payMtOrder"];
}
{
  SEL s = @selector(process_receiptMtPros_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"receiptMtPros"];
}
{
  SEL s = @selector(process_reqMtRefund_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"reqMtRefund"];
}
{
  SEL s = @selector(process_getUserOrderList_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getUserOrderList"];
}
{
  SEL s = @selector(process_getPayBanks_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getPayBanks"];
}
{
  SEL s = @selector(process_preBindBankCard_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"preBindBankCard"];
}
{
  SEL s = @selector(process_bindBankCard_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"bindBankCard"];
}
{
  SEL s = @selector(process_getMtBindings_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getMtBindings"];
}
{
  SEL s = @selector(process_getMtOrderDetail_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getMtOrderDetail"];
}
return self;
}

- (id<NMTFEmart>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getMtBanners_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFgetMtBanners_args * args = [[NMTFgetMtBanners_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFGetMtBanners_result * result = [[NMTFGetMtBanners_result alloc] init];
[result setSuccess: [mService getMtBanners: [args req]]];
[outProtocol writeMessageBeginWithName: @"getMtBanners"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getMtProCats_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFgetMtProCats_args * args = [[NMTFgetMtProCats_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFGetMtProCats_result * result = [[NMTFGetMtProCats_result alloc] init];
[result setSuccess: [mService getMtProCats: [args req]]];
[outProtocol writeMessageBeginWithName: @"getMtProCats"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getMtMers_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFgetMtMers_args * args = [[NMTFgetMtMers_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFGetMtMers_result * result = [[NMTFGetMtMers_result alloc] init];
[result setSuccess: [mService getMtMers: [args req]]];
[outProtocol writeMessageBeginWithName: @"getMtMers"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getMtMerInfo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFgetMtMerInfo_args * args = [[NMTFgetMtMerInfo_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFGetMtMerInfo_result * result = [[NMTFGetMtMerInfo_result alloc] init];
[result setSuccess: [mService getMtMerInfo: [args req]]];
[outProtocol writeMessageBeginWithName: @"getMtMerInfo"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getMtMerStores_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFgetMtMerStores_args * args = [[NMTFgetMtMerStores_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFGetMtMerStores_result * result = [[NMTFGetMtMerStores_result alloc] init];
[result setSuccess: [mService getMtMerStores: [args req]]];
[outProtocol writeMessageBeginWithName: @"getMtMerStores"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getMtPros_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFgetMtPros_args * args = [[NMTFgetMtPros_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFGetMtPros_result * result = [[NMTFGetMtPros_result alloc] init];
[result setSuccess: [mService getMtPros: [args req]]];
[outProtocol writeMessageBeginWithName: @"getMtPros"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getMtProInfo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFgetMtProInfo_args * args = [[NMTFgetMtProInfo_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFGetMtProInfo_result * result = [[NMTFGetMtProInfo_result alloc] init];
[result setSuccess: [mService getMtProInfo: [args req]]];
[outProtocol writeMessageBeginWithName: @"getMtProInfo"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_findMtMerPros_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFfindMtMerPros_args * args = [[NMTFfindMtMerPros_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFFindMtMerPros_result * result = [[NMTFFindMtMerPros_result alloc] init];
[result setSuccess: [mService findMtMerPros: [args req]]];
[outProtocol writeMessageBeginWithName: @"findMtMerPros"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getMtShipAdds_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFgetMtShipAdds_args * args = [[NMTFgetMtShipAdds_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFGetMtShipAdds_result * result = [[NMTFGetMtShipAdds_result alloc] init];
[result setSuccess: [mService getMtShipAdds: [args req]]];
[outProtocol writeMessageBeginWithName: @"getMtShipAdds"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_editMtShipAdd_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFeditMtShipAdd_args * args = [[NMTFeditMtShipAdd_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFEditMtShipAdd_result * result = [[NMTFEditMtShipAdd_result alloc] init];
[result setSuccess: [mService editMtShipAdd: [args req]]];
[outProtocol writeMessageBeginWithName: @"editMtShipAdd"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getMtCartProsCnt_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFgetMtCartProsCnt_args * args = [[NMTFgetMtCartProsCnt_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFGetMtCartProsCnt_result * result = [[NMTFGetMtCartProsCnt_result alloc] init];
[result setSuccess: [mService getMtCartProsCnt: [args req]]];
[outProtocol writeMessageBeginWithName: @"getMtCartProsCnt"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getMtCartPros_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFgetMtCartPros_args * args = [[NMTFgetMtCartPros_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFGetMtCartPros_result * result = [[NMTFGetMtCartPros_result alloc] init];
[result setSuccess: [mService getMtCartPros: [args req]]];
[outProtocol writeMessageBeginWithName: @"getMtCartPros"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_editMtCartPros_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFeditMtCartPros_args * args = [[NMTFeditMtCartPros_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFEditMtCartPros_result * result = [[NMTFEditMtCartPros_result alloc] init];
[result setSuccess: [mService editMtCartPros: [args req]]];
[outProtocol writeMessageBeginWithName: @"editMtCartPros"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_createMtOrder_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFcreateMtOrder_args * args = [[NMTFcreateMtOrder_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFCreateMtOrder_result * result = [[NMTFCreateMtOrder_result alloc] init];
[result setSuccess: [mService createMtOrder: [args req]]];
[outProtocol writeMessageBeginWithName: @"createMtOrder"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_cancelMtOrder_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFcancelMtOrder_args * args = [[NMTFcancelMtOrder_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFCancelMtOrder_result * result = [[NMTFCancelMtOrder_result alloc] init];
[result setSuccess: [mService cancelMtOrder: [args req]]];
[outProtocol writeMessageBeginWithName: @"cancelMtOrder"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_delMtOrder_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFdelMtOrder_args * args = [[NMTFdelMtOrder_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFDelMtOrder_result * result = [[NMTFDelMtOrder_result alloc] init];
[result setSuccess: [mService delMtOrder: [args req]]];
[outProtocol writeMessageBeginWithName: @"delMtOrder"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_prePayMtOrder_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFprePayMtOrder_args * args = [[NMTFprePayMtOrder_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFPrePayMtOrder_result * result = [[NMTFPrePayMtOrder_result alloc] init];
[result setSuccess: [mService prePayMtOrder: [args req]]];
[outProtocol writeMessageBeginWithName: @"prePayMtOrder"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_payMtOrder_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFpayMtOrder_args * args = [[NMTFpayMtOrder_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFPayMtOrder_result * result = [[NMTFPayMtOrder_result alloc] init];
[result setSuccess: [mService payMtOrder: [args req]]];
[outProtocol writeMessageBeginWithName: @"payMtOrder"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_receiptMtPros_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFreceiptMtPros_args * args = [[NMTFreceiptMtPros_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFReceiptMtPros_result * result = [[NMTFReceiptMtPros_result alloc] init];
[result setSuccess: [mService receiptMtPros: [args req]]];
[outProtocol writeMessageBeginWithName: @"receiptMtPros"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_reqMtRefund_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFreqMtRefund_args * args = [[NMTFreqMtRefund_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFReqMtRefund_result * result = [[NMTFReqMtRefund_result alloc] init];
[result setSuccess: [mService reqMtRefund: [args req]]];
[outProtocol writeMessageBeginWithName: @"reqMtRefund"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getUserOrderList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFgetUserOrderList_args * args = [[NMTFgetUserOrderList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFGetUserOrderList_result * result = [[NMTFGetUserOrderList_result alloc] init];
[result setSuccess: [mService getUserOrderList: [args req]]];
[outProtocol writeMessageBeginWithName: @"getUserOrderList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getPayBanks_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFgetPayBanks_args * args = [[NMTFgetPayBanks_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFGetPayBanks_result * result = [[NMTFGetPayBanks_result alloc] init];
[result setSuccess: [mService getPayBanks: [args req]]];
[outProtocol writeMessageBeginWithName: @"getPayBanks"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_preBindBankCard_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFpreBindBankCard_args * args = [[NMTFpreBindBankCard_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFPreBindBankCard_result * result = [[NMTFPreBindBankCard_result alloc] init];
[result setSuccess: [mService preBindBankCard: [args req]]];
[outProtocol writeMessageBeginWithName: @"preBindBankCard"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_bindBankCard_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFbindBankCard_args * args = [[NMTFbindBankCard_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFBindBankCard_result * result = [[NMTFBindBankCard_result alloc] init];
[result setSuccess: [mService bindBankCard: [args req]]];
[outProtocol writeMessageBeginWithName: @"bindBankCard"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getMtBindings_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFgetMtBindings_args * args = [[NMTFgetMtBindings_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFGetMtBindings_result * result = [[NMTFGetMtBindings_result alloc] init];
[result setSuccess: [mService getMtBindings: [args req]]];
[outProtocol writeMessageBeginWithName: @"getMtBindings"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getMtOrderDetail_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
NMTFgetMtOrderDetail_args * args = [[NMTFgetMtOrderDetail_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
NMTFGetMtOrderDetail_result * result = [[NMTFGetMtOrderDetail_result alloc] init];
[result setSuccess: [mService getMtOrderDetail: [args req]]];
[outProtocol writeMessageBeginWithName: @"getMtOrderDetail"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

