/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "MtBase.h"

#import "MtRespDto.h"

@implementation NMTFBannersDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithType: (int32_t) type bizId: (NSString *) bizId imgUrl: (NSString *) imgUrl link: (NSString *) link
{
  self = [super init];
  __type = type;
  __type_isset = YES;
  __bizId = [bizId retain_stub];
  __bizId_isset = YES;
  __imgUrl = [imgUrl retain_stub];
  __imgUrl_isset = YES;
  __link = [link retain_stub];
  __link_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeInt32ForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"bizId"])
  {
    __bizId = [[decoder decodeObjectForKey: @"bizId"] retain_stub];
    __bizId_isset = YES;
  }
  if ([decoder containsValueForKey: @"imgUrl"])
  {
    __imgUrl = [[decoder decodeObjectForKey: @"imgUrl"] retain_stub];
    __imgUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"link"])
  {
    __link = [[decoder decodeObjectForKey: @"link"] retain_stub];
    __link_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__type_isset)
  {
    [encoder encodeInt32: __type forKey: @"type"];
  }
  if (__bizId_isset)
  {
    [encoder encodeObject: __bizId forKey: @"bizId"];
  }
  if (__imgUrl_isset)
  {
    [encoder encodeObject: __imgUrl forKey: @"imgUrl"];
  }
  if (__link_isset)
  {
    [encoder encodeObject: __link forKey: @"link"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  hash = (hash * 31) ^ __bizId_isset ? 2654435761 : 0;
  if (__bizId_isset)
  {
    hash = (hash * 31) ^ [__bizId hash];
  }
  hash = (hash * 31) ^ __imgUrl_isset ? 2654435761 : 0;
  if (__imgUrl_isset)
  {
    hash = (hash * 31) ^ [__imgUrl hash];
  }
  hash = (hash * 31) ^ __link_isset ? 2654435761 : 0;
  if (__link_isset)
  {
    hash = (hash * 31) ^ [__link hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFBannersDto class]]) {
    return NO;
  }
  NMTFBannersDto *other = (NMTFBannersDto *)anObject;
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  if ((__bizId_isset != other->__bizId_isset) ||
      (__bizId_isset && ((__bizId || other->__bizId) && ![__bizId isEqual:other->__bizId]))) {
    return NO;
  }
  if ((__imgUrl_isset != other->__imgUrl_isset) ||
      (__imgUrl_isset && ((__imgUrl || other->__imgUrl) && ![__imgUrl isEqual:other->__imgUrl]))) {
    return NO;
  }
  if ((__link_isset != other->__link_isset) ||
      (__link_isset && ((__link || other->__link) && ![__link isEqual:other->__link]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__bizId release_stub];
  [__imgUrl release_stub];
  [__link release_stub];
  [super dealloc_stub];
}

- (int32_t) type {
  return __type;
}

- (void) setType: (int32_t) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) bizId {
  return [[__bizId retain_stub] autorelease_stub];
}

- (void) setBizId: (NSString *) bizId {
  [bizId retain_stub];
  [__bizId release_stub];
  __bizId = bizId;
  __bizId_isset = YES;
}

- (BOOL) bizIdIsSet {
  return __bizId_isset;
}

- (void) unsetBizId {
  [__bizId release_stub];
  __bizId = nil;
  __bizId_isset = NO;
}

- (NSString *) imgUrl {
  return [[__imgUrl retain_stub] autorelease_stub];
}

- (void) setImgUrl: (NSString *) imgUrl {
  [imgUrl retain_stub];
  [__imgUrl release_stub];
  __imgUrl = imgUrl;
  __imgUrl_isset = YES;
}

- (BOOL) imgUrlIsSet {
  return __imgUrl_isset;
}

- (void) unsetImgUrl {
  [__imgUrl release_stub];
  __imgUrl = nil;
  __imgUrl_isset = NO;
}

- (NSString *) link {
  return [[__link retain_stub] autorelease_stub];
}

- (void) setLink: (NSString *) link {
  [link retain_stub];
  [__link release_stub];
  __link = link;
  __link_isset = YES;
}

- (BOOL) linkIsSet {
  return __link_isset;
}

- (void) unsetLink {
  [__link release_stub];
  __link = nil;
  __link_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBizId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImgUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLink: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BannersDto"];
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__bizId_isset) {
    if (__bizId != nil) {
      [outProtocol writeFieldBeginWithName: @"bizId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __bizId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__imgUrl_isset) {
    if (__imgUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"imgUrl" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __imgUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__link_isset) {
    if (__link != nil) {
      [outProtocol writeFieldBeginWithName: @"link" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __link];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFBannersDto("];
  [ms appendString: @"type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",bizId:"];
  [ms appendFormat: @"\"%@\"", __bizId];
  [ms appendString: @",imgUrl:"];
  [ms appendFormat: @"\"%@\"", __imgUrl];
  [ms appendString: @",link:"];
  [ms appendFormat: @"\"%@\"", __link];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFProCatDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCatId: (int32_t) catId name: (NSString *) name
{
  self = [super init];
  __catId = catId;
  __catId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"catId"])
  {
    __catId = [decoder decodeInt32ForKey: @"catId"];
    __catId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__catId_isset)
  {
    [encoder encodeInt32: __catId forKey: @"catId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __catId_isset ? 2654435761 : 0;
  if (__catId_isset)
  {
    hash = (hash * 31) ^ [@(__catId) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFProCatDto class]]) {
    return NO;
  }
  NMTFProCatDto *other = (NMTFProCatDto *)anObject;
  if ((__catId_isset != other->__catId_isset) ||
      (__catId_isset && (__catId != other->__catId))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (int32_t) catId {
  return __catId;
}

- (void) setCatId: (int32_t) catId {
  __catId = catId;
  __catId_isset = YES;
}

- (BOOL) catIdIsSet {
  return __catId_isset;
}

- (void) unsetCatId {
  __catId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCatId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ProCatDto"];
  if (__catId_isset) {
    [outProtocol writeFieldBeginWithName: @"catId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __catId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFProCatDto("];
  [ms appendString: @"catId:"];
  [ms appendFormat: @"%i", __catId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFMerDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.backImgs = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

  self.papersImgs = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithMerId: (int64_t) merId name: (NSString *) name logo: (NSString *) logo abbrName: (NSString *) abbrName desc: (NSString *) desc telephone: (NSString *) telephone serviceHotline: (NSString *) serviceHotline licenseNumber: (NSString *) licenseNumber businessLicense: (NSString *) businessLicense address: (NSString *) address tradeDsc: (NSString *) tradeDsc backImgs: (NSMutableArray *) backImgs papersImgs: (NSMutableArray *) papersImgs proCnt: (int64_t) proCnt
{
  self = [super init];
  __merId = merId;
  __merId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __logo = [logo retain_stub];
  __logo_isset = YES;
  __abbrName = [abbrName retain_stub];
  __abbrName_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __telephone = [telephone retain_stub];
  __telephone_isset = YES;
  __serviceHotline = [serviceHotline retain_stub];
  __serviceHotline_isset = YES;
  __licenseNumber = [licenseNumber retain_stub];
  __licenseNumber_isset = YES;
  __businessLicense = [businessLicense retain_stub];
  __businessLicense_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __tradeDsc = [tradeDsc retain_stub];
  __tradeDsc_isset = YES;
  __backImgs = [backImgs retain_stub];
  __backImgs_isset = YES;
  __papersImgs = [papersImgs retain_stub];
  __papersImgs_isset = YES;
  __proCnt = proCnt;
  __proCnt_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"merId"])
  {
    __merId = [decoder decodeInt64ForKey: @"merId"];
    __merId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"logo"])
  {
    __logo = [[decoder decodeObjectForKey: @"logo"] retain_stub];
    __logo_isset = YES;
  }
  if ([decoder containsValueForKey: @"abbrName"])
  {
    __abbrName = [[decoder decodeObjectForKey: @"abbrName"] retain_stub];
    __abbrName_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"telephone"])
  {
    __telephone = [[decoder decodeObjectForKey: @"telephone"] retain_stub];
    __telephone_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceHotline"])
  {
    __serviceHotline = [[decoder decodeObjectForKey: @"serviceHotline"] retain_stub];
    __serviceHotline_isset = YES;
  }
  if ([decoder containsValueForKey: @"licenseNumber"])
  {
    __licenseNumber = [[decoder decodeObjectForKey: @"licenseNumber"] retain_stub];
    __licenseNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"businessLicense"])
  {
    __businessLicense = [[decoder decodeObjectForKey: @"businessLicense"] retain_stub];
    __businessLicense_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"tradeDsc"])
  {
    __tradeDsc = [[decoder decodeObjectForKey: @"tradeDsc"] retain_stub];
    __tradeDsc_isset = YES;
  }
  if ([decoder containsValueForKey: @"backImgs"])
  {
    __backImgs = [[decoder decodeObjectForKey: @"backImgs"] retain_stub];
    __backImgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersImgs"])
  {
    __papersImgs = [[decoder decodeObjectForKey: @"papersImgs"] retain_stub];
    __papersImgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"proCnt"])
  {
    __proCnt = [decoder decodeInt64ForKey: @"proCnt"];
    __proCnt_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__merId_isset)
  {
    [encoder encodeInt64: __merId forKey: @"merId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__logo_isset)
  {
    [encoder encodeObject: __logo forKey: @"logo"];
  }
  if (__abbrName_isset)
  {
    [encoder encodeObject: __abbrName forKey: @"abbrName"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__telephone_isset)
  {
    [encoder encodeObject: __telephone forKey: @"telephone"];
  }
  if (__serviceHotline_isset)
  {
    [encoder encodeObject: __serviceHotline forKey: @"serviceHotline"];
  }
  if (__licenseNumber_isset)
  {
    [encoder encodeObject: __licenseNumber forKey: @"licenseNumber"];
  }
  if (__businessLicense_isset)
  {
    [encoder encodeObject: __businessLicense forKey: @"businessLicense"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__tradeDsc_isset)
  {
    [encoder encodeObject: __tradeDsc forKey: @"tradeDsc"];
  }
  if (__backImgs_isset)
  {
    [encoder encodeObject: __backImgs forKey: @"backImgs"];
  }
  if (__papersImgs_isset)
  {
    [encoder encodeObject: __papersImgs forKey: @"papersImgs"];
  }
  if (__proCnt_isset)
  {
    [encoder encodeInt64: __proCnt forKey: @"proCnt"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __merId_isset ? 2654435761 : 0;
  if (__merId_isset)
  {
    hash = (hash * 31) ^ [@(__merId) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __logo_isset ? 2654435761 : 0;
  if (__logo_isset)
  {
    hash = (hash * 31) ^ [__logo hash];
  }
  hash = (hash * 31) ^ __abbrName_isset ? 2654435761 : 0;
  if (__abbrName_isset)
  {
    hash = (hash * 31) ^ [__abbrName hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __telephone_isset ? 2654435761 : 0;
  if (__telephone_isset)
  {
    hash = (hash * 31) ^ [__telephone hash];
  }
  hash = (hash * 31) ^ __serviceHotline_isset ? 2654435761 : 0;
  if (__serviceHotline_isset)
  {
    hash = (hash * 31) ^ [__serviceHotline hash];
  }
  hash = (hash * 31) ^ __licenseNumber_isset ? 2654435761 : 0;
  if (__licenseNumber_isset)
  {
    hash = (hash * 31) ^ [__licenseNumber hash];
  }
  hash = (hash * 31) ^ __businessLicense_isset ? 2654435761 : 0;
  if (__businessLicense_isset)
  {
    hash = (hash * 31) ^ [__businessLicense hash];
  }
  hash = (hash * 31) ^ __address_isset ? 2654435761 : 0;
  if (__address_isset)
  {
    hash = (hash * 31) ^ [__address hash];
  }
  hash = (hash * 31) ^ __tradeDsc_isset ? 2654435761 : 0;
  if (__tradeDsc_isset)
  {
    hash = (hash * 31) ^ [__tradeDsc hash];
  }
  hash = (hash * 31) ^ __backImgs_isset ? 2654435761 : 0;
  if (__backImgs_isset)
  {
    hash = (hash * 31) ^ [__backImgs hash];
  }
  hash = (hash * 31) ^ __papersImgs_isset ? 2654435761 : 0;
  if (__papersImgs_isset)
  {
    hash = (hash * 31) ^ [__papersImgs hash];
  }
  hash = (hash * 31) ^ __proCnt_isset ? 2654435761 : 0;
  if (__proCnt_isset)
  {
    hash = (hash * 31) ^ [@(__proCnt) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFMerDto class]]) {
    return NO;
  }
  NMTFMerDto *other = (NMTFMerDto *)anObject;
  if ((__merId_isset != other->__merId_isset) ||
      (__merId_isset && (__merId != other->__merId))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__logo_isset != other->__logo_isset) ||
      (__logo_isset && ((__logo || other->__logo) && ![__logo isEqual:other->__logo]))) {
    return NO;
  }
  if ((__abbrName_isset != other->__abbrName_isset) ||
      (__abbrName_isset && ((__abbrName || other->__abbrName) && ![__abbrName isEqual:other->__abbrName]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__telephone_isset != other->__telephone_isset) ||
      (__telephone_isset && ((__telephone || other->__telephone) && ![__telephone isEqual:other->__telephone]))) {
    return NO;
  }
  if ((__serviceHotline_isset != other->__serviceHotline_isset) ||
      (__serviceHotline_isset && ((__serviceHotline || other->__serviceHotline) && ![__serviceHotline isEqual:other->__serviceHotline]))) {
    return NO;
  }
  if ((__licenseNumber_isset != other->__licenseNumber_isset) ||
      (__licenseNumber_isset && ((__licenseNumber || other->__licenseNumber) && ![__licenseNumber isEqual:other->__licenseNumber]))) {
    return NO;
  }
  if ((__businessLicense_isset != other->__businessLicense_isset) ||
      (__businessLicense_isset && ((__businessLicense || other->__businessLicense) && ![__businessLicense isEqual:other->__businessLicense]))) {
    return NO;
  }
  if ((__address_isset != other->__address_isset) ||
      (__address_isset && ((__address || other->__address) && ![__address isEqual:other->__address]))) {
    return NO;
  }
  if ((__tradeDsc_isset != other->__tradeDsc_isset) ||
      (__tradeDsc_isset && ((__tradeDsc || other->__tradeDsc) && ![__tradeDsc isEqual:other->__tradeDsc]))) {
    return NO;
  }
  if ((__backImgs_isset != other->__backImgs_isset) ||
      (__backImgs_isset && ((__backImgs || other->__backImgs) && ![__backImgs isEqual:other->__backImgs]))) {
    return NO;
  }
  if ((__papersImgs_isset != other->__papersImgs_isset) ||
      (__papersImgs_isset && ((__papersImgs || other->__papersImgs) && ![__papersImgs isEqual:other->__papersImgs]))) {
    return NO;
  }
  if ((__proCnt_isset != other->__proCnt_isset) ||
      (__proCnt_isset && (__proCnt != other->__proCnt))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [__logo release_stub];
  [__abbrName release_stub];
  [__desc release_stub];
  [__telephone release_stub];
  [__serviceHotline release_stub];
  [__licenseNumber release_stub];
  [__businessLicense release_stub];
  [__address release_stub];
  [__tradeDsc release_stub];
  [__backImgs release_stub];
  [__papersImgs release_stub];
  [super dealloc_stub];
}

- (int64_t) merId {
  return __merId;
}

- (void) setMerId: (int64_t) merId {
  __merId = merId;
  __merId_isset = YES;
}

- (BOOL) merIdIsSet {
  return __merId_isset;
}

- (void) unsetMerId {
  __merId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) logo {
  return [[__logo retain_stub] autorelease_stub];
}

- (void) setLogo: (NSString *) logo {
  [logo retain_stub];
  [__logo release_stub];
  __logo = logo;
  __logo_isset = YES;
}

- (BOOL) logoIsSet {
  return __logo_isset;
}

- (void) unsetLogo {
  [__logo release_stub];
  __logo = nil;
  __logo_isset = NO;
}

- (NSString *) abbrName {
  return [[__abbrName retain_stub] autorelease_stub];
}

- (void) setAbbrName: (NSString *) abbrName {
  [abbrName retain_stub];
  [__abbrName release_stub];
  __abbrName = abbrName;
  __abbrName_isset = YES;
}

- (BOOL) abbrNameIsSet {
  return __abbrName_isset;
}

- (void) unsetAbbrName {
  [__abbrName release_stub];
  __abbrName = nil;
  __abbrName_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) telephone {
  return [[__telephone retain_stub] autorelease_stub];
}

- (void) setTelephone: (NSString *) telephone {
  [telephone retain_stub];
  [__telephone release_stub];
  __telephone = telephone;
  __telephone_isset = YES;
}

- (BOOL) telephoneIsSet {
  return __telephone_isset;
}

- (void) unsetTelephone {
  [__telephone release_stub];
  __telephone = nil;
  __telephone_isset = NO;
}

- (NSString *) serviceHotline {
  return [[__serviceHotline retain_stub] autorelease_stub];
}

- (void) setServiceHotline: (NSString *) serviceHotline {
  [serviceHotline retain_stub];
  [__serviceHotline release_stub];
  __serviceHotline = serviceHotline;
  __serviceHotline_isset = YES;
}

- (BOOL) serviceHotlineIsSet {
  return __serviceHotline_isset;
}

- (void) unsetServiceHotline {
  [__serviceHotline release_stub];
  __serviceHotline = nil;
  __serviceHotline_isset = NO;
}

- (NSString *) licenseNumber {
  return [[__licenseNumber retain_stub] autorelease_stub];
}

- (void) setLicenseNumber: (NSString *) licenseNumber {
  [licenseNumber retain_stub];
  [__licenseNumber release_stub];
  __licenseNumber = licenseNumber;
  __licenseNumber_isset = YES;
}

- (BOOL) licenseNumberIsSet {
  return __licenseNumber_isset;
}

- (void) unsetLicenseNumber {
  [__licenseNumber release_stub];
  __licenseNumber = nil;
  __licenseNumber_isset = NO;
}

- (NSString *) businessLicense {
  return [[__businessLicense retain_stub] autorelease_stub];
}

- (void) setBusinessLicense: (NSString *) businessLicense {
  [businessLicense retain_stub];
  [__businessLicense release_stub];
  __businessLicense = businessLicense;
  __businessLicense_isset = YES;
}

- (BOOL) businessLicenseIsSet {
  return __businessLicense_isset;
}

- (void) unsetBusinessLicense {
  [__businessLicense release_stub];
  __businessLicense = nil;
  __businessLicense_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (NSString *) tradeDsc {
  return [[__tradeDsc retain_stub] autorelease_stub];
}

- (void) setTradeDsc: (NSString *) tradeDsc {
  [tradeDsc retain_stub];
  [__tradeDsc release_stub];
  __tradeDsc = tradeDsc;
  __tradeDsc_isset = YES;
}

- (BOOL) tradeDscIsSet {
  return __tradeDsc_isset;
}

- (void) unsetTradeDsc {
  [__tradeDsc release_stub];
  __tradeDsc = nil;
  __tradeDsc_isset = NO;
}

- (NSMutableArray *) backImgs {
  return [[__backImgs retain_stub] autorelease_stub];
}

- (void) setBackImgs: (NSMutableArray *) backImgs {
  [backImgs retain_stub];
  [__backImgs release_stub];
  __backImgs = backImgs;
  __backImgs_isset = YES;
}

- (BOOL) backImgsIsSet {
  return __backImgs_isset;
}

- (void) unsetBackImgs {
  [__backImgs release_stub];
  __backImgs = nil;
  __backImgs_isset = NO;
}

- (NSMutableArray *) papersImgs {
  return [[__papersImgs retain_stub] autorelease_stub];
}

- (void) setPapersImgs: (NSMutableArray *) papersImgs {
  [papersImgs retain_stub];
  [__papersImgs release_stub];
  __papersImgs = papersImgs;
  __papersImgs_isset = YES;
}

- (BOOL) papersImgsIsSet {
  return __papersImgs_isset;
}

- (void) unsetPapersImgs {
  [__papersImgs release_stub];
  __papersImgs = nil;
  __papersImgs_isset = NO;
}

- (int64_t) proCnt {
  return __proCnt;
}

- (void) setProCnt: (int64_t) proCnt {
  __proCnt = proCnt;
  __proCnt_isset = YES;
}

- (BOOL) proCntIsSet {
  return __proCnt_isset;
}

- (void) unsetProCnt {
  __proCnt_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLogo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAbbrName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTelephone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceHotline: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLicenseNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBusinessLicense: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTradeDsc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setBackImgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_LIST) {
          int _size3;
          [inProtocol readListBeginReturningElementType: NULL size: &_size3];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size3];
          int _i4;
          for (_i4 = 0; _i4 < _size3; ++_i4)
          {
            NSString * _elem5 = [inProtocol readString];
            [fieldValue addObject: _elem5];
          }
          [inProtocol readListEnd];
          [self setPapersImgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setProCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MerDto"];
  if (__merId_isset) {
    [outProtocol writeFieldBeginWithName: @"merId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __merId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__logo_isset) {
    if (__logo != nil) {
      [outProtocol writeFieldBeginWithName: @"logo" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __logo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__abbrName_isset) {
    if (__abbrName != nil) {
      [outProtocol writeFieldBeginWithName: @"abbrName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __abbrName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__telephone_isset) {
    if (__telephone != nil) {
      [outProtocol writeFieldBeginWithName: @"telephone" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __telephone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceHotline_isset) {
    if (__serviceHotline != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceHotline" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __serviceHotline];
      [outProtocol writeFieldEnd];
    }
  }
  if (__licenseNumber_isset) {
    if (__licenseNumber != nil) {
      [outProtocol writeFieldBeginWithName: @"licenseNumber" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __licenseNumber];
      [outProtocol writeFieldEnd];
    }
  }
  if (__businessLicense_isset) {
    if (__businessLicense != nil) {
      [outProtocol writeFieldBeginWithName: @"businessLicense" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __businessLicense];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tradeDsc_isset) {
    if (__tradeDsc != nil) {
      [outProtocol writeFieldBeginWithName: @"tradeDsc" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __tradeDsc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__backImgs_isset) {
    if (__backImgs != nil) {
      [outProtocol writeFieldBeginWithName: @"backImgs" type: TType_LIST fieldID: 12];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__backImgs count]];
        int idx7;
        for (idx7 = 0; idx7 < [__backImgs count]; idx7++)
        {
          [outProtocol writeString: [__backImgs objectAtIndex: idx7]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__papersImgs_isset) {
    if (__papersImgs != nil) {
      [outProtocol writeFieldBeginWithName: @"papersImgs" type: TType_LIST fieldID: 13];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__papersImgs count]];
        int idx9;
        for (idx9 = 0; idx9 < [__papersImgs count]; idx9++)
        {
          [outProtocol writeString: [__papersImgs objectAtIndex: idx9]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__proCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"proCnt" type: TType_I64 fieldID: 14];
    [outProtocol writeI64: __proCnt];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFMerDto("];
  [ms appendString: @"merId:"];
  [ms appendFormat: @"%qi", __merId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",logo:"];
  [ms appendFormat: @"\"%@\"", __logo];
  [ms appendString: @",abbrName:"];
  [ms appendFormat: @"\"%@\"", __abbrName];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",telephone:"];
  [ms appendFormat: @"\"%@\"", __telephone];
  [ms appendString: @",serviceHotline:"];
  [ms appendFormat: @"\"%@\"", __serviceHotline];
  [ms appendString: @",licenseNumber:"];
  [ms appendFormat: @"\"%@\"", __licenseNumber];
  [ms appendString: @",businessLicense:"];
  [ms appendFormat: @"\"%@\"", __businessLicense];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",tradeDsc:"];
  [ms appendFormat: @"\"%@\"", __tradeDsc];
  [ms appendString: @",backImgs:"];
  [ms appendFormat: @"%@", __backImgs];
  [ms appendString: @",papersImgs:"];
  [ms appendFormat: @"%@", __papersImgs];
  [ms appendString: @",proCnt:"];
  [ms appendFormat: @"%qi", __proCnt];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFMerStoreDot

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStId: (int64_t) stId merId: (int64_t) merId name: (NSString *) name abbrName: (NSString *) abbrName address: (NSString *) address telephone: (NSString *) telephone desc: (NSString *) desc
{
  self = [super init];
  __stId = stId;
  __stId_isset = YES;
  __merId = merId;
  __merId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __abbrName = [abbrName retain_stub];
  __abbrName_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __telephone = [telephone retain_stub];
  __telephone_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"stId"])
  {
    __stId = [decoder decodeInt64ForKey: @"stId"];
    __stId_isset = YES;
  }
  if ([decoder containsValueForKey: @"merId"])
  {
    __merId = [decoder decodeInt64ForKey: @"merId"];
    __merId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"abbrName"])
  {
    __abbrName = [[decoder decodeObjectForKey: @"abbrName"] retain_stub];
    __abbrName_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"telephone"])
  {
    __telephone = [[decoder decodeObjectForKey: @"telephone"] retain_stub];
    __telephone_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__stId_isset)
  {
    [encoder encodeInt64: __stId forKey: @"stId"];
  }
  if (__merId_isset)
  {
    [encoder encodeInt64: __merId forKey: @"merId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__abbrName_isset)
  {
    [encoder encodeObject: __abbrName forKey: @"abbrName"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__telephone_isset)
  {
    [encoder encodeObject: __telephone forKey: @"telephone"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __stId_isset ? 2654435761 : 0;
  if (__stId_isset)
  {
    hash = (hash * 31) ^ [@(__stId) hash];
  }
  hash = (hash * 31) ^ __merId_isset ? 2654435761 : 0;
  if (__merId_isset)
  {
    hash = (hash * 31) ^ [@(__merId) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __abbrName_isset ? 2654435761 : 0;
  if (__abbrName_isset)
  {
    hash = (hash * 31) ^ [__abbrName hash];
  }
  hash = (hash * 31) ^ __address_isset ? 2654435761 : 0;
  if (__address_isset)
  {
    hash = (hash * 31) ^ [__address hash];
  }
  hash = (hash * 31) ^ __telephone_isset ? 2654435761 : 0;
  if (__telephone_isset)
  {
    hash = (hash * 31) ^ [__telephone hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFMerStoreDot class]]) {
    return NO;
  }
  NMTFMerStoreDot *other = (NMTFMerStoreDot *)anObject;
  if ((__stId_isset != other->__stId_isset) ||
      (__stId_isset && (__stId != other->__stId))) {
    return NO;
  }
  if ((__merId_isset != other->__merId_isset) ||
      (__merId_isset && (__merId != other->__merId))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__abbrName_isset != other->__abbrName_isset) ||
      (__abbrName_isset && ((__abbrName || other->__abbrName) && ![__abbrName isEqual:other->__abbrName]))) {
    return NO;
  }
  if ((__address_isset != other->__address_isset) ||
      (__address_isset && ((__address || other->__address) && ![__address isEqual:other->__address]))) {
    return NO;
  }
  if ((__telephone_isset != other->__telephone_isset) ||
      (__telephone_isset && ((__telephone || other->__telephone) && ![__telephone isEqual:other->__telephone]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [__abbrName release_stub];
  [__address release_stub];
  [__telephone release_stub];
  [__desc release_stub];
  [super dealloc_stub];
}

- (int64_t) stId {
  return __stId;
}

- (void) setStId: (int64_t) stId {
  __stId = stId;
  __stId_isset = YES;
}

- (BOOL) stIdIsSet {
  return __stId_isset;
}

- (void) unsetStId {
  __stId_isset = NO;
}

- (int64_t) merId {
  return __merId;
}

- (void) setMerId: (int64_t) merId {
  __merId = merId;
  __merId_isset = YES;
}

- (BOOL) merIdIsSet {
  return __merId_isset;
}

- (void) unsetMerId {
  __merId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) abbrName {
  return [[__abbrName retain_stub] autorelease_stub];
}

- (void) setAbbrName: (NSString *) abbrName {
  [abbrName retain_stub];
  [__abbrName release_stub];
  __abbrName = abbrName;
  __abbrName_isset = YES;
}

- (BOOL) abbrNameIsSet {
  return __abbrName_isset;
}

- (void) unsetAbbrName {
  [__abbrName release_stub];
  __abbrName = nil;
  __abbrName_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (NSString *) telephone {
  return [[__telephone retain_stub] autorelease_stub];
}

- (void) setTelephone: (NSString *) telephone {
  [telephone retain_stub];
  [__telephone release_stub];
  __telephone = telephone;
  __telephone_isset = YES;
}

- (BOOL) telephoneIsSet {
  return __telephone_isset;
}

- (void) unsetTelephone {
  [__telephone release_stub];
  __telephone = nil;
  __telephone_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setStId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAbbrName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTelephone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MerStoreDot"];
  if (__stId_isset) {
    [outProtocol writeFieldBeginWithName: @"stId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __stId];
    [outProtocol writeFieldEnd];
  }
  if (__merId_isset) {
    [outProtocol writeFieldBeginWithName: @"merId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __merId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__abbrName_isset) {
    if (__abbrName != nil) {
      [outProtocol writeFieldBeginWithName: @"abbrName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __abbrName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__telephone_isset) {
    if (__telephone != nil) {
      [outProtocol writeFieldBeginWithName: @"telephone" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __telephone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFMerStoreDot("];
  [ms appendString: @"stId:"];
  [ms appendFormat: @"%qi", __stId];
  [ms appendString: @",merId:"];
  [ms appendFormat: @"%qi", __merId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",abbrName:"];
  [ms appendFormat: @"\"%@\"", __abbrName];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",telephone:"];
  [ms appendFormat: @"\"%@\"", __telephone];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFProDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithProId: (int64_t) proId name: (NSString *) name catId: (int32_t) catId unit: (NSString *) unit image: (NSString *) image price: (NSString *) price origPrice: (NSString *) origPrice soldCnt: (int32_t) soldCnt desc: (NSString *) desc
{
  self = [super init];
  __proId = proId;
  __proId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __catId = catId;
  __catId_isset = YES;
  __unit = [unit retain_stub];
  __unit_isset = YES;
  __image = [image retain_stub];
  __image_isset = YES;
  __price = [price retain_stub];
  __price_isset = YES;
  __origPrice = [origPrice retain_stub];
  __origPrice_isset = YES;
  __soldCnt = soldCnt;
  __soldCnt_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"proId"])
  {
    __proId = [decoder decodeInt64ForKey: @"proId"];
    __proId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"catId"])
  {
    __catId = [decoder decodeInt32ForKey: @"catId"];
    __catId_isset = YES;
  }
  if ([decoder containsValueForKey: @"unit"])
  {
    __unit = [[decoder decodeObjectForKey: @"unit"] retain_stub];
    __unit_isset = YES;
  }
  if ([decoder containsValueForKey: @"image"])
  {
    __image = [[decoder decodeObjectForKey: @"image"] retain_stub];
    __image_isset = YES;
  }
  if ([decoder containsValueForKey: @"price"])
  {
    __price = [[decoder decodeObjectForKey: @"price"] retain_stub];
    __price_isset = YES;
  }
  if ([decoder containsValueForKey: @"origPrice"])
  {
    __origPrice = [[decoder decodeObjectForKey: @"origPrice"] retain_stub];
    __origPrice_isset = YES;
  }
  if ([decoder containsValueForKey: @"soldCnt"])
  {
    __soldCnt = [decoder decodeInt32ForKey: @"soldCnt"];
    __soldCnt_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__proId_isset)
  {
    [encoder encodeInt64: __proId forKey: @"proId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__catId_isset)
  {
    [encoder encodeInt32: __catId forKey: @"catId"];
  }
  if (__unit_isset)
  {
    [encoder encodeObject: __unit forKey: @"unit"];
  }
  if (__image_isset)
  {
    [encoder encodeObject: __image forKey: @"image"];
  }
  if (__price_isset)
  {
    [encoder encodeObject: __price forKey: @"price"];
  }
  if (__origPrice_isset)
  {
    [encoder encodeObject: __origPrice forKey: @"origPrice"];
  }
  if (__soldCnt_isset)
  {
    [encoder encodeInt32: __soldCnt forKey: @"soldCnt"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __proId_isset ? 2654435761 : 0;
  if (__proId_isset)
  {
    hash = (hash * 31) ^ [@(__proId) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __catId_isset ? 2654435761 : 0;
  if (__catId_isset)
  {
    hash = (hash * 31) ^ [@(__catId) hash];
  }
  hash = (hash * 31) ^ __unit_isset ? 2654435761 : 0;
  if (__unit_isset)
  {
    hash = (hash * 31) ^ [__unit hash];
  }
  hash = (hash * 31) ^ __image_isset ? 2654435761 : 0;
  if (__image_isset)
  {
    hash = (hash * 31) ^ [__image hash];
  }
  hash = (hash * 31) ^ __price_isset ? 2654435761 : 0;
  if (__price_isset)
  {
    hash = (hash * 31) ^ [__price hash];
  }
  hash = (hash * 31) ^ __origPrice_isset ? 2654435761 : 0;
  if (__origPrice_isset)
  {
    hash = (hash * 31) ^ [__origPrice hash];
  }
  hash = (hash * 31) ^ __soldCnt_isset ? 2654435761 : 0;
  if (__soldCnt_isset)
  {
    hash = (hash * 31) ^ [@(__soldCnt) hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFProDto class]]) {
    return NO;
  }
  NMTFProDto *other = (NMTFProDto *)anObject;
  if ((__proId_isset != other->__proId_isset) ||
      (__proId_isset && (__proId != other->__proId))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__catId_isset != other->__catId_isset) ||
      (__catId_isset && (__catId != other->__catId))) {
    return NO;
  }
  if ((__unit_isset != other->__unit_isset) ||
      (__unit_isset && ((__unit || other->__unit) && ![__unit isEqual:other->__unit]))) {
    return NO;
  }
  if ((__image_isset != other->__image_isset) ||
      (__image_isset && ((__image || other->__image) && ![__image isEqual:other->__image]))) {
    return NO;
  }
  if ((__price_isset != other->__price_isset) ||
      (__price_isset && ((__price || other->__price) && ![__price isEqual:other->__price]))) {
    return NO;
  }
  if ((__origPrice_isset != other->__origPrice_isset) ||
      (__origPrice_isset && ((__origPrice || other->__origPrice) && ![__origPrice isEqual:other->__origPrice]))) {
    return NO;
  }
  if ((__soldCnt_isset != other->__soldCnt_isset) ||
      (__soldCnt_isset && (__soldCnt != other->__soldCnt))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [__unit release_stub];
  [__image release_stub];
  [__price release_stub];
  [__origPrice release_stub];
  [__desc release_stub];
  [super dealloc_stub];
}

- (int64_t) proId {
  return __proId;
}

- (void) setProId: (int64_t) proId {
  __proId = proId;
  __proId_isset = YES;
}

- (BOOL) proIdIsSet {
  return __proId_isset;
}

- (void) unsetProId {
  __proId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (int32_t) catId {
  return __catId;
}

- (void) setCatId: (int32_t) catId {
  __catId = catId;
  __catId_isset = YES;
}

- (BOOL) catIdIsSet {
  return __catId_isset;
}

- (void) unsetCatId {
  __catId_isset = NO;
}

- (NSString *) unit {
  return [[__unit retain_stub] autorelease_stub];
}

- (void) setUnit: (NSString *) unit {
  [unit retain_stub];
  [__unit release_stub];
  __unit = unit;
  __unit_isset = YES;
}

- (BOOL) unitIsSet {
  return __unit_isset;
}

- (void) unsetUnit {
  [__unit release_stub];
  __unit = nil;
  __unit_isset = NO;
}

- (NSString *) image {
  return [[__image retain_stub] autorelease_stub];
}

- (void) setImage: (NSString *) image {
  [image retain_stub];
  [__image release_stub];
  __image = image;
  __image_isset = YES;
}

- (BOOL) imageIsSet {
  return __image_isset;
}

- (void) unsetImage {
  [__image release_stub];
  __image = nil;
  __image_isset = NO;
}

- (NSString *) price {
  return [[__price retain_stub] autorelease_stub];
}

- (void) setPrice: (NSString *) price {
  [price retain_stub];
  [__price release_stub];
  __price = price;
  __price_isset = YES;
}

- (BOOL) priceIsSet {
  return __price_isset;
}

- (void) unsetPrice {
  [__price release_stub];
  __price = nil;
  __price_isset = NO;
}

- (NSString *) origPrice {
  return [[__origPrice retain_stub] autorelease_stub];
}

- (void) setOrigPrice: (NSString *) origPrice {
  [origPrice retain_stub];
  [__origPrice release_stub];
  __origPrice = origPrice;
  __origPrice_isset = YES;
}

- (BOOL) origPriceIsSet {
  return __origPrice_isset;
}

- (void) unsetOrigPrice {
  [__origPrice release_stub];
  __origPrice = nil;
  __origPrice_isset = NO;
}

- (int32_t) soldCnt {
  return __soldCnt;
}

- (void) setSoldCnt: (int32_t) soldCnt {
  __soldCnt = soldCnt;
  __soldCnt_isset = YES;
}

- (BOOL) soldCntIsSet {
  return __soldCnt_isset;
}

- (void) unsetSoldCnt {
  __soldCnt_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setProId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCatId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUnit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrigPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSoldCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ProDto"];
  if (__proId_isset) {
    [outProtocol writeFieldBeginWithName: @"proId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __proId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__catId_isset) {
    [outProtocol writeFieldBeginWithName: @"catId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __catId];
    [outProtocol writeFieldEnd];
  }
  if (__unit_isset) {
    if (__unit != nil) {
      [outProtocol writeFieldBeginWithName: @"unit" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __unit];
      [outProtocol writeFieldEnd];
    }
  }
  if (__image_isset) {
    if (__image != nil) {
      [outProtocol writeFieldBeginWithName: @"image" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __image];
      [outProtocol writeFieldEnd];
    }
  }
  if (__price_isset) {
    if (__price != nil) {
      [outProtocol writeFieldBeginWithName: @"price" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __price];
      [outProtocol writeFieldEnd];
    }
  }
  if (__origPrice_isset) {
    if (__origPrice != nil) {
      [outProtocol writeFieldBeginWithName: @"origPrice" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __origPrice];
      [outProtocol writeFieldEnd];
    }
  }
  if (__soldCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"soldCnt" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __soldCnt];
    [outProtocol writeFieldEnd];
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFProDto("];
  [ms appendString: @"proId:"];
  [ms appendFormat: @"%qi", __proId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",catId:"];
  [ms appendFormat: @"%i", __catId];
  [ms appendString: @",unit:"];
  [ms appendFormat: @"\"%@\"", __unit];
  [ms appendString: @",image:"];
  [ms appendFormat: @"\"%@\"", __image];
  [ms appendString: @",price:"];
  [ms appendFormat: @"\"%@\"", __price];
  [ms appendString: @",origPrice:"];
  [ms appendFormat: @"\"%@\"", __origPrice];
  [ms appendString: @",soldCnt:"];
  [ms appendFormat: @"%i", __soldCnt];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFProInfoMerDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMerId: (int64_t) merId merName: (NSString *) merName merLogo: (NSString *) merLogo city: (NSString *) city
{
  self = [super init];
  __merId = merId;
  __merId_isset = YES;
  __merName = [merName retain_stub];
  __merName_isset = YES;
  __merLogo = [merLogo retain_stub];
  __merLogo_isset = YES;
  __city = [city retain_stub];
  __city_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"merId"])
  {
    __merId = [decoder decodeInt64ForKey: @"merId"];
    __merId_isset = YES;
  }
  if ([decoder containsValueForKey: @"merName"])
  {
    __merName = [[decoder decodeObjectForKey: @"merName"] retain_stub];
    __merName_isset = YES;
  }
  if ([decoder containsValueForKey: @"merLogo"])
  {
    __merLogo = [[decoder decodeObjectForKey: @"merLogo"] retain_stub];
    __merLogo_isset = YES;
  }
  if ([decoder containsValueForKey: @"city"])
  {
    __city = [[decoder decodeObjectForKey: @"city"] retain_stub];
    __city_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__merId_isset)
  {
    [encoder encodeInt64: __merId forKey: @"merId"];
  }
  if (__merName_isset)
  {
    [encoder encodeObject: __merName forKey: @"merName"];
  }
  if (__merLogo_isset)
  {
    [encoder encodeObject: __merLogo forKey: @"merLogo"];
  }
  if (__city_isset)
  {
    [encoder encodeObject: __city forKey: @"city"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __merId_isset ? 2654435761 : 0;
  if (__merId_isset)
  {
    hash = (hash * 31) ^ [@(__merId) hash];
  }
  hash = (hash * 31) ^ __merName_isset ? 2654435761 : 0;
  if (__merName_isset)
  {
    hash = (hash * 31) ^ [__merName hash];
  }
  hash = (hash * 31) ^ __merLogo_isset ? 2654435761 : 0;
  if (__merLogo_isset)
  {
    hash = (hash * 31) ^ [__merLogo hash];
  }
  hash = (hash * 31) ^ __city_isset ? 2654435761 : 0;
  if (__city_isset)
  {
    hash = (hash * 31) ^ [__city hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFProInfoMerDto class]]) {
    return NO;
  }
  NMTFProInfoMerDto *other = (NMTFProInfoMerDto *)anObject;
  if ((__merId_isset != other->__merId_isset) ||
      (__merId_isset && (__merId != other->__merId))) {
    return NO;
  }
  if ((__merName_isset != other->__merName_isset) ||
      (__merName_isset && ((__merName || other->__merName) && ![__merName isEqual:other->__merName]))) {
    return NO;
  }
  if ((__merLogo_isset != other->__merLogo_isset) ||
      (__merLogo_isset && ((__merLogo || other->__merLogo) && ![__merLogo isEqual:other->__merLogo]))) {
    return NO;
  }
  if ((__city_isset != other->__city_isset) ||
      (__city_isset && ((__city || other->__city) && ![__city isEqual:other->__city]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__merName release_stub];
  [__merLogo release_stub];
  [__city release_stub];
  [super dealloc_stub];
}

- (int64_t) merId {
  return __merId;
}

- (void) setMerId: (int64_t) merId {
  __merId = merId;
  __merId_isset = YES;
}

- (BOOL) merIdIsSet {
  return __merId_isset;
}

- (void) unsetMerId {
  __merId_isset = NO;
}

- (NSString *) merName {
  return [[__merName retain_stub] autorelease_stub];
}

- (void) setMerName: (NSString *) merName {
  [merName retain_stub];
  [__merName release_stub];
  __merName = merName;
  __merName_isset = YES;
}

- (BOOL) merNameIsSet {
  return __merName_isset;
}

- (void) unsetMerName {
  [__merName release_stub];
  __merName = nil;
  __merName_isset = NO;
}

- (NSString *) merLogo {
  return [[__merLogo retain_stub] autorelease_stub];
}

- (void) setMerLogo: (NSString *) merLogo {
  [merLogo retain_stub];
  [__merLogo release_stub];
  __merLogo = merLogo;
  __merLogo_isset = YES;
}

- (BOOL) merLogoIsSet {
  return __merLogo_isset;
}

- (void) unsetMerLogo {
  [__merLogo release_stub];
  __merLogo = nil;
  __merLogo_isset = NO;
}

- (NSString *) city {
  return [[__city retain_stub] autorelease_stub];
}

- (void) setCity: (NSString *) city {
  [city retain_stub];
  [__city release_stub];
  __city = city;
  __city_isset = YES;
}

- (BOOL) cityIsSet {
  return __city_isset;
}

- (void) unsetCity {
  [__city release_stub];
  __city = nil;
  __city_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMerName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMerLogo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ProInfoMerDto"];
  if (__merId_isset) {
    [outProtocol writeFieldBeginWithName: @"merId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __merId];
    [outProtocol writeFieldEnd];
  }
  if (__merName_isset) {
    if (__merName != nil) {
      [outProtocol writeFieldBeginWithName: @"merName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __merName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__merLogo_isset) {
    if (__merLogo != nil) {
      [outProtocol writeFieldBeginWithName: @"merLogo" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __merLogo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__city_isset) {
    if (__city != nil) {
      [outProtocol writeFieldBeginWithName: @"city" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __city];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFProInfoMerDto("];
  [ms appendString: @"merId:"];
  [ms appendFormat: @"%qi", __merId];
  [ms appendString: @",merName:"];
  [ms appendFormat: @"\"%@\"", __merName];
  [ms appendString: @",merLogo:"];
  [ms appendFormat: @"\"%@\"", __merLogo];
  [ms appendString: @",city:"];
  [ms appendFormat: @"\"%@\"", __city];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFProInfoDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.proImgs = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

  self.briefImgs = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithProId: (int64_t) proId name: (NSString *) name desc: (NSString *) desc unit: (NSString *) unit proImgs: (NSMutableArray *) proImgs briefImgs: (NSMutableArray *) briefImgs price: (NSString *) price origPrice: (NSString *) origPrice soldCnt: (int32_t) soldCnt stockCnt: (int32_t) stockCnt tradeType: (int32_t) tradeType merInfo: (NMTFProInfoMerDto *) merInfo logiPrice: (NSString *) logiPrice
{
  self = [super init];
  __proId = proId;
  __proId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __unit = [unit retain_stub];
  __unit_isset = YES;
  __proImgs = [proImgs retain_stub];
  __proImgs_isset = YES;
  __briefImgs = [briefImgs retain_stub];
  __briefImgs_isset = YES;
  __price = [price retain_stub];
  __price_isset = YES;
  __origPrice = [origPrice retain_stub];
  __origPrice_isset = YES;
  __soldCnt = soldCnt;
  __soldCnt_isset = YES;
  __stockCnt = stockCnt;
  __stockCnt_isset = YES;
  __tradeType = tradeType;
  __tradeType_isset = YES;
  __merInfo = [merInfo retain_stub];
  __merInfo_isset = YES;
  __logiPrice = [logiPrice retain_stub];
  __logiPrice_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"proId"])
  {
    __proId = [decoder decodeInt64ForKey: @"proId"];
    __proId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"unit"])
  {
    __unit = [[decoder decodeObjectForKey: @"unit"] retain_stub];
    __unit_isset = YES;
  }
  if ([decoder containsValueForKey: @"proImgs"])
  {
    __proImgs = [[decoder decodeObjectForKey: @"proImgs"] retain_stub];
    __proImgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"briefImgs"])
  {
    __briefImgs = [[decoder decodeObjectForKey: @"briefImgs"] retain_stub];
    __briefImgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"price"])
  {
    __price = [[decoder decodeObjectForKey: @"price"] retain_stub];
    __price_isset = YES;
  }
  if ([decoder containsValueForKey: @"origPrice"])
  {
    __origPrice = [[decoder decodeObjectForKey: @"origPrice"] retain_stub];
    __origPrice_isset = YES;
  }
  if ([decoder containsValueForKey: @"soldCnt"])
  {
    __soldCnt = [decoder decodeInt32ForKey: @"soldCnt"];
    __soldCnt_isset = YES;
  }
  if ([decoder containsValueForKey: @"stockCnt"])
  {
    __stockCnt = [decoder decodeInt32ForKey: @"stockCnt"];
    __stockCnt_isset = YES;
  }
  if ([decoder containsValueForKey: @"tradeType"])
  {
    __tradeType = [decoder decodeInt32ForKey: @"tradeType"];
    __tradeType_isset = YES;
  }
  if ([decoder containsValueForKey: @"merInfo"])
  {
    __merInfo = [[decoder decodeObjectForKey: @"merInfo"] retain_stub];
    __merInfo_isset = YES;
  }
  if ([decoder containsValueForKey: @"logiPrice"])
  {
    __logiPrice = [[decoder decodeObjectForKey: @"logiPrice"] retain_stub];
    __logiPrice_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__proId_isset)
  {
    [encoder encodeInt64: __proId forKey: @"proId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__unit_isset)
  {
    [encoder encodeObject: __unit forKey: @"unit"];
  }
  if (__proImgs_isset)
  {
    [encoder encodeObject: __proImgs forKey: @"proImgs"];
  }
  if (__briefImgs_isset)
  {
    [encoder encodeObject: __briefImgs forKey: @"briefImgs"];
  }
  if (__price_isset)
  {
    [encoder encodeObject: __price forKey: @"price"];
  }
  if (__origPrice_isset)
  {
    [encoder encodeObject: __origPrice forKey: @"origPrice"];
  }
  if (__soldCnt_isset)
  {
    [encoder encodeInt32: __soldCnt forKey: @"soldCnt"];
  }
  if (__stockCnt_isset)
  {
    [encoder encodeInt32: __stockCnt forKey: @"stockCnt"];
  }
  if (__tradeType_isset)
  {
    [encoder encodeInt32: __tradeType forKey: @"tradeType"];
  }
  if (__merInfo_isset)
  {
    [encoder encodeObject: __merInfo forKey: @"merInfo"];
  }
  if (__logiPrice_isset)
  {
    [encoder encodeObject: __logiPrice forKey: @"logiPrice"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __proId_isset ? 2654435761 : 0;
  if (__proId_isset)
  {
    hash = (hash * 31) ^ [@(__proId) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __unit_isset ? 2654435761 : 0;
  if (__unit_isset)
  {
    hash = (hash * 31) ^ [__unit hash];
  }
  hash = (hash * 31) ^ __proImgs_isset ? 2654435761 : 0;
  if (__proImgs_isset)
  {
    hash = (hash * 31) ^ [__proImgs hash];
  }
  hash = (hash * 31) ^ __briefImgs_isset ? 2654435761 : 0;
  if (__briefImgs_isset)
  {
    hash = (hash * 31) ^ [__briefImgs hash];
  }
  hash = (hash * 31) ^ __price_isset ? 2654435761 : 0;
  if (__price_isset)
  {
    hash = (hash * 31) ^ [__price hash];
  }
  hash = (hash * 31) ^ __origPrice_isset ? 2654435761 : 0;
  if (__origPrice_isset)
  {
    hash = (hash * 31) ^ [__origPrice hash];
  }
  hash = (hash * 31) ^ __soldCnt_isset ? 2654435761 : 0;
  if (__soldCnt_isset)
  {
    hash = (hash * 31) ^ [@(__soldCnt) hash];
  }
  hash = (hash * 31) ^ __stockCnt_isset ? 2654435761 : 0;
  if (__stockCnt_isset)
  {
    hash = (hash * 31) ^ [@(__stockCnt) hash];
  }
  hash = (hash * 31) ^ __tradeType_isset ? 2654435761 : 0;
  if (__tradeType_isset)
  {
    hash = (hash * 31) ^ [@(__tradeType) hash];
  }
  hash = (hash * 31) ^ __merInfo_isset ? 2654435761 : 0;
  if (__merInfo_isset)
  {
    hash = (hash * 31) ^ [__merInfo hash];
  }
  hash = (hash * 31) ^ __logiPrice_isset ? 2654435761 : 0;
  if (__logiPrice_isset)
  {
    hash = (hash * 31) ^ [__logiPrice hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFProInfoDto class]]) {
    return NO;
  }
  NMTFProInfoDto *other = (NMTFProInfoDto *)anObject;
  if ((__proId_isset != other->__proId_isset) ||
      (__proId_isset && (__proId != other->__proId))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__unit_isset != other->__unit_isset) ||
      (__unit_isset && ((__unit || other->__unit) && ![__unit isEqual:other->__unit]))) {
    return NO;
  }
  if ((__proImgs_isset != other->__proImgs_isset) ||
      (__proImgs_isset && ((__proImgs || other->__proImgs) && ![__proImgs isEqual:other->__proImgs]))) {
    return NO;
  }
  if ((__briefImgs_isset != other->__briefImgs_isset) ||
      (__briefImgs_isset && ((__briefImgs || other->__briefImgs) && ![__briefImgs isEqual:other->__briefImgs]))) {
    return NO;
  }
  if ((__price_isset != other->__price_isset) ||
      (__price_isset && ((__price || other->__price) && ![__price isEqual:other->__price]))) {
    return NO;
  }
  if ((__origPrice_isset != other->__origPrice_isset) ||
      (__origPrice_isset && ((__origPrice || other->__origPrice) && ![__origPrice isEqual:other->__origPrice]))) {
    return NO;
  }
  if ((__soldCnt_isset != other->__soldCnt_isset) ||
      (__soldCnt_isset && (__soldCnt != other->__soldCnt))) {
    return NO;
  }
  if ((__stockCnt_isset != other->__stockCnt_isset) ||
      (__stockCnt_isset && (__stockCnt != other->__stockCnt))) {
    return NO;
  }
  if ((__tradeType_isset != other->__tradeType_isset) ||
      (__tradeType_isset && (__tradeType != other->__tradeType))) {
    return NO;
  }
  if ((__merInfo_isset != other->__merInfo_isset) ||
      (__merInfo_isset && ((__merInfo || other->__merInfo) && ![__merInfo isEqual:other->__merInfo]))) {
    return NO;
  }
  if ((__logiPrice_isset != other->__logiPrice_isset) ||
      (__logiPrice_isset && ((__logiPrice || other->__logiPrice) && ![__logiPrice isEqual:other->__logiPrice]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [__desc release_stub];
  [__unit release_stub];
  [__proImgs release_stub];
  [__briefImgs release_stub];
  [__price release_stub];
  [__origPrice release_stub];
  [__merInfo release_stub];
  [__logiPrice release_stub];
  [super dealloc_stub];
}

- (int64_t) proId {
  return __proId;
}

- (void) setProId: (int64_t) proId {
  __proId = proId;
  __proId_isset = YES;
}

- (BOOL) proIdIsSet {
  return __proId_isset;
}

- (void) unsetProId {
  __proId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) unit {
  return [[__unit retain_stub] autorelease_stub];
}

- (void) setUnit: (NSString *) unit {
  [unit retain_stub];
  [__unit release_stub];
  __unit = unit;
  __unit_isset = YES;
}

- (BOOL) unitIsSet {
  return __unit_isset;
}

- (void) unsetUnit {
  [__unit release_stub];
  __unit = nil;
  __unit_isset = NO;
}

- (NSMutableArray *) proImgs {
  return [[__proImgs retain_stub] autorelease_stub];
}

- (void) setProImgs: (NSMutableArray *) proImgs {
  [proImgs retain_stub];
  [__proImgs release_stub];
  __proImgs = proImgs;
  __proImgs_isset = YES;
}

- (BOOL) proImgsIsSet {
  return __proImgs_isset;
}

- (void) unsetProImgs {
  [__proImgs release_stub];
  __proImgs = nil;
  __proImgs_isset = NO;
}

- (NSMutableArray *) briefImgs {
  return [[__briefImgs retain_stub] autorelease_stub];
}

- (void) setBriefImgs: (NSMutableArray *) briefImgs {
  [briefImgs retain_stub];
  [__briefImgs release_stub];
  __briefImgs = briefImgs;
  __briefImgs_isset = YES;
}

- (BOOL) briefImgsIsSet {
  return __briefImgs_isset;
}

- (void) unsetBriefImgs {
  [__briefImgs release_stub];
  __briefImgs = nil;
  __briefImgs_isset = NO;
}

- (NSString *) price {
  return [[__price retain_stub] autorelease_stub];
}

- (void) setPrice: (NSString *) price {
  [price retain_stub];
  [__price release_stub];
  __price = price;
  __price_isset = YES;
}

- (BOOL) priceIsSet {
  return __price_isset;
}

- (void) unsetPrice {
  [__price release_stub];
  __price = nil;
  __price_isset = NO;
}

- (NSString *) origPrice {
  return [[__origPrice retain_stub] autorelease_stub];
}

- (void) setOrigPrice: (NSString *) origPrice {
  [origPrice retain_stub];
  [__origPrice release_stub];
  __origPrice = origPrice;
  __origPrice_isset = YES;
}

- (BOOL) origPriceIsSet {
  return __origPrice_isset;
}

- (void) unsetOrigPrice {
  [__origPrice release_stub];
  __origPrice = nil;
  __origPrice_isset = NO;
}

- (int32_t) soldCnt {
  return __soldCnt;
}

- (void) setSoldCnt: (int32_t) soldCnt {
  __soldCnt = soldCnt;
  __soldCnt_isset = YES;
}

- (BOOL) soldCntIsSet {
  return __soldCnt_isset;
}

- (void) unsetSoldCnt {
  __soldCnt_isset = NO;
}

- (int32_t) stockCnt {
  return __stockCnt;
}

- (void) setStockCnt: (int32_t) stockCnt {
  __stockCnt = stockCnt;
  __stockCnt_isset = YES;
}

- (BOOL) stockCntIsSet {
  return __stockCnt_isset;
}

- (void) unsetStockCnt {
  __stockCnt_isset = NO;
}

- (int32_t) tradeType {
  return __tradeType;
}

- (void) setTradeType: (int32_t) tradeType {
  __tradeType = tradeType;
  __tradeType_isset = YES;
}

- (BOOL) tradeTypeIsSet {
  return __tradeType_isset;
}

- (void) unsetTradeType {
  __tradeType_isset = NO;
}

- (NMTFProInfoMerDto *) merInfo {
  return [[__merInfo retain_stub] autorelease_stub];
}

- (void) setMerInfo: (NMTFProInfoMerDto *) merInfo {
  [merInfo retain_stub];
  [__merInfo release_stub];
  __merInfo = merInfo;
  __merInfo_isset = YES;
}

- (BOOL) merInfoIsSet {
  return __merInfo_isset;
}

- (void) unsetMerInfo {
  [__merInfo release_stub];
  __merInfo = nil;
  __merInfo_isset = NO;
}

- (NSString *) logiPrice {
  return [[__logiPrice retain_stub] autorelease_stub];
}

- (void) setLogiPrice: (NSString *) logiPrice {
  [logiPrice retain_stub];
  [__logiPrice release_stub];
  __logiPrice = logiPrice;
  __logiPrice_isset = YES;
}

- (BOOL) logiPriceIsSet {
  return __logiPrice_isset;
}

- (void) unsetLogiPrice {
  [__logiPrice release_stub];
  __logiPrice = nil;
  __logiPrice_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setProId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUnit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            NSString * _elem12 = [inProtocol readString];
            [fieldValue addObject: _elem12];
          }
          [inProtocol readListEnd];
          [self setProImgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_LIST) {
          int _size13;
          [inProtocol readListBeginReturningElementType: NULL size: &_size13];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size13];
          int _i14;
          for (_i14 = 0; _i14 < _size13; ++_i14)
          {
            NSString * _elem15 = [inProtocol readString];
            [fieldValue addObject: _elem15];
          }
          [inProtocol readListEnd];
          [self setBriefImgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrigPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSoldCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStockCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTradeType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRUCT) {
          NMTFProInfoMerDto *fieldValue = [[NMTFProInfoMerDto alloc] init];
          [fieldValue read: inProtocol];
          [self setMerInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLogiPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ProInfoDto"];
  if (__proId_isset) {
    [outProtocol writeFieldBeginWithName: @"proId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __proId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__unit_isset) {
    if (__unit != nil) {
      [outProtocol writeFieldBeginWithName: @"unit" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __unit];
      [outProtocol writeFieldEnd];
    }
  }
  if (__proImgs_isset) {
    if (__proImgs != nil) {
      [outProtocol writeFieldBeginWithName: @"proImgs" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__proImgs count]];
        int idx17;
        for (idx17 = 0; idx17 < [__proImgs count]; idx17++)
        {
          [outProtocol writeString: [__proImgs objectAtIndex: idx17]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__briefImgs_isset) {
    if (__briefImgs != nil) {
      [outProtocol writeFieldBeginWithName: @"briefImgs" type: TType_LIST fieldID: 6];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__briefImgs count]];
        int idx19;
        for (idx19 = 0; idx19 < [__briefImgs count]; idx19++)
        {
          [outProtocol writeString: [__briefImgs objectAtIndex: idx19]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__price_isset) {
    if (__price != nil) {
      [outProtocol writeFieldBeginWithName: @"price" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __price];
      [outProtocol writeFieldEnd];
    }
  }
  if (__origPrice_isset) {
    if (__origPrice != nil) {
      [outProtocol writeFieldBeginWithName: @"origPrice" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __origPrice];
      [outProtocol writeFieldEnd];
    }
  }
  if (__soldCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"soldCnt" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __soldCnt];
    [outProtocol writeFieldEnd];
  }
  if (__stockCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"stockCnt" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __stockCnt];
    [outProtocol writeFieldEnd];
  }
  if (__tradeType_isset) {
    [outProtocol writeFieldBeginWithName: @"tradeType" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __tradeType];
    [outProtocol writeFieldEnd];
  }
  if (__merInfo_isset) {
    if (__merInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"merInfo" type: TType_STRUCT fieldID: 12];
      [__merInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__logiPrice_isset) {
    if (__logiPrice != nil) {
      [outProtocol writeFieldBeginWithName: @"logiPrice" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __logiPrice];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFProInfoDto("];
  [ms appendString: @"proId:"];
  [ms appendFormat: @"%qi", __proId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",unit:"];
  [ms appendFormat: @"\"%@\"", __unit];
  [ms appendString: @",proImgs:"];
  [ms appendFormat: @"%@", __proImgs];
  [ms appendString: @",briefImgs:"];
  [ms appendFormat: @"%@", __briefImgs];
  [ms appendString: @",price:"];
  [ms appendFormat: @"\"%@\"", __price];
  [ms appendString: @",origPrice:"];
  [ms appendFormat: @"\"%@\"", __origPrice];
  [ms appendString: @",soldCnt:"];
  [ms appendFormat: @"%i", __soldCnt];
  [ms appendString: @",stockCnt:"];
  [ms appendFormat: @"%i", __stockCnt];
  [ms appendString: @",tradeType:"];
  [ms appendFormat: @"%i", __tradeType];
  [ms appendString: @",merInfo:"];
  [ms appendFormat: @"%@", __merInfo];
  [ms appendString: @",logiPrice:"];
  [ms appendFormat: @"\"%@\"", __logiPrice];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFAddressDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAddId: (int64_t) addId consignee: (NSString *) consignee telephone: (NSString *) telephone district: (NSString *) district detail: (NSString *) detail isDefault: (int32_t) isDefault
{
  self = [super init];
  __addId = addId;
  __addId_isset = YES;
  __consignee = [consignee retain_stub];
  __consignee_isset = YES;
  __telephone = [telephone retain_stub];
  __telephone_isset = YES;
  __district = [district retain_stub];
  __district_isset = YES;
  __detail = [detail retain_stub];
  __detail_isset = YES;
  __isDefault = isDefault;
  __isDefault_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"addId"])
  {
    __addId = [decoder decodeInt64ForKey: @"addId"];
    __addId_isset = YES;
  }
  if ([decoder containsValueForKey: @"consignee"])
  {
    __consignee = [[decoder decodeObjectForKey: @"consignee"] retain_stub];
    __consignee_isset = YES;
  }
  if ([decoder containsValueForKey: @"telephone"])
  {
    __telephone = [[decoder decodeObjectForKey: @"telephone"] retain_stub];
    __telephone_isset = YES;
  }
  if ([decoder containsValueForKey: @"district"])
  {
    __district = [[decoder decodeObjectForKey: @"district"] retain_stub];
    __district_isset = YES;
  }
  if ([decoder containsValueForKey: @"detail"])
  {
    __detail = [[decoder decodeObjectForKey: @"detail"] retain_stub];
    __detail_isset = YES;
  }
  if ([decoder containsValueForKey: @"isDefault"])
  {
    __isDefault = [decoder decodeInt32ForKey: @"isDefault"];
    __isDefault_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__addId_isset)
  {
    [encoder encodeInt64: __addId forKey: @"addId"];
  }
  if (__consignee_isset)
  {
    [encoder encodeObject: __consignee forKey: @"consignee"];
  }
  if (__telephone_isset)
  {
    [encoder encodeObject: __telephone forKey: @"telephone"];
  }
  if (__district_isset)
  {
    [encoder encodeObject: __district forKey: @"district"];
  }
  if (__detail_isset)
  {
    [encoder encodeObject: __detail forKey: @"detail"];
  }
  if (__isDefault_isset)
  {
    [encoder encodeInt32: __isDefault forKey: @"isDefault"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __addId_isset ? 2654435761 : 0;
  if (__addId_isset)
  {
    hash = (hash * 31) ^ [@(__addId) hash];
  }
  hash = (hash * 31) ^ __consignee_isset ? 2654435761 : 0;
  if (__consignee_isset)
  {
    hash = (hash * 31) ^ [__consignee hash];
  }
  hash = (hash * 31) ^ __telephone_isset ? 2654435761 : 0;
  if (__telephone_isset)
  {
    hash = (hash * 31) ^ [__telephone hash];
  }
  hash = (hash * 31) ^ __district_isset ? 2654435761 : 0;
  if (__district_isset)
  {
    hash = (hash * 31) ^ [__district hash];
  }
  hash = (hash * 31) ^ __detail_isset ? 2654435761 : 0;
  if (__detail_isset)
  {
    hash = (hash * 31) ^ [__detail hash];
  }
  hash = (hash * 31) ^ __isDefault_isset ? 2654435761 : 0;
  if (__isDefault_isset)
  {
    hash = (hash * 31) ^ [@(__isDefault) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFAddressDto class]]) {
    return NO;
  }
  NMTFAddressDto *other = (NMTFAddressDto *)anObject;
  if ((__addId_isset != other->__addId_isset) ||
      (__addId_isset && (__addId != other->__addId))) {
    return NO;
  }
  if ((__consignee_isset != other->__consignee_isset) ||
      (__consignee_isset && ((__consignee || other->__consignee) && ![__consignee isEqual:other->__consignee]))) {
    return NO;
  }
  if ((__telephone_isset != other->__telephone_isset) ||
      (__telephone_isset && ((__telephone || other->__telephone) && ![__telephone isEqual:other->__telephone]))) {
    return NO;
  }
  if ((__district_isset != other->__district_isset) ||
      (__district_isset && ((__district || other->__district) && ![__district isEqual:other->__district]))) {
    return NO;
  }
  if ((__detail_isset != other->__detail_isset) ||
      (__detail_isset && ((__detail || other->__detail) && ![__detail isEqual:other->__detail]))) {
    return NO;
  }
  if ((__isDefault_isset != other->__isDefault_isset) ||
      (__isDefault_isset && (__isDefault != other->__isDefault))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__consignee release_stub];
  [__telephone release_stub];
  [__district release_stub];
  [__detail release_stub];
  [super dealloc_stub];
}

- (int64_t) addId {
  return __addId;
}

- (void) setAddId: (int64_t) addId {
  __addId = addId;
  __addId_isset = YES;
}

- (BOOL) addIdIsSet {
  return __addId_isset;
}

- (void) unsetAddId {
  __addId_isset = NO;
}

- (NSString *) consignee {
  return [[__consignee retain_stub] autorelease_stub];
}

- (void) setConsignee: (NSString *) consignee {
  [consignee retain_stub];
  [__consignee release_stub];
  __consignee = consignee;
  __consignee_isset = YES;
}

- (BOOL) consigneeIsSet {
  return __consignee_isset;
}

- (void) unsetConsignee {
  [__consignee release_stub];
  __consignee = nil;
  __consignee_isset = NO;
}

- (NSString *) telephone {
  return [[__telephone retain_stub] autorelease_stub];
}

- (void) setTelephone: (NSString *) telephone {
  [telephone retain_stub];
  [__telephone release_stub];
  __telephone = telephone;
  __telephone_isset = YES;
}

- (BOOL) telephoneIsSet {
  return __telephone_isset;
}

- (void) unsetTelephone {
  [__telephone release_stub];
  __telephone = nil;
  __telephone_isset = NO;
}

- (NSString *) district {
  return [[__district retain_stub] autorelease_stub];
}

- (void) setDistrict: (NSString *) district {
  [district retain_stub];
  [__district release_stub];
  __district = district;
  __district_isset = YES;
}

- (BOOL) districtIsSet {
  return __district_isset;
}

- (void) unsetDistrict {
  [__district release_stub];
  __district = nil;
  __district_isset = NO;
}

- (NSString *) detail {
  return [[__detail retain_stub] autorelease_stub];
}

- (void) setDetail: (NSString *) detail {
  [detail retain_stub];
  [__detail release_stub];
  __detail = detail;
  __detail_isset = YES;
}

- (BOOL) detailIsSet {
  return __detail_isset;
}

- (void) unsetDetail {
  [__detail release_stub];
  __detail = nil;
  __detail_isset = NO;
}

- (int32_t) isDefault {
  return __isDefault;
}

- (void) setIsDefault: (int32_t) isDefault {
  __isDefault = isDefault;
  __isDefault_isset = YES;
}

- (BOOL) isDefaultIsSet {
  return __isDefault_isset;
}

- (void) unsetIsDefault {
  __isDefault_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAddId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConsignee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTelephone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDistrict: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDetail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsDefault: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddressDto"];
  if (__addId_isset) {
    [outProtocol writeFieldBeginWithName: @"addId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __addId];
    [outProtocol writeFieldEnd];
  }
  if (__consignee_isset) {
    if (__consignee != nil) {
      [outProtocol writeFieldBeginWithName: @"consignee" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __consignee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__telephone_isset) {
    if (__telephone != nil) {
      [outProtocol writeFieldBeginWithName: @"telephone" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __telephone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__district_isset) {
    if (__district != nil) {
      [outProtocol writeFieldBeginWithName: @"district" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __district];
      [outProtocol writeFieldEnd];
    }
  }
  if (__detail_isset) {
    if (__detail != nil) {
      [outProtocol writeFieldBeginWithName: @"detail" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __detail];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isDefault_isset) {
    [outProtocol writeFieldBeginWithName: @"isDefault" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __isDefault];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFAddressDto("];
  [ms appendString: @"addId:"];
  [ms appendFormat: @"%qi", __addId];
  [ms appendString: @",consignee:"];
  [ms appendFormat: @"\"%@\"", __consignee];
  [ms appendString: @",telephone:"];
  [ms appendFormat: @"\"%@\"", __telephone];
  [ms appendString: @",district:"];
  [ms appendFormat: @"\"%@\"", __district];
  [ms appendString: @",detail:"];
  [ms appendFormat: @"\"%@\"", __detail];
  [ms appendString: @",isDefault:"];
  [ms appendFormat: @"%i", __isDefault];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFCartProDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.pros = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithMerId: (int64_t) merId mName: (NSString *) mName pros: (NSMutableArray *) pros
{
  self = [super init];
  __merId = merId;
  __merId_isset = YES;
  __mName = [mName retain_stub];
  __mName_isset = YES;
  __pros = [pros retain_stub];
  __pros_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"merId"])
  {
    __merId = [decoder decodeInt64ForKey: @"merId"];
    __merId_isset = YES;
  }
  if ([decoder containsValueForKey: @"mName"])
  {
    __mName = [[decoder decodeObjectForKey: @"mName"] retain_stub];
    __mName_isset = YES;
  }
  if ([decoder containsValueForKey: @"pros"])
  {
    __pros = [[decoder decodeObjectForKey: @"pros"] retain_stub];
    __pros_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__merId_isset)
  {
    [encoder encodeInt64: __merId forKey: @"merId"];
  }
  if (__mName_isset)
  {
    [encoder encodeObject: __mName forKey: @"mName"];
  }
  if (__pros_isset)
  {
    [encoder encodeObject: __pros forKey: @"pros"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __merId_isset ? 2654435761 : 0;
  if (__merId_isset)
  {
    hash = (hash * 31) ^ [@(__merId) hash];
  }
  hash = (hash * 31) ^ __mName_isset ? 2654435761 : 0;
  if (__mName_isset)
  {
    hash = (hash * 31) ^ [__mName hash];
  }
  hash = (hash * 31) ^ __pros_isset ? 2654435761 : 0;
  if (__pros_isset)
  {
    hash = (hash * 31) ^ [__pros hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFCartProDto class]]) {
    return NO;
  }
  NMTFCartProDto *other = (NMTFCartProDto *)anObject;
  if ((__merId_isset != other->__merId_isset) ||
      (__merId_isset && (__merId != other->__merId))) {
    return NO;
  }
  if ((__mName_isset != other->__mName_isset) ||
      (__mName_isset && ((__mName || other->__mName) && ![__mName isEqual:other->__mName]))) {
    return NO;
  }
  if ((__pros_isset != other->__pros_isset) ||
      (__pros_isset && ((__pros || other->__pros) && ![__pros isEqual:other->__pros]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__mName release_stub];
  [__pros release_stub];
  [super dealloc_stub];
}

- (int64_t) merId {
  return __merId;
}

- (void) setMerId: (int64_t) merId {
  __merId = merId;
  __merId_isset = YES;
}

- (BOOL) merIdIsSet {
  return __merId_isset;
}

- (void) unsetMerId {
  __merId_isset = NO;
}

- (NSString *) mName {
  return [[__mName retain_stub] autorelease_stub];
}

- (void) setMName: (NSString *) mName {
  [mName retain_stub];
  [__mName release_stub];
  __mName = mName;
  __mName_isset = YES;
}

- (BOOL) mNameIsSet {
  return __mName_isset;
}

- (void) unsetMName {
  [__mName release_stub];
  __mName = nil;
  __mName_isset = NO;
}

- (NSMutableArray *) pros {
  return [[__pros retain_stub] autorelease_stub];
}

- (void) setPros: (NSMutableArray *) pros {
  [pros retain_stub];
  [__pros release_stub];
  __pros = pros;
  __pros_isset = YES;
}

- (BOOL) prosIsSet {
  return __pros_isset;
}

- (void) unsetPros {
  [__pros release_stub];
  __pros = nil;
  __pros_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            NMTFProDto *_elem22 = [[NMTFProDto alloc] init];
            [_elem22 read: inProtocol];
            [fieldValue addObject: _elem22];
            [_elem22 release_stub];
          }
          [inProtocol readListEnd];
          [self setPros: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CartProDto"];
  if (__merId_isset) {
    [outProtocol writeFieldBeginWithName: @"merId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __merId];
    [outProtocol writeFieldEnd];
  }
  if (__mName_isset) {
    if (__mName != nil) {
      [outProtocol writeFieldBeginWithName: @"mName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __mName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pros_isset) {
    if (__pros != nil) {
      [outProtocol writeFieldBeginWithName: @"pros" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__pros count]];
        int idx24;
        for (idx24 = 0; idx24 < [__pros count]; idx24++)
        {
          [[__pros objectAtIndex: idx24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFCartProDto("];
  [ms appendString: @"merId:"];
  [ms appendFormat: @"%qi", __merId];
  [ms appendString: @",mName:"];
  [ms appendFormat: @"\"%@\"", __mName];
  [ms appendString: @",pros:"];
  [ms appendFormat: @"%@", __pros];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFBindingDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBankId: (NSString *) bankId bankCode: (NSString *) bankCode bankName: (NSString *) bankName accountName: (NSString *) accountName accountNumber: (NSString *) accountNumber telephone: (NSString *) telephone txSnBinding: (NSString *) txSnBinding
{
  self = [super init];
  __bankId = [bankId retain_stub];
  __bankId_isset = YES;
  __bankCode = [bankCode retain_stub];
  __bankCode_isset = YES;
  __bankName = [bankName retain_stub];
  __bankName_isset = YES;
  __accountName = [accountName retain_stub];
  __accountName_isset = YES;
  __accountNumber = [accountNumber retain_stub];
  __accountNumber_isset = YES;
  __telephone = [telephone retain_stub];
  __telephone_isset = YES;
  __txSnBinding = [txSnBinding retain_stub];
  __txSnBinding_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"bankId"])
  {
    __bankId = [[decoder decodeObjectForKey: @"bankId"] retain_stub];
    __bankId_isset = YES;
  }
  if ([decoder containsValueForKey: @"bankCode"])
  {
    __bankCode = [[decoder decodeObjectForKey: @"bankCode"] retain_stub];
    __bankCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"bankName"])
  {
    __bankName = [[decoder decodeObjectForKey: @"bankName"] retain_stub];
    __bankName_isset = YES;
  }
  if ([decoder containsValueForKey: @"accountName"])
  {
    __accountName = [[decoder decodeObjectForKey: @"accountName"] retain_stub];
    __accountName_isset = YES;
  }
  if ([decoder containsValueForKey: @"accountNumber"])
  {
    __accountNumber = [[decoder decodeObjectForKey: @"accountNumber"] retain_stub];
    __accountNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"telephone"])
  {
    __telephone = [[decoder decodeObjectForKey: @"telephone"] retain_stub];
    __telephone_isset = YES;
  }
  if ([decoder containsValueForKey: @"txSnBinding"])
  {
    __txSnBinding = [[decoder decodeObjectForKey: @"txSnBinding"] retain_stub];
    __txSnBinding_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__bankId_isset)
  {
    [encoder encodeObject: __bankId forKey: @"bankId"];
  }
  if (__bankCode_isset)
  {
    [encoder encodeObject: __bankCode forKey: @"bankCode"];
  }
  if (__bankName_isset)
  {
    [encoder encodeObject: __bankName forKey: @"bankName"];
  }
  if (__accountName_isset)
  {
    [encoder encodeObject: __accountName forKey: @"accountName"];
  }
  if (__accountNumber_isset)
  {
    [encoder encodeObject: __accountNumber forKey: @"accountNumber"];
  }
  if (__telephone_isset)
  {
    [encoder encodeObject: __telephone forKey: @"telephone"];
  }
  if (__txSnBinding_isset)
  {
    [encoder encodeObject: __txSnBinding forKey: @"txSnBinding"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __bankId_isset ? 2654435761 : 0;
  if (__bankId_isset)
  {
    hash = (hash * 31) ^ [__bankId hash];
  }
  hash = (hash * 31) ^ __bankCode_isset ? 2654435761 : 0;
  if (__bankCode_isset)
  {
    hash = (hash * 31) ^ [__bankCode hash];
  }
  hash = (hash * 31) ^ __bankName_isset ? 2654435761 : 0;
  if (__bankName_isset)
  {
    hash = (hash * 31) ^ [__bankName hash];
  }
  hash = (hash * 31) ^ __accountName_isset ? 2654435761 : 0;
  if (__accountName_isset)
  {
    hash = (hash * 31) ^ [__accountName hash];
  }
  hash = (hash * 31) ^ __accountNumber_isset ? 2654435761 : 0;
  if (__accountNumber_isset)
  {
    hash = (hash * 31) ^ [__accountNumber hash];
  }
  hash = (hash * 31) ^ __telephone_isset ? 2654435761 : 0;
  if (__telephone_isset)
  {
    hash = (hash * 31) ^ [__telephone hash];
  }
  hash = (hash * 31) ^ __txSnBinding_isset ? 2654435761 : 0;
  if (__txSnBinding_isset)
  {
    hash = (hash * 31) ^ [__txSnBinding hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFBindingDto class]]) {
    return NO;
  }
  NMTFBindingDto *other = (NMTFBindingDto *)anObject;
  if ((__bankId_isset != other->__bankId_isset) ||
      (__bankId_isset && ((__bankId || other->__bankId) && ![__bankId isEqual:other->__bankId]))) {
    return NO;
  }
  if ((__bankCode_isset != other->__bankCode_isset) ||
      (__bankCode_isset && ((__bankCode || other->__bankCode) && ![__bankCode isEqual:other->__bankCode]))) {
    return NO;
  }
  if ((__bankName_isset != other->__bankName_isset) ||
      (__bankName_isset && ((__bankName || other->__bankName) && ![__bankName isEqual:other->__bankName]))) {
    return NO;
  }
  if ((__accountName_isset != other->__accountName_isset) ||
      (__accountName_isset && ((__accountName || other->__accountName) && ![__accountName isEqual:other->__accountName]))) {
    return NO;
  }
  if ((__accountNumber_isset != other->__accountNumber_isset) ||
      (__accountNumber_isset && ((__accountNumber || other->__accountNumber) && ![__accountNumber isEqual:other->__accountNumber]))) {
    return NO;
  }
  if ((__telephone_isset != other->__telephone_isset) ||
      (__telephone_isset && ((__telephone || other->__telephone) && ![__telephone isEqual:other->__telephone]))) {
    return NO;
  }
  if ((__txSnBinding_isset != other->__txSnBinding_isset) ||
      (__txSnBinding_isset && ((__txSnBinding || other->__txSnBinding) && ![__txSnBinding isEqual:other->__txSnBinding]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__bankId release_stub];
  [__bankCode release_stub];
  [__bankName release_stub];
  [__accountName release_stub];
  [__accountNumber release_stub];
  [__telephone release_stub];
  [__txSnBinding release_stub];
  [super dealloc_stub];
}

- (NSString *) bankId {
  return [[__bankId retain_stub] autorelease_stub];
}

- (void) setBankId: (NSString *) bankId {
  [bankId retain_stub];
  [__bankId release_stub];
  __bankId = bankId;
  __bankId_isset = YES;
}

- (BOOL) bankIdIsSet {
  return __bankId_isset;
}

- (void) unsetBankId {
  [__bankId release_stub];
  __bankId = nil;
  __bankId_isset = NO;
}

- (NSString *) bankCode {
  return [[__bankCode retain_stub] autorelease_stub];
}

- (void) setBankCode: (NSString *) bankCode {
  [bankCode retain_stub];
  [__bankCode release_stub];
  __bankCode = bankCode;
  __bankCode_isset = YES;
}

- (BOOL) bankCodeIsSet {
  return __bankCode_isset;
}

- (void) unsetBankCode {
  [__bankCode release_stub];
  __bankCode = nil;
  __bankCode_isset = NO;
}

- (NSString *) bankName {
  return [[__bankName retain_stub] autorelease_stub];
}

- (void) setBankName: (NSString *) bankName {
  [bankName retain_stub];
  [__bankName release_stub];
  __bankName = bankName;
  __bankName_isset = YES;
}

- (BOOL) bankNameIsSet {
  return __bankName_isset;
}

- (void) unsetBankName {
  [__bankName release_stub];
  __bankName = nil;
  __bankName_isset = NO;
}

- (NSString *) accountName {
  return [[__accountName retain_stub] autorelease_stub];
}

- (void) setAccountName: (NSString *) accountName {
  [accountName retain_stub];
  [__accountName release_stub];
  __accountName = accountName;
  __accountName_isset = YES;
}

- (BOOL) accountNameIsSet {
  return __accountName_isset;
}

- (void) unsetAccountName {
  [__accountName release_stub];
  __accountName = nil;
  __accountName_isset = NO;
}

- (NSString *) accountNumber {
  return [[__accountNumber retain_stub] autorelease_stub];
}

- (void) setAccountNumber: (NSString *) accountNumber {
  [accountNumber retain_stub];
  [__accountNumber release_stub];
  __accountNumber = accountNumber;
  __accountNumber_isset = YES;
}

- (BOOL) accountNumberIsSet {
  return __accountNumber_isset;
}

- (void) unsetAccountNumber {
  [__accountNumber release_stub];
  __accountNumber = nil;
  __accountNumber_isset = NO;
}

- (NSString *) telephone {
  return [[__telephone retain_stub] autorelease_stub];
}

- (void) setTelephone: (NSString *) telephone {
  [telephone retain_stub];
  [__telephone release_stub];
  __telephone = telephone;
  __telephone_isset = YES;
}

- (BOOL) telephoneIsSet {
  return __telephone_isset;
}

- (void) unsetTelephone {
  [__telephone release_stub];
  __telephone = nil;
  __telephone_isset = NO;
}

- (NSString *) txSnBinding {
  return [[__txSnBinding retain_stub] autorelease_stub];
}

- (void) setTxSnBinding: (NSString *) txSnBinding {
  [txSnBinding retain_stub];
  [__txSnBinding release_stub];
  __txSnBinding = txSnBinding;
  __txSnBinding_isset = YES;
}

- (BOOL) txSnBindingIsSet {
  return __txSnBinding_isset;
}

- (void) unsetTxSnBinding {
  [__txSnBinding release_stub];
  __txSnBinding = nil;
  __txSnBinding_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBankId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBankCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBankName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccountName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccountNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTelephone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTxSnBinding: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BindingDto"];
  if (__bankId_isset) {
    if (__bankId != nil) {
      [outProtocol writeFieldBeginWithName: @"bankId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __bankId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bankCode_isset) {
    if (__bankCode != nil) {
      [outProtocol writeFieldBeginWithName: @"bankCode" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __bankCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bankName_isset) {
    if (__bankName != nil) {
      [outProtocol writeFieldBeginWithName: @"bankName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __bankName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__accountName_isset) {
    if (__accountName != nil) {
      [outProtocol writeFieldBeginWithName: @"accountName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __accountName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__accountNumber_isset) {
    if (__accountNumber != nil) {
      [outProtocol writeFieldBeginWithName: @"accountNumber" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __accountNumber];
      [outProtocol writeFieldEnd];
    }
  }
  if (__telephone_isset) {
    if (__telephone != nil) {
      [outProtocol writeFieldBeginWithName: @"telephone" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __telephone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__txSnBinding_isset) {
    if (__txSnBinding != nil) {
      [outProtocol writeFieldBeginWithName: @"txSnBinding" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __txSnBinding];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFBindingDto("];
  [ms appendString: @"bankId:"];
  [ms appendFormat: @"\"%@\"", __bankId];
  [ms appendString: @",bankCode:"];
  [ms appendFormat: @"\"%@\"", __bankCode];
  [ms appendString: @",bankName:"];
  [ms appendFormat: @"\"%@\"", __bankName];
  [ms appendString: @",accountName:"];
  [ms appendFormat: @"\"%@\"", __accountName];
  [ms appendString: @",accountNumber:"];
  [ms appendFormat: @"\"%@\"", __accountNumber];
  [ms appendString: @",telephone:"];
  [ms appendFormat: @"\"%@\"", __telephone];
  [ms appendString: @",txSnBinding:"];
  [ms appendFormat: @"\"%@\"", __txSnBinding];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFOrderMerDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.orderPros = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithMerId: (int64_t) merId name: (NSString *) name abbrName: (NSString *) abbrName desc: (NSString *) desc orderStatus: (NSString *) orderStatus logiPrice: (NSString *) logiPrice price: (NSString *) price orderMerNo: (NSString *) orderMerNo merchantNos: (NSMutableArray *) merchantNos orderPros: (NSMutableArray *) orderPros
{
  self = [super init];
  __merId = merId;
  __merId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __abbrName = [abbrName retain_stub];
  __abbrName_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __orderStatus = [orderStatus retain_stub];
  __orderStatus_isset = YES;
  __logiPrice = [logiPrice retain_stub];
  __logiPrice_isset = YES;
  __price = [price retain_stub];
  __price_isset = YES;
  __orderMerNo = [orderMerNo retain_stub];
  __orderMerNo_isset = YES;
  __merchantNos = [merchantNos retain_stub];
  __merchantNos_isset = YES;
  __orderPros = [orderPros retain_stub];
  __orderPros_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"merId"])
  {
    __merId = [decoder decodeInt64ForKey: @"merId"];
    __merId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"abbrName"])
  {
    __abbrName = [[decoder decodeObjectForKey: @"abbrName"] retain_stub];
    __abbrName_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderStatus"])
  {
    __orderStatus = [[decoder decodeObjectForKey: @"orderStatus"] retain_stub];
    __orderStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"logiPrice"])
  {
    __logiPrice = [[decoder decodeObjectForKey: @"logiPrice"] retain_stub];
    __logiPrice_isset = YES;
  }
  if ([decoder containsValueForKey: @"price"])
  {
    __price = [[decoder decodeObjectForKey: @"price"] retain_stub];
    __price_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderMerNo"])
  {
    __orderMerNo = [[decoder decodeObjectForKey: @"orderMerNo"] retain_stub];
    __orderMerNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"merchantNos"])
  {
    __merchantNos = [[decoder decodeObjectForKey: @"merchantNos"] retain_stub];
    __merchantNos_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderPros"])
  {
    __orderPros = [[decoder decodeObjectForKey: @"orderPros"] retain_stub];
    __orderPros_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__merId_isset)
  {
    [encoder encodeInt64: __merId forKey: @"merId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__abbrName_isset)
  {
    [encoder encodeObject: __abbrName forKey: @"abbrName"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__orderStatus_isset)
  {
    [encoder encodeObject: __orderStatus forKey: @"orderStatus"];
  }
  if (__logiPrice_isset)
  {
    [encoder encodeObject: __logiPrice forKey: @"logiPrice"];
  }
  if (__price_isset)
  {
    [encoder encodeObject: __price forKey: @"price"];
  }
  if (__orderMerNo_isset)
  {
    [encoder encodeObject: __orderMerNo forKey: @"orderMerNo"];
  }
  if (__merchantNos_isset)
  {
    [encoder encodeObject: __merchantNos forKey: @"merchantNos"];
  }
  if (__orderPros_isset)
  {
    [encoder encodeObject: __orderPros forKey: @"orderPros"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __merId_isset ? 2654435761 : 0;
  if (__merId_isset)
  {
    hash = (hash * 31) ^ [@(__merId) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __abbrName_isset ? 2654435761 : 0;
  if (__abbrName_isset)
  {
    hash = (hash * 31) ^ [__abbrName hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __orderStatus_isset ? 2654435761 : 0;
  if (__orderStatus_isset)
  {
    hash = (hash * 31) ^ [__orderStatus hash];
  }
  hash = (hash * 31) ^ __logiPrice_isset ? 2654435761 : 0;
  if (__logiPrice_isset)
  {
    hash = (hash * 31) ^ [__logiPrice hash];
  }
  hash = (hash * 31) ^ __price_isset ? 2654435761 : 0;
  if (__price_isset)
  {
    hash = (hash * 31) ^ [__price hash];
  }
  hash = (hash * 31) ^ __orderMerNo_isset ? 2654435761 : 0;
  if (__orderMerNo_isset)
  {
    hash = (hash * 31) ^ [__orderMerNo hash];
  }
  hash = (hash * 31) ^ __merchantNos_isset ? 2654435761 : 0;
  if (__merchantNos_isset)
  {
    hash = (hash * 31) ^ [__merchantNos hash];
  }
  hash = (hash * 31) ^ __orderPros_isset ? 2654435761 : 0;
  if (__orderPros_isset)
  {
    hash = (hash * 31) ^ [__orderPros hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFOrderMerDto class]]) {
    return NO;
  }
  NMTFOrderMerDto *other = (NMTFOrderMerDto *)anObject;
  if ((__merId_isset != other->__merId_isset) ||
      (__merId_isset && (__merId != other->__merId))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__abbrName_isset != other->__abbrName_isset) ||
      (__abbrName_isset && ((__abbrName || other->__abbrName) && ![__abbrName isEqual:other->__abbrName]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__orderStatus_isset != other->__orderStatus_isset) ||
      (__orderStatus_isset && ((__orderStatus || other->__orderStatus) && ![__orderStatus isEqual:other->__orderStatus]))) {
    return NO;
  }
  if ((__logiPrice_isset != other->__logiPrice_isset) ||
      (__logiPrice_isset && ((__logiPrice || other->__logiPrice) && ![__logiPrice isEqual:other->__logiPrice]))) {
    return NO;
  }
  if ((__price_isset != other->__price_isset) ||
      (__price_isset && ((__price || other->__price) && ![__price isEqual:other->__price]))) {
    return NO;
  }
  if ((__orderMerNo_isset != other->__orderMerNo_isset) ||
      (__orderMerNo_isset && ((__orderMerNo || other->__orderMerNo) && ![__orderMerNo isEqual:other->__orderMerNo]))) {
    return NO;
  }
  if ((__merchantNos_isset != other->__merchantNos_isset) ||
      (__merchantNos_isset && ((__merchantNos || other->__merchantNos) && ![__merchantNos isEqual:other->__merchantNos]))) {
    return NO;
  }
  if ((__orderPros_isset != other->__orderPros_isset) ||
      (__orderPros_isset && ((__orderPros || other->__orderPros) && ![__orderPros isEqual:other->__orderPros]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [__abbrName release_stub];
  [__desc release_stub];
  [__orderStatus release_stub];
  [__logiPrice release_stub];
  [__price release_stub];
  [__orderMerNo release_stub];
  [__merchantNos release_stub];
  [__orderPros release_stub];
  [super dealloc_stub];
}

- (int64_t) merId {
  return __merId;
}

- (void) setMerId: (int64_t) merId {
  __merId = merId;
  __merId_isset = YES;
}

- (BOOL) merIdIsSet {
  return __merId_isset;
}

- (void) unsetMerId {
  __merId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) abbrName {
  return [[__abbrName retain_stub] autorelease_stub];
}

- (void) setAbbrName: (NSString *) abbrName {
  [abbrName retain_stub];
  [__abbrName release_stub];
  __abbrName = abbrName;
  __abbrName_isset = YES;
}

- (BOOL) abbrNameIsSet {
  return __abbrName_isset;
}

- (void) unsetAbbrName {
  [__abbrName release_stub];
  __abbrName = nil;
  __abbrName_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) orderStatus {
  return [[__orderStatus retain_stub] autorelease_stub];
}

- (void) setOrderStatus: (NSString *) orderStatus {
  [orderStatus retain_stub];
  [__orderStatus release_stub];
  __orderStatus = orderStatus;
  __orderStatus_isset = YES;
}

- (BOOL) orderStatusIsSet {
  return __orderStatus_isset;
}

- (void) unsetOrderStatus {
  [__orderStatus release_stub];
  __orderStatus = nil;
  __orderStatus_isset = NO;
}

- (NSString *) logiPrice {
  return [[__logiPrice retain_stub] autorelease_stub];
}

- (void) setLogiPrice: (NSString *) logiPrice {
  [logiPrice retain_stub];
  [__logiPrice release_stub];
  __logiPrice = logiPrice;
  __logiPrice_isset = YES;
}

- (BOOL) logiPriceIsSet {
  return __logiPrice_isset;
}

- (void) unsetLogiPrice {
  [__logiPrice release_stub];
  __logiPrice = nil;
  __logiPrice_isset = NO;
}

- (NSString *) price {
  return [[__price retain_stub] autorelease_stub];
}

- (void) setPrice: (NSString *) price {
  [price retain_stub];
  [__price release_stub];
  __price = price;
  __price_isset = YES;
}

- (BOOL) priceIsSet {
  return __price_isset;
}

- (void) unsetPrice {
  [__price release_stub];
  __price = nil;
  __price_isset = NO;
}

- (NSString *) orderMerNo {
  return [[__orderMerNo retain_stub] autorelease_stub];
}

- (void) setOrderMerNo: (NSString *) orderMerNo {
  [orderMerNo retain_stub];
  [__orderMerNo release_stub];
  __orderMerNo = orderMerNo;
  __orderMerNo_isset = YES;
}

- (BOOL) orderMerNoIsSet {
  return __orderMerNo_isset;
}

- (void) unsetOrderMerNo {
  [__orderMerNo release_stub];
  __orderMerNo = nil;
  __orderMerNo_isset = NO;
}

- (NSMutableArray *) merchantNos {
  return [[__merchantNos retain_stub] autorelease_stub];
}

- (void) setMerchantNos: (NSMutableArray *) merchantNos {
  [merchantNos retain_stub];
  [__merchantNos release_stub];
  __merchantNos = merchantNos;
  __merchantNos_isset = YES;
}

- (BOOL) merchantNosIsSet {
  return __merchantNos_isset;
}

- (void) unsetMerchantNos {
  [__merchantNos release_stub];
  __merchantNos = nil;
  __merchantNos_isset = NO;
}

- (NSMutableArray *) orderPros {
  return [[__orderPros retain_stub] autorelease_stub];
}

- (void) setOrderPros: (NSMutableArray *) orderPros {
  [orderPros retain_stub];
  [__orderPros release_stub];
  __orderPros = orderPros;
  __orderPros_isset = YES;
}

- (BOOL) orderProsIsSet {
  return __orderPros_isset;
}

- (void) unsetOrderPros {
  [__orderPros release_stub];
  __orderPros = nil;
  __orderPros_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAbbrName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLogiPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderMerNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_LIST) {
          int _size25;
          [inProtocol readListBeginReturningElementType: NULL size: &_size25];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            NSString * _elem27 = [inProtocol readString];
            [fieldValue addObject: _elem27];
          }
          [inProtocol readListEnd];
          [self setMerchantNos: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_LIST) {
          int _size28;
          [inProtocol readListBeginReturningElementType: NULL size: &_size28];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size28];
          int _i29;
          for (_i29 = 0; _i29 < _size28; ++_i29)
          {
            NMTFOrderProDto *_elem30 = [[NMTFOrderProDto alloc] init];
            [_elem30 read: inProtocol];
            [fieldValue addObject: _elem30];
            [_elem30 release_stub];
          }
          [inProtocol readListEnd];
          [self setOrderPros: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OrderMerDto"];
  if (__merId_isset) {
    [outProtocol writeFieldBeginWithName: @"merId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __merId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__abbrName_isset) {
    if (__abbrName != nil) {
      [outProtocol writeFieldBeginWithName: @"abbrName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __abbrName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderStatus_isset) {
    if (__orderStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"orderStatus" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __orderStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__logiPrice_isset) {
    if (__logiPrice != nil) {
      [outProtocol writeFieldBeginWithName: @"logiPrice" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __logiPrice];
      [outProtocol writeFieldEnd];
    }
  }
  if (__price_isset) {
    if (__price != nil) {
      [outProtocol writeFieldBeginWithName: @"price" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __price];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderMerNo_isset) {
    if (__orderMerNo != nil) {
      [outProtocol writeFieldBeginWithName: @"orderMerNo" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __orderMerNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__merchantNos_isset) {
    if (__merchantNos != nil) {
      [outProtocol writeFieldBeginWithName: @"merchantNos" type: TType_LIST fieldID: 9];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__merchantNos count]];
        int idx32;
        for (idx32 = 0; idx32 < [__merchantNos count]; idx32++)
        {
          [outProtocol writeString: [__merchantNos objectAtIndex: idx32]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderPros_isset) {
    if (__orderPros != nil) {
      [outProtocol writeFieldBeginWithName: @"orderPros" type: TType_LIST fieldID: 10];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__orderPros count]];
        int idx34;
        for (idx34 = 0; idx34 < [__orderPros count]; idx34++)
        {
          [[__orderPros objectAtIndex: idx34] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFOrderMerDto("];
  [ms appendString: @"merId:"];
  [ms appendFormat: @"%qi", __merId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",abbrName:"];
  [ms appendFormat: @"\"%@\"", __abbrName];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",orderStatus:"];
  [ms appendFormat: @"\"%@\"", __orderStatus];
  [ms appendString: @",logiPrice:"];
  [ms appendFormat: @"\"%@\"", __logiPrice];
  [ms appendString: @",price:"];
  [ms appendFormat: @"\"%@\"", __price];
  [ms appendString: @",orderMerNo:"];
  [ms appendFormat: @"\"%@\"", __orderMerNo];
  [ms appendString: @",merchantNos:"];
  [ms appendFormat: @"%@", __merchantNos];
  [ms appendString: @",orderPros:"];
  [ms appendFormat: @"%@", __orderPros];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFOrderProDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithProId: (int64_t) proId name: (NSString *) name abbrName: (NSString *) abbrName desc: (NSString *) desc price: (NSString *) price origPrice: (NSString *) origPrice proNum: (int32_t) proNum imageUrl: (NSString *) imageUrl
{
  self = [super init];
  __proId = proId;
  __proId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __abbrName = [abbrName retain_stub];
  __abbrName_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __price = [price retain_stub];
  __price_isset = YES;
  __origPrice = [origPrice retain_stub];
  __origPrice_isset = YES;
  __proNum = proNum;
  __proNum_isset = YES;
  __imageUrl = [imageUrl retain_stub];
  __imageUrl_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"proId"])
  {
    __proId = [decoder decodeInt64ForKey: @"proId"];
    __proId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"abbrName"])
  {
    __abbrName = [[decoder decodeObjectForKey: @"abbrName"] retain_stub];
    __abbrName_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"price"])
  {
    __price = [[decoder decodeObjectForKey: @"price"] retain_stub];
    __price_isset = YES;
  }
  if ([decoder containsValueForKey: @"origPrice"])
  {
    __origPrice = [[decoder decodeObjectForKey: @"origPrice"] retain_stub];
    __origPrice_isset = YES;
  }
  if ([decoder containsValueForKey: @"proNum"])
  {
    __proNum = [decoder decodeInt32ForKey: @"proNum"];
    __proNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"imageUrl"])
  {
    __imageUrl = [[decoder decodeObjectForKey: @"imageUrl"] retain_stub];
    __imageUrl_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__proId_isset)
  {
    [encoder encodeInt64: __proId forKey: @"proId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__abbrName_isset)
  {
    [encoder encodeObject: __abbrName forKey: @"abbrName"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__price_isset)
  {
    [encoder encodeObject: __price forKey: @"price"];
  }
  if (__origPrice_isset)
  {
    [encoder encodeObject: __origPrice forKey: @"origPrice"];
  }
  if (__proNum_isset)
  {
    [encoder encodeInt32: __proNum forKey: @"proNum"];
  }
  if (__imageUrl_isset)
  {
    [encoder encodeObject: __imageUrl forKey: @"imageUrl"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __proId_isset ? 2654435761 : 0;
  if (__proId_isset)
  {
    hash = (hash * 31) ^ [@(__proId) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __abbrName_isset ? 2654435761 : 0;
  if (__abbrName_isset)
  {
    hash = (hash * 31) ^ [__abbrName hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __price_isset ? 2654435761 : 0;
  if (__price_isset)
  {
    hash = (hash * 31) ^ [__price hash];
  }
  hash = (hash * 31) ^ __origPrice_isset ? 2654435761 : 0;
  if (__origPrice_isset)
  {
    hash = (hash * 31) ^ [__origPrice hash];
  }
  hash = (hash * 31) ^ __proNum_isset ? 2654435761 : 0;
  if (__proNum_isset)
  {
    hash = (hash * 31) ^ [@(__proNum) hash];
  }
  hash = (hash * 31) ^ __imageUrl_isset ? 2654435761 : 0;
  if (__imageUrl_isset)
  {
    hash = (hash * 31) ^ [__imageUrl hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFOrderProDto class]]) {
    return NO;
  }
  NMTFOrderProDto *other = (NMTFOrderProDto *)anObject;
  if ((__proId_isset != other->__proId_isset) ||
      (__proId_isset && (__proId != other->__proId))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__abbrName_isset != other->__abbrName_isset) ||
      (__abbrName_isset && ((__abbrName || other->__abbrName) && ![__abbrName isEqual:other->__abbrName]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__price_isset != other->__price_isset) ||
      (__price_isset && ((__price || other->__price) && ![__price isEqual:other->__price]))) {
    return NO;
  }
  if ((__origPrice_isset != other->__origPrice_isset) ||
      (__origPrice_isset && ((__origPrice || other->__origPrice) && ![__origPrice isEqual:other->__origPrice]))) {
    return NO;
  }
  if ((__proNum_isset != other->__proNum_isset) ||
      (__proNum_isset && (__proNum != other->__proNum))) {
    return NO;
  }
  if ((__imageUrl_isset != other->__imageUrl_isset) ||
      (__imageUrl_isset && ((__imageUrl || other->__imageUrl) && ![__imageUrl isEqual:other->__imageUrl]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [__abbrName release_stub];
  [__desc release_stub];
  [__price release_stub];
  [__origPrice release_stub];
  [__imageUrl release_stub];
  [super dealloc_stub];
}

- (int64_t) proId {
  return __proId;
}

- (void) setProId: (int64_t) proId {
  __proId = proId;
  __proId_isset = YES;
}

- (BOOL) proIdIsSet {
  return __proId_isset;
}

- (void) unsetProId {
  __proId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) abbrName {
  return [[__abbrName retain_stub] autorelease_stub];
}

- (void) setAbbrName: (NSString *) abbrName {
  [abbrName retain_stub];
  [__abbrName release_stub];
  __abbrName = abbrName;
  __abbrName_isset = YES;
}

- (BOOL) abbrNameIsSet {
  return __abbrName_isset;
}

- (void) unsetAbbrName {
  [__abbrName release_stub];
  __abbrName = nil;
  __abbrName_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) price {
  return [[__price retain_stub] autorelease_stub];
}

- (void) setPrice: (NSString *) price {
  [price retain_stub];
  [__price release_stub];
  __price = price;
  __price_isset = YES;
}

- (BOOL) priceIsSet {
  return __price_isset;
}

- (void) unsetPrice {
  [__price release_stub];
  __price = nil;
  __price_isset = NO;
}

- (NSString *) origPrice {
  return [[__origPrice retain_stub] autorelease_stub];
}

- (void) setOrigPrice: (NSString *) origPrice {
  [origPrice retain_stub];
  [__origPrice release_stub];
  __origPrice = origPrice;
  __origPrice_isset = YES;
}

- (BOOL) origPriceIsSet {
  return __origPrice_isset;
}

- (void) unsetOrigPrice {
  [__origPrice release_stub];
  __origPrice = nil;
  __origPrice_isset = NO;
}

- (int32_t) proNum {
  return __proNum;
}

- (void) setProNum: (int32_t) proNum {
  __proNum = proNum;
  __proNum_isset = YES;
}

- (BOOL) proNumIsSet {
  return __proNum_isset;
}

- (void) unsetProNum {
  __proNum_isset = NO;
}

- (NSString *) imageUrl {
  return [[__imageUrl retain_stub] autorelease_stub];
}

- (void) setImageUrl: (NSString *) imageUrl {
  [imageUrl retain_stub];
  [__imageUrl release_stub];
  __imageUrl = imageUrl;
  __imageUrl_isset = YES;
}

- (BOOL) imageUrlIsSet {
  return __imageUrl_isset;
}

- (void) unsetImageUrl {
  [__imageUrl release_stub];
  __imageUrl = nil;
  __imageUrl_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setProId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAbbrName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrigPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setProNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImageUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OrderProDto"];
  if (__proId_isset) {
    [outProtocol writeFieldBeginWithName: @"proId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __proId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__abbrName_isset) {
    if (__abbrName != nil) {
      [outProtocol writeFieldBeginWithName: @"abbrName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __abbrName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__price_isset) {
    if (__price != nil) {
      [outProtocol writeFieldBeginWithName: @"price" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __price];
      [outProtocol writeFieldEnd];
    }
  }
  if (__origPrice_isset) {
    if (__origPrice != nil) {
      [outProtocol writeFieldBeginWithName: @"origPrice" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __origPrice];
      [outProtocol writeFieldEnd];
    }
  }
  if (__proNum_isset) {
    [outProtocol writeFieldBeginWithName: @"proNum" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __proNum];
    [outProtocol writeFieldEnd];
  }
  if (__imageUrl_isset) {
    if (__imageUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"imageUrl" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __imageUrl];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFOrderProDto("];
  [ms appendString: @"proId:"];
  [ms appendFormat: @"%qi", __proId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",abbrName:"];
  [ms appendFormat: @"\"%@\"", __abbrName];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",price:"];
  [ms appendFormat: @"\"%@\"", __price];
  [ms appendString: @",origPrice:"];
  [ms appendFormat: @"\"%@\"", __origPrice];
  [ms appendString: @",proNum:"];
  [ms appendFormat: @"%i", __proNum];
  [ms appendString: @",imageUrl:"];
  [ms appendFormat: @"\"%@\"", __imageUrl];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFOrderMerProsDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.orderPros = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithMerId: (int64_t) merId name: (NSString *) name logiPrice: (NSString *) logiPrice price: (NSString *) price orderPros: (NSMutableArray *) orderPros
{
  self = [super init];
  __merId = merId;
  __merId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __logiPrice = [logiPrice retain_stub];
  __logiPrice_isset = YES;
  __price = [price retain_stub];
  __price_isset = YES;
  __orderPros = [orderPros retain_stub];
  __orderPros_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"merId"])
  {
    __merId = [decoder decodeInt64ForKey: @"merId"];
    __merId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"logiPrice"])
  {
    __logiPrice = [[decoder decodeObjectForKey: @"logiPrice"] retain_stub];
    __logiPrice_isset = YES;
  }
  if ([decoder containsValueForKey: @"price"])
  {
    __price = [[decoder decodeObjectForKey: @"price"] retain_stub];
    __price_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderPros"])
  {
    __orderPros = [[decoder decodeObjectForKey: @"orderPros"] retain_stub];
    __orderPros_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__merId_isset)
  {
    [encoder encodeInt64: __merId forKey: @"merId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__logiPrice_isset)
  {
    [encoder encodeObject: __logiPrice forKey: @"logiPrice"];
  }
  if (__price_isset)
  {
    [encoder encodeObject: __price forKey: @"price"];
  }
  if (__orderPros_isset)
  {
    [encoder encodeObject: __orderPros forKey: @"orderPros"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __merId_isset ? 2654435761 : 0;
  if (__merId_isset)
  {
    hash = (hash * 31) ^ [@(__merId) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __logiPrice_isset ? 2654435761 : 0;
  if (__logiPrice_isset)
  {
    hash = (hash * 31) ^ [__logiPrice hash];
  }
  hash = (hash * 31) ^ __price_isset ? 2654435761 : 0;
  if (__price_isset)
  {
    hash = (hash * 31) ^ [__price hash];
  }
  hash = (hash * 31) ^ __orderPros_isset ? 2654435761 : 0;
  if (__orderPros_isset)
  {
    hash = (hash * 31) ^ [__orderPros hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFOrderMerProsDto class]]) {
    return NO;
  }
  NMTFOrderMerProsDto *other = (NMTFOrderMerProsDto *)anObject;
  if ((__merId_isset != other->__merId_isset) ||
      (__merId_isset && (__merId != other->__merId))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__logiPrice_isset != other->__logiPrice_isset) ||
      (__logiPrice_isset && ((__logiPrice || other->__logiPrice) && ![__logiPrice isEqual:other->__logiPrice]))) {
    return NO;
  }
  if ((__price_isset != other->__price_isset) ||
      (__price_isset && ((__price || other->__price) && ![__price isEqual:other->__price]))) {
    return NO;
  }
  if ((__orderPros_isset != other->__orderPros_isset) ||
      (__orderPros_isset && ((__orderPros || other->__orderPros) && ![__orderPros isEqual:other->__orderPros]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [__logiPrice release_stub];
  [__price release_stub];
  [__orderPros release_stub];
  [super dealloc_stub];
}

- (int64_t) merId {
  return __merId;
}

- (void) setMerId: (int64_t) merId {
  __merId = merId;
  __merId_isset = YES;
}

- (BOOL) merIdIsSet {
  return __merId_isset;
}

- (void) unsetMerId {
  __merId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) logiPrice {
  return [[__logiPrice retain_stub] autorelease_stub];
}

- (void) setLogiPrice: (NSString *) logiPrice {
  [logiPrice retain_stub];
  [__logiPrice release_stub];
  __logiPrice = logiPrice;
  __logiPrice_isset = YES;
}

- (BOOL) logiPriceIsSet {
  return __logiPrice_isset;
}

- (void) unsetLogiPrice {
  [__logiPrice release_stub];
  __logiPrice = nil;
  __logiPrice_isset = NO;
}

- (NSString *) price {
  return [[__price retain_stub] autorelease_stub];
}

- (void) setPrice: (NSString *) price {
  [price retain_stub];
  [__price release_stub];
  __price = price;
  __price_isset = YES;
}

- (BOOL) priceIsSet {
  return __price_isset;
}

- (void) unsetPrice {
  [__price release_stub];
  __price = nil;
  __price_isset = NO;
}

- (NSMutableArray *) orderPros {
  return [[__orderPros retain_stub] autorelease_stub];
}

- (void) setOrderPros: (NSMutableArray *) orderPros {
  [orderPros retain_stub];
  [__orderPros release_stub];
  __orderPros = orderPros;
  __orderPros_isset = YES;
}

- (BOOL) orderProsIsSet {
  return __orderPros_isset;
}

- (void) unsetOrderPros {
  [__orderPros release_stub];
  __orderPros = nil;
  __orderPros_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLogiPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size35;
          [inProtocol readListBeginReturningElementType: NULL size: &_size35];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size35];
          int _i36;
          for (_i36 = 0; _i36 < _size35; ++_i36)
          {
            NMTFOrderProDto *_elem37 = [[NMTFOrderProDto alloc] init];
            [_elem37 read: inProtocol];
            [fieldValue addObject: _elem37];
            [_elem37 release_stub];
          }
          [inProtocol readListEnd];
          [self setOrderPros: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OrderMerProsDto"];
  if (__merId_isset) {
    [outProtocol writeFieldBeginWithName: @"merId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __merId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__logiPrice_isset) {
    if (__logiPrice != nil) {
      [outProtocol writeFieldBeginWithName: @"logiPrice" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __logiPrice];
      [outProtocol writeFieldEnd];
    }
  }
  if (__price_isset) {
    if (__price != nil) {
      [outProtocol writeFieldBeginWithName: @"price" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __price];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderPros_isset) {
    if (__orderPros != nil) {
      [outProtocol writeFieldBeginWithName: @"orderPros" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__orderPros count]];
        int idx39;
        for (idx39 = 0; idx39 < [__orderPros count]; idx39++)
        {
          [[__orderPros objectAtIndex: idx39] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFOrderMerProsDto("];
  [ms appendString: @"merId:"];
  [ms appendFormat: @"%qi", __merId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",logiPrice:"];
  [ms appendFormat: @"\"%@\"", __logiPrice];
  [ms appendString: @",price:"];
  [ms appendFormat: @"\"%@\"", __price];
  [ms appendString: @",orderPros:"];
  [ms appendFormat: @"%@", __orderPros];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFBankDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBankId: (NSString *) bankId bankCode: (NSString *) bankCode bankName: (NSString *) bankName
{
  self = [super init];
  __bankId = [bankId retain_stub];
  __bankId_isset = YES;
  __bankCode = [bankCode retain_stub];
  __bankCode_isset = YES;
  __bankName = [bankName retain_stub];
  __bankName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"bankId"])
  {
    __bankId = [[decoder decodeObjectForKey: @"bankId"] retain_stub];
    __bankId_isset = YES;
  }
  if ([decoder containsValueForKey: @"bankCode"])
  {
    __bankCode = [[decoder decodeObjectForKey: @"bankCode"] retain_stub];
    __bankCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"bankName"])
  {
    __bankName = [[decoder decodeObjectForKey: @"bankName"] retain_stub];
    __bankName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__bankId_isset)
  {
    [encoder encodeObject: __bankId forKey: @"bankId"];
  }
  if (__bankCode_isset)
  {
    [encoder encodeObject: __bankCode forKey: @"bankCode"];
  }
  if (__bankName_isset)
  {
    [encoder encodeObject: __bankName forKey: @"bankName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __bankId_isset ? 2654435761 : 0;
  if (__bankId_isset)
  {
    hash = (hash * 31) ^ [__bankId hash];
  }
  hash = (hash * 31) ^ __bankCode_isset ? 2654435761 : 0;
  if (__bankCode_isset)
  {
    hash = (hash * 31) ^ [__bankCode hash];
  }
  hash = (hash * 31) ^ __bankName_isset ? 2654435761 : 0;
  if (__bankName_isset)
  {
    hash = (hash * 31) ^ [__bankName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFBankDto class]]) {
    return NO;
  }
  NMTFBankDto *other = (NMTFBankDto *)anObject;
  if ((__bankId_isset != other->__bankId_isset) ||
      (__bankId_isset && ((__bankId || other->__bankId) && ![__bankId isEqual:other->__bankId]))) {
    return NO;
  }
  if ((__bankCode_isset != other->__bankCode_isset) ||
      (__bankCode_isset && ((__bankCode || other->__bankCode) && ![__bankCode isEqual:other->__bankCode]))) {
    return NO;
  }
  if ((__bankName_isset != other->__bankName_isset) ||
      (__bankName_isset && ((__bankName || other->__bankName) && ![__bankName isEqual:other->__bankName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__bankId release_stub];
  [__bankCode release_stub];
  [__bankName release_stub];
  [super dealloc_stub];
}

- (NSString *) bankId {
  return [[__bankId retain_stub] autorelease_stub];
}

- (void) setBankId: (NSString *) bankId {
  [bankId retain_stub];
  [__bankId release_stub];
  __bankId = bankId;
  __bankId_isset = YES;
}

- (BOOL) bankIdIsSet {
  return __bankId_isset;
}

- (void) unsetBankId {
  [__bankId release_stub];
  __bankId = nil;
  __bankId_isset = NO;
}

- (NSString *) bankCode {
  return [[__bankCode retain_stub] autorelease_stub];
}

- (void) setBankCode: (NSString *) bankCode {
  [bankCode retain_stub];
  [__bankCode release_stub];
  __bankCode = bankCode;
  __bankCode_isset = YES;
}

- (BOOL) bankCodeIsSet {
  return __bankCode_isset;
}

- (void) unsetBankCode {
  [__bankCode release_stub];
  __bankCode = nil;
  __bankCode_isset = NO;
}

- (NSString *) bankName {
  return [[__bankName retain_stub] autorelease_stub];
}

- (void) setBankName: (NSString *) bankName {
  [bankName retain_stub];
  [__bankName release_stub];
  __bankName = bankName;
  __bankName_isset = YES;
}

- (BOOL) bankNameIsSet {
  return __bankName_isset;
}

- (void) unsetBankName {
  [__bankName release_stub];
  __bankName = nil;
  __bankName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBankId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBankCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBankName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BankDto"];
  if (__bankId_isset) {
    if (__bankId != nil) {
      [outProtocol writeFieldBeginWithName: @"bankId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __bankId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bankCode_isset) {
    if (__bankCode != nil) {
      [outProtocol writeFieldBeginWithName: @"bankCode" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __bankCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bankName_isset) {
    if (__bankName != nil) {
      [outProtocol writeFieldBeginWithName: @"bankName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __bankName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFBankDto("];
  [ms appendString: @"bankId:"];
  [ms appendFormat: @"\"%@\"", __bankId];
  [ms appendString: @",bankCode:"];
  [ms appendFormat: @"\"%@\"", __bankCode];
  [ms appendString: @",bankName:"];
  [ms appendFormat: @"\"%@\"", __bankName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation NMTFMtRespDtoConstants
+ (void) initialize {
}
@end

