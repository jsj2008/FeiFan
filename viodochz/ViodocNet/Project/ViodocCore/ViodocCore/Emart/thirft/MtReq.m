/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "MtBase.h"

#import "MtReq.h"

@implementation NMTFGetMtBannersReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtBannersReq class]]) {
    return NO;
  }
  NMTFGetMtBannersReq *other = (NMTFGetMtBannersReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtBannersReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtBannersReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtProCatsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtProCatsReq class]]) {
    return NO;
  }
  NMTFGetMtProCatsReq *other = (NMTFGetMtProCatsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtProCatsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtProCatsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtMersReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header page: (NMTFPage *) page merType: (NSString *) merType
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __merType = [merType retain_stub];
  __merType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"merType"])
  {
    __merType = [[decoder decodeObjectForKey: @"merType"] retain_stub];
    __merType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__merType_isset)
  {
    [encoder encodeObject: __merType forKey: @"merType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __merType_isset ? 2654435761 : 0;
  if (__merType_isset)
  {
    hash = (hash * 31) ^ [__merType hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtMersReq class]]) {
    return NO;
  }
  NMTFGetMtMersReq *other = (NMTFGetMtMersReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__merType_isset != other->__merType_isset) ||
      (__merType_isset && ((__merType || other->__merType) && ![__merType isEqual:other->__merType]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__merType release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NMTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NMTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSString *) merType {
  return [[__merType retain_stub] autorelease_stub];
}

- (void) setMerType: (NSString *) merType {
  [merType retain_stub];
  [__merType release_stub];
  __merType = merType;
  __merType_isset = YES;
}

- (BOOL) merTypeIsSet {
  return __merType_isset;
}

- (void) unsetMerType {
  [__merType release_stub];
  __merType = nil;
  __merType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NMTFPage *fieldValue = [[NMTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMerType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtMersReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__merType_isset) {
    if (__merType != nil) {
      [outProtocol writeFieldBeginWithName: @"merType" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __merType];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtMersReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",merType:"];
  [ms appendFormat: @"\"%@\"", __merType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtMerInfoReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header merId: (int64_t) merId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __merId = merId;
  __merId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"merId"])
  {
    __merId = [decoder decodeInt64ForKey: @"merId"];
    __merId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__merId_isset)
  {
    [encoder encodeInt64: __merId forKey: @"merId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __merId_isset ? 2654435761 : 0;
  if (__merId_isset)
  {
    hash = (hash * 31) ^ [@(__merId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtMerInfoReq class]]) {
    return NO;
  }
  NMTFGetMtMerInfoReq *other = (NMTFGetMtMerInfoReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__merId_isset != other->__merId_isset) ||
      (__merId_isset && (__merId != other->__merId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) merId {
  return __merId;
}

- (void) setMerId: (int64_t) merId {
  __merId = merId;
  __merId_isset = YES;
}

- (BOOL) merIdIsSet {
  return __merId_isset;
}

- (void) unsetMerId {
  __merId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtMerInfoReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__merId_isset) {
    [outProtocol writeFieldBeginWithName: @"merId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __merId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtMerInfoReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",merId:"];
  [ms appendFormat: @"%qi", __merId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtMerStoresReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header page: (NMTFPage *) page merId: (int64_t) merId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __merId = merId;
  __merId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"merId"])
  {
    __merId = [decoder decodeInt64ForKey: @"merId"];
    __merId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__merId_isset)
  {
    [encoder encodeInt64: __merId forKey: @"merId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __merId_isset ? 2654435761 : 0;
  if (__merId_isset)
  {
    hash = (hash * 31) ^ [@(__merId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtMerStoresReq class]]) {
    return NO;
  }
  NMTFGetMtMerStoresReq *other = (NMTFGetMtMerStoresReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__merId_isset != other->__merId_isset) ||
      (__merId_isset && (__merId != other->__merId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NMTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NMTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (int64_t) merId {
  return __merId;
}

- (void) setMerId: (int64_t) merId {
  __merId = merId;
  __merId_isset = YES;
}

- (BOOL) merIdIsSet {
  return __merId_isset;
}

- (void) unsetMerId {
  __merId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NMTFPage *fieldValue = [[NMTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtMerStoresReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__merId_isset) {
    [outProtocol writeFieldBeginWithName: @"merId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __merId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtMerStoresReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",merId:"];
  [ms appendFormat: @"%qi", __merId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtProsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header page: (NMTFPage *) page proType: (int32_t) proType merId: (int64_t) merId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __proType = proType;
  __proType_isset = YES;
  __merId = merId;
  __merId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"proType"])
  {
    __proType = [decoder decodeInt32ForKey: @"proType"];
    __proType_isset = YES;
  }
  if ([decoder containsValueForKey: @"merId"])
  {
    __merId = [decoder decodeInt64ForKey: @"merId"];
    __merId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__proType_isset)
  {
    [encoder encodeInt32: __proType forKey: @"proType"];
  }
  if (__merId_isset)
  {
    [encoder encodeInt64: __merId forKey: @"merId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __proType_isset ? 2654435761 : 0;
  if (__proType_isset)
  {
    hash = (hash * 31) ^ [@(__proType) hash];
  }
  hash = (hash * 31) ^ __merId_isset ? 2654435761 : 0;
  if (__merId_isset)
  {
    hash = (hash * 31) ^ [@(__merId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtProsReq class]]) {
    return NO;
  }
  NMTFGetMtProsReq *other = (NMTFGetMtProsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__proType_isset != other->__proType_isset) ||
      (__proType_isset && (__proType != other->__proType))) {
    return NO;
  }
  if ((__merId_isset != other->__merId_isset) ||
      (__merId_isset && (__merId != other->__merId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NMTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NMTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (int32_t) proType {
  return __proType;
}

- (void) setProType: (int32_t) proType {
  __proType = proType;
  __proType_isset = YES;
}

- (BOOL) proTypeIsSet {
  return __proType_isset;
}

- (void) unsetProType {
  __proType_isset = NO;
}

- (int64_t) merId {
  return __merId;
}

- (void) setMerId: (int64_t) merId {
  __merId = merId;
  __merId_isset = YES;
}

- (BOOL) merIdIsSet {
  return __merId_isset;
}

- (void) unsetMerId {
  __merId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NMTFPage *fieldValue = [[NMTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setProType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtProsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__proType_isset) {
    [outProtocol writeFieldBeginWithName: @"proType" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __proType];
    [outProtocol writeFieldEnd];
  }
  if (__merId_isset) {
    [outProtocol writeFieldBeginWithName: @"merId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __merId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtProsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",proType:"];
  [ms appendFormat: @"%i", __proType];
  [ms appendString: @",merId:"];
  [ms appendFormat: @"%qi", __merId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtProInfoReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header proId: (int64_t) proId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __proId = proId;
  __proId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"proId"])
  {
    __proId = [decoder decodeInt64ForKey: @"proId"];
    __proId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__proId_isset)
  {
    [encoder encodeInt64: __proId forKey: @"proId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __proId_isset ? 2654435761 : 0;
  if (__proId_isset)
  {
    hash = (hash * 31) ^ [@(__proId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtProInfoReq class]]) {
    return NO;
  }
  NMTFGetMtProInfoReq *other = (NMTFGetMtProInfoReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__proId_isset != other->__proId_isset) ||
      (__proId_isset && (__proId != other->__proId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) proId {
  return __proId;
}

- (void) setProId: (int64_t) proId {
  __proId = proId;
  __proId_isset = YES;
}

- (BOOL) proIdIsSet {
  return __proId_isset;
}

- (void) unsetProId {
  __proId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setProId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtProInfoReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__proId_isset) {
    [outProtocol writeFieldBeginWithName: @"proId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __proId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtProInfoReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",proId:"];
  [ms appendFormat: @"%qi", __proId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFFindMtMerProsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header page: (NMTFPage *) page keyword: (NSString *) keyword
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __keyword = [keyword retain_stub];
  __keyword_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"keyword"])
  {
    __keyword = [[decoder decodeObjectForKey: @"keyword"] retain_stub];
    __keyword_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__keyword_isset)
  {
    [encoder encodeObject: __keyword forKey: @"keyword"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __keyword_isset ? 2654435761 : 0;
  if (__keyword_isset)
  {
    hash = (hash * 31) ^ [__keyword hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFFindMtMerProsReq class]]) {
    return NO;
  }
  NMTFFindMtMerProsReq *other = (NMTFFindMtMerProsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__keyword_isset != other->__keyword_isset) ||
      (__keyword_isset && ((__keyword || other->__keyword) && ![__keyword isEqual:other->__keyword]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__keyword release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NMTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NMTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSString *) keyword {
  return [[__keyword retain_stub] autorelease_stub];
}

- (void) setKeyword: (NSString *) keyword {
  [keyword retain_stub];
  [__keyword release_stub];
  __keyword = keyword;
  __keyword_isset = YES;
}

- (BOOL) keywordIsSet {
  return __keyword_isset;
}

- (void) unsetKeyword {
  [__keyword release_stub];
  __keyword = nil;
  __keyword_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NMTFPage *fieldValue = [[NMTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setKeyword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FindMtMerProsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__keyword_isset) {
    if (__keyword != nil) {
      [outProtocol writeFieldBeginWithName: @"keyword" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __keyword];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFFindMtMerProsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",keyword:"];
  [ms appendFormat: @"\"%@\"", __keyword];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtShipAddsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header page: (NMTFPage *) page isDefault: (int32_t) isDefault
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __isDefault = isDefault;
  __isDefault_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"isDefault"])
  {
    __isDefault = [decoder decodeInt32ForKey: @"isDefault"];
    __isDefault_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__isDefault_isset)
  {
    [encoder encodeInt32: __isDefault forKey: @"isDefault"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __isDefault_isset ? 2654435761 : 0;
  if (__isDefault_isset)
  {
    hash = (hash * 31) ^ [@(__isDefault) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtShipAddsReq class]]) {
    return NO;
  }
  NMTFGetMtShipAddsReq *other = (NMTFGetMtShipAddsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__isDefault_isset != other->__isDefault_isset) ||
      (__isDefault_isset && (__isDefault != other->__isDefault))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NMTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NMTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (int32_t) isDefault {
  return __isDefault;
}

- (void) setIsDefault: (int32_t) isDefault {
  __isDefault = isDefault;
  __isDefault_isset = YES;
}

- (BOOL) isDefaultIsSet {
  return __isDefault_isset;
}

- (void) unsetIsDefault {
  __isDefault_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NMTFPage *fieldValue = [[NMTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsDefault: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtShipAddsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isDefault_isset) {
    [outProtocol writeFieldBeginWithName: @"isDefault" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __isDefault];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtShipAddsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",isDefault:"];
  [ms appendFormat: @"%i", __isDefault];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFEditMtShipAddReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header editType: (int32_t) editType addId: (int64_t) addId consignee: (NSString *) consignee telephone: (NSString *) telephone district: (NSString *) district detail: (NSString *) detail isDefault: (int32_t) isDefault
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __editType = editType;
  __editType_isset = YES;
  __addId = addId;
  __addId_isset = YES;
  __consignee = [consignee retain_stub];
  __consignee_isset = YES;
  __telephone = [telephone retain_stub];
  __telephone_isset = YES;
  __district = [district retain_stub];
  __district_isset = YES;
  __detail = [detail retain_stub];
  __detail_isset = YES;
  __isDefault = isDefault;
  __isDefault_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"editType"])
  {
    __editType = [decoder decodeInt32ForKey: @"editType"];
    __editType_isset = YES;
  }
  if ([decoder containsValueForKey: @"addId"])
  {
    __addId = [decoder decodeInt64ForKey: @"addId"];
    __addId_isset = YES;
  }
  if ([decoder containsValueForKey: @"consignee"])
  {
    __consignee = [[decoder decodeObjectForKey: @"consignee"] retain_stub];
    __consignee_isset = YES;
  }
  if ([decoder containsValueForKey: @"telephone"])
  {
    __telephone = [[decoder decodeObjectForKey: @"telephone"] retain_stub];
    __telephone_isset = YES;
  }
  if ([decoder containsValueForKey: @"district"])
  {
    __district = [[decoder decodeObjectForKey: @"district"] retain_stub];
    __district_isset = YES;
  }
  if ([decoder containsValueForKey: @"detail"])
  {
    __detail = [[decoder decodeObjectForKey: @"detail"] retain_stub];
    __detail_isset = YES;
  }
  if ([decoder containsValueForKey: @"isDefault"])
  {
    __isDefault = [decoder decodeInt32ForKey: @"isDefault"];
    __isDefault_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__editType_isset)
  {
    [encoder encodeInt32: __editType forKey: @"editType"];
  }
  if (__addId_isset)
  {
    [encoder encodeInt64: __addId forKey: @"addId"];
  }
  if (__consignee_isset)
  {
    [encoder encodeObject: __consignee forKey: @"consignee"];
  }
  if (__telephone_isset)
  {
    [encoder encodeObject: __telephone forKey: @"telephone"];
  }
  if (__district_isset)
  {
    [encoder encodeObject: __district forKey: @"district"];
  }
  if (__detail_isset)
  {
    [encoder encodeObject: __detail forKey: @"detail"];
  }
  if (__isDefault_isset)
  {
    [encoder encodeInt32: __isDefault forKey: @"isDefault"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __editType_isset ? 2654435761 : 0;
  if (__editType_isset)
  {
    hash = (hash * 31) ^ [@(__editType) hash];
  }
  hash = (hash * 31) ^ __addId_isset ? 2654435761 : 0;
  if (__addId_isset)
  {
    hash = (hash * 31) ^ [@(__addId) hash];
  }
  hash = (hash * 31) ^ __consignee_isset ? 2654435761 : 0;
  if (__consignee_isset)
  {
    hash = (hash * 31) ^ [__consignee hash];
  }
  hash = (hash * 31) ^ __telephone_isset ? 2654435761 : 0;
  if (__telephone_isset)
  {
    hash = (hash * 31) ^ [__telephone hash];
  }
  hash = (hash * 31) ^ __district_isset ? 2654435761 : 0;
  if (__district_isset)
  {
    hash = (hash * 31) ^ [__district hash];
  }
  hash = (hash * 31) ^ __detail_isset ? 2654435761 : 0;
  if (__detail_isset)
  {
    hash = (hash * 31) ^ [__detail hash];
  }
  hash = (hash * 31) ^ __isDefault_isset ? 2654435761 : 0;
  if (__isDefault_isset)
  {
    hash = (hash * 31) ^ [@(__isDefault) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFEditMtShipAddReq class]]) {
    return NO;
  }
  NMTFEditMtShipAddReq *other = (NMTFEditMtShipAddReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__editType_isset != other->__editType_isset) ||
      (__editType_isset && (__editType != other->__editType))) {
    return NO;
  }
  if ((__addId_isset != other->__addId_isset) ||
      (__addId_isset && (__addId != other->__addId))) {
    return NO;
  }
  if ((__consignee_isset != other->__consignee_isset) ||
      (__consignee_isset && ((__consignee || other->__consignee) && ![__consignee isEqual:other->__consignee]))) {
    return NO;
  }
  if ((__telephone_isset != other->__telephone_isset) ||
      (__telephone_isset && ((__telephone || other->__telephone) && ![__telephone isEqual:other->__telephone]))) {
    return NO;
  }
  if ((__district_isset != other->__district_isset) ||
      (__district_isset && ((__district || other->__district) && ![__district isEqual:other->__district]))) {
    return NO;
  }
  if ((__detail_isset != other->__detail_isset) ||
      (__detail_isset && ((__detail || other->__detail) && ![__detail isEqual:other->__detail]))) {
    return NO;
  }
  if ((__isDefault_isset != other->__isDefault_isset) ||
      (__isDefault_isset && (__isDefault != other->__isDefault))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__consignee release_stub];
  [__telephone release_stub];
  [__district release_stub];
  [__detail release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) editType {
  return __editType;
}

- (void) setEditType: (int32_t) editType {
  __editType = editType;
  __editType_isset = YES;
}

- (BOOL) editTypeIsSet {
  return __editType_isset;
}

- (void) unsetEditType {
  __editType_isset = NO;
}

- (int64_t) addId {
  return __addId;
}

- (void) setAddId: (int64_t) addId {
  __addId = addId;
  __addId_isset = YES;
}

- (BOOL) addIdIsSet {
  return __addId_isset;
}

- (void) unsetAddId {
  __addId_isset = NO;
}

- (NSString *) consignee {
  return [[__consignee retain_stub] autorelease_stub];
}

- (void) setConsignee: (NSString *) consignee {
  [consignee retain_stub];
  [__consignee release_stub];
  __consignee = consignee;
  __consignee_isset = YES;
}

- (BOOL) consigneeIsSet {
  return __consignee_isset;
}

- (void) unsetConsignee {
  [__consignee release_stub];
  __consignee = nil;
  __consignee_isset = NO;
}

- (NSString *) telephone {
  return [[__telephone retain_stub] autorelease_stub];
}

- (void) setTelephone: (NSString *) telephone {
  [telephone retain_stub];
  [__telephone release_stub];
  __telephone = telephone;
  __telephone_isset = YES;
}

- (BOOL) telephoneIsSet {
  return __telephone_isset;
}

- (void) unsetTelephone {
  [__telephone release_stub];
  __telephone = nil;
  __telephone_isset = NO;
}

- (NSString *) district {
  return [[__district retain_stub] autorelease_stub];
}

- (void) setDistrict: (NSString *) district {
  [district retain_stub];
  [__district release_stub];
  __district = district;
  __district_isset = YES;
}

- (BOOL) districtIsSet {
  return __district_isset;
}

- (void) unsetDistrict {
  [__district release_stub];
  __district = nil;
  __district_isset = NO;
}

- (NSString *) detail {
  return [[__detail retain_stub] autorelease_stub];
}

- (void) setDetail: (NSString *) detail {
  [detail retain_stub];
  [__detail release_stub];
  __detail = detail;
  __detail_isset = YES;
}

- (BOOL) detailIsSet {
  return __detail_isset;
}

- (void) unsetDetail {
  [__detail release_stub];
  __detail = nil;
  __detail_isset = NO;
}

- (int32_t) isDefault {
  return __isDefault;
}

- (void) setIsDefault: (int32_t) isDefault {
  __isDefault = isDefault;
  __isDefault_isset = YES;
}

- (BOOL) isDefaultIsSet {
  return __isDefault_isset;
}

- (void) unsetIsDefault {
  __isDefault_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setEditType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAddId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConsignee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTelephone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDistrict: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDetail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsDefault: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EditMtShipAddReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__editType_isset) {
    [outProtocol writeFieldBeginWithName: @"editType" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __editType];
    [outProtocol writeFieldEnd];
  }
  if (__addId_isset) {
    [outProtocol writeFieldBeginWithName: @"addId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __addId];
    [outProtocol writeFieldEnd];
  }
  if (__consignee_isset) {
    if (__consignee != nil) {
      [outProtocol writeFieldBeginWithName: @"consignee" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __consignee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__telephone_isset) {
    if (__telephone != nil) {
      [outProtocol writeFieldBeginWithName: @"telephone" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __telephone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__district_isset) {
    if (__district != nil) {
      [outProtocol writeFieldBeginWithName: @"district" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __district];
      [outProtocol writeFieldEnd];
    }
  }
  if (__detail_isset) {
    if (__detail != nil) {
      [outProtocol writeFieldBeginWithName: @"detail" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __detail];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isDefault_isset) {
    [outProtocol writeFieldBeginWithName: @"isDefault" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __isDefault];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFEditMtShipAddReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",editType:"];
  [ms appendFormat: @"%i", __editType];
  [ms appendString: @",addId:"];
  [ms appendFormat: @"%qi", __addId];
  [ms appendString: @",consignee:"];
  [ms appendFormat: @"\"%@\"", __consignee];
  [ms appendString: @",telephone:"];
  [ms appendFormat: @"\"%@\"", __telephone];
  [ms appendString: @",district:"];
  [ms appendFormat: @"\"%@\"", __district];
  [ms appendString: @",detail:"];
  [ms appendFormat: @"\"%@\"", __detail];
  [ms appendString: @",isDefault:"];
  [ms appendFormat: @"%i", __isDefault];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtCartProsCntReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtCartProsCntReq class]]) {
    return NO;
  }
  NMTFGetMtCartProsCntReq *other = (NMTFGetMtCartProsCntReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtCartProsCntReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtCartProsCntReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtCartProsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header page: (NMTFPage *) page
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtCartProsReq class]]) {
    return NO;
  }
  NMTFGetMtCartProsReq *other = (NMTFGetMtCartProsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NMTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NMTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NMTFPage *fieldValue = [[NMTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtCartProsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtCartProsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFEditMtCartProsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header editType: (int32_t) editType proId: (int64_t) proId proCnt: (int32_t) proCnt
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __editType = editType;
  __editType_isset = YES;
  __proId = proId;
  __proId_isset = YES;
  __proCnt = proCnt;
  __proCnt_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"editType"])
  {
    __editType = [decoder decodeInt32ForKey: @"editType"];
    __editType_isset = YES;
  }
  if ([decoder containsValueForKey: @"proId"])
  {
    __proId = [decoder decodeInt64ForKey: @"proId"];
    __proId_isset = YES;
  }
  if ([decoder containsValueForKey: @"proCnt"])
  {
    __proCnt = [decoder decodeInt32ForKey: @"proCnt"];
    __proCnt_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__editType_isset)
  {
    [encoder encodeInt32: __editType forKey: @"editType"];
  }
  if (__proId_isset)
  {
    [encoder encodeInt64: __proId forKey: @"proId"];
  }
  if (__proCnt_isset)
  {
    [encoder encodeInt32: __proCnt forKey: @"proCnt"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __editType_isset ? 2654435761 : 0;
  if (__editType_isset)
  {
    hash = (hash * 31) ^ [@(__editType) hash];
  }
  hash = (hash * 31) ^ __proId_isset ? 2654435761 : 0;
  if (__proId_isset)
  {
    hash = (hash * 31) ^ [@(__proId) hash];
  }
  hash = (hash * 31) ^ __proCnt_isset ? 2654435761 : 0;
  if (__proCnt_isset)
  {
    hash = (hash * 31) ^ [@(__proCnt) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFEditMtCartProsReq class]]) {
    return NO;
  }
  NMTFEditMtCartProsReq *other = (NMTFEditMtCartProsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__editType_isset != other->__editType_isset) ||
      (__editType_isset && (__editType != other->__editType))) {
    return NO;
  }
  if ((__proId_isset != other->__proId_isset) ||
      (__proId_isset && (__proId != other->__proId))) {
    return NO;
  }
  if ((__proCnt_isset != other->__proCnt_isset) ||
      (__proCnt_isset && (__proCnt != other->__proCnt))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) editType {
  return __editType;
}

- (void) setEditType: (int32_t) editType {
  __editType = editType;
  __editType_isset = YES;
}

- (BOOL) editTypeIsSet {
  return __editType_isset;
}

- (void) unsetEditType {
  __editType_isset = NO;
}

- (int64_t) proId {
  return __proId;
}

- (void) setProId: (int64_t) proId {
  __proId = proId;
  __proId_isset = YES;
}

- (BOOL) proIdIsSet {
  return __proId_isset;
}

- (void) unsetProId {
  __proId_isset = NO;
}

- (int32_t) proCnt {
  return __proCnt;
}

- (void) setProCnt: (int32_t) proCnt {
  __proCnt = proCnt;
  __proCnt_isset = YES;
}

- (BOOL) proCntIsSet {
  return __proCnt_isset;
}

- (void) unsetProCnt {
  __proCnt_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setEditType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setProId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setProCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EditMtCartProsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__editType_isset) {
    [outProtocol writeFieldBeginWithName: @"editType" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __editType];
    [outProtocol writeFieldEnd];
  }
  if (__proId_isset) {
    [outProtocol writeFieldBeginWithName: @"proId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __proId];
    [outProtocol writeFieldEnd];
  }
  if (__proCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"proCnt" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __proCnt];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFEditMtCartProsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",editType:"];
  [ms appendFormat: @"%i", __editType];
  [ms appendString: @",proId:"];
  [ms appendFormat: @"%qi", __proId];
  [ms appendString: @",proCnt:"];
  [ms appendFormat: @"%i", __proCnt];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFCreateMtOrderReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.pros = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header pros: (NSMutableArray *) pros addId: (int64_t) addId invType: (int32_t) invType invHead: (NSString *) invHead
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __pros = [pros retain_stub];
  __pros_isset = YES;
  __addId = addId;
  __addId_isset = YES;
  __invType = invType;
  __invType_isset = YES;
  __invHead = [invHead retain_stub];
  __invHead_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"pros"])
  {
    __pros = [[decoder decodeObjectForKey: @"pros"] retain_stub];
    __pros_isset = YES;
  }
  if ([decoder containsValueForKey: @"addId"])
  {
    __addId = [decoder decodeInt64ForKey: @"addId"];
    __addId_isset = YES;
  }
  if ([decoder containsValueForKey: @"invType"])
  {
    __invType = [decoder decodeInt32ForKey: @"invType"];
    __invType_isset = YES;
  }
  if ([decoder containsValueForKey: @"invHead"])
  {
    __invHead = [[decoder decodeObjectForKey: @"invHead"] retain_stub];
    __invHead_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__pros_isset)
  {
    [encoder encodeObject: __pros forKey: @"pros"];
  }
  if (__addId_isset)
  {
    [encoder encodeInt64: __addId forKey: @"addId"];
  }
  if (__invType_isset)
  {
    [encoder encodeInt32: __invType forKey: @"invType"];
  }
  if (__invHead_isset)
  {
    [encoder encodeObject: __invHead forKey: @"invHead"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __pros_isset ? 2654435761 : 0;
  if (__pros_isset)
  {
    hash = (hash * 31) ^ [__pros hash];
  }
  hash = (hash * 31) ^ __addId_isset ? 2654435761 : 0;
  if (__addId_isset)
  {
    hash = (hash * 31) ^ [@(__addId) hash];
  }
  hash = (hash * 31) ^ __invType_isset ? 2654435761 : 0;
  if (__invType_isset)
  {
    hash = (hash * 31) ^ [@(__invType) hash];
  }
  hash = (hash * 31) ^ __invHead_isset ? 2654435761 : 0;
  if (__invHead_isset)
  {
    hash = (hash * 31) ^ [__invHead hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFCreateMtOrderReq class]]) {
    return NO;
  }
  NMTFCreateMtOrderReq *other = (NMTFCreateMtOrderReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__pros_isset != other->__pros_isset) ||
      (__pros_isset && ((__pros || other->__pros) && ![__pros isEqual:other->__pros]))) {
    return NO;
  }
  if ((__addId_isset != other->__addId_isset) ||
      (__addId_isset && (__addId != other->__addId))) {
    return NO;
  }
  if ((__invType_isset != other->__invType_isset) ||
      (__invType_isset && (__invType != other->__invType))) {
    return NO;
  }
  if ((__invHead_isset != other->__invHead_isset) ||
      (__invHead_isset && ((__invHead || other->__invHead) && ![__invHead isEqual:other->__invHead]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__pros release_stub];
  [__invHead release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) pros {
  return [[__pros retain_stub] autorelease_stub];
}

- (void) setPros: (NSMutableArray *) pros {
  [pros retain_stub];
  [__pros release_stub];
  __pros = pros;
  __pros_isset = YES;
}

- (BOOL) prosIsSet {
  return __pros_isset;
}

- (void) unsetPros {
  [__pros release_stub];
  __pros = nil;
  __pros_isset = NO;
}

- (int64_t) addId {
  return __addId;
}

- (void) setAddId: (int64_t) addId {
  __addId = addId;
  __addId_isset = YES;
}

- (BOOL) addIdIsSet {
  return __addId_isset;
}

- (void) unsetAddId {
  __addId_isset = NO;
}

- (int32_t) invType {
  return __invType;
}

- (void) setInvType: (int32_t) invType {
  __invType = invType;
  __invType_isset = YES;
}

- (BOOL) invTypeIsSet {
  return __invType_isset;
}

- (void) unsetInvType {
  __invType_isset = NO;
}

- (NSString *) invHead {
  return [[__invHead retain_stub] autorelease_stub];
}

- (void) setInvHead: (NSString *) invHead {
  [invHead retain_stub];
  [__invHead release_stub];
  __invHead = invHead;
  __invHead_isset = YES;
}

- (BOOL) invHeadIsSet {
  return __invHead_isset;
}

- (void) unsetInvHead {
  [__invHead release_stub];
  __invHead = nil;
  __invHead_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NMTFOrderProsDto *_elem2 = [[NMTFOrderProsDto alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setPros: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAddId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setInvType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInvHead: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CreateMtOrderReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pros_isset) {
    if (__pros != nil) {
      [outProtocol writeFieldBeginWithName: @"pros" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__pros count]];
        int idx4;
        for (idx4 = 0; idx4 < [__pros count]; idx4++)
        {
          [[__pros objectAtIndex: idx4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__addId_isset) {
    [outProtocol writeFieldBeginWithName: @"addId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __addId];
    [outProtocol writeFieldEnd];
  }
  if (__invType_isset) {
    [outProtocol writeFieldBeginWithName: @"invType" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __invType];
    [outProtocol writeFieldEnd];
  }
  if (__invHead_isset) {
    if (__invHead != nil) {
      [outProtocol writeFieldBeginWithName: @"invHead" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __invHead];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFCreateMtOrderReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",pros:"];
  [ms appendFormat: @"%@", __pros];
  [ms appendString: @",addId:"];
  [ms appendFormat: @"%qi", __addId];
  [ms appendString: @",invType:"];
  [ms appendFormat: @"%i", __invType];
  [ms appendString: @",invHead:"];
  [ms appendFormat: @"\"%@\"", __invHead];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFOrderProsDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithProId: (int64_t) proId proNum: (int32_t) proNum
{
  self = [super init];
  __proId = proId;
  __proId_isset = YES;
  __proNum = proNum;
  __proNum_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"proId"])
  {
    __proId = [decoder decodeInt64ForKey: @"proId"];
    __proId_isset = YES;
  }
  if ([decoder containsValueForKey: @"proNum"])
  {
    __proNum = [decoder decodeInt32ForKey: @"proNum"];
    __proNum_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__proId_isset)
  {
    [encoder encodeInt64: __proId forKey: @"proId"];
  }
  if (__proNum_isset)
  {
    [encoder encodeInt32: __proNum forKey: @"proNum"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __proId_isset ? 2654435761 : 0;
  if (__proId_isset)
  {
    hash = (hash * 31) ^ [@(__proId) hash];
  }
  hash = (hash * 31) ^ __proNum_isset ? 2654435761 : 0;
  if (__proNum_isset)
  {
    hash = (hash * 31) ^ [@(__proNum) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFOrderProsDto class]]) {
    return NO;
  }
  NMTFOrderProsDto *other = (NMTFOrderProsDto *)anObject;
  if ((__proId_isset != other->__proId_isset) ||
      (__proId_isset && (__proId != other->__proId))) {
    return NO;
  }
  if ((__proNum_isset != other->__proNum_isset) ||
      (__proNum_isset && (__proNum != other->__proNum))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int64_t) proId {
  return __proId;
}

- (void) setProId: (int64_t) proId {
  __proId = proId;
  __proId_isset = YES;
}

- (BOOL) proIdIsSet {
  return __proId_isset;
}

- (void) unsetProId {
  __proId_isset = NO;
}

- (int32_t) proNum {
  return __proNum;
}

- (void) setProNum: (int32_t) proNum {
  __proNum = proNum;
  __proNum_isset = YES;
}

- (BOOL) proNumIsSet {
  return __proNum_isset;
}

- (void) unsetProNum {
  __proNum_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setProId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setProNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OrderProsDto"];
  if (__proId_isset) {
    [outProtocol writeFieldBeginWithName: @"proId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __proId];
    [outProtocol writeFieldEnd];
  }
  if (__proNum_isset) {
    [outProtocol writeFieldBeginWithName: @"proNum" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __proNum];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFOrderProsDto("];
  [ms appendString: @"proId:"];
  [ms appendFormat: @"%qi", __proId];
  [ms appendString: @",proNum:"];
  [ms appendFormat: @"%i", __proNum];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFCancelMtOrderReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header orderNo: (NSString *) orderNo
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __orderNo = [orderNo retain_stub];
  __orderNo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderNo"])
  {
    __orderNo = [[decoder decodeObjectForKey: @"orderNo"] retain_stub];
    __orderNo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__orderNo_isset)
  {
    [encoder encodeObject: __orderNo forKey: @"orderNo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __orderNo_isset ? 2654435761 : 0;
  if (__orderNo_isset)
  {
    hash = (hash * 31) ^ [__orderNo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFCancelMtOrderReq class]]) {
    return NO;
  }
  NMTFCancelMtOrderReq *other = (NMTFCancelMtOrderReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__orderNo_isset != other->__orderNo_isset) ||
      (__orderNo_isset && ((__orderNo || other->__orderNo) && ![__orderNo isEqual:other->__orderNo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__orderNo release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) orderNo {
  return [[__orderNo retain_stub] autorelease_stub];
}

- (void) setOrderNo: (NSString *) orderNo {
  [orderNo retain_stub];
  [__orderNo release_stub];
  __orderNo = orderNo;
  __orderNo_isset = YES;
}

- (BOOL) orderNoIsSet {
  return __orderNo_isset;
}

- (void) unsetOrderNo {
  [__orderNo release_stub];
  __orderNo = nil;
  __orderNo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CancelMtOrderReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderNo_isset) {
    if (__orderNo != nil) {
      [outProtocol writeFieldBeginWithName: @"orderNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __orderNo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFCancelMtOrderReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",orderNo:"];
  [ms appendFormat: @"\"%@\"", __orderNo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFDelMtOrderReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header orderNo: (NSString *) orderNo
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __orderNo = [orderNo retain_stub];
  __orderNo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderNo"])
  {
    __orderNo = [[decoder decodeObjectForKey: @"orderNo"] retain_stub];
    __orderNo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__orderNo_isset)
  {
    [encoder encodeObject: __orderNo forKey: @"orderNo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __orderNo_isset ? 2654435761 : 0;
  if (__orderNo_isset)
  {
    hash = (hash * 31) ^ [__orderNo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFDelMtOrderReq class]]) {
    return NO;
  }
  NMTFDelMtOrderReq *other = (NMTFDelMtOrderReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__orderNo_isset != other->__orderNo_isset) ||
      (__orderNo_isset && ((__orderNo || other->__orderNo) && ![__orderNo isEqual:other->__orderNo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__orderNo release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) orderNo {
  return [[__orderNo retain_stub] autorelease_stub];
}

- (void) setOrderNo: (NSString *) orderNo {
  [orderNo retain_stub];
  [__orderNo release_stub];
  __orderNo = orderNo;
  __orderNo_isset = YES;
}

- (BOOL) orderNoIsSet {
  return __orderNo_isset;
}

- (void) unsetOrderNo {
  [__orderNo release_stub];
  __orderNo = nil;
  __orderNo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DelMtOrderReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderNo_isset) {
    if (__orderNo != nil) {
      [outProtocol writeFieldBeginWithName: @"orderNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __orderNo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFDelMtOrderReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",orderNo:"];
  [ms appendFormat: @"\"%@\"", __orderNo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFPrePayMtOrderReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header orderNo: (NSString *) orderNo isMall: (int32_t) isMall payWayType: (int32_t) payWayType txSNBinding: (NSString *) txSNBinding merchantNo: (NSString *) merchantNo
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __orderNo = [orderNo retain_stub];
  __orderNo_isset = YES;
  __isMall = isMall;
  __isMall_isset = YES;
  __payWayType = payWayType;
  __payWayType_isset = YES;
  __txSNBinding = [txSNBinding retain_stub];
  __txSNBinding_isset = YES;
  __merchantNo = [merchantNo retain_stub];
  __merchantNo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderNo"])
  {
    __orderNo = [[decoder decodeObjectForKey: @"orderNo"] retain_stub];
    __orderNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"isMall"])
  {
    __isMall = [decoder decodeInt32ForKey: @"isMall"];
    __isMall_isset = YES;
  }
  if ([decoder containsValueForKey: @"payWayType"])
  {
    __payWayType = [decoder decodeInt32ForKey: @"payWayType"];
    __payWayType_isset = YES;
  }
  if ([decoder containsValueForKey: @"txSNBinding"])
  {
    __txSNBinding = [[decoder decodeObjectForKey: @"txSNBinding"] retain_stub];
    __txSNBinding_isset = YES;
  }
  if ([decoder containsValueForKey: @"merchantNo"])
  {
    __merchantNo = [[decoder decodeObjectForKey: @"merchantNo"] retain_stub];
    __merchantNo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__orderNo_isset)
  {
    [encoder encodeObject: __orderNo forKey: @"orderNo"];
  }
  if (__isMall_isset)
  {
    [encoder encodeInt32: __isMall forKey: @"isMall"];
  }
  if (__payWayType_isset)
  {
    [encoder encodeInt32: __payWayType forKey: @"payWayType"];
  }
  if (__txSNBinding_isset)
  {
    [encoder encodeObject: __txSNBinding forKey: @"txSNBinding"];
  }
  if (__merchantNo_isset)
  {
    [encoder encodeObject: __merchantNo forKey: @"merchantNo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __orderNo_isset ? 2654435761 : 0;
  if (__orderNo_isset)
  {
    hash = (hash * 31) ^ [__orderNo hash];
  }
  hash = (hash * 31) ^ __isMall_isset ? 2654435761 : 0;
  if (__isMall_isset)
  {
    hash = (hash * 31) ^ [@(__isMall) hash];
  }
  hash = (hash * 31) ^ __payWayType_isset ? 2654435761 : 0;
  if (__payWayType_isset)
  {
    hash = (hash * 31) ^ [@(__payWayType) hash];
  }
  hash = (hash * 31) ^ __txSNBinding_isset ? 2654435761 : 0;
  if (__txSNBinding_isset)
  {
    hash = (hash * 31) ^ [__txSNBinding hash];
  }
  hash = (hash * 31) ^ __merchantNo_isset ? 2654435761 : 0;
  if (__merchantNo_isset)
  {
    hash = (hash * 31) ^ [__merchantNo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFPrePayMtOrderReq class]]) {
    return NO;
  }
  NMTFPrePayMtOrderReq *other = (NMTFPrePayMtOrderReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__orderNo_isset != other->__orderNo_isset) ||
      (__orderNo_isset && ((__orderNo || other->__orderNo) && ![__orderNo isEqual:other->__orderNo]))) {
    return NO;
  }
  if ((__isMall_isset != other->__isMall_isset) ||
      (__isMall_isset && (__isMall != other->__isMall))) {
    return NO;
  }
  if ((__payWayType_isset != other->__payWayType_isset) ||
      (__payWayType_isset && (__payWayType != other->__payWayType))) {
    return NO;
  }
  if ((__txSNBinding_isset != other->__txSNBinding_isset) ||
      (__txSNBinding_isset && ((__txSNBinding || other->__txSNBinding) && ![__txSNBinding isEqual:other->__txSNBinding]))) {
    return NO;
  }
  if ((__merchantNo_isset != other->__merchantNo_isset) ||
      (__merchantNo_isset && ((__merchantNo || other->__merchantNo) && ![__merchantNo isEqual:other->__merchantNo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__orderNo release_stub];
  [__txSNBinding release_stub];
  [__merchantNo release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) orderNo {
  return [[__orderNo retain_stub] autorelease_stub];
}

- (void) setOrderNo: (NSString *) orderNo {
  [orderNo retain_stub];
  [__orderNo release_stub];
  __orderNo = orderNo;
  __orderNo_isset = YES;
}

- (BOOL) orderNoIsSet {
  return __orderNo_isset;
}

- (void) unsetOrderNo {
  [__orderNo release_stub];
  __orderNo = nil;
  __orderNo_isset = NO;
}

- (int32_t) isMall {
  return __isMall;
}

- (void) setIsMall: (int32_t) isMall {
  __isMall = isMall;
  __isMall_isset = YES;
}

- (BOOL) isMallIsSet {
  return __isMall_isset;
}

- (void) unsetIsMall {
  __isMall_isset = NO;
}

- (int32_t) payWayType {
  return __payWayType;
}

- (void) setPayWayType: (int32_t) payWayType {
  __payWayType = payWayType;
  __payWayType_isset = YES;
}

- (BOOL) payWayTypeIsSet {
  return __payWayType_isset;
}

- (void) unsetPayWayType {
  __payWayType_isset = NO;
}

- (NSString *) txSNBinding {
  return [[__txSNBinding retain_stub] autorelease_stub];
}

- (void) setTxSNBinding: (NSString *) txSNBinding {
  [txSNBinding retain_stub];
  [__txSNBinding release_stub];
  __txSNBinding = txSNBinding;
  __txSNBinding_isset = YES;
}

- (BOOL) txSNBindingIsSet {
  return __txSNBinding_isset;
}

- (void) unsetTxSNBinding {
  [__txSNBinding release_stub];
  __txSNBinding = nil;
  __txSNBinding_isset = NO;
}

- (NSString *) merchantNo {
  return [[__merchantNo retain_stub] autorelease_stub];
}

- (void) setMerchantNo: (NSString *) merchantNo {
  [merchantNo retain_stub];
  [__merchantNo release_stub];
  __merchantNo = merchantNo;
  __merchantNo_isset = YES;
}

- (BOOL) merchantNoIsSet {
  return __merchantNo_isset;
}

- (void) unsetMerchantNo {
  [__merchantNo release_stub];
  __merchantNo = nil;
  __merchantNo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsMall: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPayWayType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTxSNBinding: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMerchantNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PrePayMtOrderReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderNo_isset) {
    if (__orderNo != nil) {
      [outProtocol writeFieldBeginWithName: @"orderNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __orderNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isMall_isset) {
    [outProtocol writeFieldBeginWithName: @"isMall" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __isMall];
    [outProtocol writeFieldEnd];
  }
  if (__payWayType_isset) {
    [outProtocol writeFieldBeginWithName: @"payWayType" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __payWayType];
    [outProtocol writeFieldEnd];
  }
  if (__txSNBinding_isset) {
    if (__txSNBinding != nil) {
      [outProtocol writeFieldBeginWithName: @"txSNBinding" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __txSNBinding];
      [outProtocol writeFieldEnd];
    }
  }
  if (__merchantNo_isset) {
    if (__merchantNo != nil) {
      [outProtocol writeFieldBeginWithName: @"merchantNo" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __merchantNo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFPrePayMtOrderReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",orderNo:"];
  [ms appendFormat: @"\"%@\"", __orderNo];
  [ms appendString: @",isMall:"];
  [ms appendFormat: @"%i", __isMall];
  [ms appendString: @",payWayType:"];
  [ms appendFormat: @"%i", __payWayType];
  [ms appendString: @",txSNBinding:"];
  [ms appendFormat: @"\"%@\"", __txSNBinding];
  [ms appendString: @",merchantNo:"];
  [ms appendFormat: @"\"%@\"", __merchantNo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFPayMtOrderReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header orderNo: (NSString *) orderNo isMall: (int32_t) isMall smsCode: (NSString *) smsCode
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __orderNo = [orderNo retain_stub];
  __orderNo_isset = YES;
  __isMall = isMall;
  __isMall_isset = YES;
  __smsCode = [smsCode retain_stub];
  __smsCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderNo"])
  {
    __orderNo = [[decoder decodeObjectForKey: @"orderNo"] retain_stub];
    __orderNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"isMall"])
  {
    __isMall = [decoder decodeInt32ForKey: @"isMall"];
    __isMall_isset = YES;
  }
  if ([decoder containsValueForKey: @"smsCode"])
  {
    __smsCode = [[decoder decodeObjectForKey: @"smsCode"] retain_stub];
    __smsCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__orderNo_isset)
  {
    [encoder encodeObject: __orderNo forKey: @"orderNo"];
  }
  if (__isMall_isset)
  {
    [encoder encodeInt32: __isMall forKey: @"isMall"];
  }
  if (__smsCode_isset)
  {
    [encoder encodeObject: __smsCode forKey: @"smsCode"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __orderNo_isset ? 2654435761 : 0;
  if (__orderNo_isset)
  {
    hash = (hash * 31) ^ [__orderNo hash];
  }
  hash = (hash * 31) ^ __isMall_isset ? 2654435761 : 0;
  if (__isMall_isset)
  {
    hash = (hash * 31) ^ [@(__isMall) hash];
  }
  hash = (hash * 31) ^ __smsCode_isset ? 2654435761 : 0;
  if (__smsCode_isset)
  {
    hash = (hash * 31) ^ [__smsCode hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFPayMtOrderReq class]]) {
    return NO;
  }
  NMTFPayMtOrderReq *other = (NMTFPayMtOrderReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__orderNo_isset != other->__orderNo_isset) ||
      (__orderNo_isset && ((__orderNo || other->__orderNo) && ![__orderNo isEqual:other->__orderNo]))) {
    return NO;
  }
  if ((__isMall_isset != other->__isMall_isset) ||
      (__isMall_isset && (__isMall != other->__isMall))) {
    return NO;
  }
  if ((__smsCode_isset != other->__smsCode_isset) ||
      (__smsCode_isset && ((__smsCode || other->__smsCode) && ![__smsCode isEqual:other->__smsCode]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__orderNo release_stub];
  [__smsCode release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) orderNo {
  return [[__orderNo retain_stub] autorelease_stub];
}

- (void) setOrderNo: (NSString *) orderNo {
  [orderNo retain_stub];
  [__orderNo release_stub];
  __orderNo = orderNo;
  __orderNo_isset = YES;
}

- (BOOL) orderNoIsSet {
  return __orderNo_isset;
}

- (void) unsetOrderNo {
  [__orderNo release_stub];
  __orderNo = nil;
  __orderNo_isset = NO;
}

- (int32_t) isMall {
  return __isMall;
}

- (void) setIsMall: (int32_t) isMall {
  __isMall = isMall;
  __isMall_isset = YES;
}

- (BOOL) isMallIsSet {
  return __isMall_isset;
}

- (void) unsetIsMall {
  __isMall_isset = NO;
}

- (NSString *) smsCode {
  return [[__smsCode retain_stub] autorelease_stub];
}

- (void) setSmsCode: (NSString *) smsCode {
  [smsCode retain_stub];
  [__smsCode release_stub];
  __smsCode = smsCode;
  __smsCode_isset = YES;
}

- (BOOL) smsCodeIsSet {
  return __smsCode_isset;
}

- (void) unsetSmsCode {
  [__smsCode release_stub];
  __smsCode = nil;
  __smsCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsMall: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSmsCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PayMtOrderReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderNo_isset) {
    if (__orderNo != nil) {
      [outProtocol writeFieldBeginWithName: @"orderNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __orderNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isMall_isset) {
    [outProtocol writeFieldBeginWithName: @"isMall" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __isMall];
    [outProtocol writeFieldEnd];
  }
  if (__smsCode_isset) {
    if (__smsCode != nil) {
      [outProtocol writeFieldBeginWithName: @"smsCode" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __smsCode];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFPayMtOrderReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",orderNo:"];
  [ms appendFormat: @"\"%@\"", __orderNo];
  [ms appendString: @",isMall:"];
  [ms appendFormat: @"%i", __isMall];
  [ms appendString: @",smsCode:"];
  [ms appendFormat: @"\"%@\"", __smsCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtBindingsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header merchantNo: (NSString *) merchantNo
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __merchantNo = [merchantNo retain_stub];
  __merchantNo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"merchantNo"])
  {
    __merchantNo = [[decoder decodeObjectForKey: @"merchantNo"] retain_stub];
    __merchantNo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__merchantNo_isset)
  {
    [encoder encodeObject: __merchantNo forKey: @"merchantNo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __merchantNo_isset ? 2654435761 : 0;
  if (__merchantNo_isset)
  {
    hash = (hash * 31) ^ [__merchantNo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtBindingsReq class]]) {
    return NO;
  }
  NMTFGetMtBindingsReq *other = (NMTFGetMtBindingsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__merchantNo_isset != other->__merchantNo_isset) ||
      (__merchantNo_isset && ((__merchantNo || other->__merchantNo) && ![__merchantNo isEqual:other->__merchantNo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__merchantNo release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) merchantNo {
  return [[__merchantNo retain_stub] autorelease_stub];
}

- (void) setMerchantNo: (NSString *) merchantNo {
  [merchantNo retain_stub];
  [__merchantNo release_stub];
  __merchantNo = merchantNo;
  __merchantNo_isset = YES;
}

- (BOOL) merchantNoIsSet {
  return __merchantNo_isset;
}

- (void) unsetMerchantNo {
  [__merchantNo release_stub];
  __merchantNo = nil;
  __merchantNo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMerchantNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtBindingsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__merchantNo_isset) {
    if (__merchantNo != nil) {
      [outProtocol writeFieldBeginWithName: @"merchantNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __merchantNo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtBindingsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",merchantNo:"];
  [ms appendFormat: @"\"%@\"", __merchantNo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFReceiptMtProsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header orderNo: (NSString *) orderNo
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __orderNo = [orderNo retain_stub];
  __orderNo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderNo"])
  {
    __orderNo = [[decoder decodeObjectForKey: @"orderNo"] retain_stub];
    __orderNo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__orderNo_isset)
  {
    [encoder encodeObject: __orderNo forKey: @"orderNo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __orderNo_isset ? 2654435761 : 0;
  if (__orderNo_isset)
  {
    hash = (hash * 31) ^ [__orderNo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFReceiptMtProsReq class]]) {
    return NO;
  }
  NMTFReceiptMtProsReq *other = (NMTFReceiptMtProsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__orderNo_isset != other->__orderNo_isset) ||
      (__orderNo_isset && ((__orderNo || other->__orderNo) && ![__orderNo isEqual:other->__orderNo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__orderNo release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) orderNo {
  return [[__orderNo retain_stub] autorelease_stub];
}

- (void) setOrderNo: (NSString *) orderNo {
  [orderNo retain_stub];
  [__orderNo release_stub];
  __orderNo = orderNo;
  __orderNo_isset = YES;
}

- (BOOL) orderNoIsSet {
  return __orderNo_isset;
}

- (void) unsetOrderNo {
  [__orderNo release_stub];
  __orderNo = nil;
  __orderNo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReceiptMtProsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderNo_isset) {
    if (__orderNo != nil) {
      [outProtocol writeFieldBeginWithName: @"orderNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __orderNo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFReceiptMtProsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",orderNo:"];
  [ms appendFormat: @"\"%@\"", __orderNo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFReqMtRefundReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header orderNo: (NSString *) orderNo refundReason: (NSString *) refundReason
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __orderNo = [orderNo retain_stub];
  __orderNo_isset = YES;
  __refundReason = [refundReason retain_stub];
  __refundReason_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderNo"])
  {
    __orderNo = [[decoder decodeObjectForKey: @"orderNo"] retain_stub];
    __orderNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"refundReason"])
  {
    __refundReason = [[decoder decodeObjectForKey: @"refundReason"] retain_stub];
    __refundReason_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__orderNo_isset)
  {
    [encoder encodeObject: __orderNo forKey: @"orderNo"];
  }
  if (__refundReason_isset)
  {
    [encoder encodeObject: __refundReason forKey: @"refundReason"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __orderNo_isset ? 2654435761 : 0;
  if (__orderNo_isset)
  {
    hash = (hash * 31) ^ [__orderNo hash];
  }
  hash = (hash * 31) ^ __refundReason_isset ? 2654435761 : 0;
  if (__refundReason_isset)
  {
    hash = (hash * 31) ^ [__refundReason hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFReqMtRefundReq class]]) {
    return NO;
  }
  NMTFReqMtRefundReq *other = (NMTFReqMtRefundReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__orderNo_isset != other->__orderNo_isset) ||
      (__orderNo_isset && ((__orderNo || other->__orderNo) && ![__orderNo isEqual:other->__orderNo]))) {
    return NO;
  }
  if ((__refundReason_isset != other->__refundReason_isset) ||
      (__refundReason_isset && ((__refundReason || other->__refundReason) && ![__refundReason isEqual:other->__refundReason]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__orderNo release_stub];
  [__refundReason release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) orderNo {
  return [[__orderNo retain_stub] autorelease_stub];
}

- (void) setOrderNo: (NSString *) orderNo {
  [orderNo retain_stub];
  [__orderNo release_stub];
  __orderNo = orderNo;
  __orderNo_isset = YES;
}

- (BOOL) orderNoIsSet {
  return __orderNo_isset;
}

- (void) unsetOrderNo {
  [__orderNo release_stub];
  __orderNo = nil;
  __orderNo_isset = NO;
}

- (NSString *) refundReason {
  return [[__refundReason retain_stub] autorelease_stub];
}

- (void) setRefundReason: (NSString *) refundReason {
  [refundReason retain_stub];
  [__refundReason release_stub];
  __refundReason = refundReason;
  __refundReason_isset = YES;
}

- (BOOL) refundReasonIsSet {
  return __refundReason_isset;
}

- (void) unsetRefundReason {
  [__refundReason release_stub];
  __refundReason = nil;
  __refundReason_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRefundReason: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReqMtRefundReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderNo_isset) {
    if (__orderNo != nil) {
      [outProtocol writeFieldBeginWithName: @"orderNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __orderNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__refundReason_isset) {
    if (__refundReason != nil) {
      [outProtocol writeFieldBeginWithName: @"refundReason" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __refundReason];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFReqMtRefundReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",orderNo:"];
  [ms appendFormat: @"\"%@\"", __orderNo];
  [ms appendString: @",refundReason:"];
  [ms appendFormat: @"\"%@\"", __refundReason];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetUserOrderListReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header page: (NMTFPage *) page searchType: (int32_t) searchType
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __searchType = searchType;
  __searchType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"searchType"])
  {
    __searchType = [decoder decodeInt32ForKey: @"searchType"];
    __searchType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__searchType_isset)
  {
    [encoder encodeInt32: __searchType forKey: @"searchType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __searchType_isset ? 2654435761 : 0;
  if (__searchType_isset)
  {
    hash = (hash * 31) ^ [@(__searchType) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetUserOrderListReq class]]) {
    return NO;
  }
  NMTFGetUserOrderListReq *other = (NMTFGetUserOrderListReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__searchType_isset != other->__searchType_isset) ||
      (__searchType_isset && (__searchType != other->__searchType))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NMTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NMTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (int32_t) searchType {
  return __searchType;
}

- (void) setSearchType: (int32_t) searchType {
  __searchType = searchType;
  __searchType_isset = YES;
}

- (BOOL) searchTypeIsSet {
  return __searchType_isset;
}

- (void) unsetSearchType {
  __searchType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NMTFPage *fieldValue = [[NMTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSearchType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUserOrderListReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__searchType_isset) {
    [outProtocol writeFieldBeginWithName: @"searchType" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __searchType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetUserOrderListReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",searchType:"];
  [ms appendFormat: @"%i", __searchType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtOrderDetailReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header orderNo: (NSString *) orderNo
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __orderNo = [orderNo retain_stub];
  __orderNo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderNo"])
  {
    __orderNo = [[decoder decodeObjectForKey: @"orderNo"] retain_stub];
    __orderNo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__orderNo_isset)
  {
    [encoder encodeObject: __orderNo forKey: @"orderNo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __orderNo_isset ? 2654435761 : 0;
  if (__orderNo_isset)
  {
    hash = (hash * 31) ^ [__orderNo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtOrderDetailReq class]]) {
    return NO;
  }
  NMTFGetMtOrderDetailReq *other = (NMTFGetMtOrderDetailReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__orderNo_isset != other->__orderNo_isset) ||
      (__orderNo_isset && ((__orderNo || other->__orderNo) && ![__orderNo isEqual:other->__orderNo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__orderNo release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) orderNo {
  return [[__orderNo retain_stub] autorelease_stub];
}

- (void) setOrderNo: (NSString *) orderNo {
  [orderNo retain_stub];
  [__orderNo release_stub];
  __orderNo = orderNo;
  __orderNo_isset = YES;
}

- (BOOL) orderNoIsSet {
  return __orderNo_isset;
}

- (void) unsetOrderNo {
  [__orderNo release_stub];
  __orderNo = nil;
  __orderNo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtOrderDetailReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderNo_isset) {
    if (__orderNo != nil) {
      [outProtocol writeFieldBeginWithName: @"orderNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __orderNo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtOrderDetailReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",orderNo:"];
  [ms appendFormat: @"\"%@\"", __orderNo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetPayBanksReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header payTypeId: (int32_t) payTypeId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __payTypeId = payTypeId;
  __payTypeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"payTypeId"])
  {
    __payTypeId = [decoder decodeInt32ForKey: @"payTypeId"];
    __payTypeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__payTypeId_isset)
  {
    [encoder encodeInt32: __payTypeId forKey: @"payTypeId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __payTypeId_isset ? 2654435761 : 0;
  if (__payTypeId_isset)
  {
    hash = (hash * 31) ^ [@(__payTypeId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetPayBanksReq class]]) {
    return NO;
  }
  NMTFGetPayBanksReq *other = (NMTFGetPayBanksReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__payTypeId_isset != other->__payTypeId_isset) ||
      (__payTypeId_isset && (__payTypeId != other->__payTypeId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) payTypeId {
  return __payTypeId;
}

- (void) setPayTypeId: (int32_t) payTypeId {
  __payTypeId = payTypeId;
  __payTypeId_isset = YES;
}

- (BOOL) payTypeIdIsSet {
  return __payTypeId_isset;
}

- (void) unsetPayTypeId {
  __payTypeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPayTypeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPayBanksReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__payTypeId_isset) {
    [outProtocol writeFieldBeginWithName: @"payTypeId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __payTypeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetPayBanksReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",payTypeId:"];
  [ms appendFormat: @"%i", __payTypeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFPreBindBankCardReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header transType: (int32_t) transType payTypeId: (int32_t) payTypeId papersType: (NSString *) papersType papersNo: (NSString *) papersNo bankId: (NSString *) bankId accountName: (NSString *) accountName accountNumber: (NSString *) accountNumber phoneNumber: (NSString *) phoneNumber province: (NSString *) province city: (NSString *) city branchName: (NSString *) branchName merchantNo: (NSString *) merchantNo
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __transType = transType;
  __transType_isset = YES;
  __payTypeId = payTypeId;
  __payTypeId_isset = YES;
  __papersType = [papersType retain_stub];
  __papersType_isset = YES;
  __papersNo = [papersNo retain_stub];
  __papersNo_isset = YES;
  __bankId = [bankId retain_stub];
  __bankId_isset = YES;
  __accountName = [accountName retain_stub];
  __accountName_isset = YES;
  __accountNumber = [accountNumber retain_stub];
  __accountNumber_isset = YES;
  __phoneNumber = [phoneNumber retain_stub];
  __phoneNumber_isset = YES;
  __province = [province retain_stub];
  __province_isset = YES;
  __city = [city retain_stub];
  __city_isset = YES;
  __branchName = [branchName retain_stub];
  __branchName_isset = YES;
  __merchantNo = [merchantNo retain_stub];
  __merchantNo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"transType"])
  {
    __transType = [decoder decodeInt32ForKey: @"transType"];
    __transType_isset = YES;
  }
  if ([decoder containsValueForKey: @"payTypeId"])
  {
    __payTypeId = [decoder decodeInt32ForKey: @"payTypeId"];
    __payTypeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersType"])
  {
    __papersType = [[decoder decodeObjectForKey: @"papersType"] retain_stub];
    __papersType_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersNo"])
  {
    __papersNo = [[decoder decodeObjectForKey: @"papersNo"] retain_stub];
    __papersNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"bankId"])
  {
    __bankId = [[decoder decodeObjectForKey: @"bankId"] retain_stub];
    __bankId_isset = YES;
  }
  if ([decoder containsValueForKey: @"accountName"])
  {
    __accountName = [[decoder decodeObjectForKey: @"accountName"] retain_stub];
    __accountName_isset = YES;
  }
  if ([decoder containsValueForKey: @"accountNumber"])
  {
    __accountNumber = [[decoder decodeObjectForKey: @"accountNumber"] retain_stub];
    __accountNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneNumber"])
  {
    __phoneNumber = [[decoder decodeObjectForKey: @"phoneNumber"] retain_stub];
    __phoneNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"province"])
  {
    __province = [[decoder decodeObjectForKey: @"province"] retain_stub];
    __province_isset = YES;
  }
  if ([decoder containsValueForKey: @"city"])
  {
    __city = [[decoder decodeObjectForKey: @"city"] retain_stub];
    __city_isset = YES;
  }
  if ([decoder containsValueForKey: @"branchName"])
  {
    __branchName = [[decoder decodeObjectForKey: @"branchName"] retain_stub];
    __branchName_isset = YES;
  }
  if ([decoder containsValueForKey: @"merchantNo"])
  {
    __merchantNo = [[decoder decodeObjectForKey: @"merchantNo"] retain_stub];
    __merchantNo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__transType_isset)
  {
    [encoder encodeInt32: __transType forKey: @"transType"];
  }
  if (__payTypeId_isset)
  {
    [encoder encodeInt32: __payTypeId forKey: @"payTypeId"];
  }
  if (__papersType_isset)
  {
    [encoder encodeObject: __papersType forKey: @"papersType"];
  }
  if (__papersNo_isset)
  {
    [encoder encodeObject: __papersNo forKey: @"papersNo"];
  }
  if (__bankId_isset)
  {
    [encoder encodeObject: __bankId forKey: @"bankId"];
  }
  if (__accountName_isset)
  {
    [encoder encodeObject: __accountName forKey: @"accountName"];
  }
  if (__accountNumber_isset)
  {
    [encoder encodeObject: __accountNumber forKey: @"accountNumber"];
  }
  if (__phoneNumber_isset)
  {
    [encoder encodeObject: __phoneNumber forKey: @"phoneNumber"];
  }
  if (__province_isset)
  {
    [encoder encodeObject: __province forKey: @"province"];
  }
  if (__city_isset)
  {
    [encoder encodeObject: __city forKey: @"city"];
  }
  if (__branchName_isset)
  {
    [encoder encodeObject: __branchName forKey: @"branchName"];
  }
  if (__merchantNo_isset)
  {
    [encoder encodeObject: __merchantNo forKey: @"merchantNo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __transType_isset ? 2654435761 : 0;
  if (__transType_isset)
  {
    hash = (hash * 31) ^ [@(__transType) hash];
  }
  hash = (hash * 31) ^ __payTypeId_isset ? 2654435761 : 0;
  if (__payTypeId_isset)
  {
    hash = (hash * 31) ^ [@(__payTypeId) hash];
  }
  hash = (hash * 31) ^ __papersType_isset ? 2654435761 : 0;
  if (__papersType_isset)
  {
    hash = (hash * 31) ^ [__papersType hash];
  }
  hash = (hash * 31) ^ __papersNo_isset ? 2654435761 : 0;
  if (__papersNo_isset)
  {
    hash = (hash * 31) ^ [__papersNo hash];
  }
  hash = (hash * 31) ^ __bankId_isset ? 2654435761 : 0;
  if (__bankId_isset)
  {
    hash = (hash * 31) ^ [__bankId hash];
  }
  hash = (hash * 31) ^ __accountName_isset ? 2654435761 : 0;
  if (__accountName_isset)
  {
    hash = (hash * 31) ^ [__accountName hash];
  }
  hash = (hash * 31) ^ __accountNumber_isset ? 2654435761 : 0;
  if (__accountNumber_isset)
  {
    hash = (hash * 31) ^ [__accountNumber hash];
  }
  hash = (hash * 31) ^ __phoneNumber_isset ? 2654435761 : 0;
  if (__phoneNumber_isset)
  {
    hash = (hash * 31) ^ [__phoneNumber hash];
  }
  hash = (hash * 31) ^ __province_isset ? 2654435761 : 0;
  if (__province_isset)
  {
    hash = (hash * 31) ^ [__province hash];
  }
  hash = (hash * 31) ^ __city_isset ? 2654435761 : 0;
  if (__city_isset)
  {
    hash = (hash * 31) ^ [__city hash];
  }
  hash = (hash * 31) ^ __branchName_isset ? 2654435761 : 0;
  if (__branchName_isset)
  {
    hash = (hash * 31) ^ [__branchName hash];
  }
  hash = (hash * 31) ^ __merchantNo_isset ? 2654435761 : 0;
  if (__merchantNo_isset)
  {
    hash = (hash * 31) ^ [__merchantNo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFPreBindBankCardReq class]]) {
    return NO;
  }
  NMTFPreBindBankCardReq *other = (NMTFPreBindBankCardReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__transType_isset != other->__transType_isset) ||
      (__transType_isset && (__transType != other->__transType))) {
    return NO;
  }
  if ((__payTypeId_isset != other->__payTypeId_isset) ||
      (__payTypeId_isset && (__payTypeId != other->__payTypeId))) {
    return NO;
  }
  if ((__papersType_isset != other->__papersType_isset) ||
      (__papersType_isset && ((__papersType || other->__papersType) && ![__papersType isEqual:other->__papersType]))) {
    return NO;
  }
  if ((__papersNo_isset != other->__papersNo_isset) ||
      (__papersNo_isset && ((__papersNo || other->__papersNo) && ![__papersNo isEqual:other->__papersNo]))) {
    return NO;
  }
  if ((__bankId_isset != other->__bankId_isset) ||
      (__bankId_isset && ((__bankId || other->__bankId) && ![__bankId isEqual:other->__bankId]))) {
    return NO;
  }
  if ((__accountName_isset != other->__accountName_isset) ||
      (__accountName_isset && ((__accountName || other->__accountName) && ![__accountName isEqual:other->__accountName]))) {
    return NO;
  }
  if ((__accountNumber_isset != other->__accountNumber_isset) ||
      (__accountNumber_isset && ((__accountNumber || other->__accountNumber) && ![__accountNumber isEqual:other->__accountNumber]))) {
    return NO;
  }
  if ((__phoneNumber_isset != other->__phoneNumber_isset) ||
      (__phoneNumber_isset && ((__phoneNumber || other->__phoneNumber) && ![__phoneNumber isEqual:other->__phoneNumber]))) {
    return NO;
  }
  if ((__province_isset != other->__province_isset) ||
      (__province_isset && ((__province || other->__province) && ![__province isEqual:other->__province]))) {
    return NO;
  }
  if ((__city_isset != other->__city_isset) ||
      (__city_isset && ((__city || other->__city) && ![__city isEqual:other->__city]))) {
    return NO;
  }
  if ((__branchName_isset != other->__branchName_isset) ||
      (__branchName_isset && ((__branchName || other->__branchName) && ![__branchName isEqual:other->__branchName]))) {
    return NO;
  }
  if ((__merchantNo_isset != other->__merchantNo_isset) ||
      (__merchantNo_isset && ((__merchantNo || other->__merchantNo) && ![__merchantNo isEqual:other->__merchantNo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__papersType release_stub];
  [__papersNo release_stub];
  [__bankId release_stub];
  [__accountName release_stub];
  [__accountNumber release_stub];
  [__phoneNumber release_stub];
  [__province release_stub];
  [__city release_stub];
  [__branchName release_stub];
  [__merchantNo release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) transType {
  return __transType;
}

- (void) setTransType: (int32_t) transType {
  __transType = transType;
  __transType_isset = YES;
}

- (BOOL) transTypeIsSet {
  return __transType_isset;
}

- (void) unsetTransType {
  __transType_isset = NO;
}

- (int32_t) payTypeId {
  return __payTypeId;
}

- (void) setPayTypeId: (int32_t) payTypeId {
  __payTypeId = payTypeId;
  __payTypeId_isset = YES;
}

- (BOOL) payTypeIdIsSet {
  return __payTypeId_isset;
}

- (void) unsetPayTypeId {
  __payTypeId_isset = NO;
}

- (NSString *) papersType {
  return [[__papersType retain_stub] autorelease_stub];
}

- (void) setPapersType: (NSString *) papersType {
  [papersType retain_stub];
  [__papersType release_stub];
  __papersType = papersType;
  __papersType_isset = YES;
}

- (BOOL) papersTypeIsSet {
  return __papersType_isset;
}

- (void) unsetPapersType {
  [__papersType release_stub];
  __papersType = nil;
  __papersType_isset = NO;
}

- (NSString *) papersNo {
  return [[__papersNo retain_stub] autorelease_stub];
}

- (void) setPapersNo: (NSString *) papersNo {
  [papersNo retain_stub];
  [__papersNo release_stub];
  __papersNo = papersNo;
  __papersNo_isset = YES;
}

- (BOOL) papersNoIsSet {
  return __papersNo_isset;
}

- (void) unsetPapersNo {
  [__papersNo release_stub];
  __papersNo = nil;
  __papersNo_isset = NO;
}

- (NSString *) bankId {
  return [[__bankId retain_stub] autorelease_stub];
}

- (void) setBankId: (NSString *) bankId {
  [bankId retain_stub];
  [__bankId release_stub];
  __bankId = bankId;
  __bankId_isset = YES;
}

- (BOOL) bankIdIsSet {
  return __bankId_isset;
}

- (void) unsetBankId {
  [__bankId release_stub];
  __bankId = nil;
  __bankId_isset = NO;
}

- (NSString *) accountName {
  return [[__accountName retain_stub] autorelease_stub];
}

- (void) setAccountName: (NSString *) accountName {
  [accountName retain_stub];
  [__accountName release_stub];
  __accountName = accountName;
  __accountName_isset = YES;
}

- (BOOL) accountNameIsSet {
  return __accountName_isset;
}

- (void) unsetAccountName {
  [__accountName release_stub];
  __accountName = nil;
  __accountName_isset = NO;
}

- (NSString *) accountNumber {
  return [[__accountNumber retain_stub] autorelease_stub];
}

- (void) setAccountNumber: (NSString *) accountNumber {
  [accountNumber retain_stub];
  [__accountNumber release_stub];
  __accountNumber = accountNumber;
  __accountNumber_isset = YES;
}

- (BOOL) accountNumberIsSet {
  return __accountNumber_isset;
}

- (void) unsetAccountNumber {
  [__accountNumber release_stub];
  __accountNumber = nil;
  __accountNumber_isset = NO;
}

- (NSString *) phoneNumber {
  return [[__phoneNumber retain_stub] autorelease_stub];
}

- (void) setPhoneNumber: (NSString *) phoneNumber {
  [phoneNumber retain_stub];
  [__phoneNumber release_stub];
  __phoneNumber = phoneNumber;
  __phoneNumber_isset = YES;
}

- (BOOL) phoneNumberIsSet {
  return __phoneNumber_isset;
}

- (void) unsetPhoneNumber {
  [__phoneNumber release_stub];
  __phoneNumber = nil;
  __phoneNumber_isset = NO;
}

- (NSString *) province {
  return [[__province retain_stub] autorelease_stub];
}

- (void) setProvince: (NSString *) province {
  [province retain_stub];
  [__province release_stub];
  __province = province;
  __province_isset = YES;
}

- (BOOL) provinceIsSet {
  return __province_isset;
}

- (void) unsetProvince {
  [__province release_stub];
  __province = nil;
  __province_isset = NO;
}

- (NSString *) city {
  return [[__city retain_stub] autorelease_stub];
}

- (void) setCity: (NSString *) city {
  [city retain_stub];
  [__city release_stub];
  __city = city;
  __city_isset = YES;
}

- (BOOL) cityIsSet {
  return __city_isset;
}

- (void) unsetCity {
  [__city release_stub];
  __city = nil;
  __city_isset = NO;
}

- (NSString *) branchName {
  return [[__branchName retain_stub] autorelease_stub];
}

- (void) setBranchName: (NSString *) branchName {
  [branchName retain_stub];
  [__branchName release_stub];
  __branchName = branchName;
  __branchName_isset = YES;
}

- (BOOL) branchNameIsSet {
  return __branchName_isset;
}

- (void) unsetBranchName {
  [__branchName release_stub];
  __branchName = nil;
  __branchName_isset = NO;
}

- (NSString *) merchantNo {
  return [[__merchantNo retain_stub] autorelease_stub];
}

- (void) setMerchantNo: (NSString *) merchantNo {
  [merchantNo retain_stub];
  [__merchantNo release_stub];
  __merchantNo = merchantNo;
  __merchantNo_isset = YES;
}

- (BOOL) merchantNoIsSet {
  return __merchantNo_isset;
}

- (void) unsetMerchantNo {
  [__merchantNo release_stub];
  __merchantNo = nil;
  __merchantNo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTransType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPayTypeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPapersType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPapersNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBankId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccountName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccountNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoneNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProvince: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBranchName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMerchantNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PreBindBankCardReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__transType_isset) {
    [outProtocol writeFieldBeginWithName: @"transType" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __transType];
    [outProtocol writeFieldEnd];
  }
  if (__payTypeId_isset) {
    [outProtocol writeFieldBeginWithName: @"payTypeId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __payTypeId];
    [outProtocol writeFieldEnd];
  }
  if (__papersType_isset) {
    if (__papersType != nil) {
      [outProtocol writeFieldBeginWithName: @"papersType" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __papersType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__papersNo_isset) {
    if (__papersNo != nil) {
      [outProtocol writeFieldBeginWithName: @"papersNo" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __papersNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bankId_isset) {
    if (__bankId != nil) {
      [outProtocol writeFieldBeginWithName: @"bankId" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __bankId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__accountName_isset) {
    if (__accountName != nil) {
      [outProtocol writeFieldBeginWithName: @"accountName" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __accountName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__accountNumber_isset) {
    if (__accountNumber != nil) {
      [outProtocol writeFieldBeginWithName: @"accountNumber" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __accountNumber];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phoneNumber_isset) {
    if (__phoneNumber != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneNumber" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __phoneNumber];
      [outProtocol writeFieldEnd];
    }
  }
  if (__province_isset) {
    if (__province != nil) {
      [outProtocol writeFieldBeginWithName: @"province" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __province];
      [outProtocol writeFieldEnd];
    }
  }
  if (__city_isset) {
    if (__city != nil) {
      [outProtocol writeFieldBeginWithName: @"city" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __city];
      [outProtocol writeFieldEnd];
    }
  }
  if (__branchName_isset) {
    if (__branchName != nil) {
      [outProtocol writeFieldBeginWithName: @"branchName" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __branchName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__merchantNo_isset) {
    if (__merchantNo != nil) {
      [outProtocol writeFieldBeginWithName: @"merchantNo" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __merchantNo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFPreBindBankCardReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",transType:"];
  [ms appendFormat: @"%i", __transType];
  [ms appendString: @",payTypeId:"];
  [ms appendFormat: @"%i", __payTypeId];
  [ms appendString: @",papersType:"];
  [ms appendFormat: @"\"%@\"", __papersType];
  [ms appendString: @",papersNo:"];
  [ms appendFormat: @"\"%@\"", __papersNo];
  [ms appendString: @",bankId:"];
  [ms appendFormat: @"\"%@\"", __bankId];
  [ms appendString: @",accountName:"];
  [ms appendFormat: @"\"%@\"", __accountName];
  [ms appendString: @",accountNumber:"];
  [ms appendFormat: @"\"%@\"", __accountNumber];
  [ms appendString: @",phoneNumber:"];
  [ms appendFormat: @"\"%@\"", __phoneNumber];
  [ms appendString: @",province:"];
  [ms appendFormat: @"\"%@\"", __province];
  [ms appendString: @",city:"];
  [ms appendFormat: @"\"%@\"", __city];
  [ms appendString: @",branchName:"];
  [ms appendFormat: @"\"%@\"", __branchName];
  [ms appendString: @",merchantNo:"];
  [ms appendFormat: @"\"%@\"", __merchantNo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFBindBankCardReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NMTFReqHeader *) header txSNBinding: (NSString *) txSNBinding smsValidCode: (NSString *) smsValidCode
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __txSNBinding = [txSNBinding retain_stub];
  __txSNBinding_isset = YES;
  __smsValidCode = [smsValidCode retain_stub];
  __smsValidCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"txSNBinding"])
  {
    __txSNBinding = [[decoder decodeObjectForKey: @"txSNBinding"] retain_stub];
    __txSNBinding_isset = YES;
  }
  if ([decoder containsValueForKey: @"smsValidCode"])
  {
    __smsValidCode = [[decoder decodeObjectForKey: @"smsValidCode"] retain_stub];
    __smsValidCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__txSNBinding_isset)
  {
    [encoder encodeObject: __txSNBinding forKey: @"txSNBinding"];
  }
  if (__smsValidCode_isset)
  {
    [encoder encodeObject: __smsValidCode forKey: @"smsValidCode"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __txSNBinding_isset ? 2654435761 : 0;
  if (__txSNBinding_isset)
  {
    hash = (hash * 31) ^ [__txSNBinding hash];
  }
  hash = (hash * 31) ^ __smsValidCode_isset ? 2654435761 : 0;
  if (__smsValidCode_isset)
  {
    hash = (hash * 31) ^ [__smsValidCode hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFBindBankCardReq class]]) {
    return NO;
  }
  NMTFBindBankCardReq *other = (NMTFBindBankCardReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__txSNBinding_isset != other->__txSNBinding_isset) ||
      (__txSNBinding_isset && ((__txSNBinding || other->__txSNBinding) && ![__txSNBinding isEqual:other->__txSNBinding]))) {
    return NO;
  }
  if ((__smsValidCode_isset != other->__smsValidCode_isset) ||
      (__smsValidCode_isset && ((__smsValidCode || other->__smsValidCode) && ![__smsValidCode isEqual:other->__smsValidCode]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__txSNBinding release_stub];
  [__smsValidCode release_stub];
  [super dealloc_stub];
}

- (NMTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) txSNBinding {
  return [[__txSNBinding retain_stub] autorelease_stub];
}

- (void) setTxSNBinding: (NSString *) txSNBinding {
  [txSNBinding retain_stub];
  [__txSNBinding release_stub];
  __txSNBinding = txSNBinding;
  __txSNBinding_isset = YES;
}

- (BOOL) txSNBindingIsSet {
  return __txSNBinding_isset;
}

- (void) unsetTxSNBinding {
  [__txSNBinding release_stub];
  __txSNBinding = nil;
  __txSNBinding_isset = NO;
}

- (NSString *) smsValidCode {
  return [[__smsValidCode retain_stub] autorelease_stub];
}

- (void) setSmsValidCode: (NSString *) smsValidCode {
  [smsValidCode retain_stub];
  [__smsValidCode release_stub];
  __smsValidCode = smsValidCode;
  __smsValidCode_isset = YES;
}

- (BOOL) smsValidCodeIsSet {
  return __smsValidCode_isset;
}

- (void) unsetSmsValidCode {
  [__smsValidCode release_stub];
  __smsValidCode = nil;
  __smsValidCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFReqHeader *fieldValue = [[NMTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTxSNBinding: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSmsValidCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BindBankCardReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__txSNBinding_isset) {
    if (__txSNBinding != nil) {
      [outProtocol writeFieldBeginWithName: @"txSNBinding" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __txSNBinding];
      [outProtocol writeFieldEnd];
    }
  }
  if (__smsValidCode_isset) {
    if (__smsValidCode != nil) {
      [outProtocol writeFieldBeginWithName: @"smsValidCode" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __smsValidCode];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFBindBankCardReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",txSNBinding:"];
  [ms appendFormat: @"\"%@\"", __txSNBinding];
  [ms appendString: @",smsValidCode:"];
  [ms appendFormat: @"\"%@\"", __smsValidCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation NMTFMtReqConstants
+ (void) initialize {
}
@end

