/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "MtBase.h"
#import "MtRespDto.h"

#import "MtResp.h"

@implementation NMTFGetMtBannersResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

  self.banners = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header banners: (NSMutableArray *) banners
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __banners = [banners retain_stub];
  __banners_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"banners"])
  {
    __banners = [[decoder decodeObjectForKey: @"banners"] retain_stub];
    __banners_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__banners_isset)
  {
    [encoder encodeObject: __banners forKey: @"banners"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __banners_isset ? 2654435761 : 0;
  if (__banners_isset)
  {
    hash = (hash * 31) ^ [__banners hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtBannersResp class]]) {
    return NO;
  }
  NMTFGetMtBannersResp *other = (NMTFGetMtBannersResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__banners_isset != other->__banners_isset) ||
      (__banners_isset && ((__banners || other->__banners) && ![__banners isEqual:other->__banners]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__banners release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) banners {
  return [[__banners retain_stub] autorelease_stub];
}

- (void) setBanners: (NSMutableArray *) banners {
  [banners retain_stub];
  [__banners release_stub];
  __banners = banners;
  __banners_isset = YES;
}

- (BOOL) bannersIsSet {
  return __banners_isset;
}

- (void) unsetBanners {
  [__banners release_stub];
  __banners = nil;
  __banners_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NMTFBannersDto *_elem2 = [[NMTFBannersDto alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setBanners: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtBannersResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__banners_isset) {
    if (__banners != nil) {
      [outProtocol writeFieldBeginWithName: @"banners" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__banners count]];
        int idx4;
        for (idx4 = 0; idx4 < [__banners count]; idx4++)
        {
          [[__banners objectAtIndex: idx4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtBannersResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",banners:"];
  [ms appendFormat: @"%@", __banners];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtProCatsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

  self.proCats = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header proCats: (NSMutableArray *) proCats
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __proCats = [proCats retain_stub];
  __proCats_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"proCats"])
  {
    __proCats = [[decoder decodeObjectForKey: @"proCats"] retain_stub];
    __proCats_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__proCats_isset)
  {
    [encoder encodeObject: __proCats forKey: @"proCats"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __proCats_isset ? 2654435761 : 0;
  if (__proCats_isset)
  {
    hash = (hash * 31) ^ [__proCats hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtProCatsResp class]]) {
    return NO;
  }
  NMTFGetMtProCatsResp *other = (NMTFGetMtProCatsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__proCats_isset != other->__proCats_isset) ||
      (__proCats_isset && ((__proCats || other->__proCats) && ![__proCats isEqual:other->__proCats]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__proCats release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) proCats {
  return [[__proCats retain_stub] autorelease_stub];
}

- (void) setProCats: (NSMutableArray *) proCats {
  [proCats retain_stub];
  [__proCats release_stub];
  __proCats = proCats;
  __proCats_isset = YES;
}

- (BOOL) proCatsIsSet {
  return __proCats_isset;
}

- (void) unsetProCats {
  [__proCats release_stub];
  __proCats = nil;
  __proCats_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NMTFProCatDto *_elem7 = [[NMTFProCatDto alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setProCats: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtProCatsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__proCats_isset) {
    if (__proCats != nil) {
      [outProtocol writeFieldBeginWithName: @"proCats" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__proCats count]];
        int idx9;
        for (idx9 = 0; idx9 < [__proCats count]; idx9++)
        {
          [[__proCats objectAtIndex: idx9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtProCatsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",proCats:"];
  [ms appendFormat: @"%@", __proCats];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtMersResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

  self.mers = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header page: (NMTFPage *) page mers: (NSMutableArray *) mers
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __mers = [mers retain_stub];
  __mers_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"mers"])
  {
    __mers = [[decoder decodeObjectForKey: @"mers"] retain_stub];
    __mers_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__mers_isset)
  {
    [encoder encodeObject: __mers forKey: @"mers"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __mers_isset ? 2654435761 : 0;
  if (__mers_isset)
  {
    hash = (hash * 31) ^ [__mers hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtMersResp class]]) {
    return NO;
  }
  NMTFGetMtMersResp *other = (NMTFGetMtMersResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__mers_isset != other->__mers_isset) ||
      (__mers_isset && ((__mers || other->__mers) && ![__mers isEqual:other->__mers]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__mers release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NMTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NMTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSMutableArray *) mers {
  return [[__mers retain_stub] autorelease_stub];
}

- (void) setMers: (NSMutableArray *) mers {
  [mers retain_stub];
  [__mers release_stub];
  __mers = mers;
  __mers_isset = YES;
}

- (BOOL) mersIsSet {
  return __mers_isset;
}

- (void) unsetMers {
  [__mers release_stub];
  __mers = nil;
  __mers_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NMTFPage *fieldValue = [[NMTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            NMTFMerDto *_elem12 = [[NMTFMerDto alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release_stub];
          }
          [inProtocol readListEnd];
          [self setMers: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtMersResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mers_isset) {
    if (__mers != nil) {
      [outProtocol writeFieldBeginWithName: @"mers" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__mers count]];
        int idx14;
        for (idx14 = 0; idx14 < [__mers count]; idx14++)
        {
          [[__mers objectAtIndex: idx14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtMersResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",mers:"];
  [ms appendFormat: @"%@", __mers];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtMerInfoResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header mer: (NMTFMerDto *) mer
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __mer = [mer retain_stub];
  __mer_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"mer"])
  {
    __mer = [[decoder decodeObjectForKey: @"mer"] retain_stub];
    __mer_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__mer_isset)
  {
    [encoder encodeObject: __mer forKey: @"mer"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __mer_isset ? 2654435761 : 0;
  if (__mer_isset)
  {
    hash = (hash * 31) ^ [__mer hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtMerInfoResp class]]) {
    return NO;
  }
  NMTFGetMtMerInfoResp *other = (NMTFGetMtMerInfoResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__mer_isset != other->__mer_isset) ||
      (__mer_isset && ((__mer || other->__mer) && ![__mer isEqual:other->__mer]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__mer release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NMTFMerDto *) mer {
  return [[__mer retain_stub] autorelease_stub];
}

- (void) setMer: (NMTFMerDto *) mer {
  [mer retain_stub];
  [__mer release_stub];
  __mer = mer;
  __mer_isset = YES;
}

- (BOOL) merIsSet {
  return __mer_isset;
}

- (void) unsetMer {
  [__mer release_stub];
  __mer = nil;
  __mer_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NMTFMerDto *fieldValue = [[NMTFMerDto alloc] init];
          [fieldValue read: inProtocol];
          [self setMer: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtMerInfoResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mer_isset) {
    if (__mer != nil) {
      [outProtocol writeFieldBeginWithName: @"mer" type: TType_STRUCT fieldID: 2];
      [__mer write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtMerInfoResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",mer:"];
  [ms appendFormat: @"%@", __mer];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtMerStoresResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

  self.merStores = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header page: (NMTFPage *) page merStores: (NSMutableArray *) merStores
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __merStores = [merStores retain_stub];
  __merStores_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"merStores"])
  {
    __merStores = [[decoder decodeObjectForKey: @"merStores"] retain_stub];
    __merStores_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__merStores_isset)
  {
    [encoder encodeObject: __merStores forKey: @"merStores"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __merStores_isset ? 2654435761 : 0;
  if (__merStores_isset)
  {
    hash = (hash * 31) ^ [__merStores hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtMerStoresResp class]]) {
    return NO;
  }
  NMTFGetMtMerStoresResp *other = (NMTFGetMtMerStoresResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__merStores_isset != other->__merStores_isset) ||
      (__merStores_isset && ((__merStores || other->__merStores) && ![__merStores isEqual:other->__merStores]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__merStores release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NMTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NMTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSMutableArray *) merStores {
  return [[__merStores retain_stub] autorelease_stub];
}

- (void) setMerStores: (NSMutableArray *) merStores {
  [merStores retain_stub];
  [__merStores release_stub];
  __merStores = merStores;
  __merStores_isset = YES;
}

- (BOOL) merStoresIsSet {
  return __merStores_isset;
}

- (void) unsetMerStores {
  [__merStores release_stub];
  __merStores = nil;
  __merStores_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NMTFPage *fieldValue = [[NMTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            NMTFMerStoreDot *_elem17 = [[NMTFMerStoreDot alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
            [_elem17 release_stub];
          }
          [inProtocol readListEnd];
          [self setMerStores: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtMerStoresResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__merStores_isset) {
    if (__merStores != nil) {
      [outProtocol writeFieldBeginWithName: @"merStores" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__merStores count]];
        int idx19;
        for (idx19 = 0; idx19 < [__merStores count]; idx19++)
        {
          [[__merStores objectAtIndex: idx19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtMerStoresResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",merStores:"];
  [ms appendFormat: @"%@", __merStores];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtProsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

  self.pros = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header page: (NMTFPage *) page pros: (NSMutableArray *) pros
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __pros = [pros retain_stub];
  __pros_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"pros"])
  {
    __pros = [[decoder decodeObjectForKey: @"pros"] retain_stub];
    __pros_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__pros_isset)
  {
    [encoder encodeObject: __pros forKey: @"pros"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __pros_isset ? 2654435761 : 0;
  if (__pros_isset)
  {
    hash = (hash * 31) ^ [__pros hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtProsResp class]]) {
    return NO;
  }
  NMTFGetMtProsResp *other = (NMTFGetMtProsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__pros_isset != other->__pros_isset) ||
      (__pros_isset && ((__pros || other->__pros) && ![__pros isEqual:other->__pros]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__pros release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NMTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NMTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSMutableArray *) pros {
  return [[__pros retain_stub] autorelease_stub];
}

- (void) setPros: (NSMutableArray *) pros {
  [pros retain_stub];
  [__pros release_stub];
  __pros = pros;
  __pros_isset = YES;
}

- (BOOL) prosIsSet {
  return __pros_isset;
}

- (void) unsetPros {
  [__pros release_stub];
  __pros = nil;
  __pros_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NMTFPage *fieldValue = [[NMTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            NMTFProDto *_elem22 = [[NMTFProDto alloc] init];
            [_elem22 read: inProtocol];
            [fieldValue addObject: _elem22];
            [_elem22 release_stub];
          }
          [inProtocol readListEnd];
          [self setPros: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtProsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pros_isset) {
    if (__pros != nil) {
      [outProtocol writeFieldBeginWithName: @"pros" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__pros count]];
        int idx24;
        for (idx24 = 0; idx24 < [__pros count]; idx24++)
        {
          [[__pros objectAtIndex: idx24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtProsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",pros:"];
  [ms appendFormat: @"%@", __pros];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtProInfoResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header proInfo: (NMTFProInfoDto *) proInfo
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __proInfo = [proInfo retain_stub];
  __proInfo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"proInfo"])
  {
    __proInfo = [[decoder decodeObjectForKey: @"proInfo"] retain_stub];
    __proInfo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__proInfo_isset)
  {
    [encoder encodeObject: __proInfo forKey: @"proInfo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __proInfo_isset ? 2654435761 : 0;
  if (__proInfo_isset)
  {
    hash = (hash * 31) ^ [__proInfo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtProInfoResp class]]) {
    return NO;
  }
  NMTFGetMtProInfoResp *other = (NMTFGetMtProInfoResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__proInfo_isset != other->__proInfo_isset) ||
      (__proInfo_isset && ((__proInfo || other->__proInfo) && ![__proInfo isEqual:other->__proInfo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__proInfo release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NMTFProInfoDto *) proInfo {
  return [[__proInfo retain_stub] autorelease_stub];
}

- (void) setProInfo: (NMTFProInfoDto *) proInfo {
  [proInfo retain_stub];
  [__proInfo release_stub];
  __proInfo = proInfo;
  __proInfo_isset = YES;
}

- (BOOL) proInfoIsSet {
  return __proInfo_isset;
}

- (void) unsetProInfo {
  [__proInfo release_stub];
  __proInfo = nil;
  __proInfo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NMTFProInfoDto *fieldValue = [[NMTFProInfoDto alloc] init];
          [fieldValue read: inProtocol];
          [self setProInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtProInfoResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__proInfo_isset) {
    if (__proInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"proInfo" type: TType_STRUCT fieldID: 2];
      [__proInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtProInfoResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",proInfo:"];
  [ms appendFormat: @"%@", __proInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFFindMtMerProsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

  self.mers = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

  self.pros = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header page: (NMTFPage *) page mers: (NSMutableArray *) mers pros: (NSMutableArray *) pros
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __mers = [mers retain_stub];
  __mers_isset = YES;
  __pros = [pros retain_stub];
  __pros_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"mers"])
  {
    __mers = [[decoder decodeObjectForKey: @"mers"] retain_stub];
    __mers_isset = YES;
  }
  if ([decoder containsValueForKey: @"pros"])
  {
    __pros = [[decoder decodeObjectForKey: @"pros"] retain_stub];
    __pros_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__mers_isset)
  {
    [encoder encodeObject: __mers forKey: @"mers"];
  }
  if (__pros_isset)
  {
    [encoder encodeObject: __pros forKey: @"pros"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __mers_isset ? 2654435761 : 0;
  if (__mers_isset)
  {
    hash = (hash * 31) ^ [__mers hash];
  }
  hash = (hash * 31) ^ __pros_isset ? 2654435761 : 0;
  if (__pros_isset)
  {
    hash = (hash * 31) ^ [__pros hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFFindMtMerProsResp class]]) {
    return NO;
  }
  NMTFFindMtMerProsResp *other = (NMTFFindMtMerProsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__mers_isset != other->__mers_isset) ||
      (__mers_isset && ((__mers || other->__mers) && ![__mers isEqual:other->__mers]))) {
    return NO;
  }
  if ((__pros_isset != other->__pros_isset) ||
      (__pros_isset && ((__pros || other->__pros) && ![__pros isEqual:other->__pros]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__mers release_stub];
  [__pros release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NMTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NMTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSMutableArray *) mers {
  return [[__mers retain_stub] autorelease_stub];
}

- (void) setMers: (NSMutableArray *) mers {
  [mers retain_stub];
  [__mers release_stub];
  __mers = mers;
  __mers_isset = YES;
}

- (BOOL) mersIsSet {
  return __mers_isset;
}

- (void) unsetMers {
  [__mers release_stub];
  __mers = nil;
  __mers_isset = NO;
}

- (NSMutableArray *) pros {
  return [[__pros retain_stub] autorelease_stub];
}

- (void) setPros: (NSMutableArray *) pros {
  [pros retain_stub];
  [__pros release_stub];
  __pros = pros;
  __pros_isset = YES;
}

- (BOOL) prosIsSet {
  return __pros_isset;
}

- (void) unsetPros {
  [__pros release_stub];
  __pros = nil;
  __pros_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NMTFPage *fieldValue = [[NMTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size25;
          [inProtocol readListBeginReturningElementType: NULL size: &_size25];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            NMTFMerDto *_elem27 = [[NMTFMerDto alloc] init];
            [_elem27 read: inProtocol];
            [fieldValue addObject: _elem27];
            [_elem27 release_stub];
          }
          [inProtocol readListEnd];
          [self setMers: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size28;
          [inProtocol readListBeginReturningElementType: NULL size: &_size28];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size28];
          int _i29;
          for (_i29 = 0; _i29 < _size28; ++_i29)
          {
            NMTFProDto *_elem30 = [[NMTFProDto alloc] init];
            [_elem30 read: inProtocol];
            [fieldValue addObject: _elem30];
            [_elem30 release_stub];
          }
          [inProtocol readListEnd];
          [self setPros: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FindMtMerProsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mers_isset) {
    if (__mers != nil) {
      [outProtocol writeFieldBeginWithName: @"mers" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__mers count]];
        int idx32;
        for (idx32 = 0; idx32 < [__mers count]; idx32++)
        {
          [[__mers objectAtIndex: idx32] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__pros_isset) {
    if (__pros != nil) {
      [outProtocol writeFieldBeginWithName: @"pros" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__pros count]];
        int idx34;
        for (idx34 = 0; idx34 < [__pros count]; idx34++)
        {
          [[__pros objectAtIndex: idx34] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFFindMtMerProsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",mers:"];
  [ms appendFormat: @"%@", __mers];
  [ms appendString: @",pros:"];
  [ms appendFormat: @"%@", __pros];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtShipAddsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

  self.addresses = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header page: (NMTFPage *) page addresses: (NSMutableArray *) addresses
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __addresses = [addresses retain_stub];
  __addresses_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"addresses"])
  {
    __addresses = [[decoder decodeObjectForKey: @"addresses"] retain_stub];
    __addresses_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__addresses_isset)
  {
    [encoder encodeObject: __addresses forKey: @"addresses"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __addresses_isset ? 2654435761 : 0;
  if (__addresses_isset)
  {
    hash = (hash * 31) ^ [__addresses hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtShipAddsResp class]]) {
    return NO;
  }
  NMTFGetMtShipAddsResp *other = (NMTFGetMtShipAddsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__addresses_isset != other->__addresses_isset) ||
      (__addresses_isset && ((__addresses || other->__addresses) && ![__addresses isEqual:other->__addresses]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__addresses release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NMTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NMTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSMutableArray *) addresses {
  return [[__addresses retain_stub] autorelease_stub];
}

- (void) setAddresses: (NSMutableArray *) addresses {
  [addresses retain_stub];
  [__addresses release_stub];
  __addresses = addresses;
  __addresses_isset = YES;
}

- (BOOL) addressesIsSet {
  return __addresses_isset;
}

- (void) unsetAddresses {
  [__addresses release_stub];
  __addresses = nil;
  __addresses_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NMTFPage *fieldValue = [[NMTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size35;
          [inProtocol readListBeginReturningElementType: NULL size: &_size35];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size35];
          int _i36;
          for (_i36 = 0; _i36 < _size35; ++_i36)
          {
            NMTFAddressDto *_elem37 = [[NMTFAddressDto alloc] init];
            [_elem37 read: inProtocol];
            [fieldValue addObject: _elem37];
            [_elem37 release_stub];
          }
          [inProtocol readListEnd];
          [self setAddresses: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtShipAddsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__addresses_isset) {
    if (__addresses != nil) {
      [outProtocol writeFieldBeginWithName: @"addresses" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__addresses count]];
        int idx39;
        for (idx39 = 0; idx39 < [__addresses count]; idx39++)
        {
          [[__addresses objectAtIndex: idx39] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtShipAddsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",addresses:"];
  [ms appendFormat: @"%@", __addresses];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFEditMtShipAddResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header addDto: (NMTFAddressDto *) addDto
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __addDto = [addDto retain_stub];
  __addDto_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"addDto"])
  {
    __addDto = [[decoder decodeObjectForKey: @"addDto"] retain_stub];
    __addDto_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__addDto_isset)
  {
    [encoder encodeObject: __addDto forKey: @"addDto"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __addDto_isset ? 2654435761 : 0;
  if (__addDto_isset)
  {
    hash = (hash * 31) ^ [__addDto hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFEditMtShipAddResp class]]) {
    return NO;
  }
  NMTFEditMtShipAddResp *other = (NMTFEditMtShipAddResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__addDto_isset != other->__addDto_isset) ||
      (__addDto_isset && ((__addDto || other->__addDto) && ![__addDto isEqual:other->__addDto]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__addDto release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NMTFAddressDto *) addDto {
  return [[__addDto retain_stub] autorelease_stub];
}

- (void) setAddDto: (NMTFAddressDto *) addDto {
  [addDto retain_stub];
  [__addDto release_stub];
  __addDto = addDto;
  __addDto_isset = YES;
}

- (BOOL) addDtoIsSet {
  return __addDto_isset;
}

- (void) unsetAddDto {
  [__addDto release_stub];
  __addDto = nil;
  __addDto_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NMTFAddressDto *fieldValue = [[NMTFAddressDto alloc] init];
          [fieldValue read: inProtocol];
          [self setAddDto: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EditMtShipAddResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__addDto_isset) {
    if (__addDto != nil) {
      [outProtocol writeFieldBeginWithName: @"addDto" type: TType_STRUCT fieldID: 2];
      [__addDto write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFEditMtShipAddResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",addDto:"];
  [ms appendFormat: @"%@", __addDto];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtCartProsCntResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header prosCnt: (int32_t) prosCnt
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __prosCnt = prosCnt;
  __prosCnt_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"prosCnt"])
  {
    __prosCnt = [decoder decodeInt32ForKey: @"prosCnt"];
    __prosCnt_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__prosCnt_isset)
  {
    [encoder encodeInt32: __prosCnt forKey: @"prosCnt"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __prosCnt_isset ? 2654435761 : 0;
  if (__prosCnt_isset)
  {
    hash = (hash * 31) ^ [@(__prosCnt) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtCartProsCntResp class]]) {
    return NO;
  }
  NMTFGetMtCartProsCntResp *other = (NMTFGetMtCartProsCntResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__prosCnt_isset != other->__prosCnt_isset) ||
      (__prosCnt_isset && (__prosCnt != other->__prosCnt))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) prosCnt {
  return __prosCnt;
}

- (void) setProsCnt: (int32_t) prosCnt {
  __prosCnt = prosCnt;
  __prosCnt_isset = YES;
}

- (BOOL) prosCntIsSet {
  return __prosCnt_isset;
}

- (void) unsetProsCnt {
  __prosCnt_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setProsCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtCartProsCntResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__prosCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"prosCnt" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __prosCnt];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtCartProsCntResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",prosCnt:"];
  [ms appendFormat: @"%i", __prosCnt];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtCartProsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

  self.cartPros = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header page: (NMTFPage *) page cartPros: (NSMutableArray *) cartPros
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __cartPros = [cartPros retain_stub];
  __cartPros_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"cartPros"])
  {
    __cartPros = [[decoder decodeObjectForKey: @"cartPros"] retain_stub];
    __cartPros_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__cartPros_isset)
  {
    [encoder encodeObject: __cartPros forKey: @"cartPros"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __cartPros_isset ? 2654435761 : 0;
  if (__cartPros_isset)
  {
    hash = (hash * 31) ^ [__cartPros hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtCartProsResp class]]) {
    return NO;
  }
  NMTFGetMtCartProsResp *other = (NMTFGetMtCartProsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__cartPros_isset != other->__cartPros_isset) ||
      (__cartPros_isset && ((__cartPros || other->__cartPros) && ![__cartPros isEqual:other->__cartPros]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__cartPros release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NMTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NMTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSMutableArray *) cartPros {
  return [[__cartPros retain_stub] autorelease_stub];
}

- (void) setCartPros: (NSMutableArray *) cartPros {
  [cartPros retain_stub];
  [__cartPros release_stub];
  __cartPros = cartPros;
  __cartPros_isset = YES;
}

- (BOOL) cartProsIsSet {
  return __cartPros_isset;
}

- (void) unsetCartPros {
  [__cartPros release_stub];
  __cartPros = nil;
  __cartPros_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NMTFPage *fieldValue = [[NMTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size40;
          [inProtocol readListBeginReturningElementType: NULL size: &_size40];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size40];
          int _i41;
          for (_i41 = 0; _i41 < _size40; ++_i41)
          {
            NMTFCartProDto *_elem42 = [[NMTFCartProDto alloc] init];
            [_elem42 read: inProtocol];
            [fieldValue addObject: _elem42];
            [_elem42 release_stub];
          }
          [inProtocol readListEnd];
          [self setCartPros: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtCartProsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cartPros_isset) {
    if (__cartPros != nil) {
      [outProtocol writeFieldBeginWithName: @"cartPros" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__cartPros count]];
        int idx44;
        for (idx44 = 0; idx44 < [__cartPros count]; idx44++)
        {
          [[__cartPros objectAtIndex: idx44] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtCartProsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",cartPros:"];
  [ms appendFormat: @"%@", __cartPros];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFEditMtCartProsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFEditMtCartProsResp class]]) {
    return NO;
  }
  NMTFEditMtCartProsResp *other = (NMTFEditMtCartProsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EditMtCartProsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFEditMtCartProsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFCreateMtOrderResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

  self.merchantNos = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header totalAmount: (NSString *) totalAmount orderNo: (NSString *) orderNo merchantNos: (NSMutableArray *) merchantNos
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __totalAmount = [totalAmount retain_stub];
  __totalAmount_isset = YES;
  __orderNo = [orderNo retain_stub];
  __orderNo_isset = YES;
  __merchantNos = [merchantNos retain_stub];
  __merchantNos_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalAmount"])
  {
    __totalAmount = [[decoder decodeObjectForKey: @"totalAmount"] retain_stub];
    __totalAmount_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderNo"])
  {
    __orderNo = [[decoder decodeObjectForKey: @"orderNo"] retain_stub];
    __orderNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"merchantNos"])
  {
    __merchantNos = [[decoder decodeObjectForKey: @"merchantNos"] retain_stub];
    __merchantNos_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__totalAmount_isset)
  {
    [encoder encodeObject: __totalAmount forKey: @"totalAmount"];
  }
  if (__orderNo_isset)
  {
    [encoder encodeObject: __orderNo forKey: @"orderNo"];
  }
  if (__merchantNos_isset)
  {
    [encoder encodeObject: __merchantNos forKey: @"merchantNos"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __totalAmount_isset ? 2654435761 : 0;
  if (__totalAmount_isset)
  {
    hash = (hash * 31) ^ [__totalAmount hash];
  }
  hash = (hash * 31) ^ __orderNo_isset ? 2654435761 : 0;
  if (__orderNo_isset)
  {
    hash = (hash * 31) ^ [__orderNo hash];
  }
  hash = (hash * 31) ^ __merchantNos_isset ? 2654435761 : 0;
  if (__merchantNos_isset)
  {
    hash = (hash * 31) ^ [__merchantNos hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFCreateMtOrderResp class]]) {
    return NO;
  }
  NMTFCreateMtOrderResp *other = (NMTFCreateMtOrderResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__totalAmount_isset != other->__totalAmount_isset) ||
      (__totalAmount_isset && ((__totalAmount || other->__totalAmount) && ![__totalAmount isEqual:other->__totalAmount]))) {
    return NO;
  }
  if ((__orderNo_isset != other->__orderNo_isset) ||
      (__orderNo_isset && ((__orderNo || other->__orderNo) && ![__orderNo isEqual:other->__orderNo]))) {
    return NO;
  }
  if ((__merchantNos_isset != other->__merchantNos_isset) ||
      (__merchantNos_isset && ((__merchantNos || other->__merchantNos) && ![__merchantNos isEqual:other->__merchantNos]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__totalAmount release_stub];
  [__orderNo release_stub];
  [__merchantNos release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) totalAmount {
  return [[__totalAmount retain_stub] autorelease_stub];
}

- (void) setTotalAmount: (NSString *) totalAmount {
  [totalAmount retain_stub];
  [__totalAmount release_stub];
  __totalAmount = totalAmount;
  __totalAmount_isset = YES;
}

- (BOOL) totalAmountIsSet {
  return __totalAmount_isset;
}

- (void) unsetTotalAmount {
  [__totalAmount release_stub];
  __totalAmount = nil;
  __totalAmount_isset = NO;
}

- (NSString *) orderNo {
  return [[__orderNo retain_stub] autorelease_stub];
}

- (void) setOrderNo: (NSString *) orderNo {
  [orderNo retain_stub];
  [__orderNo release_stub];
  __orderNo = orderNo;
  __orderNo_isset = YES;
}

- (BOOL) orderNoIsSet {
  return __orderNo_isset;
}

- (void) unsetOrderNo {
  [__orderNo release_stub];
  __orderNo = nil;
  __orderNo_isset = NO;
}

- (NSMutableArray *) merchantNos {
  return [[__merchantNos retain_stub] autorelease_stub];
}

- (void) setMerchantNos: (NSMutableArray *) merchantNos {
  [merchantNos retain_stub];
  [__merchantNos release_stub];
  __merchantNos = merchantNos;
  __merchantNos_isset = YES;
}

- (BOOL) merchantNosIsSet {
  return __merchantNos_isset;
}

- (void) unsetMerchantNos {
  [__merchantNos release_stub];
  __merchantNos = nil;
  __merchantNos_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTotalAmount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size45;
          [inProtocol readListBeginReturningElementType: NULL size: &_size45];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size45];
          int _i46;
          for (_i46 = 0; _i46 < _size45; ++_i46)
          {
            NSString * _elem47 = [inProtocol readString];
            [fieldValue addObject: _elem47];
          }
          [inProtocol readListEnd];
          [self setMerchantNos: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CreateMtOrderResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalAmount_isset) {
    if (__totalAmount != nil) {
      [outProtocol writeFieldBeginWithName: @"totalAmount" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __totalAmount];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderNo_isset) {
    if (__orderNo != nil) {
      [outProtocol writeFieldBeginWithName: @"orderNo" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __orderNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__merchantNos_isset) {
    if (__merchantNos != nil) {
      [outProtocol writeFieldBeginWithName: @"merchantNos" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__merchantNos count]];
        int idx49;
        for (idx49 = 0; idx49 < [__merchantNos count]; idx49++)
        {
          [outProtocol writeString: [__merchantNos objectAtIndex: idx49]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFCreateMtOrderResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",totalAmount:"];
  [ms appendFormat: @"\"%@\"", __totalAmount];
  [ms appendString: @",orderNo:"];
  [ms appendFormat: @"\"%@\"", __orderNo];
  [ms appendString: @",merchantNos:"];
  [ms appendFormat: @"%@", __merchantNos];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFCancelMtOrderResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFCancelMtOrderResp class]]) {
    return NO;
  }
  NMTFCancelMtOrderResp *other = (NMTFCancelMtOrderResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CancelMtOrderResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFCancelMtOrderResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFDelMtOrderResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFDelMtOrderResp class]]) {
    return NO;
  }
  NMTFDelMtOrderResp *other = (NMTFDelMtOrderResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DelMtOrderResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFDelMtOrderResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFPrePayMtOrderResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header orderNo: (NSString *) orderNo
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __orderNo = [orderNo retain_stub];
  __orderNo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderNo"])
  {
    __orderNo = [[decoder decodeObjectForKey: @"orderNo"] retain_stub];
    __orderNo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__orderNo_isset)
  {
    [encoder encodeObject: __orderNo forKey: @"orderNo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __orderNo_isset ? 2654435761 : 0;
  if (__orderNo_isset)
  {
    hash = (hash * 31) ^ [__orderNo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFPrePayMtOrderResp class]]) {
    return NO;
  }
  NMTFPrePayMtOrderResp *other = (NMTFPrePayMtOrderResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__orderNo_isset != other->__orderNo_isset) ||
      (__orderNo_isset && ((__orderNo || other->__orderNo) && ![__orderNo isEqual:other->__orderNo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__orderNo release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) orderNo {
  return [[__orderNo retain_stub] autorelease_stub];
}

- (void) setOrderNo: (NSString *) orderNo {
  [orderNo retain_stub];
  [__orderNo release_stub];
  __orderNo = orderNo;
  __orderNo_isset = YES;
}

- (BOOL) orderNoIsSet {
  return __orderNo_isset;
}

- (void) unsetOrderNo {
  [__orderNo release_stub];
  __orderNo = nil;
  __orderNo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PrePayMtOrderResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderNo_isset) {
    if (__orderNo != nil) {
      [outProtocol writeFieldBeginWithName: @"orderNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __orderNo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFPrePayMtOrderResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",orderNo:"];
  [ms appendFormat: @"\"%@\"", __orderNo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFPayMtOrderResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFPayMtOrderResp class]]) {
    return NO;
  }
  NMTFPayMtOrderResp *other = (NMTFPayMtOrderResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PayMtOrderResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFPayMtOrderResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFReceiptMtProsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFReceiptMtProsResp class]]) {
    return NO;
  }
  NMTFReceiptMtProsResp *other = (NMTFReceiptMtProsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReceiptMtProsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFReceiptMtProsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFReqMtRefundResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFReqMtRefundResp class]]) {
    return NO;
  }
  NMTFReqMtRefundResp *other = (NMTFReqMtRefundResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReqMtRefundResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFReqMtRefundResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetUserOrderListResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

  self.orderMers = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header page: (NMTFPage *) page orderMers: (NSMutableArray *) orderMers
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __orderMers = [orderMers retain_stub];
  __orderMers_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderMers"])
  {
    __orderMers = [[decoder decodeObjectForKey: @"orderMers"] retain_stub];
    __orderMers_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__orderMers_isset)
  {
    [encoder encodeObject: __orderMers forKey: @"orderMers"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __orderMers_isset ? 2654435761 : 0;
  if (__orderMers_isset)
  {
    hash = (hash * 31) ^ [__orderMers hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetUserOrderListResp class]]) {
    return NO;
  }
  NMTFGetUserOrderListResp *other = (NMTFGetUserOrderListResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__orderMers_isset != other->__orderMers_isset) ||
      (__orderMers_isset && ((__orderMers || other->__orderMers) && ![__orderMers isEqual:other->__orderMers]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__orderMers release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NMTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NMTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSMutableArray *) orderMers {
  return [[__orderMers retain_stub] autorelease_stub];
}

- (void) setOrderMers: (NSMutableArray *) orderMers {
  [orderMers retain_stub];
  [__orderMers release_stub];
  __orderMers = orderMers;
  __orderMers_isset = YES;
}

- (BOOL) orderMersIsSet {
  return __orderMers_isset;
}

- (void) unsetOrderMers {
  [__orderMers release_stub];
  __orderMers = nil;
  __orderMers_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NMTFPage *fieldValue = [[NMTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size50;
          [inProtocol readListBeginReturningElementType: NULL size: &_size50];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size50];
          int _i51;
          for (_i51 = 0; _i51 < _size50; ++_i51)
          {
            NMTFOrderMerDto *_elem52 = [[NMTFOrderMerDto alloc] init];
            [_elem52 read: inProtocol];
            [fieldValue addObject: _elem52];
            [_elem52 release_stub];
          }
          [inProtocol readListEnd];
          [self setOrderMers: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUserOrderListResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderMers_isset) {
    if (__orderMers != nil) {
      [outProtocol writeFieldBeginWithName: @"orderMers" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__orderMers count]];
        int idx54;
        for (idx54 = 0; idx54 < [__orderMers count]; idx54++)
        {
          [[__orderMers objectAtIndex: idx54] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetUserOrderListResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",orderMers:"];
  [ms appendFormat: @"%@", __orderMers];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetPayBanksResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

  self.banks = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header banks: (NSMutableArray *) banks
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __banks = [banks retain_stub];
  __banks_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"banks"])
  {
    __banks = [[decoder decodeObjectForKey: @"banks"] retain_stub];
    __banks_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__banks_isset)
  {
    [encoder encodeObject: __banks forKey: @"banks"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __banks_isset ? 2654435761 : 0;
  if (__banks_isset)
  {
    hash = (hash * 31) ^ [__banks hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetPayBanksResp class]]) {
    return NO;
  }
  NMTFGetPayBanksResp *other = (NMTFGetPayBanksResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__banks_isset != other->__banks_isset) ||
      (__banks_isset && ((__banks || other->__banks) && ![__banks isEqual:other->__banks]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__banks release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) banks {
  return [[__banks retain_stub] autorelease_stub];
}

- (void) setBanks: (NSMutableArray *) banks {
  [banks retain_stub];
  [__banks release_stub];
  __banks = banks;
  __banks_isset = YES;
}

- (BOOL) banksIsSet {
  return __banks_isset;
}

- (void) unsetBanks {
  [__banks release_stub];
  __banks = nil;
  __banks_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size55;
          [inProtocol readListBeginReturningElementType: NULL size: &_size55];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size55];
          int _i56;
          for (_i56 = 0; _i56 < _size55; ++_i56)
          {
            NMTFBankDto *_elem57 = [[NMTFBankDto alloc] init];
            [_elem57 read: inProtocol];
            [fieldValue addObject: _elem57];
            [_elem57 release_stub];
          }
          [inProtocol readListEnd];
          [self setBanks: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPayBanksResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__banks_isset) {
    if (__banks != nil) {
      [outProtocol writeFieldBeginWithName: @"banks" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__banks count]];
        int idx59;
        for (idx59 = 0; idx59 < [__banks count]; idx59++)
        {
          [[__banks objectAtIndex: idx59] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetPayBanksResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",banks:"];
  [ms appendFormat: @"%@", __banks];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFPreBindBankCardResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header txSNBinding: (NSString *) txSNBinding merchantNo: (NSString *) merchantNo
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __txSNBinding = [txSNBinding retain_stub];
  __txSNBinding_isset = YES;
  __merchantNo = [merchantNo retain_stub];
  __merchantNo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"txSNBinding"])
  {
    __txSNBinding = [[decoder decodeObjectForKey: @"txSNBinding"] retain_stub];
    __txSNBinding_isset = YES;
  }
  if ([decoder containsValueForKey: @"merchantNo"])
  {
    __merchantNo = [[decoder decodeObjectForKey: @"merchantNo"] retain_stub];
    __merchantNo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__txSNBinding_isset)
  {
    [encoder encodeObject: __txSNBinding forKey: @"txSNBinding"];
  }
  if (__merchantNo_isset)
  {
    [encoder encodeObject: __merchantNo forKey: @"merchantNo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __txSNBinding_isset ? 2654435761 : 0;
  if (__txSNBinding_isset)
  {
    hash = (hash * 31) ^ [__txSNBinding hash];
  }
  hash = (hash * 31) ^ __merchantNo_isset ? 2654435761 : 0;
  if (__merchantNo_isset)
  {
    hash = (hash * 31) ^ [__merchantNo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFPreBindBankCardResp class]]) {
    return NO;
  }
  NMTFPreBindBankCardResp *other = (NMTFPreBindBankCardResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__txSNBinding_isset != other->__txSNBinding_isset) ||
      (__txSNBinding_isset && ((__txSNBinding || other->__txSNBinding) && ![__txSNBinding isEqual:other->__txSNBinding]))) {
    return NO;
  }
  if ((__merchantNo_isset != other->__merchantNo_isset) ||
      (__merchantNo_isset && ((__merchantNo || other->__merchantNo) && ![__merchantNo isEqual:other->__merchantNo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__txSNBinding release_stub];
  [__merchantNo release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) txSNBinding {
  return [[__txSNBinding retain_stub] autorelease_stub];
}

- (void) setTxSNBinding: (NSString *) txSNBinding {
  [txSNBinding retain_stub];
  [__txSNBinding release_stub];
  __txSNBinding = txSNBinding;
  __txSNBinding_isset = YES;
}

- (BOOL) txSNBindingIsSet {
  return __txSNBinding_isset;
}

- (void) unsetTxSNBinding {
  [__txSNBinding release_stub];
  __txSNBinding = nil;
  __txSNBinding_isset = NO;
}

- (NSString *) merchantNo {
  return [[__merchantNo retain_stub] autorelease_stub];
}

- (void) setMerchantNo: (NSString *) merchantNo {
  [merchantNo retain_stub];
  [__merchantNo release_stub];
  __merchantNo = merchantNo;
  __merchantNo_isset = YES;
}

- (BOOL) merchantNoIsSet {
  return __merchantNo_isset;
}

- (void) unsetMerchantNo {
  [__merchantNo release_stub];
  __merchantNo = nil;
  __merchantNo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTxSNBinding: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMerchantNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PreBindBankCardResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__txSNBinding_isset) {
    if (__txSNBinding != nil) {
      [outProtocol writeFieldBeginWithName: @"txSNBinding" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __txSNBinding];
      [outProtocol writeFieldEnd];
    }
  }
  if (__merchantNo_isset) {
    if (__merchantNo != nil) {
      [outProtocol writeFieldBeginWithName: @"merchantNo" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __merchantNo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFPreBindBankCardResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",txSNBinding:"];
  [ms appendFormat: @"\"%@\"", __txSNBinding];
  [ms appendString: @",merchantNo:"];
  [ms appendFormat: @"\"%@\"", __merchantNo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFBindBankCardResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header txSNBinding: (NSString *) txSNBinding
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __txSNBinding = [txSNBinding retain_stub];
  __txSNBinding_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"txSNBinding"])
  {
    __txSNBinding = [[decoder decodeObjectForKey: @"txSNBinding"] retain_stub];
    __txSNBinding_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__txSNBinding_isset)
  {
    [encoder encodeObject: __txSNBinding forKey: @"txSNBinding"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __txSNBinding_isset ? 2654435761 : 0;
  if (__txSNBinding_isset)
  {
    hash = (hash * 31) ^ [__txSNBinding hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFBindBankCardResp class]]) {
    return NO;
  }
  NMTFBindBankCardResp *other = (NMTFBindBankCardResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__txSNBinding_isset != other->__txSNBinding_isset) ||
      (__txSNBinding_isset && ((__txSNBinding || other->__txSNBinding) && ![__txSNBinding isEqual:other->__txSNBinding]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__txSNBinding release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) txSNBinding {
  return [[__txSNBinding retain_stub] autorelease_stub];
}

- (void) setTxSNBinding: (NSString *) txSNBinding {
  [txSNBinding retain_stub];
  [__txSNBinding release_stub];
  __txSNBinding = txSNBinding;
  __txSNBinding_isset = YES;
}

- (BOOL) txSNBindingIsSet {
  return __txSNBinding_isset;
}

- (void) unsetTxSNBinding {
  [__txSNBinding release_stub];
  __txSNBinding = nil;
  __txSNBinding_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTxSNBinding: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BindBankCardResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__txSNBinding_isset) {
    if (__txSNBinding != nil) {
      [outProtocol writeFieldBeginWithName: @"txSNBinding" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __txSNBinding];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFBindBankCardResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",txSNBinding:"];
  [ms appendFormat: @"\"%@\"", __txSNBinding];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtBindingsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

  self.bindings = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header bindings: (NSMutableArray *) bindings
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __bindings = [bindings retain_stub];
  __bindings_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"bindings"])
  {
    __bindings = [[decoder decodeObjectForKey: @"bindings"] retain_stub];
    __bindings_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__bindings_isset)
  {
    [encoder encodeObject: __bindings forKey: @"bindings"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __bindings_isset ? 2654435761 : 0;
  if (__bindings_isset)
  {
    hash = (hash * 31) ^ [__bindings hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtBindingsResp class]]) {
    return NO;
  }
  NMTFGetMtBindingsResp *other = (NMTFGetMtBindingsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__bindings_isset != other->__bindings_isset) ||
      (__bindings_isset && ((__bindings || other->__bindings) && ![__bindings isEqual:other->__bindings]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__bindings release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) bindings {
  return [[__bindings retain_stub] autorelease_stub];
}

- (void) setBindings: (NSMutableArray *) bindings {
  [bindings retain_stub];
  [__bindings release_stub];
  __bindings = bindings;
  __bindings_isset = YES;
}

- (BOOL) bindingsIsSet {
  return __bindings_isset;
}

- (void) unsetBindings {
  [__bindings release_stub];
  __bindings = nil;
  __bindings_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size60;
          [inProtocol readListBeginReturningElementType: NULL size: &_size60];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size60];
          int _i61;
          for (_i61 = 0; _i61 < _size60; ++_i61)
          {
            NMTFBindingDto *_elem62 = [[NMTFBindingDto alloc] init];
            [_elem62 read: inProtocol];
            [fieldValue addObject: _elem62];
            [_elem62 release_stub];
          }
          [inProtocol readListEnd];
          [self setBindings: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtBindingsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bindings_isset) {
    if (__bindings != nil) {
      [outProtocol writeFieldBeginWithName: @"bindings" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__bindings count]];
        int idx64;
        for (idx64 = 0; idx64 < [__bindings count]; idx64++)
        {
          [[__bindings objectAtIndex: idx64] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtBindingsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",bindings:"];
  [ms appendFormat: @"%@", __bindings];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NMTFGetMtOrderDetailResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NMTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NMTFRespHeader *) header orderMerPros: (NMTFOrderMerProsDto *) orderMerPros orderNo: (NSString *) orderNo orderStatus: (NSString *) orderStatus consignee: (NSString *) consignee telephone: (NSString *) telephone district: (NSString *) district addrDetail: (NSString *) addrDetail logiNumber: (NSString *) logiNumber logiComp: (NSString *) logiComp payWay: (NSString *) payWay invoiceType: (NSString *) invoiceType invoiceHead: (NSString *) invoiceHead orderDate: (NSString *) orderDate payDate: (NSString *) payDate outDate: (NSString *) outDate confirmDate: (NSString *) confirmDate serviceHotline: (NSString *) serviceHotline
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __orderMerPros = [orderMerPros retain_stub];
  __orderMerPros_isset = YES;
  __orderNo = [orderNo retain_stub];
  __orderNo_isset = YES;
  __orderStatus = [orderStatus retain_stub];
  __orderStatus_isset = YES;
  __consignee = [consignee retain_stub];
  __consignee_isset = YES;
  __telephone = [telephone retain_stub];
  __telephone_isset = YES;
  __district = [district retain_stub];
  __district_isset = YES;
  __addrDetail = [addrDetail retain_stub];
  __addrDetail_isset = YES;
  __logiNumber = [logiNumber retain_stub];
  __logiNumber_isset = YES;
  __logiComp = [logiComp retain_stub];
  __logiComp_isset = YES;
  __payWay = [payWay retain_stub];
  __payWay_isset = YES;
  __invoiceType = [invoiceType retain_stub];
  __invoiceType_isset = YES;
  __invoiceHead = [invoiceHead retain_stub];
  __invoiceHead_isset = YES;
  __orderDate = [orderDate retain_stub];
  __orderDate_isset = YES;
  __payDate = [payDate retain_stub];
  __payDate_isset = YES;
  __outDate = [outDate retain_stub];
  __outDate_isset = YES;
  __confirmDate = [confirmDate retain_stub];
  __confirmDate_isset = YES;
  __serviceHotline = [serviceHotline retain_stub];
  __serviceHotline_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderMerPros"])
  {
    __orderMerPros = [[decoder decodeObjectForKey: @"orderMerPros"] retain_stub];
    __orderMerPros_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderNo"])
  {
    __orderNo = [[decoder decodeObjectForKey: @"orderNo"] retain_stub];
    __orderNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderStatus"])
  {
    __orderStatus = [[decoder decodeObjectForKey: @"orderStatus"] retain_stub];
    __orderStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"consignee"])
  {
    __consignee = [[decoder decodeObjectForKey: @"consignee"] retain_stub];
    __consignee_isset = YES;
  }
  if ([decoder containsValueForKey: @"telephone"])
  {
    __telephone = [[decoder decodeObjectForKey: @"telephone"] retain_stub];
    __telephone_isset = YES;
  }
  if ([decoder containsValueForKey: @"district"])
  {
    __district = [[decoder decodeObjectForKey: @"district"] retain_stub];
    __district_isset = YES;
  }
  if ([decoder containsValueForKey: @"addrDetail"])
  {
    __addrDetail = [[decoder decodeObjectForKey: @"addrDetail"] retain_stub];
    __addrDetail_isset = YES;
  }
  if ([decoder containsValueForKey: @"logiNumber"])
  {
    __logiNumber = [[decoder decodeObjectForKey: @"logiNumber"] retain_stub];
    __logiNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"logiComp"])
  {
    __logiComp = [[decoder decodeObjectForKey: @"logiComp"] retain_stub];
    __logiComp_isset = YES;
  }
  if ([decoder containsValueForKey: @"payWay"])
  {
    __payWay = [[decoder decodeObjectForKey: @"payWay"] retain_stub];
    __payWay_isset = YES;
  }
  if ([decoder containsValueForKey: @"invoiceType"])
  {
    __invoiceType = [[decoder decodeObjectForKey: @"invoiceType"] retain_stub];
    __invoiceType_isset = YES;
  }
  if ([decoder containsValueForKey: @"invoiceHead"])
  {
    __invoiceHead = [[decoder decodeObjectForKey: @"invoiceHead"] retain_stub];
    __invoiceHead_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderDate"])
  {
    __orderDate = [[decoder decodeObjectForKey: @"orderDate"] retain_stub];
    __orderDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"payDate"])
  {
    __payDate = [[decoder decodeObjectForKey: @"payDate"] retain_stub];
    __payDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"outDate"])
  {
    __outDate = [[decoder decodeObjectForKey: @"outDate"] retain_stub];
    __outDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"confirmDate"])
  {
    __confirmDate = [[decoder decodeObjectForKey: @"confirmDate"] retain_stub];
    __confirmDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceHotline"])
  {
    __serviceHotline = [[decoder decodeObjectForKey: @"serviceHotline"] retain_stub];
    __serviceHotline_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__orderMerPros_isset)
  {
    [encoder encodeObject: __orderMerPros forKey: @"orderMerPros"];
  }
  if (__orderNo_isset)
  {
    [encoder encodeObject: __orderNo forKey: @"orderNo"];
  }
  if (__orderStatus_isset)
  {
    [encoder encodeObject: __orderStatus forKey: @"orderStatus"];
  }
  if (__consignee_isset)
  {
    [encoder encodeObject: __consignee forKey: @"consignee"];
  }
  if (__telephone_isset)
  {
    [encoder encodeObject: __telephone forKey: @"telephone"];
  }
  if (__district_isset)
  {
    [encoder encodeObject: __district forKey: @"district"];
  }
  if (__addrDetail_isset)
  {
    [encoder encodeObject: __addrDetail forKey: @"addrDetail"];
  }
  if (__logiNumber_isset)
  {
    [encoder encodeObject: __logiNumber forKey: @"logiNumber"];
  }
  if (__logiComp_isset)
  {
    [encoder encodeObject: __logiComp forKey: @"logiComp"];
  }
  if (__payWay_isset)
  {
    [encoder encodeObject: __payWay forKey: @"payWay"];
  }
  if (__invoiceType_isset)
  {
    [encoder encodeObject: __invoiceType forKey: @"invoiceType"];
  }
  if (__invoiceHead_isset)
  {
    [encoder encodeObject: __invoiceHead forKey: @"invoiceHead"];
  }
  if (__orderDate_isset)
  {
    [encoder encodeObject: __orderDate forKey: @"orderDate"];
  }
  if (__payDate_isset)
  {
    [encoder encodeObject: __payDate forKey: @"payDate"];
  }
  if (__outDate_isset)
  {
    [encoder encodeObject: __outDate forKey: @"outDate"];
  }
  if (__confirmDate_isset)
  {
    [encoder encodeObject: __confirmDate forKey: @"confirmDate"];
  }
  if (__serviceHotline_isset)
  {
    [encoder encodeObject: __serviceHotline forKey: @"serviceHotline"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __orderMerPros_isset ? 2654435761 : 0;
  if (__orderMerPros_isset)
  {
    hash = (hash * 31) ^ [__orderMerPros hash];
  }
  hash = (hash * 31) ^ __orderNo_isset ? 2654435761 : 0;
  if (__orderNo_isset)
  {
    hash = (hash * 31) ^ [__orderNo hash];
  }
  hash = (hash * 31) ^ __orderStatus_isset ? 2654435761 : 0;
  if (__orderStatus_isset)
  {
    hash = (hash * 31) ^ [__orderStatus hash];
  }
  hash = (hash * 31) ^ __consignee_isset ? 2654435761 : 0;
  if (__consignee_isset)
  {
    hash = (hash * 31) ^ [__consignee hash];
  }
  hash = (hash * 31) ^ __telephone_isset ? 2654435761 : 0;
  if (__telephone_isset)
  {
    hash = (hash * 31) ^ [__telephone hash];
  }
  hash = (hash * 31) ^ __district_isset ? 2654435761 : 0;
  if (__district_isset)
  {
    hash = (hash * 31) ^ [__district hash];
  }
  hash = (hash * 31) ^ __addrDetail_isset ? 2654435761 : 0;
  if (__addrDetail_isset)
  {
    hash = (hash * 31) ^ [__addrDetail hash];
  }
  hash = (hash * 31) ^ __logiNumber_isset ? 2654435761 : 0;
  if (__logiNumber_isset)
  {
    hash = (hash * 31) ^ [__logiNumber hash];
  }
  hash = (hash * 31) ^ __logiComp_isset ? 2654435761 : 0;
  if (__logiComp_isset)
  {
    hash = (hash * 31) ^ [__logiComp hash];
  }
  hash = (hash * 31) ^ __payWay_isset ? 2654435761 : 0;
  if (__payWay_isset)
  {
    hash = (hash * 31) ^ [__payWay hash];
  }
  hash = (hash * 31) ^ __invoiceType_isset ? 2654435761 : 0;
  if (__invoiceType_isset)
  {
    hash = (hash * 31) ^ [__invoiceType hash];
  }
  hash = (hash * 31) ^ __invoiceHead_isset ? 2654435761 : 0;
  if (__invoiceHead_isset)
  {
    hash = (hash * 31) ^ [__invoiceHead hash];
  }
  hash = (hash * 31) ^ __orderDate_isset ? 2654435761 : 0;
  if (__orderDate_isset)
  {
    hash = (hash * 31) ^ [__orderDate hash];
  }
  hash = (hash * 31) ^ __payDate_isset ? 2654435761 : 0;
  if (__payDate_isset)
  {
    hash = (hash * 31) ^ [__payDate hash];
  }
  hash = (hash * 31) ^ __outDate_isset ? 2654435761 : 0;
  if (__outDate_isset)
  {
    hash = (hash * 31) ^ [__outDate hash];
  }
  hash = (hash * 31) ^ __confirmDate_isset ? 2654435761 : 0;
  if (__confirmDate_isset)
  {
    hash = (hash * 31) ^ [__confirmDate hash];
  }
  hash = (hash * 31) ^ __serviceHotline_isset ? 2654435761 : 0;
  if (__serviceHotline_isset)
  {
    hash = (hash * 31) ^ [__serviceHotline hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NMTFGetMtOrderDetailResp class]]) {
    return NO;
  }
  NMTFGetMtOrderDetailResp *other = (NMTFGetMtOrderDetailResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__orderMerPros_isset != other->__orderMerPros_isset) ||
      (__orderMerPros_isset && ((__orderMerPros || other->__orderMerPros) && ![__orderMerPros isEqual:other->__orderMerPros]))) {
    return NO;
  }
  if ((__orderNo_isset != other->__orderNo_isset) ||
      (__orderNo_isset && ((__orderNo || other->__orderNo) && ![__orderNo isEqual:other->__orderNo]))) {
    return NO;
  }
  if ((__orderStatus_isset != other->__orderStatus_isset) ||
      (__orderStatus_isset && ((__orderStatus || other->__orderStatus) && ![__orderStatus isEqual:other->__orderStatus]))) {
    return NO;
  }
  if ((__consignee_isset != other->__consignee_isset) ||
      (__consignee_isset && ((__consignee || other->__consignee) && ![__consignee isEqual:other->__consignee]))) {
    return NO;
  }
  if ((__telephone_isset != other->__telephone_isset) ||
      (__telephone_isset && ((__telephone || other->__telephone) && ![__telephone isEqual:other->__telephone]))) {
    return NO;
  }
  if ((__district_isset != other->__district_isset) ||
      (__district_isset && ((__district || other->__district) && ![__district isEqual:other->__district]))) {
    return NO;
  }
  if ((__addrDetail_isset != other->__addrDetail_isset) ||
      (__addrDetail_isset && ((__addrDetail || other->__addrDetail) && ![__addrDetail isEqual:other->__addrDetail]))) {
    return NO;
  }
  if ((__logiNumber_isset != other->__logiNumber_isset) ||
      (__logiNumber_isset && ((__logiNumber || other->__logiNumber) && ![__logiNumber isEqual:other->__logiNumber]))) {
    return NO;
  }
  if ((__logiComp_isset != other->__logiComp_isset) ||
      (__logiComp_isset && ((__logiComp || other->__logiComp) && ![__logiComp isEqual:other->__logiComp]))) {
    return NO;
  }
  if ((__payWay_isset != other->__payWay_isset) ||
      (__payWay_isset && ((__payWay || other->__payWay) && ![__payWay isEqual:other->__payWay]))) {
    return NO;
  }
  if ((__invoiceType_isset != other->__invoiceType_isset) ||
      (__invoiceType_isset && ((__invoiceType || other->__invoiceType) && ![__invoiceType isEqual:other->__invoiceType]))) {
    return NO;
  }
  if ((__invoiceHead_isset != other->__invoiceHead_isset) ||
      (__invoiceHead_isset && ((__invoiceHead || other->__invoiceHead) && ![__invoiceHead isEqual:other->__invoiceHead]))) {
    return NO;
  }
  if ((__orderDate_isset != other->__orderDate_isset) ||
      (__orderDate_isset && ((__orderDate || other->__orderDate) && ![__orderDate isEqual:other->__orderDate]))) {
    return NO;
  }
  if ((__payDate_isset != other->__payDate_isset) ||
      (__payDate_isset && ((__payDate || other->__payDate) && ![__payDate isEqual:other->__payDate]))) {
    return NO;
  }
  if ((__outDate_isset != other->__outDate_isset) ||
      (__outDate_isset && ((__outDate || other->__outDate) && ![__outDate isEqual:other->__outDate]))) {
    return NO;
  }
  if ((__confirmDate_isset != other->__confirmDate_isset) ||
      (__confirmDate_isset && ((__confirmDate || other->__confirmDate) && ![__confirmDate isEqual:other->__confirmDate]))) {
    return NO;
  }
  if ((__serviceHotline_isset != other->__serviceHotline_isset) ||
      (__serviceHotline_isset && ((__serviceHotline || other->__serviceHotline) && ![__serviceHotline isEqual:other->__serviceHotline]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__orderMerPros release_stub];
  [__orderNo release_stub];
  [__orderStatus release_stub];
  [__consignee release_stub];
  [__telephone release_stub];
  [__district release_stub];
  [__addrDetail release_stub];
  [__logiNumber release_stub];
  [__logiComp release_stub];
  [__payWay release_stub];
  [__invoiceType release_stub];
  [__invoiceHead release_stub];
  [__orderDate release_stub];
  [__payDate release_stub];
  [__outDate release_stub];
  [__confirmDate release_stub];
  [__serviceHotline release_stub];
  [super dealloc_stub];
}

- (NMTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NMTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NMTFOrderMerProsDto *) orderMerPros {
  return [[__orderMerPros retain_stub] autorelease_stub];
}

- (void) setOrderMerPros: (NMTFOrderMerProsDto *) orderMerPros {
  [orderMerPros retain_stub];
  [__orderMerPros release_stub];
  __orderMerPros = orderMerPros;
  __orderMerPros_isset = YES;
}

- (BOOL) orderMerProsIsSet {
  return __orderMerPros_isset;
}

- (void) unsetOrderMerPros {
  [__orderMerPros release_stub];
  __orderMerPros = nil;
  __orderMerPros_isset = NO;
}

- (NSString *) orderNo {
  return [[__orderNo retain_stub] autorelease_stub];
}

- (void) setOrderNo: (NSString *) orderNo {
  [orderNo retain_stub];
  [__orderNo release_stub];
  __orderNo = orderNo;
  __orderNo_isset = YES;
}

- (BOOL) orderNoIsSet {
  return __orderNo_isset;
}

- (void) unsetOrderNo {
  [__orderNo release_stub];
  __orderNo = nil;
  __orderNo_isset = NO;
}

- (NSString *) orderStatus {
  return [[__orderStatus retain_stub] autorelease_stub];
}

- (void) setOrderStatus: (NSString *) orderStatus {
  [orderStatus retain_stub];
  [__orderStatus release_stub];
  __orderStatus = orderStatus;
  __orderStatus_isset = YES;
}

- (BOOL) orderStatusIsSet {
  return __orderStatus_isset;
}

- (void) unsetOrderStatus {
  [__orderStatus release_stub];
  __orderStatus = nil;
  __orderStatus_isset = NO;
}

- (NSString *) consignee {
  return [[__consignee retain_stub] autorelease_stub];
}

- (void) setConsignee: (NSString *) consignee {
  [consignee retain_stub];
  [__consignee release_stub];
  __consignee = consignee;
  __consignee_isset = YES;
}

- (BOOL) consigneeIsSet {
  return __consignee_isset;
}

- (void) unsetConsignee {
  [__consignee release_stub];
  __consignee = nil;
  __consignee_isset = NO;
}

- (NSString *) telephone {
  return [[__telephone retain_stub] autorelease_stub];
}

- (void) setTelephone: (NSString *) telephone {
  [telephone retain_stub];
  [__telephone release_stub];
  __telephone = telephone;
  __telephone_isset = YES;
}

- (BOOL) telephoneIsSet {
  return __telephone_isset;
}

- (void) unsetTelephone {
  [__telephone release_stub];
  __telephone = nil;
  __telephone_isset = NO;
}

- (NSString *) district {
  return [[__district retain_stub] autorelease_stub];
}

- (void) setDistrict: (NSString *) district {
  [district retain_stub];
  [__district release_stub];
  __district = district;
  __district_isset = YES;
}

- (BOOL) districtIsSet {
  return __district_isset;
}

- (void) unsetDistrict {
  [__district release_stub];
  __district = nil;
  __district_isset = NO;
}

- (NSString *) addrDetail {
  return [[__addrDetail retain_stub] autorelease_stub];
}

- (void) setAddrDetail: (NSString *) addrDetail {
  [addrDetail retain_stub];
  [__addrDetail release_stub];
  __addrDetail = addrDetail;
  __addrDetail_isset = YES;
}

- (BOOL) addrDetailIsSet {
  return __addrDetail_isset;
}

- (void) unsetAddrDetail {
  [__addrDetail release_stub];
  __addrDetail = nil;
  __addrDetail_isset = NO;
}

- (NSString *) logiNumber {
  return [[__logiNumber retain_stub] autorelease_stub];
}

- (void) setLogiNumber: (NSString *) logiNumber {
  [logiNumber retain_stub];
  [__logiNumber release_stub];
  __logiNumber = logiNumber;
  __logiNumber_isset = YES;
}

- (BOOL) logiNumberIsSet {
  return __logiNumber_isset;
}

- (void) unsetLogiNumber {
  [__logiNumber release_stub];
  __logiNumber = nil;
  __logiNumber_isset = NO;
}

- (NSString *) logiComp {
  return [[__logiComp retain_stub] autorelease_stub];
}

- (void) setLogiComp: (NSString *) logiComp {
  [logiComp retain_stub];
  [__logiComp release_stub];
  __logiComp = logiComp;
  __logiComp_isset = YES;
}

- (BOOL) logiCompIsSet {
  return __logiComp_isset;
}

- (void) unsetLogiComp {
  [__logiComp release_stub];
  __logiComp = nil;
  __logiComp_isset = NO;
}

- (NSString *) payWay {
  return [[__payWay retain_stub] autorelease_stub];
}

- (void) setPayWay: (NSString *) payWay {
  [payWay retain_stub];
  [__payWay release_stub];
  __payWay = payWay;
  __payWay_isset = YES;
}

- (BOOL) payWayIsSet {
  return __payWay_isset;
}

- (void) unsetPayWay {
  [__payWay release_stub];
  __payWay = nil;
  __payWay_isset = NO;
}

- (NSString *) invoiceType {
  return [[__invoiceType retain_stub] autorelease_stub];
}

- (void) setInvoiceType: (NSString *) invoiceType {
  [invoiceType retain_stub];
  [__invoiceType release_stub];
  __invoiceType = invoiceType;
  __invoiceType_isset = YES;
}

- (BOOL) invoiceTypeIsSet {
  return __invoiceType_isset;
}

- (void) unsetInvoiceType {
  [__invoiceType release_stub];
  __invoiceType = nil;
  __invoiceType_isset = NO;
}

- (NSString *) invoiceHead {
  return [[__invoiceHead retain_stub] autorelease_stub];
}

- (void) setInvoiceHead: (NSString *) invoiceHead {
  [invoiceHead retain_stub];
  [__invoiceHead release_stub];
  __invoiceHead = invoiceHead;
  __invoiceHead_isset = YES;
}

- (BOOL) invoiceHeadIsSet {
  return __invoiceHead_isset;
}

- (void) unsetInvoiceHead {
  [__invoiceHead release_stub];
  __invoiceHead = nil;
  __invoiceHead_isset = NO;
}

- (NSString *) orderDate {
  return [[__orderDate retain_stub] autorelease_stub];
}

- (void) setOrderDate: (NSString *) orderDate {
  [orderDate retain_stub];
  [__orderDate release_stub];
  __orderDate = orderDate;
  __orderDate_isset = YES;
}

- (BOOL) orderDateIsSet {
  return __orderDate_isset;
}

- (void) unsetOrderDate {
  [__orderDate release_stub];
  __orderDate = nil;
  __orderDate_isset = NO;
}

- (NSString *) payDate {
  return [[__payDate retain_stub] autorelease_stub];
}

- (void) setPayDate: (NSString *) payDate {
  [payDate retain_stub];
  [__payDate release_stub];
  __payDate = payDate;
  __payDate_isset = YES;
}

- (BOOL) payDateIsSet {
  return __payDate_isset;
}

- (void) unsetPayDate {
  [__payDate release_stub];
  __payDate = nil;
  __payDate_isset = NO;
}

- (NSString *) outDate {
  return [[__outDate retain_stub] autorelease_stub];
}

- (void) setOutDate: (NSString *) outDate {
  [outDate retain_stub];
  [__outDate release_stub];
  __outDate = outDate;
  __outDate_isset = YES;
}

- (BOOL) outDateIsSet {
  return __outDate_isset;
}

- (void) unsetOutDate {
  [__outDate release_stub];
  __outDate = nil;
  __outDate_isset = NO;
}

- (NSString *) confirmDate {
  return [[__confirmDate retain_stub] autorelease_stub];
}

- (void) setConfirmDate: (NSString *) confirmDate {
  [confirmDate retain_stub];
  [__confirmDate release_stub];
  __confirmDate = confirmDate;
  __confirmDate_isset = YES;
}

- (BOOL) confirmDateIsSet {
  return __confirmDate_isset;
}

- (void) unsetConfirmDate {
  [__confirmDate release_stub];
  __confirmDate = nil;
  __confirmDate_isset = NO;
}

- (NSString *) serviceHotline {
  return [[__serviceHotline retain_stub] autorelease_stub];
}

- (void) setServiceHotline: (NSString *) serviceHotline {
  [serviceHotline retain_stub];
  [__serviceHotline release_stub];
  __serviceHotline = serviceHotline;
  __serviceHotline_isset = YES;
}

- (BOOL) serviceHotlineIsSet {
  return __serviceHotline_isset;
}

- (void) unsetServiceHotline {
  [__serviceHotline release_stub];
  __serviceHotline = nil;
  __serviceHotline_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NMTFRespHeader *fieldValue = [[NMTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NMTFOrderMerProsDto *fieldValue = [[NMTFOrderMerProsDto alloc] init];
          [fieldValue read: inProtocol];
          [self setOrderMerPros: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConsignee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTelephone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDistrict: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddrDetail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLogiNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLogiComp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPayWay: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInvoiceType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInvoiceHead: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPayDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOutDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConfirmDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceHotline: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMtOrderDetailResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderMerPros_isset) {
    if (__orderMerPros != nil) {
      [outProtocol writeFieldBeginWithName: @"orderMerPros" type: TType_STRUCT fieldID: 2];
      [__orderMerPros write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderNo_isset) {
    if (__orderNo != nil) {
      [outProtocol writeFieldBeginWithName: @"orderNo" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __orderNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderStatus_isset) {
    if (__orderStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"orderStatus" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __orderStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__consignee_isset) {
    if (__consignee != nil) {
      [outProtocol writeFieldBeginWithName: @"consignee" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __consignee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__telephone_isset) {
    if (__telephone != nil) {
      [outProtocol writeFieldBeginWithName: @"telephone" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __telephone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__district_isset) {
    if (__district != nil) {
      [outProtocol writeFieldBeginWithName: @"district" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __district];
      [outProtocol writeFieldEnd];
    }
  }
  if (__addrDetail_isset) {
    if (__addrDetail != nil) {
      [outProtocol writeFieldBeginWithName: @"addrDetail" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __addrDetail];
      [outProtocol writeFieldEnd];
    }
  }
  if (__logiNumber_isset) {
    if (__logiNumber != nil) {
      [outProtocol writeFieldBeginWithName: @"logiNumber" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __logiNumber];
      [outProtocol writeFieldEnd];
    }
  }
  if (__logiComp_isset) {
    if (__logiComp != nil) {
      [outProtocol writeFieldBeginWithName: @"logiComp" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __logiComp];
      [outProtocol writeFieldEnd];
    }
  }
  if (__payWay_isset) {
    if (__payWay != nil) {
      [outProtocol writeFieldBeginWithName: @"payWay" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __payWay];
      [outProtocol writeFieldEnd];
    }
  }
  if (__invoiceType_isset) {
    if (__invoiceType != nil) {
      [outProtocol writeFieldBeginWithName: @"invoiceType" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __invoiceType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__invoiceHead_isset) {
    if (__invoiceHead != nil) {
      [outProtocol writeFieldBeginWithName: @"invoiceHead" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __invoiceHead];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderDate_isset) {
    if (__orderDate != nil) {
      [outProtocol writeFieldBeginWithName: @"orderDate" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __orderDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__payDate_isset) {
    if (__payDate != nil) {
      [outProtocol writeFieldBeginWithName: @"payDate" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __payDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__outDate_isset) {
    if (__outDate != nil) {
      [outProtocol writeFieldBeginWithName: @"outDate" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __outDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__confirmDate_isset) {
    if (__confirmDate != nil) {
      [outProtocol writeFieldBeginWithName: @"confirmDate" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __confirmDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceHotline_isset) {
    if (__serviceHotline != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceHotline" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __serviceHotline];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NMTFGetMtOrderDetailResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",orderMerPros:"];
  [ms appendFormat: @"%@", __orderMerPros];
  [ms appendString: @",orderNo:"];
  [ms appendFormat: @"\"%@\"", __orderNo];
  [ms appendString: @",orderStatus:"];
  [ms appendFormat: @"\"%@\"", __orderStatus];
  [ms appendString: @",consignee:"];
  [ms appendFormat: @"\"%@\"", __consignee];
  [ms appendString: @",telephone:"];
  [ms appendFormat: @"\"%@\"", __telephone];
  [ms appendString: @",district:"];
  [ms appendFormat: @"\"%@\"", __district];
  [ms appendString: @",addrDetail:"];
  [ms appendFormat: @"\"%@\"", __addrDetail];
  [ms appendString: @",logiNumber:"];
  [ms appendFormat: @"\"%@\"", __logiNumber];
  [ms appendString: @",logiComp:"];
  [ms appendFormat: @"\"%@\"", __logiComp];
  [ms appendString: @",payWay:"];
  [ms appendFormat: @"\"%@\"", __payWay];
  [ms appendString: @",invoiceType:"];
  [ms appendFormat: @"\"%@\"", __invoiceType];
  [ms appendString: @",invoiceHead:"];
  [ms appendFormat: @"\"%@\"", __invoiceHead];
  [ms appendString: @",orderDate:"];
  [ms appendFormat: @"\"%@\"", __orderDate];
  [ms appendString: @",payDate:"];
  [ms appendFormat: @"\"%@\"", __payDate];
  [ms appendString: @",outDate:"];
  [ms appendFormat: @"\"%@\"", __outDate];
  [ms appendString: @",confirmDate:"];
  [ms appendFormat: @"\"%@\"", __confirmDate];
  [ms appendString: @",serviceHotline:"];
  [ms appendFormat: @"\"%@\"", __serviceHotline];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation NMTFMtRespConstants
+ (void) initialize {
}
@end

