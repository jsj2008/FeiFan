/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Base.h"

#import "Req.h"

@implementation NXTFPingReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPingReq class]]) {
    return NO;
  }
  NXTFPingReq *other = (NXTFPingReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PingReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPingReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetDeptsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId isMutiDept: (int32_t) isMutiDept scheduleType: (int32_t) scheduleType comDeptId: (int32_t) comDeptId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __isMutiDept = isMutiDept;
  __isMutiDept_isset = YES;
  __scheduleType = scheduleType;
  __scheduleType_isset = YES;
  __comDeptId = comDeptId;
  __comDeptId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"isMutiDept"])
  {
    __isMutiDept = [decoder decodeInt32ForKey: @"isMutiDept"];
    __isMutiDept_isset = YES;
  }
  if ([decoder containsValueForKey: @"scheduleType"])
  {
    __scheduleType = [decoder decodeInt32ForKey: @"scheduleType"];
    __scheduleType_isset = YES;
  }
  if ([decoder containsValueForKey: @"comDeptId"])
  {
    __comDeptId = [decoder decodeInt32ForKey: @"comDeptId"];
    __comDeptId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__isMutiDept_isset)
  {
    [encoder encodeInt32: __isMutiDept forKey: @"isMutiDept"];
  }
  if (__scheduleType_isset)
  {
    [encoder encodeInt32: __scheduleType forKey: @"scheduleType"];
  }
  if (__comDeptId_isset)
  {
    [encoder encodeInt32: __comDeptId forKey: @"comDeptId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __isMutiDept_isset ? 2654435761 : 0;
  if (__isMutiDept_isset)
  {
    hash = (hash * 31) ^ [@(__isMutiDept) hash];
  }
  hash = (hash * 31) ^ __scheduleType_isset ? 2654435761 : 0;
  if (__scheduleType_isset)
  {
    hash = (hash * 31) ^ [@(__scheduleType) hash];
  }
  hash = (hash * 31) ^ __comDeptId_isset ? 2654435761 : 0;
  if (__comDeptId_isset)
  {
    hash = (hash * 31) ^ [@(__comDeptId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetDeptsReq class]]) {
    return NO;
  }
  NXTFGetDeptsReq *other = (NXTFGetDeptsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__isMutiDept_isset != other->__isMutiDept_isset) ||
      (__isMutiDept_isset && (__isMutiDept != other->__isMutiDept))) {
    return NO;
  }
  if ((__scheduleType_isset != other->__scheduleType_isset) ||
      (__scheduleType_isset && (__scheduleType != other->__scheduleType))) {
    return NO;
  }
  if ((__comDeptId_isset != other->__comDeptId_isset) ||
      (__comDeptId_isset && (__comDeptId != other->__comDeptId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int32_t) isMutiDept {
  return __isMutiDept;
}

- (void) setIsMutiDept: (int32_t) isMutiDept {
  __isMutiDept = isMutiDept;
  __isMutiDept_isset = YES;
}

- (BOOL) isMutiDeptIsSet {
  return __isMutiDept_isset;
}

- (void) unsetIsMutiDept {
  __isMutiDept_isset = NO;
}

- (int32_t) scheduleType {
  return __scheduleType;
}

- (void) setScheduleType: (int32_t) scheduleType {
  __scheduleType = scheduleType;
  __scheduleType_isset = YES;
}

- (BOOL) scheduleTypeIsSet {
  return __scheduleType_isset;
}

- (void) unsetScheduleType {
  __scheduleType_isset = NO;
}

- (int32_t) comDeptId {
  return __comDeptId;
}

- (void) setComDeptId: (int32_t) comDeptId {
  __comDeptId = comDeptId;
  __comDeptId_isset = YES;
}

- (BOOL) comDeptIdIsSet {
  return __comDeptId_isset;
}

- (void) unsetComDeptId {
  __comDeptId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsMutiDept: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setScheduleType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setComDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDeptsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__isMutiDept_isset) {
    [outProtocol writeFieldBeginWithName: @"isMutiDept" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __isMutiDept];
    [outProtocol writeFieldEnd];
  }
  if (__scheduleType_isset) {
    [outProtocol writeFieldBeginWithName: @"scheduleType" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __scheduleType];
    [outProtocol writeFieldEnd];
  }
  if (__comDeptId_isset) {
    [outProtocol writeFieldBeginWithName: @"comDeptId" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __comDeptId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetDeptsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",isMutiDept:"];
  [ms appendFormat: @"%i", __isMutiDept];
  [ms appendString: @",scheduleType:"];
  [ms appendFormat: @"%i", __scheduleType];
  [ms appendString: @",comDeptId:"];
  [ms appendFormat: @"%i", __comDeptId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRegPointReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header pointId: (NSString *) pointId pointName: (NSString *) pointName pointDate: (NSString *) pointDate regLevelId: (NSString *) regLevelId regLevelName: (NSString *) regLevelName patientId: (int64_t) patientId deptId: (int64_t) deptId drId: (int64_t) drId visitTime: (NSString *) visitTime autoSymptoms: (NSMutableArray *) autoSymptoms scheduleType: (int32_t) scheduleType
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __pointId = [pointId retain_stub];
  __pointId_isset = YES;
  __pointName = [pointName retain_stub];
  __pointName_isset = YES;
  __pointDate = [pointDate retain_stub];
  __pointDate_isset = YES;
  __regLevelId = [regLevelId retain_stub];
  __regLevelId_isset = YES;
  __regLevelName = [regLevelName retain_stub];
  __regLevelName_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __deptId = deptId;
  __deptId_isset = YES;
  __drId = drId;
  __drId_isset = YES;
  __visitTime = [visitTime retain_stub];
  __visitTime_isset = YES;
  __autoSymptoms = [autoSymptoms retain_stub];
  __autoSymptoms_isset = YES;
  __scheduleType = scheduleType;
  __scheduleType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"pointId"])
  {
    __pointId = [[decoder decodeObjectForKey: @"pointId"] retain_stub];
    __pointId_isset = YES;
  }
  if ([decoder containsValueForKey: @"pointName"])
  {
    __pointName = [[decoder decodeObjectForKey: @"pointName"] retain_stub];
    __pointName_isset = YES;
  }
  if ([decoder containsValueForKey: @"pointDate"])
  {
    __pointDate = [[decoder decodeObjectForKey: @"pointDate"] retain_stub];
    __pointDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"regLevelId"])
  {
    __regLevelId = [[decoder decodeObjectForKey: @"regLevelId"] retain_stub];
    __regLevelId_isset = YES;
  }
  if ([decoder containsValueForKey: @"regLevelName"])
  {
    __regLevelName = [[decoder decodeObjectForKey: @"regLevelName"] retain_stub];
    __regLevelName_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptId"])
  {
    __deptId = [decoder decodeInt64ForKey: @"deptId"];
    __deptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"drId"])
  {
    __drId = [decoder decodeInt64ForKey: @"drId"];
    __drId_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitTime"])
  {
    __visitTime = [[decoder decodeObjectForKey: @"visitTime"] retain_stub];
    __visitTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"autoSymptoms"])
  {
    __autoSymptoms = [[decoder decodeObjectForKey: @"autoSymptoms"] retain_stub];
    __autoSymptoms_isset = YES;
  }
  if ([decoder containsValueForKey: @"scheduleType"])
  {
    __scheduleType = [decoder decodeInt32ForKey: @"scheduleType"];
    __scheduleType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__pointId_isset)
  {
    [encoder encodeObject: __pointId forKey: @"pointId"];
  }
  if (__pointName_isset)
  {
    [encoder encodeObject: __pointName forKey: @"pointName"];
  }
  if (__pointDate_isset)
  {
    [encoder encodeObject: __pointDate forKey: @"pointDate"];
  }
  if (__regLevelId_isset)
  {
    [encoder encodeObject: __regLevelId forKey: @"regLevelId"];
  }
  if (__regLevelName_isset)
  {
    [encoder encodeObject: __regLevelName forKey: @"regLevelName"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__deptId_isset)
  {
    [encoder encodeInt64: __deptId forKey: @"deptId"];
  }
  if (__drId_isset)
  {
    [encoder encodeInt64: __drId forKey: @"drId"];
  }
  if (__visitTime_isset)
  {
    [encoder encodeObject: __visitTime forKey: @"visitTime"];
  }
  if (__autoSymptoms_isset)
  {
    [encoder encodeObject: __autoSymptoms forKey: @"autoSymptoms"];
  }
  if (__scheduleType_isset)
  {
    [encoder encodeInt32: __scheduleType forKey: @"scheduleType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __pointId_isset ? 2654435761 : 0;
  if (__pointId_isset)
  {
    hash = (hash * 31) ^ [__pointId hash];
  }
  hash = (hash * 31) ^ __pointName_isset ? 2654435761 : 0;
  if (__pointName_isset)
  {
    hash = (hash * 31) ^ [__pointName hash];
  }
  hash = (hash * 31) ^ __pointDate_isset ? 2654435761 : 0;
  if (__pointDate_isset)
  {
    hash = (hash * 31) ^ [__pointDate hash];
  }
  hash = (hash * 31) ^ __regLevelId_isset ? 2654435761 : 0;
  if (__regLevelId_isset)
  {
    hash = (hash * 31) ^ [__regLevelId hash];
  }
  hash = (hash * 31) ^ __regLevelName_isset ? 2654435761 : 0;
  if (__regLevelName_isset)
  {
    hash = (hash * 31) ^ [__regLevelName hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __deptId_isset ? 2654435761 : 0;
  if (__deptId_isset)
  {
    hash = (hash * 31) ^ [@(__deptId) hash];
  }
  hash = (hash * 31) ^ __drId_isset ? 2654435761 : 0;
  if (__drId_isset)
  {
    hash = (hash * 31) ^ [@(__drId) hash];
  }
  hash = (hash * 31) ^ __visitTime_isset ? 2654435761 : 0;
  if (__visitTime_isset)
  {
    hash = (hash * 31) ^ [__visitTime hash];
  }
  hash = (hash * 31) ^ __autoSymptoms_isset ? 2654435761 : 0;
  if (__autoSymptoms_isset)
  {
    hash = (hash * 31) ^ [__autoSymptoms hash];
  }
  hash = (hash * 31) ^ __scheduleType_isset ? 2654435761 : 0;
  if (__scheduleType_isset)
  {
    hash = (hash * 31) ^ [@(__scheduleType) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRegPointReq class]]) {
    return NO;
  }
  NXTFRegPointReq *other = (NXTFRegPointReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__pointId_isset != other->__pointId_isset) ||
      (__pointId_isset && ((__pointId || other->__pointId) && ![__pointId isEqual:other->__pointId]))) {
    return NO;
  }
  if ((__pointName_isset != other->__pointName_isset) ||
      (__pointName_isset && ((__pointName || other->__pointName) && ![__pointName isEqual:other->__pointName]))) {
    return NO;
  }
  if ((__pointDate_isset != other->__pointDate_isset) ||
      (__pointDate_isset && ((__pointDate || other->__pointDate) && ![__pointDate isEqual:other->__pointDate]))) {
    return NO;
  }
  if ((__regLevelId_isset != other->__regLevelId_isset) ||
      (__regLevelId_isset && ((__regLevelId || other->__regLevelId) && ![__regLevelId isEqual:other->__regLevelId]))) {
    return NO;
  }
  if ((__regLevelName_isset != other->__regLevelName_isset) ||
      (__regLevelName_isset && ((__regLevelName || other->__regLevelName) && ![__regLevelName isEqual:other->__regLevelName]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__deptId_isset != other->__deptId_isset) ||
      (__deptId_isset && (__deptId != other->__deptId))) {
    return NO;
  }
  if ((__drId_isset != other->__drId_isset) ||
      (__drId_isset && (__drId != other->__drId))) {
    return NO;
  }
  if ((__visitTime_isset != other->__visitTime_isset) ||
      (__visitTime_isset && ((__visitTime || other->__visitTime) && ![__visitTime isEqual:other->__visitTime]))) {
    return NO;
  }
  if ((__autoSymptoms_isset != other->__autoSymptoms_isset) ||
      (__autoSymptoms_isset && ((__autoSymptoms || other->__autoSymptoms) && ![__autoSymptoms isEqual:other->__autoSymptoms]))) {
    return NO;
  }
  if ((__scheduleType_isset != other->__scheduleType_isset) ||
      (__scheduleType_isset && (__scheduleType != other->__scheduleType))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__pointId release_stub];
  [__pointName release_stub];
  [__pointDate release_stub];
  [__regLevelId release_stub];
  [__regLevelName release_stub];
  [__visitTime release_stub];
  [__autoSymptoms release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) pointId {
  return [[__pointId retain_stub] autorelease_stub];
}

- (void) setPointId: (NSString *) pointId {
  [pointId retain_stub];
  [__pointId release_stub];
  __pointId = pointId;
  __pointId_isset = YES;
}

- (BOOL) pointIdIsSet {
  return __pointId_isset;
}

- (void) unsetPointId {
  [__pointId release_stub];
  __pointId = nil;
  __pointId_isset = NO;
}

- (NSString *) pointName {
  return [[__pointName retain_stub] autorelease_stub];
}

- (void) setPointName: (NSString *) pointName {
  [pointName retain_stub];
  [__pointName release_stub];
  __pointName = pointName;
  __pointName_isset = YES;
}

- (BOOL) pointNameIsSet {
  return __pointName_isset;
}

- (void) unsetPointName {
  [__pointName release_stub];
  __pointName = nil;
  __pointName_isset = NO;
}

- (NSString *) pointDate {
  return [[__pointDate retain_stub] autorelease_stub];
}

- (void) setPointDate: (NSString *) pointDate {
  [pointDate retain_stub];
  [__pointDate release_stub];
  __pointDate = pointDate;
  __pointDate_isset = YES;
}

- (BOOL) pointDateIsSet {
  return __pointDate_isset;
}

- (void) unsetPointDate {
  [__pointDate release_stub];
  __pointDate = nil;
  __pointDate_isset = NO;
}

- (NSString *) regLevelId {
  return [[__regLevelId retain_stub] autorelease_stub];
}

- (void) setRegLevelId: (NSString *) regLevelId {
  [regLevelId retain_stub];
  [__regLevelId release_stub];
  __regLevelId = regLevelId;
  __regLevelId_isset = YES;
}

- (BOOL) regLevelIdIsSet {
  return __regLevelId_isset;
}

- (void) unsetRegLevelId {
  [__regLevelId release_stub];
  __regLevelId = nil;
  __regLevelId_isset = NO;
}

- (NSString *) regLevelName {
  return [[__regLevelName retain_stub] autorelease_stub];
}

- (void) setRegLevelName: (NSString *) regLevelName {
  [regLevelName retain_stub];
  [__regLevelName release_stub];
  __regLevelName = regLevelName;
  __regLevelName_isset = YES;
}

- (BOOL) regLevelNameIsSet {
  return __regLevelName_isset;
}

- (void) unsetRegLevelName {
  [__regLevelName release_stub];
  __regLevelName = nil;
  __regLevelName_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (int64_t) deptId {
  return __deptId;
}

- (void) setDeptId: (int64_t) deptId {
  __deptId = deptId;
  __deptId_isset = YES;
}

- (BOOL) deptIdIsSet {
  return __deptId_isset;
}

- (void) unsetDeptId {
  __deptId_isset = NO;
}

- (int64_t) drId {
  return __drId;
}

- (void) setDrId: (int64_t) drId {
  __drId = drId;
  __drId_isset = YES;
}

- (BOOL) drIdIsSet {
  return __drId_isset;
}

- (void) unsetDrId {
  __drId_isset = NO;
}

- (NSString *) visitTime {
  return [[__visitTime retain_stub] autorelease_stub];
}

- (void) setVisitTime: (NSString *) visitTime {
  [visitTime retain_stub];
  [__visitTime release_stub];
  __visitTime = visitTime;
  __visitTime_isset = YES;
}

- (BOOL) visitTimeIsSet {
  return __visitTime_isset;
}

- (void) unsetVisitTime {
  [__visitTime release_stub];
  __visitTime = nil;
  __visitTime_isset = NO;
}

- (NSMutableArray *) autoSymptoms {
  return [[__autoSymptoms retain_stub] autorelease_stub];
}

- (void) setAutoSymptoms: (NSMutableArray *) autoSymptoms {
  [autoSymptoms retain_stub];
  [__autoSymptoms release_stub];
  __autoSymptoms = autoSymptoms;
  __autoSymptoms_isset = YES;
}

- (BOOL) autoSymptomsIsSet {
  return __autoSymptoms_isset;
}

- (void) unsetAutoSymptoms {
  [__autoSymptoms release_stub];
  __autoSymptoms = nil;
  __autoSymptoms_isset = NO;
}

- (int32_t) scheduleType {
  return __scheduleType;
}

- (void) setScheduleType: (int32_t) scheduleType {
  __scheduleType = scheduleType;
  __scheduleType_isset = YES;
}

- (BOOL) scheduleTypeIsSet {
  return __scheduleType_isset;
}

- (void) unsetScheduleType {
  __scheduleType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPointId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPointName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPointDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegLevelId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegLevelName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDrId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVisitTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setAutoSymptoms: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setScheduleType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegPointReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pointId_isset) {
    if (__pointId != nil) {
      [outProtocol writeFieldBeginWithName: @"pointId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __pointId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pointName_isset) {
    if (__pointName != nil) {
      [outProtocol writeFieldBeginWithName: @"pointName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __pointName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pointDate_isset) {
    if (__pointDate != nil) {
      [outProtocol writeFieldBeginWithName: @"pointDate" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __pointDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regLevelId_isset) {
    if (__regLevelId != nil) {
      [outProtocol writeFieldBeginWithName: @"regLevelId" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __regLevelId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regLevelName_isset) {
    if (__regLevelName != nil) {
      [outProtocol writeFieldBeginWithName: @"regLevelName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __regLevelName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__deptId_isset) {
    [outProtocol writeFieldBeginWithName: @"deptId" type: TType_I64 fieldID: 8];
    [outProtocol writeI64: __deptId];
    [outProtocol writeFieldEnd];
  }
  if (__drId_isset) {
    [outProtocol writeFieldBeginWithName: @"drId" type: TType_I64 fieldID: 9];
    [outProtocol writeI64: __drId];
    [outProtocol writeFieldEnd];
  }
  if (__visitTime_isset) {
    if (__visitTime != nil) {
      [outProtocol writeFieldBeginWithName: @"visitTime" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __visitTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__autoSymptoms_isset) {
    if (__autoSymptoms != nil) {
      [outProtocol writeFieldBeginWithName: @"autoSymptoms" type: TType_LIST fieldID: 11];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__autoSymptoms count]];
        int idx4;
        for (idx4 = 0; idx4 < [__autoSymptoms count]; idx4++)
        {
          [outProtocol writeString: [__autoSymptoms objectAtIndex: idx4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__scheduleType_isset) {
    [outProtocol writeFieldBeginWithName: @"scheduleType" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __scheduleType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRegPointReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",pointId:"];
  [ms appendFormat: @"\"%@\"", __pointId];
  [ms appendString: @",pointName:"];
  [ms appendFormat: @"\"%@\"", __pointName];
  [ms appendString: @",pointDate:"];
  [ms appendFormat: @"\"%@\"", __pointDate];
  [ms appendString: @",regLevelId:"];
  [ms appendFormat: @"\"%@\"", __regLevelId];
  [ms appendString: @",regLevelName:"];
  [ms appendFormat: @"\"%@\"", __regLevelName];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",deptId:"];
  [ms appendFormat: @"%qi", __deptId];
  [ms appendString: @",drId:"];
  [ms appendFormat: @"%qi", __drId];
  [ms appendString: @",visitTime:"];
  [ms appendFormat: @"\"%@\"", __visitTime];
  [ms appendString: @",autoSymptoms:"];
  [ms appendFormat: @"%@", __autoSymptoms];
  [ms appendString: @",scheduleType:"];
  [ms appendFormat: @"%i", __scheduleType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRegHospPayReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header orderId: (NSString *) orderId regId: (NSString *) regId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __orderId = [orderId retain_stub];
  __orderId_isset = YES;
  __regId = [regId retain_stub];
  __regId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [[decoder decodeObjectForKey: @"orderId"] retain_stub];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [[decoder decodeObjectForKey: @"regId"] retain_stub];
    __regId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__orderId_isset)
  {
    [encoder encodeObject: __orderId forKey: @"orderId"];
  }
  if (__regId_isset)
  {
    [encoder encodeObject: __regId forKey: @"regId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [__orderId hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [__regId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRegHospPayReq class]]) {
    return NO;
  }
  NXTFRegHospPayReq *other = (NXTFRegHospPayReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && ((__orderId || other->__orderId) && ![__orderId isEqual:other->__orderId]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && ((__regId || other->__regId) && ![__regId isEqual:other->__regId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__orderId release_stub];
  [__regId release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) orderId {
  return [[__orderId retain_stub] autorelease_stub];
}

- (void) setOrderId: (NSString *) orderId {
  [orderId retain_stub];
  [__orderId release_stub];
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  [__orderId release_stub];
  __orderId = nil;
  __orderId_isset = NO;
}

- (NSString *) regId {
  return [[__regId retain_stub] autorelease_stub];
}

- (void) setRegId: (NSString *) regId {
  [regId retain_stub];
  [__regId release_stub];
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  [__regId release_stub];
  __regId = nil;
  __regId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegHospPayReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    if (__orderId != nil) {
      [outProtocol writeFieldBeginWithName: @"orderId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __orderId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    if (__regId != nil) {
      [outProtocol writeFieldBeginWithName: @"regId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __regId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRegHospPayReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"\"%@\"", __orderId];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"\"%@\"", __regId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetReportReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientId: (int64_t) patientId reportId: (NSString *) reportId reportType: (NSString *) reportType hospId: (int32_t) hospId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __reportId = [reportId retain_stub];
  __reportId_isset = YES;
  __reportType = [reportType retain_stub];
  __reportType_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"reportId"])
  {
    __reportId = [[decoder decodeObjectForKey: @"reportId"] retain_stub];
    __reportId_isset = YES;
  }
  if ([decoder containsValueForKey: @"reportType"])
  {
    __reportType = [[decoder decodeObjectForKey: @"reportType"] retain_stub];
    __reportType_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__reportId_isset)
  {
    [encoder encodeObject: __reportId forKey: @"reportId"];
  }
  if (__reportType_isset)
  {
    [encoder encodeObject: __reportType forKey: @"reportType"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __reportId_isset ? 2654435761 : 0;
  if (__reportId_isset)
  {
    hash = (hash * 31) ^ [__reportId hash];
  }
  hash = (hash * 31) ^ __reportType_isset ? 2654435761 : 0;
  if (__reportType_isset)
  {
    hash = (hash * 31) ^ [__reportType hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetReportReq class]]) {
    return NO;
  }
  NXTFGetReportReq *other = (NXTFGetReportReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__reportId_isset != other->__reportId_isset) ||
      (__reportId_isset && ((__reportId || other->__reportId) && ![__reportId isEqual:other->__reportId]))) {
    return NO;
  }
  if ((__reportType_isset != other->__reportType_isset) ||
      (__reportType_isset && ((__reportType || other->__reportType) && ![__reportType isEqual:other->__reportType]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__reportId release_stub];
  [__reportType release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (NSString *) reportId {
  return [[__reportId retain_stub] autorelease_stub];
}

- (void) setReportId: (NSString *) reportId {
  [reportId retain_stub];
  [__reportId release_stub];
  __reportId = reportId;
  __reportId_isset = YES;
}

- (BOOL) reportIdIsSet {
  return __reportId_isset;
}

- (void) unsetReportId {
  [__reportId release_stub];
  __reportId = nil;
  __reportId_isset = NO;
}

- (NSString *) reportType {
  return [[__reportType retain_stub] autorelease_stub];
}

- (void) setReportType: (NSString *) reportType {
  [reportType retain_stub];
  [__reportType release_stub];
  __reportType = reportType;
  __reportType_isset = YES;
}

- (BOOL) reportTypeIsSet {
  return __reportType_isset;
}

- (void) unsetReportType {
  [__reportType release_stub];
  __reportType = nil;
  __reportType_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReportId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReportType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetReportReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__reportId_isset) {
    if (__reportId != nil) {
      [outProtocol writeFieldBeginWithName: @"reportId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __reportId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reportType_isset) {
    if (__reportType != nil) {
      [outProtocol writeFieldBeginWithName: @"reportType" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __reportType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetReportReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",reportId:"];
  [ms appendFormat: @"\"%@\"", __reportId];
  [ms appendString: @",reportType:"];
  [ms appendFormat: @"\"%@\"", __reportType];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetPacsImgReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId patientId: (int64_t) patientId reportId: (NSString *) reportId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __reportId = [reportId retain_stub];
  __reportId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"reportId"])
  {
    __reportId = [[decoder decodeObjectForKey: @"reportId"] retain_stub];
    __reportId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__reportId_isset)
  {
    [encoder encodeObject: __reportId forKey: @"reportId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __reportId_isset ? 2654435761 : 0;
  if (__reportId_isset)
  {
    hash = (hash * 31) ^ [__reportId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetPacsImgReq class]]) {
    return NO;
  }
  NXTFGetPacsImgReq *other = (NXTFGetPacsImgReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__reportId_isset != other->__reportId_isset) ||
      (__reportId_isset && ((__reportId || other->__reportId) && ![__reportId isEqual:other->__reportId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__reportId release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (NSString *) reportId {
  return [[__reportId retain_stub] autorelease_stub];
}

- (void) setReportId: (NSString *) reportId {
  [reportId retain_stub];
  [__reportId release_stub];
  __reportId = reportId;
  __reportId_isset = YES;
}

- (BOOL) reportIdIsSet {
  return __reportId_isset;
}

- (void) unsetReportId {
  [__reportId release_stub];
  __reportId = nil;
  __reportId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReportId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPacsImgReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__reportId_isset) {
    if (__reportId != nil) {
      [outProtocol writeFieldBeginWithName: @"reportId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __reportId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetPacsImgReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",reportId:"];
  [ms appendFormat: @"\"%@\"", __reportId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFReqAuthCodeReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.reqMode = 0;

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header phoneNo: (NSString *) phoneNo reqMode: (int32_t) reqMode signTypeName: (NSString *) signTypeName sendType: (int32_t) sendType
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __phoneNo = [phoneNo retain_stub];
  __phoneNo_isset = YES;
  __reqMode = reqMode;
  __reqMode_isset = YES;
  __signTypeName = [signTypeName retain_stub];
  __signTypeName_isset = YES;
  __sendType = sendType;
  __sendType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneNo"])
  {
    __phoneNo = [[decoder decodeObjectForKey: @"phoneNo"] retain_stub];
    __phoneNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"reqMode"])
  {
    __reqMode = [decoder decodeInt32ForKey: @"reqMode"];
    __reqMode_isset = YES;
  }
  if ([decoder containsValueForKey: @"signTypeName"])
  {
    __signTypeName = [[decoder decodeObjectForKey: @"signTypeName"] retain_stub];
    __signTypeName_isset = YES;
  }
  if ([decoder containsValueForKey: @"sendType"])
  {
    __sendType = [decoder decodeInt32ForKey: @"sendType"];
    __sendType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__phoneNo_isset)
  {
    [encoder encodeObject: __phoneNo forKey: @"phoneNo"];
  }
  if (__reqMode_isset)
  {
    [encoder encodeInt32: __reqMode forKey: @"reqMode"];
  }
  if (__signTypeName_isset)
  {
    [encoder encodeObject: __signTypeName forKey: @"signTypeName"];
  }
  if (__sendType_isset)
  {
    [encoder encodeInt32: __sendType forKey: @"sendType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __phoneNo_isset ? 2654435761 : 0;
  if (__phoneNo_isset)
  {
    hash = (hash * 31) ^ [__phoneNo hash];
  }
  hash = (hash * 31) ^ __reqMode_isset ? 2654435761 : 0;
  if (__reqMode_isset)
  {
    hash = (hash * 31) ^ [@(__reqMode) hash];
  }
  hash = (hash * 31) ^ __signTypeName_isset ? 2654435761 : 0;
  if (__signTypeName_isset)
  {
    hash = (hash * 31) ^ [__signTypeName hash];
  }
  hash = (hash * 31) ^ __sendType_isset ? 2654435761 : 0;
  if (__sendType_isset)
  {
    hash = (hash * 31) ^ [@(__sendType) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFReqAuthCodeReq class]]) {
    return NO;
  }
  NXTFReqAuthCodeReq *other = (NXTFReqAuthCodeReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__phoneNo_isset != other->__phoneNo_isset) ||
      (__phoneNo_isset && ((__phoneNo || other->__phoneNo) && ![__phoneNo isEqual:other->__phoneNo]))) {
    return NO;
  }
  if ((__reqMode_isset != other->__reqMode_isset) ||
      (__reqMode_isset && (__reqMode != other->__reqMode))) {
    return NO;
  }
  if ((__signTypeName_isset != other->__signTypeName_isset) ||
      (__signTypeName_isset && ((__signTypeName || other->__signTypeName) && ![__signTypeName isEqual:other->__signTypeName]))) {
    return NO;
  }
  if ((__sendType_isset != other->__sendType_isset) ||
      (__sendType_isset && (__sendType != other->__sendType))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__phoneNo release_stub];
  [__signTypeName release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) phoneNo {
  return [[__phoneNo retain_stub] autorelease_stub];
}

- (void) setPhoneNo: (NSString *) phoneNo {
  [phoneNo retain_stub];
  [__phoneNo release_stub];
  __phoneNo = phoneNo;
  __phoneNo_isset = YES;
}

- (BOOL) phoneNoIsSet {
  return __phoneNo_isset;
}

- (void) unsetPhoneNo {
  [__phoneNo release_stub];
  __phoneNo = nil;
  __phoneNo_isset = NO;
}

- (int32_t) reqMode {
  return __reqMode;
}

- (void) setReqMode: (int32_t) reqMode {
  __reqMode = reqMode;
  __reqMode_isset = YES;
}

- (BOOL) reqModeIsSet {
  return __reqMode_isset;
}

- (void) unsetReqMode {
  __reqMode_isset = NO;
}

- (NSString *) signTypeName {
  return [[__signTypeName retain_stub] autorelease_stub];
}

- (void) setSignTypeName: (NSString *) signTypeName {
  [signTypeName retain_stub];
  [__signTypeName release_stub];
  __signTypeName = signTypeName;
  __signTypeName_isset = YES;
}

- (BOOL) signTypeNameIsSet {
  return __signTypeName_isset;
}

- (void) unsetSignTypeName {
  [__signTypeName release_stub];
  __signTypeName = nil;
  __signTypeName_isset = NO;
}

- (int32_t) sendType {
  return __sendType;
}

- (void) setSendType: (int32_t) sendType {
  __sendType = sendType;
  __sendType_isset = YES;
}

- (BOOL) sendTypeIsSet {
  return __sendType_isset;
}

- (void) unsetSendType {
  __sendType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoneNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setReqMode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSignTypeName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSendType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReqAuthCodeReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phoneNo_isset) {
    if (__phoneNo != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __phoneNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reqMode_isset) {
    [outProtocol writeFieldBeginWithName: @"reqMode" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __reqMode];
    [outProtocol writeFieldEnd];
  }
  if (__signTypeName_isset) {
    if (__signTypeName != nil) {
      [outProtocol writeFieldBeginWithName: @"signTypeName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __signTypeName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sendType_isset) {
    [outProtocol writeFieldBeginWithName: @"sendType" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __sendType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFReqAuthCodeReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",phoneNo:"];
  [ms appendFormat: @"\"%@\"", __phoneNo];
  [ms appendString: @",reqMode:"];
  [ms appendFormat: @"%i", __reqMode];
  [ms appendString: @",signTypeName:"];
  [ms appendFormat: @"\"%@\"", __signTypeName];
  [ms appendString: @",sendType:"];
  [ms appendFormat: @"%i", __sendType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetMedInfosReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientId: (int64_t) patientId page: (NXTFPage *) page regId: (int64_t) regId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __regId = regId;
  __regId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [decoder decodeInt64ForKey: @"regId"];
    __regId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__regId_isset)
  {
    [encoder encodeInt64: __regId forKey: @"regId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [@(__regId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetMedInfosReq class]]) {
    return NO;
  }
  NXTFGetMedInfosReq *other = (NXTFGetMedInfosReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && (__regId != other->__regId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (int64_t) regId {
  return __regId;
}

- (void) setRegId: (int64_t) regId {
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  __regId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMedInfosReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 3];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    [outProtocol writeFieldBeginWithName: @"regId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __regId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetMedInfosReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"%qi", __regId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetPayWaysReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.clientType = 1;

  self.merchantNo = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId clientType: (int32_t) clientType srvType: (int32_t) srvType merchantNo: (NSMutableArray *) merchantNo
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __clientType = clientType;
  __clientType_isset = YES;
  __srvType = srvType;
  __srvType_isset = YES;
  __merchantNo = [merchantNo retain_stub];
  __merchantNo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"clientType"])
  {
    __clientType = [decoder decodeInt32ForKey: @"clientType"];
    __clientType_isset = YES;
  }
  if ([decoder containsValueForKey: @"srvType"])
  {
    __srvType = [decoder decodeInt32ForKey: @"srvType"];
    __srvType_isset = YES;
  }
  if ([decoder containsValueForKey: @"merchantNo"])
  {
    __merchantNo = [[decoder decodeObjectForKey: @"merchantNo"] retain_stub];
    __merchantNo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__clientType_isset)
  {
    [encoder encodeInt32: __clientType forKey: @"clientType"];
  }
  if (__srvType_isset)
  {
    [encoder encodeInt32: __srvType forKey: @"srvType"];
  }
  if (__merchantNo_isset)
  {
    [encoder encodeObject: __merchantNo forKey: @"merchantNo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __clientType_isset ? 2654435761 : 0;
  if (__clientType_isset)
  {
    hash = (hash * 31) ^ [@(__clientType) hash];
  }
  hash = (hash * 31) ^ __srvType_isset ? 2654435761 : 0;
  if (__srvType_isset)
  {
    hash = (hash * 31) ^ [@(__srvType) hash];
  }
  hash = (hash * 31) ^ __merchantNo_isset ? 2654435761 : 0;
  if (__merchantNo_isset)
  {
    hash = (hash * 31) ^ [__merchantNo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetPayWaysReq class]]) {
    return NO;
  }
  NXTFGetPayWaysReq *other = (NXTFGetPayWaysReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__clientType_isset != other->__clientType_isset) ||
      (__clientType_isset && (__clientType != other->__clientType))) {
    return NO;
  }
  if ((__srvType_isset != other->__srvType_isset) ||
      (__srvType_isset && (__srvType != other->__srvType))) {
    return NO;
  }
  if ((__merchantNo_isset != other->__merchantNo_isset) ||
      (__merchantNo_isset && ((__merchantNo || other->__merchantNo) && ![__merchantNo isEqual:other->__merchantNo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__merchantNo release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int32_t) clientType {
  return __clientType;
}

- (void) setClientType: (int32_t) clientType {
  __clientType = clientType;
  __clientType_isset = YES;
}

- (BOOL) clientTypeIsSet {
  return __clientType_isset;
}

- (void) unsetClientType {
  __clientType_isset = NO;
}

- (int32_t) srvType {
  return __srvType;
}

- (void) setSrvType: (int32_t) srvType {
  __srvType = srvType;
  __srvType_isset = YES;
}

- (BOOL) srvTypeIsSet {
  return __srvType_isset;
}

- (void) unsetSrvType {
  __srvType_isset = NO;
}

- (NSMutableArray *) merchantNo {
  return [[__merchantNo retain_stub] autorelease_stub];
}

- (void) setMerchantNo: (NSMutableArray *) merchantNo {
  [merchantNo retain_stub];
  [__merchantNo release_stub];
  __merchantNo = merchantNo;
  __merchantNo_isset = YES;
}

- (BOOL) merchantNoIsSet {
  return __merchantNo_isset;
}

- (void) unsetMerchantNo {
  [__merchantNo release_stub];
  __merchantNo = nil;
  __merchantNo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setClientType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSrvType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NSString * _elem7 = [inProtocol readString];
            [fieldValue addObject: _elem7];
          }
          [inProtocol readListEnd];
          [self setMerchantNo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPayWaysReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__clientType_isset) {
    [outProtocol writeFieldBeginWithName: @"clientType" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __clientType];
    [outProtocol writeFieldEnd];
  }
  if (__srvType_isset) {
    [outProtocol writeFieldBeginWithName: @"srvType" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __srvType];
    [outProtocol writeFieldEnd];
  }
  if (__merchantNo_isset) {
    if (__merchantNo != nil) {
      [outProtocol writeFieldBeginWithName: @"merchantNo" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__merchantNo count]];
        int idx9;
        for (idx9 = 0; idx9 < [__merchantNo count]; idx9++)
        {
          [outProtocol writeString: [__merchantNo objectAtIndex: idx9]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetPayWaysReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",clientType:"];
  [ms appendFormat: @"%i", __clientType];
  [ms appendString: @",srvType:"];
  [ms appendFormat: @"%i", __srvType];
  [ms appendString: @",merchantNo:"];
  [ms appendFormat: @"%@", __merchantNo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetPayInfoReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.extras = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header orderId: (int64_t) orderId payWayTypeId: (int32_t) payWayTypeId extras: (NSMutableArray *) extras
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  __payWayTypeId = payWayTypeId;
  __payWayTypeId_isset = YES;
  __extras = [extras retain_stub];
  __extras_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"payWayTypeId"])
  {
    __payWayTypeId = [decoder decodeInt32ForKey: @"payWayTypeId"];
    __payWayTypeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"extras"])
  {
    __extras = [[decoder decodeObjectForKey: @"extras"] retain_stub];
    __extras_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
  if (__payWayTypeId_isset)
  {
    [encoder encodeInt32: __payWayTypeId forKey: @"payWayTypeId"];
  }
  if (__extras_isset)
  {
    [encoder encodeObject: __extras forKey: @"extras"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  hash = (hash * 31) ^ __payWayTypeId_isset ? 2654435761 : 0;
  if (__payWayTypeId_isset)
  {
    hash = (hash * 31) ^ [@(__payWayTypeId) hash];
  }
  hash = (hash * 31) ^ __extras_isset ? 2654435761 : 0;
  if (__extras_isset)
  {
    hash = (hash * 31) ^ [__extras hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetPayInfoReq class]]) {
    return NO;
  }
  NXTFGetPayInfoReq *other = (NXTFGetPayInfoReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  if ((__payWayTypeId_isset != other->__payWayTypeId_isset) ||
      (__payWayTypeId_isset && (__payWayTypeId != other->__payWayTypeId))) {
    return NO;
  }
  if ((__extras_isset != other->__extras_isset) ||
      (__extras_isset && ((__extras || other->__extras) && ![__extras isEqual:other->__extras]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__extras release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (int32_t) payWayTypeId {
  return __payWayTypeId;
}

- (void) setPayWayTypeId: (int32_t) payWayTypeId {
  __payWayTypeId = payWayTypeId;
  __payWayTypeId_isset = YES;
}

- (BOOL) payWayTypeIdIsSet {
  return __payWayTypeId_isset;
}

- (void) unsetPayWayTypeId {
  __payWayTypeId_isset = NO;
}

- (NSMutableArray *) extras {
  return [[__extras retain_stub] autorelease_stub];
}

- (void) setExtras: (NSMutableArray *) extras {
  [extras retain_stub];
  [__extras release_stub];
  __extras = extras;
  __extras_isset = YES;
}

- (BOOL) extrasIsSet {
  return __extras_isset;
}

- (void) unsetExtras {
  [__extras release_stub];
  __extras = nil;
  __extras_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPayWayTypeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            NSString * _elem12 = [inProtocol readString];
            [fieldValue addObject: _elem12];
          }
          [inProtocol readListEnd];
          [self setExtras: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPayInfoReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  if (__payWayTypeId_isset) {
    [outProtocol writeFieldBeginWithName: @"payWayTypeId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __payWayTypeId];
    [outProtocol writeFieldEnd];
  }
  if (__extras_isset) {
    if (__extras != nil) {
      [outProtocol writeFieldBeginWithName: @"extras" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__extras count]];
        int idx14;
        for (idx14 = 0; idx14 < [__extras count]; idx14++)
        {
          [outProtocol writeString: [__extras objectAtIndex: idx14]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetPayInfoReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @",payWayTypeId:"];
  [ms appendFormat: @"%i", __payWayTypeId];
  [ms appendString: @",extras:"];
  [ms appendFormat: @"%@", __extras];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFCancelRegReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header orderId: (int64_t) orderId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFCancelRegReq class]]) {
    return NO;
  }
  NXTFCancelRegReq *other = (NXTFCancelRegReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CancelRegReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFCancelRegReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFDescSymptomReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.symptomPics = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header regId: (int64_t) regId symptom: (NSString *) symptom disease: (NSString *) disease symptomPics: (NSMutableArray *) symptomPics
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __regId = regId;
  __regId_isset = YES;
  __symptom = [symptom retain_stub];
  __symptom_isset = YES;
  __disease = [disease retain_stub];
  __disease_isset = YES;
  __symptomPics = [symptomPics retain_stub];
  __symptomPics_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [decoder decodeInt64ForKey: @"regId"];
    __regId_isset = YES;
  }
  if ([decoder containsValueForKey: @"symptom"])
  {
    __symptom = [[decoder decodeObjectForKey: @"symptom"] retain_stub];
    __symptom_isset = YES;
  }
  if ([decoder containsValueForKey: @"disease"])
  {
    __disease = [[decoder decodeObjectForKey: @"disease"] retain_stub];
    __disease_isset = YES;
  }
  if ([decoder containsValueForKey: @"symptomPics"])
  {
    __symptomPics = [[decoder decodeObjectForKey: @"symptomPics"] retain_stub];
    __symptomPics_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__regId_isset)
  {
    [encoder encodeInt64: __regId forKey: @"regId"];
  }
  if (__symptom_isset)
  {
    [encoder encodeObject: __symptom forKey: @"symptom"];
  }
  if (__disease_isset)
  {
    [encoder encodeObject: __disease forKey: @"disease"];
  }
  if (__symptomPics_isset)
  {
    [encoder encodeObject: __symptomPics forKey: @"symptomPics"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [@(__regId) hash];
  }
  hash = (hash * 31) ^ __symptom_isset ? 2654435761 : 0;
  if (__symptom_isset)
  {
    hash = (hash * 31) ^ [__symptom hash];
  }
  hash = (hash * 31) ^ __disease_isset ? 2654435761 : 0;
  if (__disease_isset)
  {
    hash = (hash * 31) ^ [__disease hash];
  }
  hash = (hash * 31) ^ __symptomPics_isset ? 2654435761 : 0;
  if (__symptomPics_isset)
  {
    hash = (hash * 31) ^ [__symptomPics hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFDescSymptomReq class]]) {
    return NO;
  }
  NXTFDescSymptomReq *other = (NXTFDescSymptomReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && (__regId != other->__regId))) {
    return NO;
  }
  if ((__symptom_isset != other->__symptom_isset) ||
      (__symptom_isset && ((__symptom || other->__symptom) && ![__symptom isEqual:other->__symptom]))) {
    return NO;
  }
  if ((__disease_isset != other->__disease_isset) ||
      (__disease_isset && ((__disease || other->__disease) && ![__disease isEqual:other->__disease]))) {
    return NO;
  }
  if ((__symptomPics_isset != other->__symptomPics_isset) ||
      (__symptomPics_isset && ((__symptomPics || other->__symptomPics) && ![__symptomPics isEqual:other->__symptomPics]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__symptom release_stub];
  [__disease release_stub];
  [__symptomPics release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) regId {
  return __regId;
}

- (void) setRegId: (int64_t) regId {
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  __regId_isset = NO;
}

- (NSString *) symptom {
  return [[__symptom retain_stub] autorelease_stub];
}

- (void) setSymptom: (NSString *) symptom {
  [symptom retain_stub];
  [__symptom release_stub];
  __symptom = symptom;
  __symptom_isset = YES;
}

- (BOOL) symptomIsSet {
  return __symptom_isset;
}

- (void) unsetSymptom {
  [__symptom release_stub];
  __symptom = nil;
  __symptom_isset = NO;
}

- (NSString *) disease {
  return [[__disease retain_stub] autorelease_stub];
}

- (void) setDisease: (NSString *) disease {
  [disease retain_stub];
  [__disease release_stub];
  __disease = disease;
  __disease_isset = YES;
}

- (BOOL) diseaseIsSet {
  return __disease_isset;
}

- (void) unsetDisease {
  [__disease release_stub];
  __disease = nil;
  __disease_isset = NO;
}

- (NSMutableArray *) symptomPics {
  return [[__symptomPics retain_stub] autorelease_stub];
}

- (void) setSymptomPics: (NSMutableArray *) symptomPics {
  [symptomPics retain_stub];
  [__symptomPics release_stub];
  __symptomPics = symptomPics;
  __symptomPics_isset = YES;
}

- (BOOL) symptomPicsIsSet {
  return __symptomPics_isset;
}

- (void) unsetSymptomPics {
  [__symptomPics release_stub];
  __symptomPics = nil;
  __symptomPics_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSymptom: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDisease: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            NSString * _elem17 = [inProtocol readString];
            [fieldValue addObject: _elem17];
          }
          [inProtocol readListEnd];
          [self setSymptomPics: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DescSymptomReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    [outProtocol writeFieldBeginWithName: @"regId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __regId];
    [outProtocol writeFieldEnd];
  }
  if (__symptom_isset) {
    if (__symptom != nil) {
      [outProtocol writeFieldBeginWithName: @"symptom" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __symptom];
      [outProtocol writeFieldEnd];
    }
  }
  if (__disease_isset) {
    if (__disease != nil) {
      [outProtocol writeFieldBeginWithName: @"disease" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __disease];
      [outProtocol writeFieldEnd];
    }
  }
  if (__symptomPics_isset) {
    if (__symptomPics != nil) {
      [outProtocol writeFieldBeginWithName: @"symptomPics" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__symptomPics count]];
        int idx19;
        for (idx19 = 0; idx19 < [__symptomPics count]; idx19++)
        {
          [outProtocol writeString: [__symptomPics objectAtIndex: idx19]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFDescSymptomReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"%qi", __regId];
  [ms appendString: @",symptom:"];
  [ms appendFormat: @"\"%@\"", __symptom];
  [ms appendString: @",disease:"];
  [ms appendFormat: @"\"%@\"", __disease];
  [ms appendString: @",symptomPics:"];
  [ms appendFormat: @"%@", __symptomPics];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFSendFlowerReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header regId: (int64_t) regId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __regId = regId;
  __regId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [decoder decodeInt64ForKey: @"regId"];
    __regId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__regId_isset)
  {
    [encoder encodeInt64: __regId forKey: @"regId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [@(__regId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFSendFlowerReq class]]) {
    return NO;
  }
  NXTFSendFlowerReq *other = (NXTFSendFlowerReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && (__regId != other->__regId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) regId {
  return __regId;
}

- (void) setRegId: (int64_t) regId {
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  __regId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendFlowerReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    [outProtocol writeFieldBeginWithName: @"regId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __regId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFSendFlowerReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"%qi", __regId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetRegReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header regId: (int64_t) regId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __regId = regId;
  __regId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [decoder decodeInt64ForKey: @"regId"];
    __regId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__regId_isset)
  {
    [encoder encodeInt64: __regId forKey: @"regId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [@(__regId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetRegReq class]]) {
    return NO;
  }
  NXTFGetRegReq *other = (NXTFGetRegReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && (__regId != other->__regId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) regId {
  return __regId;
}

- (void) setRegId: (int64_t) regId {
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  __regId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRegReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    [outProtocol writeFieldBeginWithName: @"regId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __regId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetRegReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"%qi", __regId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetHospMapsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetHospMapsReq class]]) {
    return NO;
  }
  NXTFGetHospMapsReq *other = (NXTFGetHospMapsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetHospMapsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetHospMapsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFavorDrReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header drId: (int64_t) drId operType: (NSString *) operType
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __drId = drId;
  __drId_isset = YES;
  __operType = [operType retain_stub];
  __operType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"drId"])
  {
    __drId = [decoder decodeInt64ForKey: @"drId"];
    __drId_isset = YES;
  }
  if ([decoder containsValueForKey: @"operType"])
  {
    __operType = [[decoder decodeObjectForKey: @"operType"] retain_stub];
    __operType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__drId_isset)
  {
    [encoder encodeInt64: __drId forKey: @"drId"];
  }
  if (__operType_isset)
  {
    [encoder encodeObject: __operType forKey: @"operType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __drId_isset ? 2654435761 : 0;
  if (__drId_isset)
  {
    hash = (hash * 31) ^ [@(__drId) hash];
  }
  hash = (hash * 31) ^ __operType_isset ? 2654435761 : 0;
  if (__operType_isset)
  {
    hash = (hash * 31) ^ [__operType hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFavorDrReq class]]) {
    return NO;
  }
  NXTFFavorDrReq *other = (NXTFFavorDrReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__drId_isset != other->__drId_isset) ||
      (__drId_isset && (__drId != other->__drId))) {
    return NO;
  }
  if ((__operType_isset != other->__operType_isset) ||
      (__operType_isset && ((__operType || other->__operType) && ![__operType isEqual:other->__operType]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__operType release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) drId {
  return __drId;
}

- (void) setDrId: (int64_t) drId {
  __drId = drId;
  __drId_isset = YES;
}

- (BOOL) drIdIsSet {
  return __drId_isset;
}

- (void) unsetDrId {
  __drId_isset = NO;
}

- (NSString *) operType {
  return [[__operType retain_stub] autorelease_stub];
}

- (void) setOperType: (NSString *) operType {
  [operType retain_stub];
  [__operType release_stub];
  __operType = operType;
  __operType_isset = YES;
}

- (BOOL) operTypeIsSet {
  return __operType_isset;
}

- (void) unsetOperType {
  [__operType release_stub];
  __operType = nil;
  __operType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDrId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOperType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FavorDrReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drId_isset) {
    [outProtocol writeFieldBeginWithName: @"drId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __drId];
    [outProtocol writeFieldEnd];
  }
  if (__operType_isset) {
    if (__operType != nil) {
      [outProtocol writeFieldBeginWithName: @"operType" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __operType];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFavorDrReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",drId:"];
  [ms appendFormat: @"%qi", __drId];
  [ms appendString: @",operType:"];
  [ms appendFormat: @"\"%@\"", __operType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFavorHospReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header HospId: (int64_t) HospId operType: (NSString *) operType
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __HospId = HospId;
  __HospId_isset = YES;
  __operType = [operType retain_stub];
  __operType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"HospId"])
  {
    __HospId = [decoder decodeInt64ForKey: @"HospId"];
    __HospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"operType"])
  {
    __operType = [[decoder decodeObjectForKey: @"operType"] retain_stub];
    __operType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__HospId_isset)
  {
    [encoder encodeInt64: __HospId forKey: @"HospId"];
  }
  if (__operType_isset)
  {
    [encoder encodeObject: __operType forKey: @"operType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __HospId_isset ? 2654435761 : 0;
  if (__HospId_isset)
  {
    hash = (hash * 31) ^ [@(__HospId) hash];
  }
  hash = (hash * 31) ^ __operType_isset ? 2654435761 : 0;
  if (__operType_isset)
  {
    hash = (hash * 31) ^ [__operType hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFavorHospReq class]]) {
    return NO;
  }
  NXTFFavorHospReq *other = (NXTFFavorHospReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__HospId_isset != other->__HospId_isset) ||
      (__HospId_isset && (__HospId != other->__HospId))) {
    return NO;
  }
  if ((__operType_isset != other->__operType_isset) ||
      (__operType_isset && ((__operType || other->__operType) && ![__operType isEqual:other->__operType]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__operType release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) HospId {
  return __HospId;
}

- (void) setHospId: (int64_t) HospId {
  __HospId = HospId;
  __HospId_isset = YES;
}

- (BOOL) HospIdIsSet {
  return __HospId_isset;
}

- (void) unsetHospId {
  __HospId_isset = NO;
}

- (NSString *) operType {
  return [[__operType retain_stub] autorelease_stub];
}

- (void) setOperType: (NSString *) operType {
  [operType retain_stub];
  [__operType release_stub];
  __operType = operType;
  __operType_isset = YES;
}

- (BOOL) operTypeIsSet {
  return __operType_isset;
}

- (void) unsetOperType {
  [__operType release_stub];
  __operType = nil;
  __operType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOperType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FavorHospReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__HospId_isset) {
    [outProtocol writeFieldBeginWithName: @"HospId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __HospId];
    [outProtocol writeFieldEnd];
  }
  if (__operType_isset) {
    if (__operType != nil) {
      [outProtocol writeFieldBeginWithName: @"operType" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __operType];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFavorHospReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",HospId:"];
  [ms appendFormat: @"%qi", __HospId];
  [ms appendString: @",operType:"];
  [ms appendFormat: @"\"%@\"", __operType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFavorDiseaseReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header DiseaseId: (int64_t) DiseaseId operType: (NSString *) operType
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __DiseaseId = DiseaseId;
  __DiseaseId_isset = YES;
  __operType = [operType retain_stub];
  __operType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"DiseaseId"])
  {
    __DiseaseId = [decoder decodeInt64ForKey: @"DiseaseId"];
    __DiseaseId_isset = YES;
  }
  if ([decoder containsValueForKey: @"operType"])
  {
    __operType = [[decoder decodeObjectForKey: @"operType"] retain_stub];
    __operType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__DiseaseId_isset)
  {
    [encoder encodeInt64: __DiseaseId forKey: @"DiseaseId"];
  }
  if (__operType_isset)
  {
    [encoder encodeObject: __operType forKey: @"operType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __DiseaseId_isset ? 2654435761 : 0;
  if (__DiseaseId_isset)
  {
    hash = (hash * 31) ^ [@(__DiseaseId) hash];
  }
  hash = (hash * 31) ^ __operType_isset ? 2654435761 : 0;
  if (__operType_isset)
  {
    hash = (hash * 31) ^ [__operType hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFavorDiseaseReq class]]) {
    return NO;
  }
  NXTFFavorDiseaseReq *other = (NXTFFavorDiseaseReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__DiseaseId_isset != other->__DiseaseId_isset) ||
      (__DiseaseId_isset && (__DiseaseId != other->__DiseaseId))) {
    return NO;
  }
  if ((__operType_isset != other->__operType_isset) ||
      (__operType_isset && ((__operType || other->__operType) && ![__operType isEqual:other->__operType]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__operType release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) DiseaseId {
  return __DiseaseId;
}

- (void) setDiseaseId: (int64_t) DiseaseId {
  __DiseaseId = DiseaseId;
  __DiseaseId_isset = YES;
}

- (BOOL) DiseaseIdIsSet {
  return __DiseaseId_isset;
}

- (void) unsetDiseaseId {
  __DiseaseId_isset = NO;
}

- (NSString *) operType {
  return [[__operType retain_stub] autorelease_stub];
}

- (void) setOperType: (NSString *) operType {
  [operType retain_stub];
  [__operType release_stub];
  __operType = operType;
  __operType_isset = YES;
}

- (BOOL) operTypeIsSet {
  return __operType_isset;
}

- (void) unsetOperType {
  [__operType release_stub];
  __operType = nil;
  __operType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDiseaseId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOperType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FavorDiseaseReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__DiseaseId_isset) {
    [outProtocol writeFieldBeginWithName: @"DiseaseId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __DiseaseId];
    [outProtocol writeFieldEnd];
  }
  if (__operType_isset) {
    if (__operType != nil) {
      [outProtocol writeFieldBeginWithName: @"operType" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __operType];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFavorDiseaseReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",DiseaseId:"];
  [ms appendFormat: @"%qi", __DiseaseId];
  [ms appendString: @",operType:"];
  [ms appendFormat: @"\"%@\"", __operType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetFavorDrsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header page: (NXTFPage *) page
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetFavorDrsReq class]]) {
    return NO;
  }
  NXTFGetFavorDrsReq *other = (NXTFGetFavorDrsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFavorDrsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetFavorDrsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetFavorHospsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header page: (NXTFPage *) page
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetFavorHospsReq class]]) {
    return NO;
  }
  NXTFGetFavorHospsReq *other = (NXTFGetFavorHospsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFavorHospsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetFavorHospsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetFavorDiseasesReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetFavorDiseasesReq class]]) {
    return NO;
  }
  NXTFGetFavorDiseasesReq *other = (NXTFGetFavorDiseasesReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFavorDiseasesReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetFavorDiseasesReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetNoticeReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId deptId: (NSString *) deptId noticeType: (int32_t) noticeType
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __deptId = [deptId retain_stub];
  __deptId_isset = YES;
  __noticeType = noticeType;
  __noticeType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptId"])
  {
    __deptId = [[decoder decodeObjectForKey: @"deptId"] retain_stub];
    __deptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"noticeType"])
  {
    __noticeType = [decoder decodeInt32ForKey: @"noticeType"];
    __noticeType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__deptId_isset)
  {
    [encoder encodeObject: __deptId forKey: @"deptId"];
  }
  if (__noticeType_isset)
  {
    [encoder encodeInt32: __noticeType forKey: @"noticeType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __deptId_isset ? 2654435761 : 0;
  if (__deptId_isset)
  {
    hash = (hash * 31) ^ [__deptId hash];
  }
  hash = (hash * 31) ^ __noticeType_isset ? 2654435761 : 0;
  if (__noticeType_isset)
  {
    hash = (hash * 31) ^ [@(__noticeType) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetNoticeReq class]]) {
    return NO;
  }
  NXTFGetNoticeReq *other = (NXTFGetNoticeReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__deptId_isset != other->__deptId_isset) ||
      (__deptId_isset && ((__deptId || other->__deptId) && ![__deptId isEqual:other->__deptId]))) {
    return NO;
  }
  if ((__noticeType_isset != other->__noticeType_isset) ||
      (__noticeType_isset && (__noticeType != other->__noticeType))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__deptId release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (NSString *) deptId {
  return [[__deptId retain_stub] autorelease_stub];
}

- (void) setDeptId: (NSString *) deptId {
  [deptId retain_stub];
  [__deptId release_stub];
  __deptId = deptId;
  __deptId_isset = YES;
}

- (BOOL) deptIdIsSet {
  return __deptId_isset;
}

- (void) unsetDeptId {
  [__deptId release_stub];
  __deptId = nil;
  __deptId_isset = NO;
}

- (int32_t) noticeType {
  return __noticeType;
}

- (void) setNoticeType: (int32_t) noticeType {
  __noticeType = noticeType;
  __noticeType_isset = YES;
}

- (BOOL) noticeTypeIsSet {
  return __noticeType_isset;
}

- (void) unsetNoticeType {
  __noticeType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNoticeType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNoticeReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__deptId_isset) {
    if (__deptId != nil) {
      [outProtocol writeFieldBeginWithName: @"deptId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __deptId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__noticeType_isset) {
    [outProtocol writeFieldBeginWithName: @"noticeType" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __noticeType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetNoticeReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",deptId:"];
  [ms appendFormat: @"\"%@\"", __deptId];
  [ms appendString: @",noticeType:"];
  [ms appendFormat: @"%i", __noticeType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFQueryPatientsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientId: (int64_t) patientId name: (NSString *) name phoneNo: (NSString *) phoneNo hospId: (int32_t) hospId cardTarget: (int32_t) cardTarget
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __phoneNo = [phoneNo retain_stub];
  __phoneNo_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __cardTarget = cardTarget;
  __cardTarget_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneNo"])
  {
    __phoneNo = [[decoder decodeObjectForKey: @"phoneNo"] retain_stub];
    __phoneNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardTarget"])
  {
    __cardTarget = [decoder decodeInt32ForKey: @"cardTarget"];
    __cardTarget_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__phoneNo_isset)
  {
    [encoder encodeObject: __phoneNo forKey: @"phoneNo"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__cardTarget_isset)
  {
    [encoder encodeInt32: __cardTarget forKey: @"cardTarget"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __phoneNo_isset ? 2654435761 : 0;
  if (__phoneNo_isset)
  {
    hash = (hash * 31) ^ [__phoneNo hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __cardTarget_isset ? 2654435761 : 0;
  if (__cardTarget_isset)
  {
    hash = (hash * 31) ^ [@(__cardTarget) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFQueryPatientsReq class]]) {
    return NO;
  }
  NXTFQueryPatientsReq *other = (NXTFQueryPatientsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__phoneNo_isset != other->__phoneNo_isset) ||
      (__phoneNo_isset && ((__phoneNo || other->__phoneNo) && ![__phoneNo isEqual:other->__phoneNo]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__cardTarget_isset != other->__cardTarget_isset) ||
      (__cardTarget_isset && (__cardTarget != other->__cardTarget))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__name release_stub];
  [__phoneNo release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) phoneNo {
  return [[__phoneNo retain_stub] autorelease_stub];
}

- (void) setPhoneNo: (NSString *) phoneNo {
  [phoneNo retain_stub];
  [__phoneNo release_stub];
  __phoneNo = phoneNo;
  __phoneNo_isset = YES;
}

- (BOOL) phoneNoIsSet {
  return __phoneNo_isset;
}

- (void) unsetPhoneNo {
  [__phoneNo release_stub];
  __phoneNo = nil;
  __phoneNo_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int32_t) cardTarget {
  return __cardTarget;
}

- (void) setCardTarget: (int32_t) cardTarget {
  __cardTarget = cardTarget;
  __cardTarget_isset = YES;
}

- (BOOL) cardTargetIsSet {
  return __cardTarget_isset;
}

- (void) unsetCardTarget {
  __cardTarget_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoneNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCardTarget: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryPatientsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phoneNo_isset) {
    if (__phoneNo != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneNo" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __phoneNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__cardTarget_isset) {
    [outProtocol writeFieldBeginWithName: @"cardTarget" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __cardTarget];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFQueryPatientsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",phoneNo:"];
  [ms appendFormat: @"\"%@\"", __phoneNo];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",cardTarget:"];
  [ms appendFormat: @"%i", __cardTarget];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFBindMedCardReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId patientId: (int64_t) patientId markType: (NSString *) markType markNo: (NSString *) markNo cardId: (int64_t) cardId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __markType = [markType retain_stub];
  __markType_isset = YES;
  __markNo = [markNo retain_stub];
  __markNo_isset = YES;
  __cardId = cardId;
  __cardId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"markType"])
  {
    __markType = [[decoder decodeObjectForKey: @"markType"] retain_stub];
    __markType_isset = YES;
  }
  if ([decoder containsValueForKey: @"markNo"])
  {
    __markNo = [[decoder decodeObjectForKey: @"markNo"] retain_stub];
    __markNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardId"])
  {
    __cardId = [decoder decodeInt64ForKey: @"cardId"];
    __cardId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__markType_isset)
  {
    [encoder encodeObject: __markType forKey: @"markType"];
  }
  if (__markNo_isset)
  {
    [encoder encodeObject: __markNo forKey: @"markNo"];
  }
  if (__cardId_isset)
  {
    [encoder encodeInt64: __cardId forKey: @"cardId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __markType_isset ? 2654435761 : 0;
  if (__markType_isset)
  {
    hash = (hash * 31) ^ [__markType hash];
  }
  hash = (hash * 31) ^ __markNo_isset ? 2654435761 : 0;
  if (__markNo_isset)
  {
    hash = (hash * 31) ^ [__markNo hash];
  }
  hash = (hash * 31) ^ __cardId_isset ? 2654435761 : 0;
  if (__cardId_isset)
  {
    hash = (hash * 31) ^ [@(__cardId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFBindMedCardReq class]]) {
    return NO;
  }
  NXTFBindMedCardReq *other = (NXTFBindMedCardReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__markType_isset != other->__markType_isset) ||
      (__markType_isset && ((__markType || other->__markType) && ![__markType isEqual:other->__markType]))) {
    return NO;
  }
  if ((__markNo_isset != other->__markNo_isset) ||
      (__markNo_isset && ((__markNo || other->__markNo) && ![__markNo isEqual:other->__markNo]))) {
    return NO;
  }
  if ((__cardId_isset != other->__cardId_isset) ||
      (__cardId_isset && (__cardId != other->__cardId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__markType release_stub];
  [__markNo release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (NSString *) markType {
  return [[__markType retain_stub] autorelease_stub];
}

- (void) setMarkType: (NSString *) markType {
  [markType retain_stub];
  [__markType release_stub];
  __markType = markType;
  __markType_isset = YES;
}

- (BOOL) markTypeIsSet {
  return __markType_isset;
}

- (void) unsetMarkType {
  [__markType release_stub];
  __markType = nil;
  __markType_isset = NO;
}

- (NSString *) markNo {
  return [[__markNo retain_stub] autorelease_stub];
}

- (void) setMarkNo: (NSString *) markNo {
  [markNo retain_stub];
  [__markNo release_stub];
  __markNo = markNo;
  __markNo_isset = YES;
}

- (BOOL) markNoIsSet {
  return __markNo_isset;
}

- (void) unsetMarkNo {
  [__markNo release_stub];
  __markNo = nil;
  __markNo_isset = NO;
}

- (int64_t) cardId {
  return __cardId;
}

- (void) setCardId: (int64_t) cardId {
  __cardId = cardId;
  __cardId_isset = YES;
}

- (BOOL) cardIdIsSet {
  return __cardId_isset;
}

- (void) unsetCardId {
  __cardId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMarkType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMarkNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCardId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BindMedCardReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__markType_isset) {
    if (__markType != nil) {
      [outProtocol writeFieldBeginWithName: @"markType" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __markType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__markNo_isset) {
    if (__markNo != nil) {
      [outProtocol writeFieldBeginWithName: @"markNo" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __markNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cardId_isset) {
    [outProtocol writeFieldBeginWithName: @"cardId" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __cardId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFBindMedCardReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",markType:"];
  [ms appendFormat: @"\"%@\"", __markType];
  [ms appendString: @",markNo:"];
  [ms appendFormat: @"\"%@\"", __markNo];
  [ms appendString: @",cardId:"];
  [ms appendFormat: @"%qi", __cardId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetMedCardsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.mode = 1;

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientId: (int64_t) patientId hospId: (int32_t) hospId mode: (int32_t) mode cardTarget: (int32_t) cardTarget markSubType: (int32_t) markSubType
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __mode = mode;
  __mode_isset = YES;
  __cardTarget = cardTarget;
  __cardTarget_isset = YES;
  __markSubType = markSubType;
  __markSubType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"mode"])
  {
    __mode = [decoder decodeInt32ForKey: @"mode"];
    __mode_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardTarget"])
  {
    __cardTarget = [decoder decodeInt32ForKey: @"cardTarget"];
    __cardTarget_isset = YES;
  }
  if ([decoder containsValueForKey: @"markSubType"])
  {
    __markSubType = [decoder decodeInt32ForKey: @"markSubType"];
    __markSubType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__mode_isset)
  {
    [encoder encodeInt32: __mode forKey: @"mode"];
  }
  if (__cardTarget_isset)
  {
    [encoder encodeInt32: __cardTarget forKey: @"cardTarget"];
  }
  if (__markSubType_isset)
  {
    [encoder encodeInt32: __markSubType forKey: @"markSubType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __mode_isset ? 2654435761 : 0;
  if (__mode_isset)
  {
    hash = (hash * 31) ^ [@(__mode) hash];
  }
  hash = (hash * 31) ^ __cardTarget_isset ? 2654435761 : 0;
  if (__cardTarget_isset)
  {
    hash = (hash * 31) ^ [@(__cardTarget) hash];
  }
  hash = (hash * 31) ^ __markSubType_isset ? 2654435761 : 0;
  if (__markSubType_isset)
  {
    hash = (hash * 31) ^ [@(__markSubType) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetMedCardsReq class]]) {
    return NO;
  }
  NXTFGetMedCardsReq *other = (NXTFGetMedCardsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__mode_isset != other->__mode_isset) ||
      (__mode_isset && (__mode != other->__mode))) {
    return NO;
  }
  if ((__cardTarget_isset != other->__cardTarget_isset) ||
      (__cardTarget_isset && (__cardTarget != other->__cardTarget))) {
    return NO;
  }
  if ((__markSubType_isset != other->__markSubType_isset) ||
      (__markSubType_isset && (__markSubType != other->__markSubType))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int32_t) mode {
  return __mode;
}

- (void) setMode: (int32_t) mode {
  __mode = mode;
  __mode_isset = YES;
}

- (BOOL) modeIsSet {
  return __mode_isset;
}

- (void) unsetMode {
  __mode_isset = NO;
}

- (int32_t) cardTarget {
  return __cardTarget;
}

- (void) setCardTarget: (int32_t) cardTarget {
  __cardTarget = cardTarget;
  __cardTarget_isset = YES;
}

- (BOOL) cardTargetIsSet {
  return __cardTarget_isset;
}

- (void) unsetCardTarget {
  __cardTarget_isset = NO;
}

- (int32_t) markSubType {
  return __markSubType;
}

- (void) setMarkSubType: (int32_t) markSubType {
  __markSubType = markSubType;
  __markSubType_isset = YES;
}

- (BOOL) markSubTypeIsSet {
  return __markSubType_isset;
}

- (void) unsetMarkSubType {
  __markSubType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCardTarget: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMarkSubType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMedCardsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__mode_isset) {
    [outProtocol writeFieldBeginWithName: @"mode" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __mode];
    [outProtocol writeFieldEnd];
  }
  if (__cardTarget_isset) {
    [outProtocol writeFieldBeginWithName: @"cardTarget" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __cardTarget];
    [outProtocol writeFieldEnd];
  }
  if (__markSubType_isset) {
    [outProtocol writeFieldBeginWithName: @"markSubType" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __markSubType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetMedCardsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",mode:"];
  [ms appendFormat: @"%i", __mode];
  [ms appendString: @",cardTarget:"];
  [ms appendFormat: @"%i", __cardTarget];
  [ms appendString: @",markSubType:"];
  [ms appendFormat: @"%i", __markSubType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetMedCardReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header cardId: (int64_t) cardId password: (NSString *) password
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __cardId = cardId;
  __cardId_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardId"])
  {
    __cardId = [decoder decodeInt64ForKey: @"cardId"];
    __cardId_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__cardId_isset)
  {
    [encoder encodeInt64: __cardId forKey: @"cardId"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __cardId_isset ? 2654435761 : 0;
  if (__cardId_isset)
  {
    hash = (hash * 31) ^ [@(__cardId) hash];
  }
  hash = (hash * 31) ^ __password_isset ? 2654435761 : 0;
  if (__password_isset)
  {
    hash = (hash * 31) ^ [__password hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetMedCardReq class]]) {
    return NO;
  }
  NXTFGetMedCardReq *other = (NXTFGetMedCardReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__cardId_isset != other->__cardId_isset) ||
      (__cardId_isset && (__cardId != other->__cardId))) {
    return NO;
  }
  if ((__password_isset != other->__password_isset) ||
      (__password_isset && ((__password || other->__password) && ![__password isEqual:other->__password]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__password release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) cardId {
  return __cardId;
}

- (void) setCardId: (int64_t) cardId {
  __cardId = cardId;
  __cardId_isset = YES;
}

- (BOOL) cardIdIsSet {
  return __cardId_isset;
}

- (void) unsetCardId {
  __cardId_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCardId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMedCardReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cardId_isset) {
    [outProtocol writeFieldBeginWithName: @"cardId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __cardId];
    [outProtocol writeFieldEnd];
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetMedCardReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",cardId:"];
  [ms appendFormat: @"%qi", __cardId];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetDictDataReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId dictType: (NSString *) dictType
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __dictType = [dictType retain_stub];
  __dictType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"dictType"])
  {
    __dictType = [[decoder decodeObjectForKey: @"dictType"] retain_stub];
    __dictType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__dictType_isset)
  {
    [encoder encodeObject: __dictType forKey: @"dictType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __dictType_isset ? 2654435761 : 0;
  if (__dictType_isset)
  {
    hash = (hash * 31) ^ [__dictType hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetDictDataReq class]]) {
    return NO;
  }
  NXTFGetDictDataReq *other = (NXTFGetDictDataReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__dictType_isset != other->__dictType_isset) ||
      (__dictType_isset && ((__dictType || other->__dictType) && ![__dictType isEqual:other->__dictType]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__dictType release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (NSString *) dictType {
  return [[__dictType retain_stub] autorelease_stub];
}

- (void) setDictType: (NSString *) dictType {
  [dictType retain_stub];
  [__dictType release_stub];
  __dictType = dictType;
  __dictType_isset = YES;
}

- (BOOL) dictTypeIsSet {
  return __dictType_isset;
}

- (void) unsetDictType {
  [__dictType release_stub];
  __dictType = nil;
  __dictType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDictType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDictDataReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__dictType_isset) {
    if (__dictType != nil) {
      [outProtocol writeFieldBeginWithName: @"dictType" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __dictType];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetDictDataReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",dictType:"];
  [ms appendFormat: @"\"%@\"", __dictType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFeedbackReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header feedback: (NSString *) feedback
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __feedback = [feedback retain_stub];
  __feedback_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"feedback"])
  {
    __feedback = [[decoder decodeObjectForKey: @"feedback"] retain_stub];
    __feedback_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__feedback_isset)
  {
    [encoder encodeObject: __feedback forKey: @"feedback"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __feedback_isset ? 2654435761 : 0;
  if (__feedback_isset)
  {
    hash = (hash * 31) ^ [__feedback hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFeedbackReq class]]) {
    return NO;
  }
  NXTFFeedbackReq *other = (NXTFFeedbackReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__feedback_isset != other->__feedback_isset) ||
      (__feedback_isset && ((__feedback || other->__feedback) && ![__feedback isEqual:other->__feedback]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__feedback release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) feedback {
  return [[__feedback retain_stub] autorelease_stub];
}

- (void) setFeedback: (NSString *) feedback {
  [feedback retain_stub];
  [__feedback release_stub];
  __feedback = feedback;
  __feedback_isset = YES;
}

- (BOOL) feedbackIsSet {
  return __feedback_isset;
}

- (void) unsetFeedback {
  [__feedback release_stub];
  __feedback = nil;
  __feedback_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFeedback: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FeedbackReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__feedback_isset) {
    if (__feedback != nil) {
      [outProtocol writeFieldBeginWithName: @"feedback" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __feedback];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFeedbackReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",feedback:"];
  [ms appendFormat: @"\"%@\"", __feedback];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFChangePwdReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header phoneNo: (NSString *) phoneNo pwd: (NSString *) pwd newPwd: (NSString *) newPwd authCode: (NSString *) authCode signTypeName: (NSString *) signTypeName
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __phoneNo = [phoneNo retain_stub];
  __phoneNo_isset = YES;
  __pwd = [pwd retain_stub];
  __pwd_isset = YES;
  __newPwd = [newPwd retain_stub];
  __newPwd_isset = YES;
  __authCode = [authCode retain_stub];
  __authCode_isset = YES;
  __signTypeName = [signTypeName retain_stub];
  __signTypeName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneNo"])
  {
    __phoneNo = [[decoder decodeObjectForKey: @"phoneNo"] retain_stub];
    __phoneNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"pwd"])
  {
    __pwd = [[decoder decodeObjectForKey: @"pwd"] retain_stub];
    __pwd_isset = YES;
  }
  if ([decoder containsValueForKey: @"newPwd"])
  {
    __newPwd = [[decoder decodeObjectForKey: @"newPwd"] retain_stub];
    __newPwd_isset = YES;
  }
  if ([decoder containsValueForKey: @"authCode"])
  {
    __authCode = [[decoder decodeObjectForKey: @"authCode"] retain_stub];
    __authCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"signTypeName"])
  {
    __signTypeName = [[decoder decodeObjectForKey: @"signTypeName"] retain_stub];
    __signTypeName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__phoneNo_isset)
  {
    [encoder encodeObject: __phoneNo forKey: @"phoneNo"];
  }
  if (__pwd_isset)
  {
    [encoder encodeObject: __pwd forKey: @"pwd"];
  }
  if (__newPwd_isset)
  {
    [encoder encodeObject: __newPwd forKey: @"newPwd"];
  }
  if (__authCode_isset)
  {
    [encoder encodeObject: __authCode forKey: @"authCode"];
  }
  if (__signTypeName_isset)
  {
    [encoder encodeObject: __signTypeName forKey: @"signTypeName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __phoneNo_isset ? 2654435761 : 0;
  if (__phoneNo_isset)
  {
    hash = (hash * 31) ^ [__phoneNo hash];
  }
  hash = (hash * 31) ^ __pwd_isset ? 2654435761 : 0;
  if (__pwd_isset)
  {
    hash = (hash * 31) ^ [__pwd hash];
  }
  hash = (hash * 31) ^ __newPwd_isset ? 2654435761 : 0;
  if (__newPwd_isset)
  {
    hash = (hash * 31) ^ [__newPwd hash];
  }
  hash = (hash * 31) ^ __authCode_isset ? 2654435761 : 0;
  if (__authCode_isset)
  {
    hash = (hash * 31) ^ [__authCode hash];
  }
  hash = (hash * 31) ^ __signTypeName_isset ? 2654435761 : 0;
  if (__signTypeName_isset)
  {
    hash = (hash * 31) ^ [__signTypeName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFChangePwdReq class]]) {
    return NO;
  }
  NXTFChangePwdReq *other = (NXTFChangePwdReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__phoneNo_isset != other->__phoneNo_isset) ||
      (__phoneNo_isset && ((__phoneNo || other->__phoneNo) && ![__phoneNo isEqual:other->__phoneNo]))) {
    return NO;
  }
  if ((__pwd_isset != other->__pwd_isset) ||
      (__pwd_isset && ((__pwd || other->__pwd) && ![__pwd isEqual:other->__pwd]))) {
    return NO;
  }
  if ((__newPwd_isset != other->__newPwd_isset) ||
      (__newPwd_isset && ((__newPwd || other->__newPwd) && ![__newPwd isEqual:other->__newPwd]))) {
    return NO;
  }
  if ((__authCode_isset != other->__authCode_isset) ||
      (__authCode_isset && ((__authCode || other->__authCode) && ![__authCode isEqual:other->__authCode]))) {
    return NO;
  }
  if ((__signTypeName_isset != other->__signTypeName_isset) ||
      (__signTypeName_isset && ((__signTypeName || other->__signTypeName) && ![__signTypeName isEqual:other->__signTypeName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__phoneNo release_stub];
  [__pwd release_stub];
  [__newPwd release_stub];
  [__authCode release_stub];
  [__signTypeName release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) phoneNo {
  return [[__phoneNo retain_stub] autorelease_stub];
}

- (void) setPhoneNo: (NSString *) phoneNo {
  [phoneNo retain_stub];
  [__phoneNo release_stub];
  __phoneNo = phoneNo;
  __phoneNo_isset = YES;
}

- (BOOL) phoneNoIsSet {
  return __phoneNo_isset;
}

- (void) unsetPhoneNo {
  [__phoneNo release_stub];
  __phoneNo = nil;
  __phoneNo_isset = NO;
}

- (NSString *) pwd {
  return [[__pwd retain_stub] autorelease_stub];
}

- (void) setPwd: (NSString *) pwd {
  [pwd retain_stub];
  [__pwd release_stub];
  __pwd = pwd;
  __pwd_isset = YES;
}

- (BOOL) pwdIsSet {
  return __pwd_isset;
}

- (void) unsetPwd {
  [__pwd release_stub];
  __pwd = nil;
  __pwd_isset = NO;
}

- (NSString *) newPwd {
  return [[__newPwd retain_stub] autorelease_stub];
}

- (void) setNewPwd: (NSString *) newPwd {
  [newPwd retain_stub];
  [__newPwd release_stub];
  __newPwd = newPwd;
  __newPwd_isset = YES;
}

- (BOOL) newPwdIsSet {
  return __newPwd_isset;
}

- (void) unsetNewPwd {
  [__newPwd release_stub];
  __newPwd = nil;
  __newPwd_isset = NO;
}

- (NSString *) authCode {
  return [[__authCode retain_stub] autorelease_stub];
}

- (void) setAuthCode: (NSString *) authCode {
  [authCode retain_stub];
  [__authCode release_stub];
  __authCode = authCode;
  __authCode_isset = YES;
}

- (BOOL) authCodeIsSet {
  return __authCode_isset;
}

- (void) unsetAuthCode {
  [__authCode release_stub];
  __authCode = nil;
  __authCode_isset = NO;
}

- (NSString *) signTypeName {
  return [[__signTypeName retain_stub] autorelease_stub];
}

- (void) setSignTypeName: (NSString *) signTypeName {
  [signTypeName retain_stub];
  [__signTypeName release_stub];
  __signTypeName = signTypeName;
  __signTypeName_isset = YES;
}

- (BOOL) signTypeNameIsSet {
  return __signTypeName_isset;
}

- (void) unsetSignTypeName {
  [__signTypeName release_stub];
  __signTypeName = nil;
  __signTypeName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoneNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNewPwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSignTypeName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ChangePwdReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phoneNo_isset) {
    if (__phoneNo != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __phoneNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pwd_isset) {
    if (__pwd != nil) {
      [outProtocol writeFieldBeginWithName: @"pwd" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __pwd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__newPwd_isset) {
    if (__newPwd != nil) {
      [outProtocol writeFieldBeginWithName: @"newPwd" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __newPwd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__authCode_isset) {
    if (__authCode != nil) {
      [outProtocol writeFieldBeginWithName: @"authCode" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __authCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__signTypeName_isset) {
    if (__signTypeName != nil) {
      [outProtocol writeFieldBeginWithName: @"signTypeName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __signTypeName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFChangePwdReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",phoneNo:"];
  [ms appendFormat: @"\"%@\"", __phoneNo];
  [ms appendString: @",pwd:"];
  [ms appendFormat: @"\"%@\"", __pwd];
  [ms appendString: @",newPwd:"];
  [ms appendFormat: @"\"%@\"", __newPwd];
  [ms appendString: @",authCode:"];
  [ms appendFormat: @"\"%@\"", __authCode];
  [ms appendString: @",signTypeName:"];
  [ms appendFormat: @"\"%@\"", __signTypeName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFSignOutReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFSignOutReq class]]) {
    return NO;
  }
  NXTFSignOutReq *other = (NXTFSignOutReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignOutReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFSignOutReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRegCardNoReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId patientId: (int64_t) patientId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRegCardNoReq class]]) {
    return NO;
  }
  NXTFRegCardNoReq *other = (NXTFRegCardNoReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegCardNoReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRegCardNoReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFModifyPatientReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.crowd = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientId: (int64_t) patientId relationId: (int32_t) relationId name: (NSString *) name gender: (int32_t) gender phoneNo: (NSString *) phoneNo papersNo: (NSString *) papersNo papersTypeId: (int32_t) papersTypeId medInsureance: (NSString *) medInsureance stature: (double) stature weight: (double) weight bornDate: (NSString *) bornDate address: (NSString *) address criticalIllness: (NSString *) criticalIllness allergicHistory: (NSString *) allergicHistory familyHistory: (NSString *) familyHistory bloodType: (int32_t) bloodType papersPics: (NSString *) papersPics modeType: (int32_t) modeType isChild: (int32_t) isChild province: (NSString *) province city: (NSString *) city area: (NSString *) area addressDetail: (NSString *) addressDetail crowd: (NSMutableArray *) crowd
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __relationId = relationId;
  __relationId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __phoneNo = [phoneNo retain_stub];
  __phoneNo_isset = YES;
  __papersNo = [papersNo retain_stub];
  __papersNo_isset = YES;
  __papersTypeId = papersTypeId;
  __papersTypeId_isset = YES;
  __medInsureance = [medInsureance retain_stub];
  __medInsureance_isset = YES;
  __stature = stature;
  __stature_isset = YES;
  __weight = weight;
  __weight_isset = YES;
  __bornDate = [bornDate retain_stub];
  __bornDate_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __criticalIllness = [criticalIllness retain_stub];
  __criticalIllness_isset = YES;
  __allergicHistory = [allergicHistory retain_stub];
  __allergicHistory_isset = YES;
  __familyHistory = [familyHistory retain_stub];
  __familyHistory_isset = YES;
  __bloodType = bloodType;
  __bloodType_isset = YES;
  __papersPics = [papersPics retain_stub];
  __papersPics_isset = YES;
  __modeType = modeType;
  __modeType_isset = YES;
  __isChild = isChild;
  __isChild_isset = YES;
  __province = [province retain_stub];
  __province_isset = YES;
  __city = [city retain_stub];
  __city_isset = YES;
  __area = [area retain_stub];
  __area_isset = YES;
  __addressDetail = [addressDetail retain_stub];
  __addressDetail_isset = YES;
  __crowd = [crowd retain_stub];
  __crowd_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"relationId"])
  {
    __relationId = [decoder decodeInt32ForKey: @"relationId"];
    __relationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeInt32ForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneNo"])
  {
    __phoneNo = [[decoder decodeObjectForKey: @"phoneNo"] retain_stub];
    __phoneNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersNo"])
  {
    __papersNo = [[decoder decodeObjectForKey: @"papersNo"] retain_stub];
    __papersNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersTypeId"])
  {
    __papersTypeId = [decoder decodeInt32ForKey: @"papersTypeId"];
    __papersTypeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"medInsureance"])
  {
    __medInsureance = [[decoder decodeObjectForKey: @"medInsureance"] retain_stub];
    __medInsureance_isset = YES;
  }
  if ([decoder containsValueForKey: @"stature"])
  {
    __stature = [decoder decodeDoubleForKey: @"stature"];
    __stature_isset = YES;
  }
  if ([decoder containsValueForKey: @"weight"])
  {
    __weight = [decoder decodeDoubleForKey: @"weight"];
    __weight_isset = YES;
  }
  if ([decoder containsValueForKey: @"bornDate"])
  {
    __bornDate = [[decoder decodeObjectForKey: @"bornDate"] retain_stub];
    __bornDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"criticalIllness"])
  {
    __criticalIllness = [[decoder decodeObjectForKey: @"criticalIllness"] retain_stub];
    __criticalIllness_isset = YES;
  }
  if ([decoder containsValueForKey: @"allergicHistory"])
  {
    __allergicHistory = [[decoder decodeObjectForKey: @"allergicHistory"] retain_stub];
    __allergicHistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"familyHistory"])
  {
    __familyHistory = [[decoder decodeObjectForKey: @"familyHistory"] retain_stub];
    __familyHistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"bloodType"])
  {
    __bloodType = [decoder decodeInt32ForKey: @"bloodType"];
    __bloodType_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersPics"])
  {
    __papersPics = [[decoder decodeObjectForKey: @"papersPics"] retain_stub];
    __papersPics_isset = YES;
  }
  if ([decoder containsValueForKey: @"modeType"])
  {
    __modeType = [decoder decodeInt32ForKey: @"modeType"];
    __modeType_isset = YES;
  }
  if ([decoder containsValueForKey: @"isChild"])
  {
    __isChild = [decoder decodeInt32ForKey: @"isChild"];
    __isChild_isset = YES;
  }
  if ([decoder containsValueForKey: @"province"])
  {
    __province = [[decoder decodeObjectForKey: @"province"] retain_stub];
    __province_isset = YES;
  }
  if ([decoder containsValueForKey: @"city"])
  {
    __city = [[decoder decodeObjectForKey: @"city"] retain_stub];
    __city_isset = YES;
  }
  if ([decoder containsValueForKey: @"area"])
  {
    __area = [[decoder decodeObjectForKey: @"area"] retain_stub];
    __area_isset = YES;
  }
  if ([decoder containsValueForKey: @"addressDetail"])
  {
    __addressDetail = [[decoder decodeObjectForKey: @"addressDetail"] retain_stub];
    __addressDetail_isset = YES;
  }
  if ([decoder containsValueForKey: @"crowd"])
  {
    __crowd = [[decoder decodeObjectForKey: @"crowd"] retain_stub];
    __crowd_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__relationId_isset)
  {
    [encoder encodeInt32: __relationId forKey: @"relationId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt32: __gender forKey: @"gender"];
  }
  if (__phoneNo_isset)
  {
    [encoder encodeObject: __phoneNo forKey: @"phoneNo"];
  }
  if (__papersNo_isset)
  {
    [encoder encodeObject: __papersNo forKey: @"papersNo"];
  }
  if (__papersTypeId_isset)
  {
    [encoder encodeInt32: __papersTypeId forKey: @"papersTypeId"];
  }
  if (__medInsureance_isset)
  {
    [encoder encodeObject: __medInsureance forKey: @"medInsureance"];
  }
  if (__stature_isset)
  {
    [encoder encodeDouble: __stature forKey: @"stature"];
  }
  if (__weight_isset)
  {
    [encoder encodeDouble: __weight forKey: @"weight"];
  }
  if (__bornDate_isset)
  {
    [encoder encodeObject: __bornDate forKey: @"bornDate"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__criticalIllness_isset)
  {
    [encoder encodeObject: __criticalIllness forKey: @"criticalIllness"];
  }
  if (__allergicHistory_isset)
  {
    [encoder encodeObject: __allergicHistory forKey: @"allergicHistory"];
  }
  if (__familyHistory_isset)
  {
    [encoder encodeObject: __familyHistory forKey: @"familyHistory"];
  }
  if (__bloodType_isset)
  {
    [encoder encodeInt32: __bloodType forKey: @"bloodType"];
  }
  if (__papersPics_isset)
  {
    [encoder encodeObject: __papersPics forKey: @"papersPics"];
  }
  if (__modeType_isset)
  {
    [encoder encodeInt32: __modeType forKey: @"modeType"];
  }
  if (__isChild_isset)
  {
    [encoder encodeInt32: __isChild forKey: @"isChild"];
  }
  if (__province_isset)
  {
    [encoder encodeObject: __province forKey: @"province"];
  }
  if (__city_isset)
  {
    [encoder encodeObject: __city forKey: @"city"];
  }
  if (__area_isset)
  {
    [encoder encodeObject: __area forKey: @"area"];
  }
  if (__addressDetail_isset)
  {
    [encoder encodeObject: __addressDetail forKey: @"addressDetail"];
  }
  if (__crowd_isset)
  {
    [encoder encodeObject: __crowd forKey: @"crowd"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __relationId_isset ? 2654435761 : 0;
  if (__relationId_isset)
  {
    hash = (hash * 31) ^ [@(__relationId) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [@(__gender) hash];
  }
  hash = (hash * 31) ^ __phoneNo_isset ? 2654435761 : 0;
  if (__phoneNo_isset)
  {
    hash = (hash * 31) ^ [__phoneNo hash];
  }
  hash = (hash * 31) ^ __papersNo_isset ? 2654435761 : 0;
  if (__papersNo_isset)
  {
    hash = (hash * 31) ^ [__papersNo hash];
  }
  hash = (hash * 31) ^ __papersTypeId_isset ? 2654435761 : 0;
  if (__papersTypeId_isset)
  {
    hash = (hash * 31) ^ [@(__papersTypeId) hash];
  }
  hash = (hash * 31) ^ __medInsureance_isset ? 2654435761 : 0;
  if (__medInsureance_isset)
  {
    hash = (hash * 31) ^ [__medInsureance hash];
  }
  hash = (hash * 31) ^ __stature_isset ? 2654435761 : 0;
  if (__stature_isset)
  {
    hash = (hash * 31) ^ [@(__stature) hash];
  }
  hash = (hash * 31) ^ __weight_isset ? 2654435761 : 0;
  if (__weight_isset)
  {
    hash = (hash * 31) ^ [@(__weight) hash];
  }
  hash = (hash * 31) ^ __bornDate_isset ? 2654435761 : 0;
  if (__bornDate_isset)
  {
    hash = (hash * 31) ^ [__bornDate hash];
  }
  hash = (hash * 31) ^ __address_isset ? 2654435761 : 0;
  if (__address_isset)
  {
    hash = (hash * 31) ^ [__address hash];
  }
  hash = (hash * 31) ^ __criticalIllness_isset ? 2654435761 : 0;
  if (__criticalIllness_isset)
  {
    hash = (hash * 31) ^ [__criticalIllness hash];
  }
  hash = (hash * 31) ^ __allergicHistory_isset ? 2654435761 : 0;
  if (__allergicHistory_isset)
  {
    hash = (hash * 31) ^ [__allergicHistory hash];
  }
  hash = (hash * 31) ^ __familyHistory_isset ? 2654435761 : 0;
  if (__familyHistory_isset)
  {
    hash = (hash * 31) ^ [__familyHistory hash];
  }
  hash = (hash * 31) ^ __bloodType_isset ? 2654435761 : 0;
  if (__bloodType_isset)
  {
    hash = (hash * 31) ^ [@(__bloodType) hash];
  }
  hash = (hash * 31) ^ __papersPics_isset ? 2654435761 : 0;
  if (__papersPics_isset)
  {
    hash = (hash * 31) ^ [__papersPics hash];
  }
  hash = (hash * 31) ^ __modeType_isset ? 2654435761 : 0;
  if (__modeType_isset)
  {
    hash = (hash * 31) ^ [@(__modeType) hash];
  }
  hash = (hash * 31) ^ __isChild_isset ? 2654435761 : 0;
  if (__isChild_isset)
  {
    hash = (hash * 31) ^ [@(__isChild) hash];
  }
  hash = (hash * 31) ^ __province_isset ? 2654435761 : 0;
  if (__province_isset)
  {
    hash = (hash * 31) ^ [__province hash];
  }
  hash = (hash * 31) ^ __city_isset ? 2654435761 : 0;
  if (__city_isset)
  {
    hash = (hash * 31) ^ [__city hash];
  }
  hash = (hash * 31) ^ __area_isset ? 2654435761 : 0;
  if (__area_isset)
  {
    hash = (hash * 31) ^ [__area hash];
  }
  hash = (hash * 31) ^ __addressDetail_isset ? 2654435761 : 0;
  if (__addressDetail_isset)
  {
    hash = (hash * 31) ^ [__addressDetail hash];
  }
  hash = (hash * 31) ^ __crowd_isset ? 2654435761 : 0;
  if (__crowd_isset)
  {
    hash = (hash * 31) ^ [__crowd hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFModifyPatientReq class]]) {
    return NO;
  }
  NXTFModifyPatientReq *other = (NXTFModifyPatientReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__relationId_isset != other->__relationId_isset) ||
      (__relationId_isset && (__relationId != other->__relationId))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && (__gender != other->__gender))) {
    return NO;
  }
  if ((__phoneNo_isset != other->__phoneNo_isset) ||
      (__phoneNo_isset && ((__phoneNo || other->__phoneNo) && ![__phoneNo isEqual:other->__phoneNo]))) {
    return NO;
  }
  if ((__papersNo_isset != other->__papersNo_isset) ||
      (__papersNo_isset && ((__papersNo || other->__papersNo) && ![__papersNo isEqual:other->__papersNo]))) {
    return NO;
  }
  if ((__papersTypeId_isset != other->__papersTypeId_isset) ||
      (__papersTypeId_isset && (__papersTypeId != other->__papersTypeId))) {
    return NO;
  }
  if ((__medInsureance_isset != other->__medInsureance_isset) ||
      (__medInsureance_isset && ((__medInsureance || other->__medInsureance) && ![__medInsureance isEqual:other->__medInsureance]))) {
    return NO;
  }
  if ((__stature_isset != other->__stature_isset) ||
      (__stature_isset && (__stature != other->__stature))) {
    return NO;
  }
  if ((__weight_isset != other->__weight_isset) ||
      (__weight_isset && (__weight != other->__weight))) {
    return NO;
  }
  if ((__bornDate_isset != other->__bornDate_isset) ||
      (__bornDate_isset && ((__bornDate || other->__bornDate) && ![__bornDate isEqual:other->__bornDate]))) {
    return NO;
  }
  if ((__address_isset != other->__address_isset) ||
      (__address_isset && ((__address || other->__address) && ![__address isEqual:other->__address]))) {
    return NO;
  }
  if ((__criticalIllness_isset != other->__criticalIllness_isset) ||
      (__criticalIllness_isset && ((__criticalIllness || other->__criticalIllness) && ![__criticalIllness isEqual:other->__criticalIllness]))) {
    return NO;
  }
  if ((__allergicHistory_isset != other->__allergicHistory_isset) ||
      (__allergicHistory_isset && ((__allergicHistory || other->__allergicHistory) && ![__allergicHistory isEqual:other->__allergicHistory]))) {
    return NO;
  }
  if ((__familyHistory_isset != other->__familyHistory_isset) ||
      (__familyHistory_isset && ((__familyHistory || other->__familyHistory) && ![__familyHistory isEqual:other->__familyHistory]))) {
    return NO;
  }
  if ((__bloodType_isset != other->__bloodType_isset) ||
      (__bloodType_isset && (__bloodType != other->__bloodType))) {
    return NO;
  }
  if ((__papersPics_isset != other->__papersPics_isset) ||
      (__papersPics_isset && ((__papersPics || other->__papersPics) && ![__papersPics isEqual:other->__papersPics]))) {
    return NO;
  }
  if ((__modeType_isset != other->__modeType_isset) ||
      (__modeType_isset && (__modeType != other->__modeType))) {
    return NO;
  }
  if ((__isChild_isset != other->__isChild_isset) ||
      (__isChild_isset && (__isChild != other->__isChild))) {
    return NO;
  }
  if ((__province_isset != other->__province_isset) ||
      (__province_isset && ((__province || other->__province) && ![__province isEqual:other->__province]))) {
    return NO;
  }
  if ((__city_isset != other->__city_isset) ||
      (__city_isset && ((__city || other->__city) && ![__city isEqual:other->__city]))) {
    return NO;
  }
  if ((__area_isset != other->__area_isset) ||
      (__area_isset && ((__area || other->__area) && ![__area isEqual:other->__area]))) {
    return NO;
  }
  if ((__addressDetail_isset != other->__addressDetail_isset) ||
      (__addressDetail_isset && ((__addressDetail || other->__addressDetail) && ![__addressDetail isEqual:other->__addressDetail]))) {
    return NO;
  }
  if ((__crowd_isset != other->__crowd_isset) ||
      (__crowd_isset && ((__crowd || other->__crowd) && ![__crowd isEqual:other->__crowd]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__name release_stub];
  [__phoneNo release_stub];
  [__papersNo release_stub];
  [__medInsureance release_stub];
  [__bornDate release_stub];
  [__address release_stub];
  [__criticalIllness release_stub];
  [__allergicHistory release_stub];
  [__familyHistory release_stub];
  [__papersPics release_stub];
  [__province release_stub];
  [__city release_stub];
  [__area release_stub];
  [__addressDetail release_stub];
  [__crowd release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (int32_t) relationId {
  return __relationId;
}

- (void) setRelationId: (int32_t) relationId {
  __relationId = relationId;
  __relationId_isset = YES;
}

- (BOOL) relationIdIsSet {
  return __relationId_isset;
}

- (void) unsetRelationId {
  __relationId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (int32_t) gender {
  return __gender;
}

- (void) setGender: (int32_t) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (NSString *) phoneNo {
  return [[__phoneNo retain_stub] autorelease_stub];
}

- (void) setPhoneNo: (NSString *) phoneNo {
  [phoneNo retain_stub];
  [__phoneNo release_stub];
  __phoneNo = phoneNo;
  __phoneNo_isset = YES;
}

- (BOOL) phoneNoIsSet {
  return __phoneNo_isset;
}

- (void) unsetPhoneNo {
  [__phoneNo release_stub];
  __phoneNo = nil;
  __phoneNo_isset = NO;
}

- (NSString *) papersNo {
  return [[__papersNo retain_stub] autorelease_stub];
}

- (void) setPapersNo: (NSString *) papersNo {
  [papersNo retain_stub];
  [__papersNo release_stub];
  __papersNo = papersNo;
  __papersNo_isset = YES;
}

- (BOOL) papersNoIsSet {
  return __papersNo_isset;
}

- (void) unsetPapersNo {
  [__papersNo release_stub];
  __papersNo = nil;
  __papersNo_isset = NO;
}

- (int32_t) papersTypeId {
  return __papersTypeId;
}

- (void) setPapersTypeId: (int32_t) papersTypeId {
  __papersTypeId = papersTypeId;
  __papersTypeId_isset = YES;
}

- (BOOL) papersTypeIdIsSet {
  return __papersTypeId_isset;
}

- (void) unsetPapersTypeId {
  __papersTypeId_isset = NO;
}

- (NSString *) medInsureance {
  return [[__medInsureance retain_stub] autorelease_stub];
}

- (void) setMedInsureance: (NSString *) medInsureance {
  [medInsureance retain_stub];
  [__medInsureance release_stub];
  __medInsureance = medInsureance;
  __medInsureance_isset = YES;
}

- (BOOL) medInsureanceIsSet {
  return __medInsureance_isset;
}

- (void) unsetMedInsureance {
  [__medInsureance release_stub];
  __medInsureance = nil;
  __medInsureance_isset = NO;
}

- (double) stature {
  return __stature;
}

- (void) setStature: (double) stature {
  __stature = stature;
  __stature_isset = YES;
}

- (BOOL) statureIsSet {
  return __stature_isset;
}

- (void) unsetStature {
  __stature_isset = NO;
}

- (double) weight {
  return __weight;
}

- (void) setWeight: (double) weight {
  __weight = weight;
  __weight_isset = YES;
}

- (BOOL) weightIsSet {
  return __weight_isset;
}

- (void) unsetWeight {
  __weight_isset = NO;
}

- (NSString *) bornDate {
  return [[__bornDate retain_stub] autorelease_stub];
}

- (void) setBornDate: (NSString *) bornDate {
  [bornDate retain_stub];
  [__bornDate release_stub];
  __bornDate = bornDate;
  __bornDate_isset = YES;
}

- (BOOL) bornDateIsSet {
  return __bornDate_isset;
}

- (void) unsetBornDate {
  [__bornDate release_stub];
  __bornDate = nil;
  __bornDate_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (NSString *) criticalIllness {
  return [[__criticalIllness retain_stub] autorelease_stub];
}

- (void) setCriticalIllness: (NSString *) criticalIllness {
  [criticalIllness retain_stub];
  [__criticalIllness release_stub];
  __criticalIllness = criticalIllness;
  __criticalIllness_isset = YES;
}

- (BOOL) criticalIllnessIsSet {
  return __criticalIllness_isset;
}

- (void) unsetCriticalIllness {
  [__criticalIllness release_stub];
  __criticalIllness = nil;
  __criticalIllness_isset = NO;
}

- (NSString *) allergicHistory {
  return [[__allergicHistory retain_stub] autorelease_stub];
}

- (void) setAllergicHistory: (NSString *) allergicHistory {
  [allergicHistory retain_stub];
  [__allergicHistory release_stub];
  __allergicHistory = allergicHistory;
  __allergicHistory_isset = YES;
}

- (BOOL) allergicHistoryIsSet {
  return __allergicHistory_isset;
}

- (void) unsetAllergicHistory {
  [__allergicHistory release_stub];
  __allergicHistory = nil;
  __allergicHistory_isset = NO;
}

- (NSString *) familyHistory {
  return [[__familyHistory retain_stub] autorelease_stub];
}

- (void) setFamilyHistory: (NSString *) familyHistory {
  [familyHistory retain_stub];
  [__familyHistory release_stub];
  __familyHistory = familyHistory;
  __familyHistory_isset = YES;
}

- (BOOL) familyHistoryIsSet {
  return __familyHistory_isset;
}

- (void) unsetFamilyHistory {
  [__familyHistory release_stub];
  __familyHistory = nil;
  __familyHistory_isset = NO;
}

- (int32_t) bloodType {
  return __bloodType;
}

- (void) setBloodType: (int32_t) bloodType {
  __bloodType = bloodType;
  __bloodType_isset = YES;
}

- (BOOL) bloodTypeIsSet {
  return __bloodType_isset;
}

- (void) unsetBloodType {
  __bloodType_isset = NO;
}

- (NSString *) papersPics {
  return [[__papersPics retain_stub] autorelease_stub];
}

- (void) setPapersPics: (NSString *) papersPics {
  [papersPics retain_stub];
  [__papersPics release_stub];
  __papersPics = papersPics;
  __papersPics_isset = YES;
}

- (BOOL) papersPicsIsSet {
  return __papersPics_isset;
}

- (void) unsetPapersPics {
  [__papersPics release_stub];
  __papersPics = nil;
  __papersPics_isset = NO;
}

- (int32_t) modeType {
  return __modeType;
}

- (void) setModeType: (int32_t) modeType {
  __modeType = modeType;
  __modeType_isset = YES;
}

- (BOOL) modeTypeIsSet {
  return __modeType_isset;
}

- (void) unsetModeType {
  __modeType_isset = NO;
}

- (int32_t) isChild {
  return __isChild;
}

- (void) setIsChild: (int32_t) isChild {
  __isChild = isChild;
  __isChild_isset = YES;
}

- (BOOL) isChildIsSet {
  return __isChild_isset;
}

- (void) unsetIsChild {
  __isChild_isset = NO;
}

- (NSString *) province {
  return [[__province retain_stub] autorelease_stub];
}

- (void) setProvince: (NSString *) province {
  [province retain_stub];
  [__province release_stub];
  __province = province;
  __province_isset = YES;
}

- (BOOL) provinceIsSet {
  return __province_isset;
}

- (void) unsetProvince {
  [__province release_stub];
  __province = nil;
  __province_isset = NO;
}

- (NSString *) city {
  return [[__city retain_stub] autorelease_stub];
}

- (void) setCity: (NSString *) city {
  [city retain_stub];
  [__city release_stub];
  __city = city;
  __city_isset = YES;
}

- (BOOL) cityIsSet {
  return __city_isset;
}

- (void) unsetCity {
  [__city release_stub];
  __city = nil;
  __city_isset = NO;
}

- (NSString *) area {
  return [[__area retain_stub] autorelease_stub];
}

- (void) setArea: (NSString *) area {
  [area retain_stub];
  [__area release_stub];
  __area = area;
  __area_isset = YES;
}

- (BOOL) areaIsSet {
  return __area_isset;
}

- (void) unsetArea {
  [__area release_stub];
  __area = nil;
  __area_isset = NO;
}

- (NSString *) addressDetail {
  return [[__addressDetail retain_stub] autorelease_stub];
}

- (void) setAddressDetail: (NSString *) addressDetail {
  [addressDetail retain_stub];
  [__addressDetail release_stub];
  __addressDetail = addressDetail;
  __addressDetail_isset = YES;
}

- (BOOL) addressDetailIsSet {
  return __addressDetail_isset;
}

- (void) unsetAddressDetail {
  [__addressDetail release_stub];
  __addressDetail = nil;
  __addressDetail_isset = NO;
}

- (NSMutableArray *) crowd {
  return [[__crowd retain_stub] autorelease_stub];
}

- (void) setCrowd: (NSMutableArray *) crowd {
  [crowd retain_stub];
  [__crowd release_stub];
  __crowd = crowd;
  __crowd_isset = YES;
}

- (BOOL) crowdIsSet {
  return __crowd_isset;
}

- (void) unsetCrowd {
  [__crowd release_stub];
  __crowd = nil;
  __crowd_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRelationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoneNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPapersNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPapersTypeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMedInsureance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setStature: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setWeight: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBornDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCriticalIllness: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAllergicHistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFamilyHistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBloodType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPapersPics: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setModeType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsChild: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProvince: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setArea: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddressDetail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            NSString * _elem22 = [inProtocol readString];
            [fieldValue addObject: _elem22];
          }
          [inProtocol readListEnd];
          [self setCrowd: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ModifyPatientReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__relationId_isset) {
    [outProtocol writeFieldBeginWithName: @"relationId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __relationId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__phoneNo_isset) {
    if (__phoneNo != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneNo" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __phoneNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__papersNo_isset) {
    if (__papersNo != nil) {
      [outProtocol writeFieldBeginWithName: @"papersNo" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __papersNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__papersTypeId_isset) {
    [outProtocol writeFieldBeginWithName: @"papersTypeId" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __papersTypeId];
    [outProtocol writeFieldEnd];
  }
  if (__medInsureance_isset) {
    if (__medInsureance != nil) {
      [outProtocol writeFieldBeginWithName: @"medInsureance" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __medInsureance];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stature_isset) {
    [outProtocol writeFieldBeginWithName: @"stature" type: TType_DOUBLE fieldID: 10];
    [outProtocol writeDouble: __stature];
    [outProtocol writeFieldEnd];
  }
  if (__weight_isset) {
    [outProtocol writeFieldBeginWithName: @"weight" type: TType_DOUBLE fieldID: 11];
    [outProtocol writeDouble: __weight];
    [outProtocol writeFieldEnd];
  }
  if (__bornDate_isset) {
    if (__bornDate != nil) {
      [outProtocol writeFieldBeginWithName: @"bornDate" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __bornDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__criticalIllness_isset) {
    if (__criticalIllness != nil) {
      [outProtocol writeFieldBeginWithName: @"criticalIllness" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __criticalIllness];
      [outProtocol writeFieldEnd];
    }
  }
  if (__allergicHistory_isset) {
    if (__allergicHistory != nil) {
      [outProtocol writeFieldBeginWithName: @"allergicHistory" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __allergicHistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__familyHistory_isset) {
    if (__familyHistory != nil) {
      [outProtocol writeFieldBeginWithName: @"familyHistory" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __familyHistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bloodType_isset) {
    [outProtocol writeFieldBeginWithName: @"bloodType" type: TType_I32 fieldID: 17];
    [outProtocol writeI32: __bloodType];
    [outProtocol writeFieldEnd];
  }
  if (__papersPics_isset) {
    if (__papersPics != nil) {
      [outProtocol writeFieldBeginWithName: @"papersPics" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __papersPics];
      [outProtocol writeFieldEnd];
    }
  }
  if (__modeType_isset) {
    [outProtocol writeFieldBeginWithName: @"modeType" type: TType_I32 fieldID: 19];
    [outProtocol writeI32: __modeType];
    [outProtocol writeFieldEnd];
  }
  if (__isChild_isset) {
    [outProtocol writeFieldBeginWithName: @"isChild" type: TType_I32 fieldID: 20];
    [outProtocol writeI32: __isChild];
    [outProtocol writeFieldEnd];
  }
  if (__province_isset) {
    if (__province != nil) {
      [outProtocol writeFieldBeginWithName: @"province" type: TType_STRING fieldID: 21];
      [outProtocol writeString: __province];
      [outProtocol writeFieldEnd];
    }
  }
  if (__city_isset) {
    if (__city != nil) {
      [outProtocol writeFieldBeginWithName: @"city" type: TType_STRING fieldID: 22];
      [outProtocol writeString: __city];
      [outProtocol writeFieldEnd];
    }
  }
  if (__area_isset) {
    if (__area != nil) {
      [outProtocol writeFieldBeginWithName: @"area" type: TType_STRING fieldID: 23];
      [outProtocol writeString: __area];
      [outProtocol writeFieldEnd];
    }
  }
  if (__addressDetail_isset) {
    if (__addressDetail != nil) {
      [outProtocol writeFieldBeginWithName: @"addressDetail" type: TType_STRING fieldID: 24];
      [outProtocol writeString: __addressDetail];
      [outProtocol writeFieldEnd];
    }
  }
  if (__crowd_isset) {
    if (__crowd != nil) {
      [outProtocol writeFieldBeginWithName: @"crowd" type: TType_LIST fieldID: 25];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__crowd count]];
        int idx24;
        for (idx24 = 0; idx24 < [__crowd count]; idx24++)
        {
          [outProtocol writeString: [__crowd objectAtIndex: idx24]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFModifyPatientReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",relationId:"];
  [ms appendFormat: @"%i", __relationId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @",phoneNo:"];
  [ms appendFormat: @"\"%@\"", __phoneNo];
  [ms appendString: @",papersNo:"];
  [ms appendFormat: @"\"%@\"", __papersNo];
  [ms appendString: @",papersTypeId:"];
  [ms appendFormat: @"%i", __papersTypeId];
  [ms appendString: @",medInsureance:"];
  [ms appendFormat: @"\"%@\"", __medInsureance];
  [ms appendString: @",stature:"];
  [ms appendFormat: @"%f", __stature];
  [ms appendString: @",weight:"];
  [ms appendFormat: @"%f", __weight];
  [ms appendString: @",bornDate:"];
  [ms appendFormat: @"\"%@\"", __bornDate];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",criticalIllness:"];
  [ms appendFormat: @"\"%@\"", __criticalIllness];
  [ms appendString: @",allergicHistory:"];
  [ms appendFormat: @"\"%@\"", __allergicHistory];
  [ms appendString: @",familyHistory:"];
  [ms appendFormat: @"\"%@\"", __familyHistory];
  [ms appendString: @",bloodType:"];
  [ms appendFormat: @"%i", __bloodType];
  [ms appendString: @",papersPics:"];
  [ms appendFormat: @"\"%@\"", __papersPics];
  [ms appendString: @",modeType:"];
  [ms appendFormat: @"%i", __modeType];
  [ms appendString: @",isChild:"];
  [ms appendFormat: @"%i", __isChild];
  [ms appendString: @",province:"];
  [ms appendFormat: @"\"%@\"", __province];
  [ms appendString: @",city:"];
  [ms appendFormat: @"\"%@\"", __city];
  [ms appendString: @",area:"];
  [ms appendFormat: @"\"%@\"", __area];
  [ms appendString: @",addressDetail:"];
  [ms appendFormat: @"\"%@\"", __addressDetail];
  [ms appendString: @",crowd:"];
  [ms appendFormat: @"%@", __crowd];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFAddPatientReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header relationId: (int32_t) relationId name: (NSString *) name gender: (int32_t) gender phoneNo: (NSString *) phoneNo papersNo: (NSString *) papersNo papersTypeId: (int32_t) papersTypeId medInsureance: (NSString *) medInsureance stature: (double) stature weight: (double) weight bornDate: (NSString *) bornDate address: (NSString *) address criticalIllness: (NSString *) criticalIllness allergicHistory: (NSString *) allergicHistory familyHistory: (NSString *) familyHistory bloodType: (int32_t) bloodType isChild: (int32_t) isChild
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __relationId = relationId;
  __relationId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __phoneNo = [phoneNo retain_stub];
  __phoneNo_isset = YES;
  __papersNo = [papersNo retain_stub];
  __papersNo_isset = YES;
  __papersTypeId = papersTypeId;
  __papersTypeId_isset = YES;
  __medInsureance = [medInsureance retain_stub];
  __medInsureance_isset = YES;
  __stature = stature;
  __stature_isset = YES;
  __weight = weight;
  __weight_isset = YES;
  __bornDate = [bornDate retain_stub];
  __bornDate_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __criticalIllness = [criticalIllness retain_stub];
  __criticalIllness_isset = YES;
  __allergicHistory = [allergicHistory retain_stub];
  __allergicHistory_isset = YES;
  __familyHistory = [familyHistory retain_stub];
  __familyHistory_isset = YES;
  __bloodType = bloodType;
  __bloodType_isset = YES;
  __isChild = isChild;
  __isChild_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"relationId"])
  {
    __relationId = [decoder decodeInt32ForKey: @"relationId"];
    __relationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeInt32ForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneNo"])
  {
    __phoneNo = [[decoder decodeObjectForKey: @"phoneNo"] retain_stub];
    __phoneNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersNo"])
  {
    __papersNo = [[decoder decodeObjectForKey: @"papersNo"] retain_stub];
    __papersNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersTypeId"])
  {
    __papersTypeId = [decoder decodeInt32ForKey: @"papersTypeId"];
    __papersTypeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"medInsureance"])
  {
    __medInsureance = [[decoder decodeObjectForKey: @"medInsureance"] retain_stub];
    __medInsureance_isset = YES;
  }
  if ([decoder containsValueForKey: @"stature"])
  {
    __stature = [decoder decodeDoubleForKey: @"stature"];
    __stature_isset = YES;
  }
  if ([decoder containsValueForKey: @"weight"])
  {
    __weight = [decoder decodeDoubleForKey: @"weight"];
    __weight_isset = YES;
  }
  if ([decoder containsValueForKey: @"bornDate"])
  {
    __bornDate = [[decoder decodeObjectForKey: @"bornDate"] retain_stub];
    __bornDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"criticalIllness"])
  {
    __criticalIllness = [[decoder decodeObjectForKey: @"criticalIllness"] retain_stub];
    __criticalIllness_isset = YES;
  }
  if ([decoder containsValueForKey: @"allergicHistory"])
  {
    __allergicHistory = [[decoder decodeObjectForKey: @"allergicHistory"] retain_stub];
    __allergicHistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"familyHistory"])
  {
    __familyHistory = [[decoder decodeObjectForKey: @"familyHistory"] retain_stub];
    __familyHistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"bloodType"])
  {
    __bloodType = [decoder decodeInt32ForKey: @"bloodType"];
    __bloodType_isset = YES;
  }
  if ([decoder containsValueForKey: @"isChild"])
  {
    __isChild = [decoder decodeInt32ForKey: @"isChild"];
    __isChild_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__relationId_isset)
  {
    [encoder encodeInt32: __relationId forKey: @"relationId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt32: __gender forKey: @"gender"];
  }
  if (__phoneNo_isset)
  {
    [encoder encodeObject: __phoneNo forKey: @"phoneNo"];
  }
  if (__papersNo_isset)
  {
    [encoder encodeObject: __papersNo forKey: @"papersNo"];
  }
  if (__papersTypeId_isset)
  {
    [encoder encodeInt32: __papersTypeId forKey: @"papersTypeId"];
  }
  if (__medInsureance_isset)
  {
    [encoder encodeObject: __medInsureance forKey: @"medInsureance"];
  }
  if (__stature_isset)
  {
    [encoder encodeDouble: __stature forKey: @"stature"];
  }
  if (__weight_isset)
  {
    [encoder encodeDouble: __weight forKey: @"weight"];
  }
  if (__bornDate_isset)
  {
    [encoder encodeObject: __bornDate forKey: @"bornDate"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__criticalIllness_isset)
  {
    [encoder encodeObject: __criticalIllness forKey: @"criticalIllness"];
  }
  if (__allergicHistory_isset)
  {
    [encoder encodeObject: __allergicHistory forKey: @"allergicHistory"];
  }
  if (__familyHistory_isset)
  {
    [encoder encodeObject: __familyHistory forKey: @"familyHistory"];
  }
  if (__bloodType_isset)
  {
    [encoder encodeInt32: __bloodType forKey: @"bloodType"];
  }
  if (__isChild_isset)
  {
    [encoder encodeInt32: __isChild forKey: @"isChild"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __relationId_isset ? 2654435761 : 0;
  if (__relationId_isset)
  {
    hash = (hash * 31) ^ [@(__relationId) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [@(__gender) hash];
  }
  hash = (hash * 31) ^ __phoneNo_isset ? 2654435761 : 0;
  if (__phoneNo_isset)
  {
    hash = (hash * 31) ^ [__phoneNo hash];
  }
  hash = (hash * 31) ^ __papersNo_isset ? 2654435761 : 0;
  if (__papersNo_isset)
  {
    hash = (hash * 31) ^ [__papersNo hash];
  }
  hash = (hash * 31) ^ __papersTypeId_isset ? 2654435761 : 0;
  if (__papersTypeId_isset)
  {
    hash = (hash * 31) ^ [@(__papersTypeId) hash];
  }
  hash = (hash * 31) ^ __medInsureance_isset ? 2654435761 : 0;
  if (__medInsureance_isset)
  {
    hash = (hash * 31) ^ [__medInsureance hash];
  }
  hash = (hash * 31) ^ __stature_isset ? 2654435761 : 0;
  if (__stature_isset)
  {
    hash = (hash * 31) ^ [@(__stature) hash];
  }
  hash = (hash * 31) ^ __weight_isset ? 2654435761 : 0;
  if (__weight_isset)
  {
    hash = (hash * 31) ^ [@(__weight) hash];
  }
  hash = (hash * 31) ^ __bornDate_isset ? 2654435761 : 0;
  if (__bornDate_isset)
  {
    hash = (hash * 31) ^ [__bornDate hash];
  }
  hash = (hash * 31) ^ __address_isset ? 2654435761 : 0;
  if (__address_isset)
  {
    hash = (hash * 31) ^ [__address hash];
  }
  hash = (hash * 31) ^ __criticalIllness_isset ? 2654435761 : 0;
  if (__criticalIllness_isset)
  {
    hash = (hash * 31) ^ [__criticalIllness hash];
  }
  hash = (hash * 31) ^ __allergicHistory_isset ? 2654435761 : 0;
  if (__allergicHistory_isset)
  {
    hash = (hash * 31) ^ [__allergicHistory hash];
  }
  hash = (hash * 31) ^ __familyHistory_isset ? 2654435761 : 0;
  if (__familyHistory_isset)
  {
    hash = (hash * 31) ^ [__familyHistory hash];
  }
  hash = (hash * 31) ^ __bloodType_isset ? 2654435761 : 0;
  if (__bloodType_isset)
  {
    hash = (hash * 31) ^ [@(__bloodType) hash];
  }
  hash = (hash * 31) ^ __isChild_isset ? 2654435761 : 0;
  if (__isChild_isset)
  {
    hash = (hash * 31) ^ [@(__isChild) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFAddPatientReq class]]) {
    return NO;
  }
  NXTFAddPatientReq *other = (NXTFAddPatientReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__relationId_isset != other->__relationId_isset) ||
      (__relationId_isset && (__relationId != other->__relationId))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && (__gender != other->__gender))) {
    return NO;
  }
  if ((__phoneNo_isset != other->__phoneNo_isset) ||
      (__phoneNo_isset && ((__phoneNo || other->__phoneNo) && ![__phoneNo isEqual:other->__phoneNo]))) {
    return NO;
  }
  if ((__papersNo_isset != other->__papersNo_isset) ||
      (__papersNo_isset && ((__papersNo || other->__papersNo) && ![__papersNo isEqual:other->__papersNo]))) {
    return NO;
  }
  if ((__papersTypeId_isset != other->__papersTypeId_isset) ||
      (__papersTypeId_isset && (__papersTypeId != other->__papersTypeId))) {
    return NO;
  }
  if ((__medInsureance_isset != other->__medInsureance_isset) ||
      (__medInsureance_isset && ((__medInsureance || other->__medInsureance) && ![__medInsureance isEqual:other->__medInsureance]))) {
    return NO;
  }
  if ((__stature_isset != other->__stature_isset) ||
      (__stature_isset && (__stature != other->__stature))) {
    return NO;
  }
  if ((__weight_isset != other->__weight_isset) ||
      (__weight_isset && (__weight != other->__weight))) {
    return NO;
  }
  if ((__bornDate_isset != other->__bornDate_isset) ||
      (__bornDate_isset && ((__bornDate || other->__bornDate) && ![__bornDate isEqual:other->__bornDate]))) {
    return NO;
  }
  if ((__address_isset != other->__address_isset) ||
      (__address_isset && ((__address || other->__address) && ![__address isEqual:other->__address]))) {
    return NO;
  }
  if ((__criticalIllness_isset != other->__criticalIllness_isset) ||
      (__criticalIllness_isset && ((__criticalIllness || other->__criticalIllness) && ![__criticalIllness isEqual:other->__criticalIllness]))) {
    return NO;
  }
  if ((__allergicHistory_isset != other->__allergicHistory_isset) ||
      (__allergicHistory_isset && ((__allergicHistory || other->__allergicHistory) && ![__allergicHistory isEqual:other->__allergicHistory]))) {
    return NO;
  }
  if ((__familyHistory_isset != other->__familyHistory_isset) ||
      (__familyHistory_isset && ((__familyHistory || other->__familyHistory) && ![__familyHistory isEqual:other->__familyHistory]))) {
    return NO;
  }
  if ((__bloodType_isset != other->__bloodType_isset) ||
      (__bloodType_isset && (__bloodType != other->__bloodType))) {
    return NO;
  }
  if ((__isChild_isset != other->__isChild_isset) ||
      (__isChild_isset && (__isChild != other->__isChild))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__name release_stub];
  [__phoneNo release_stub];
  [__papersNo release_stub];
  [__medInsureance release_stub];
  [__bornDate release_stub];
  [__address release_stub];
  [__criticalIllness release_stub];
  [__allergicHistory release_stub];
  [__familyHistory release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) relationId {
  return __relationId;
}

- (void) setRelationId: (int32_t) relationId {
  __relationId = relationId;
  __relationId_isset = YES;
}

- (BOOL) relationIdIsSet {
  return __relationId_isset;
}

- (void) unsetRelationId {
  __relationId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (int32_t) gender {
  return __gender;
}

- (void) setGender: (int32_t) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (NSString *) phoneNo {
  return [[__phoneNo retain_stub] autorelease_stub];
}

- (void) setPhoneNo: (NSString *) phoneNo {
  [phoneNo retain_stub];
  [__phoneNo release_stub];
  __phoneNo = phoneNo;
  __phoneNo_isset = YES;
}

- (BOOL) phoneNoIsSet {
  return __phoneNo_isset;
}

- (void) unsetPhoneNo {
  [__phoneNo release_stub];
  __phoneNo = nil;
  __phoneNo_isset = NO;
}

- (NSString *) papersNo {
  return [[__papersNo retain_stub] autorelease_stub];
}

- (void) setPapersNo: (NSString *) papersNo {
  [papersNo retain_stub];
  [__papersNo release_stub];
  __papersNo = papersNo;
  __papersNo_isset = YES;
}

- (BOOL) papersNoIsSet {
  return __papersNo_isset;
}

- (void) unsetPapersNo {
  [__papersNo release_stub];
  __papersNo = nil;
  __papersNo_isset = NO;
}

- (int32_t) papersTypeId {
  return __papersTypeId;
}

- (void) setPapersTypeId: (int32_t) papersTypeId {
  __papersTypeId = papersTypeId;
  __papersTypeId_isset = YES;
}

- (BOOL) papersTypeIdIsSet {
  return __papersTypeId_isset;
}

- (void) unsetPapersTypeId {
  __papersTypeId_isset = NO;
}

- (NSString *) medInsureance {
  return [[__medInsureance retain_stub] autorelease_stub];
}

- (void) setMedInsureance: (NSString *) medInsureance {
  [medInsureance retain_stub];
  [__medInsureance release_stub];
  __medInsureance = medInsureance;
  __medInsureance_isset = YES;
}

- (BOOL) medInsureanceIsSet {
  return __medInsureance_isset;
}

- (void) unsetMedInsureance {
  [__medInsureance release_stub];
  __medInsureance = nil;
  __medInsureance_isset = NO;
}

- (double) stature {
  return __stature;
}

- (void) setStature: (double) stature {
  __stature = stature;
  __stature_isset = YES;
}

- (BOOL) statureIsSet {
  return __stature_isset;
}

- (void) unsetStature {
  __stature_isset = NO;
}

- (double) weight {
  return __weight;
}

- (void) setWeight: (double) weight {
  __weight = weight;
  __weight_isset = YES;
}

- (BOOL) weightIsSet {
  return __weight_isset;
}

- (void) unsetWeight {
  __weight_isset = NO;
}

- (NSString *) bornDate {
  return [[__bornDate retain_stub] autorelease_stub];
}

- (void) setBornDate: (NSString *) bornDate {
  [bornDate retain_stub];
  [__bornDate release_stub];
  __bornDate = bornDate;
  __bornDate_isset = YES;
}

- (BOOL) bornDateIsSet {
  return __bornDate_isset;
}

- (void) unsetBornDate {
  [__bornDate release_stub];
  __bornDate = nil;
  __bornDate_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (NSString *) criticalIllness {
  return [[__criticalIllness retain_stub] autorelease_stub];
}

- (void) setCriticalIllness: (NSString *) criticalIllness {
  [criticalIllness retain_stub];
  [__criticalIllness release_stub];
  __criticalIllness = criticalIllness;
  __criticalIllness_isset = YES;
}

- (BOOL) criticalIllnessIsSet {
  return __criticalIllness_isset;
}

- (void) unsetCriticalIllness {
  [__criticalIllness release_stub];
  __criticalIllness = nil;
  __criticalIllness_isset = NO;
}

- (NSString *) allergicHistory {
  return [[__allergicHistory retain_stub] autorelease_stub];
}

- (void) setAllergicHistory: (NSString *) allergicHistory {
  [allergicHistory retain_stub];
  [__allergicHistory release_stub];
  __allergicHistory = allergicHistory;
  __allergicHistory_isset = YES;
}

- (BOOL) allergicHistoryIsSet {
  return __allergicHistory_isset;
}

- (void) unsetAllergicHistory {
  [__allergicHistory release_stub];
  __allergicHistory = nil;
  __allergicHistory_isset = NO;
}

- (NSString *) familyHistory {
  return [[__familyHistory retain_stub] autorelease_stub];
}

- (void) setFamilyHistory: (NSString *) familyHistory {
  [familyHistory retain_stub];
  [__familyHistory release_stub];
  __familyHistory = familyHistory;
  __familyHistory_isset = YES;
}

- (BOOL) familyHistoryIsSet {
  return __familyHistory_isset;
}

- (void) unsetFamilyHistory {
  [__familyHistory release_stub];
  __familyHistory = nil;
  __familyHistory_isset = NO;
}

- (int32_t) bloodType {
  return __bloodType;
}

- (void) setBloodType: (int32_t) bloodType {
  __bloodType = bloodType;
  __bloodType_isset = YES;
}

- (BOOL) bloodTypeIsSet {
  return __bloodType_isset;
}

- (void) unsetBloodType {
  __bloodType_isset = NO;
}

- (int32_t) isChild {
  return __isChild;
}

- (void) setIsChild: (int32_t) isChild {
  __isChild = isChild;
  __isChild_isset = YES;
}

- (BOOL) isChildIsSet {
  return __isChild_isset;
}

- (void) unsetIsChild {
  __isChild_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRelationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoneNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPapersNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPapersTypeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMedInsureance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setStature: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setWeight: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBornDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCriticalIllness: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAllergicHistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFamilyHistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBloodType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsChild: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddPatientReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__relationId_isset) {
    [outProtocol writeFieldBeginWithName: @"relationId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __relationId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__phoneNo_isset) {
    if (__phoneNo != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneNo" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __phoneNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__papersNo_isset) {
    if (__papersNo != nil) {
      [outProtocol writeFieldBeginWithName: @"papersNo" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __papersNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__papersTypeId_isset) {
    [outProtocol writeFieldBeginWithName: @"papersTypeId" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __papersTypeId];
    [outProtocol writeFieldEnd];
  }
  if (__medInsureance_isset) {
    if (__medInsureance != nil) {
      [outProtocol writeFieldBeginWithName: @"medInsureance" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __medInsureance];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stature_isset) {
    [outProtocol writeFieldBeginWithName: @"stature" type: TType_DOUBLE fieldID: 9];
    [outProtocol writeDouble: __stature];
    [outProtocol writeFieldEnd];
  }
  if (__weight_isset) {
    [outProtocol writeFieldBeginWithName: @"weight" type: TType_DOUBLE fieldID: 10];
    [outProtocol writeDouble: __weight];
    [outProtocol writeFieldEnd];
  }
  if (__bornDate_isset) {
    if (__bornDate != nil) {
      [outProtocol writeFieldBeginWithName: @"bornDate" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __bornDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__criticalIllness_isset) {
    if (__criticalIllness != nil) {
      [outProtocol writeFieldBeginWithName: @"criticalIllness" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __criticalIllness];
      [outProtocol writeFieldEnd];
    }
  }
  if (__allergicHistory_isset) {
    if (__allergicHistory != nil) {
      [outProtocol writeFieldBeginWithName: @"allergicHistory" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __allergicHistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__familyHistory_isset) {
    if (__familyHistory != nil) {
      [outProtocol writeFieldBeginWithName: @"familyHistory" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __familyHistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bloodType_isset) {
    [outProtocol writeFieldBeginWithName: @"bloodType" type: TType_I32 fieldID: 16];
    [outProtocol writeI32: __bloodType];
    [outProtocol writeFieldEnd];
  }
  if (__isChild_isset) {
    [outProtocol writeFieldBeginWithName: @"isChild" type: TType_I32 fieldID: 17];
    [outProtocol writeI32: __isChild];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFAddPatientReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",relationId:"];
  [ms appendFormat: @"%i", __relationId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @",phoneNo:"];
  [ms appendFormat: @"\"%@\"", __phoneNo];
  [ms appendString: @",papersNo:"];
  [ms appendFormat: @"\"%@\"", __papersNo];
  [ms appendString: @",papersTypeId:"];
  [ms appendFormat: @"%i", __papersTypeId];
  [ms appendString: @",medInsureance:"];
  [ms appendFormat: @"\"%@\"", __medInsureance];
  [ms appendString: @",stature:"];
  [ms appendFormat: @"%f", __stature];
  [ms appendString: @",weight:"];
  [ms appendFormat: @"%f", __weight];
  [ms appendString: @",bornDate:"];
  [ms appendFormat: @"\"%@\"", __bornDate];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",criticalIllness:"];
  [ms appendFormat: @"\"%@\"", __criticalIllness];
  [ms appendString: @",allergicHistory:"];
  [ms appendFormat: @"\"%@\"", __allergicHistory];
  [ms appendString: @",familyHistory:"];
  [ms appendFormat: @"\"%@\"", __familyHistory];
  [ms appendString: @",bloodType:"];
  [ms appendFormat: @"%i", __bloodType];
  [ms appendString: @",isChild:"];
  [ms appendFormat: @"%i", __isChild];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetExpertsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetExpertsReq class]]) {
    return NO;
  }
  NXTFGetExpertsReq *other = (NXTFGetExpertsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetExpertsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetExpertsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRegTargetsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header comDeptId: (int32_t) comDeptId cityName: (NSString *) cityName deptId: (int64_t) deptId hospitalId: (int32_t) hospitalId hisDeptId: (NSString *) hisDeptId scheduleDate: (NSString *) scheduleDate scheduleType: (int32_t) scheduleType
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __comDeptId = comDeptId;
  __comDeptId_isset = YES;
  __cityName = [cityName retain_stub];
  __cityName_isset = YES;
  __deptId = deptId;
  __deptId_isset = YES;
  __hospitalId = hospitalId;
  __hospitalId_isset = YES;
  __hisDeptId = [hisDeptId retain_stub];
  __hisDeptId_isset = YES;
  __scheduleDate = [scheduleDate retain_stub];
  __scheduleDate_isset = YES;
  __scheduleType = scheduleType;
  __scheduleType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"comDeptId"])
  {
    __comDeptId = [decoder decodeInt32ForKey: @"comDeptId"];
    __comDeptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"cityName"])
  {
    __cityName = [[decoder decodeObjectForKey: @"cityName"] retain_stub];
    __cityName_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptId"])
  {
    __deptId = [decoder decodeInt64ForKey: @"deptId"];
    __deptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospitalId"])
  {
    __hospitalId = [decoder decodeInt32ForKey: @"hospitalId"];
    __hospitalId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hisDeptId"])
  {
    __hisDeptId = [[decoder decodeObjectForKey: @"hisDeptId"] retain_stub];
    __hisDeptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"scheduleDate"])
  {
    __scheduleDate = [[decoder decodeObjectForKey: @"scheduleDate"] retain_stub];
    __scheduleDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"scheduleType"])
  {
    __scheduleType = [decoder decodeInt32ForKey: @"scheduleType"];
    __scheduleType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__comDeptId_isset)
  {
    [encoder encodeInt32: __comDeptId forKey: @"comDeptId"];
  }
  if (__cityName_isset)
  {
    [encoder encodeObject: __cityName forKey: @"cityName"];
  }
  if (__deptId_isset)
  {
    [encoder encodeInt64: __deptId forKey: @"deptId"];
  }
  if (__hospitalId_isset)
  {
    [encoder encodeInt32: __hospitalId forKey: @"hospitalId"];
  }
  if (__hisDeptId_isset)
  {
    [encoder encodeObject: __hisDeptId forKey: @"hisDeptId"];
  }
  if (__scheduleDate_isset)
  {
    [encoder encodeObject: __scheduleDate forKey: @"scheduleDate"];
  }
  if (__scheduleType_isset)
  {
    [encoder encodeInt32: __scheduleType forKey: @"scheduleType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __comDeptId_isset ? 2654435761 : 0;
  if (__comDeptId_isset)
  {
    hash = (hash * 31) ^ [@(__comDeptId) hash];
  }
  hash = (hash * 31) ^ __cityName_isset ? 2654435761 : 0;
  if (__cityName_isset)
  {
    hash = (hash * 31) ^ [__cityName hash];
  }
  hash = (hash * 31) ^ __deptId_isset ? 2654435761 : 0;
  if (__deptId_isset)
  {
    hash = (hash * 31) ^ [@(__deptId) hash];
  }
  hash = (hash * 31) ^ __hospitalId_isset ? 2654435761 : 0;
  if (__hospitalId_isset)
  {
    hash = (hash * 31) ^ [@(__hospitalId) hash];
  }
  hash = (hash * 31) ^ __hisDeptId_isset ? 2654435761 : 0;
  if (__hisDeptId_isset)
  {
    hash = (hash * 31) ^ [__hisDeptId hash];
  }
  hash = (hash * 31) ^ __scheduleDate_isset ? 2654435761 : 0;
  if (__scheduleDate_isset)
  {
    hash = (hash * 31) ^ [__scheduleDate hash];
  }
  hash = (hash * 31) ^ __scheduleType_isset ? 2654435761 : 0;
  if (__scheduleType_isset)
  {
    hash = (hash * 31) ^ [@(__scheduleType) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRegTargetsReq class]]) {
    return NO;
  }
  NXTFRegTargetsReq *other = (NXTFRegTargetsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__comDeptId_isset != other->__comDeptId_isset) ||
      (__comDeptId_isset && (__comDeptId != other->__comDeptId))) {
    return NO;
  }
  if ((__cityName_isset != other->__cityName_isset) ||
      (__cityName_isset && ((__cityName || other->__cityName) && ![__cityName isEqual:other->__cityName]))) {
    return NO;
  }
  if ((__deptId_isset != other->__deptId_isset) ||
      (__deptId_isset && (__deptId != other->__deptId))) {
    return NO;
  }
  if ((__hospitalId_isset != other->__hospitalId_isset) ||
      (__hospitalId_isset && (__hospitalId != other->__hospitalId))) {
    return NO;
  }
  if ((__hisDeptId_isset != other->__hisDeptId_isset) ||
      (__hisDeptId_isset && ((__hisDeptId || other->__hisDeptId) && ![__hisDeptId isEqual:other->__hisDeptId]))) {
    return NO;
  }
  if ((__scheduleDate_isset != other->__scheduleDate_isset) ||
      (__scheduleDate_isset && ((__scheduleDate || other->__scheduleDate) && ![__scheduleDate isEqual:other->__scheduleDate]))) {
    return NO;
  }
  if ((__scheduleType_isset != other->__scheduleType_isset) ||
      (__scheduleType_isset && (__scheduleType != other->__scheduleType))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__cityName release_stub];
  [__hisDeptId release_stub];
  [__scheduleDate release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) comDeptId {
  return __comDeptId;
}

- (void) setComDeptId: (int32_t) comDeptId {
  __comDeptId = comDeptId;
  __comDeptId_isset = YES;
}

- (BOOL) comDeptIdIsSet {
  return __comDeptId_isset;
}

- (void) unsetComDeptId {
  __comDeptId_isset = NO;
}

- (NSString *) cityName {
  return [[__cityName retain_stub] autorelease_stub];
}

- (void) setCityName: (NSString *) cityName {
  [cityName retain_stub];
  [__cityName release_stub];
  __cityName = cityName;
  __cityName_isset = YES;
}

- (BOOL) cityNameIsSet {
  return __cityName_isset;
}

- (void) unsetCityName {
  [__cityName release_stub];
  __cityName = nil;
  __cityName_isset = NO;
}

- (int64_t) deptId {
  return __deptId;
}

- (void) setDeptId: (int64_t) deptId {
  __deptId = deptId;
  __deptId_isset = YES;
}

- (BOOL) deptIdIsSet {
  return __deptId_isset;
}

- (void) unsetDeptId {
  __deptId_isset = NO;
}

- (int32_t) hospitalId {
  return __hospitalId;
}

- (void) setHospitalId: (int32_t) hospitalId {
  __hospitalId = hospitalId;
  __hospitalId_isset = YES;
}

- (BOOL) hospitalIdIsSet {
  return __hospitalId_isset;
}

- (void) unsetHospitalId {
  __hospitalId_isset = NO;
}

- (NSString *) hisDeptId {
  return [[__hisDeptId retain_stub] autorelease_stub];
}

- (void) setHisDeptId: (NSString *) hisDeptId {
  [hisDeptId retain_stub];
  [__hisDeptId release_stub];
  __hisDeptId = hisDeptId;
  __hisDeptId_isset = YES;
}

- (BOOL) hisDeptIdIsSet {
  return __hisDeptId_isset;
}

- (void) unsetHisDeptId {
  [__hisDeptId release_stub];
  __hisDeptId = nil;
  __hisDeptId_isset = NO;
}

- (NSString *) scheduleDate {
  return [[__scheduleDate retain_stub] autorelease_stub];
}

- (void) setScheduleDate: (NSString *) scheduleDate {
  [scheduleDate retain_stub];
  [__scheduleDate release_stub];
  __scheduleDate = scheduleDate;
  __scheduleDate_isset = YES;
}

- (BOOL) scheduleDateIsSet {
  return __scheduleDate_isset;
}

- (void) unsetScheduleDate {
  [__scheduleDate release_stub];
  __scheduleDate = nil;
  __scheduleDate_isset = NO;
}

- (int32_t) scheduleType {
  return __scheduleType;
}

- (void) setScheduleType: (int32_t) scheduleType {
  __scheduleType = scheduleType;
  __scheduleType_isset = YES;
}

- (BOOL) scheduleTypeIsSet {
  return __scheduleType_isset;
}

- (void) unsetScheduleType {
  __scheduleType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setComDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCityName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospitalId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHisDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setScheduleDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setScheduleType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegTargetsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__comDeptId_isset) {
    [outProtocol writeFieldBeginWithName: @"comDeptId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __comDeptId];
    [outProtocol writeFieldEnd];
  }
  if (__cityName_isset) {
    if (__cityName != nil) {
      [outProtocol writeFieldBeginWithName: @"cityName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __cityName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptId_isset) {
    [outProtocol writeFieldBeginWithName: @"deptId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __deptId];
    [outProtocol writeFieldEnd];
  }
  if (__hospitalId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospitalId" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __hospitalId];
    [outProtocol writeFieldEnd];
  }
  if (__hisDeptId_isset) {
    if (__hisDeptId != nil) {
      [outProtocol writeFieldBeginWithName: @"hisDeptId" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __hisDeptId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__scheduleDate_isset) {
    if (__scheduleDate != nil) {
      [outProtocol writeFieldBeginWithName: @"scheduleDate" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __scheduleDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__scheduleType_isset) {
    [outProtocol writeFieldBeginWithName: @"scheduleType" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __scheduleType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRegTargetsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",comDeptId:"];
  [ms appendFormat: @"%i", __comDeptId];
  [ms appendString: @",cityName:"];
  [ms appendFormat: @"\"%@\"", __cityName];
  [ms appendString: @",deptId:"];
  [ms appendFormat: @"%qi", __deptId];
  [ms appendString: @",hospitalId:"];
  [ms appendFormat: @"%i", __hospitalId];
  [ms appendString: @",hisDeptId:"];
  [ms appendFormat: @"\"%@\"", __hisDeptId];
  [ms appendString: @",scheduleDate:"];
  [ms appendFormat: @"\"%@\"", __scheduleDate];
  [ms appendString: @",scheduleType:"];
  [ms appendFormat: @"%i", __scheduleType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFClientPaidReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header orderId: (int64_t) orderId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFClientPaidReq class]]) {
    return NO;
  }
  NXTFClientPaidReq *other = (NXTFClientPaidReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ClientPaidReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFClientPaidReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetDrReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.mode = 0;

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header drId: (int64_t) drId hospId: (int32_t) hospId hisDrId: (NSString *) hisDrId dcId: (NSString *) dcId mode: (int32_t) mode
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __drId = drId;
  __drId_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __hisDrId = [hisDrId retain_stub];
  __hisDrId_isset = YES;
  __dcId = [dcId retain_stub];
  __dcId_isset = YES;
  __mode = mode;
  __mode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"drId"])
  {
    __drId = [decoder decodeInt64ForKey: @"drId"];
    __drId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hisDrId"])
  {
    __hisDrId = [[decoder decodeObjectForKey: @"hisDrId"] retain_stub];
    __hisDrId_isset = YES;
  }
  if ([decoder containsValueForKey: @"dcId"])
  {
    __dcId = [[decoder decodeObjectForKey: @"dcId"] retain_stub];
    __dcId_isset = YES;
  }
  if ([decoder containsValueForKey: @"mode"])
  {
    __mode = [decoder decodeInt32ForKey: @"mode"];
    __mode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__drId_isset)
  {
    [encoder encodeInt64: __drId forKey: @"drId"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__hisDrId_isset)
  {
    [encoder encodeObject: __hisDrId forKey: @"hisDrId"];
  }
  if (__dcId_isset)
  {
    [encoder encodeObject: __dcId forKey: @"dcId"];
  }
  if (__mode_isset)
  {
    [encoder encodeInt32: __mode forKey: @"mode"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __drId_isset ? 2654435761 : 0;
  if (__drId_isset)
  {
    hash = (hash * 31) ^ [@(__drId) hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __hisDrId_isset ? 2654435761 : 0;
  if (__hisDrId_isset)
  {
    hash = (hash * 31) ^ [__hisDrId hash];
  }
  hash = (hash * 31) ^ __dcId_isset ? 2654435761 : 0;
  if (__dcId_isset)
  {
    hash = (hash * 31) ^ [__dcId hash];
  }
  hash = (hash * 31) ^ __mode_isset ? 2654435761 : 0;
  if (__mode_isset)
  {
    hash = (hash * 31) ^ [@(__mode) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetDrReq class]]) {
    return NO;
  }
  NXTFGetDrReq *other = (NXTFGetDrReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__drId_isset != other->__drId_isset) ||
      (__drId_isset && (__drId != other->__drId))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__hisDrId_isset != other->__hisDrId_isset) ||
      (__hisDrId_isset && ((__hisDrId || other->__hisDrId) && ![__hisDrId isEqual:other->__hisDrId]))) {
    return NO;
  }
  if ((__dcId_isset != other->__dcId_isset) ||
      (__dcId_isset && ((__dcId || other->__dcId) && ![__dcId isEqual:other->__dcId]))) {
    return NO;
  }
  if ((__mode_isset != other->__mode_isset) ||
      (__mode_isset && (__mode != other->__mode))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__hisDrId release_stub];
  [__dcId release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) drId {
  return __drId;
}

- (void) setDrId: (int64_t) drId {
  __drId = drId;
  __drId_isset = YES;
}

- (BOOL) drIdIsSet {
  return __drId_isset;
}

- (void) unsetDrId {
  __drId_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (NSString *) hisDrId {
  return [[__hisDrId retain_stub] autorelease_stub];
}

- (void) setHisDrId: (NSString *) hisDrId {
  [hisDrId retain_stub];
  [__hisDrId release_stub];
  __hisDrId = hisDrId;
  __hisDrId_isset = YES;
}

- (BOOL) hisDrIdIsSet {
  return __hisDrId_isset;
}

- (void) unsetHisDrId {
  [__hisDrId release_stub];
  __hisDrId = nil;
  __hisDrId_isset = NO;
}

- (NSString *) dcId {
  return [[__dcId retain_stub] autorelease_stub];
}

- (void) setDcId: (NSString *) dcId {
  [dcId retain_stub];
  [__dcId release_stub];
  __dcId = dcId;
  __dcId_isset = YES;
}

- (BOOL) dcIdIsSet {
  return __dcId_isset;
}

- (void) unsetDcId {
  [__dcId release_stub];
  __dcId = nil;
  __dcId_isset = NO;
}

- (int32_t) mode {
  return __mode;
}

- (void) setMode: (int32_t) mode {
  __mode = mode;
  __mode_isset = YES;
}

- (BOOL) modeIsSet {
  return __mode_isset;
}

- (void) unsetMode {
  __mode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDrId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHisDrId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDcId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDrReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drId_isset) {
    [outProtocol writeFieldBeginWithName: @"drId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __drId];
    [outProtocol writeFieldEnd];
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__hisDrId_isset) {
    if (__hisDrId != nil) {
      [outProtocol writeFieldBeginWithName: @"hisDrId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __hisDrId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dcId_isset) {
    if (__dcId != nil) {
      [outProtocol writeFieldBeginWithName: @"dcId" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __dcId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mode_isset) {
    [outProtocol writeFieldBeginWithName: @"mode" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __mode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetDrReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",drId:"];
  [ms appendFormat: @"%qi", __drId];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",hisDrId:"];
  [ms appendFormat: @"\"%@\"", __hisDrId];
  [ms appendString: @",dcId:"];
  [ms appendFormat: @"\"%@\"", __dcId];
  [ms appendString: @",mode:"];
  [ms appendFormat: @"%i", __mode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRegPointsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.page = [[[NXTFPage alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header page: (NXTFPage *) page targetId: (int64_t) targetId targetType: (int32_t) targetType regLevelId: (NSString *) regLevelId deptId: (int64_t) deptId startDate: (NSString *) startDate endDate: (NSString *) endDate scheduleType: (int32_t) scheduleType
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __targetId = targetId;
  __targetId_isset = YES;
  __targetType = targetType;
  __targetType_isset = YES;
  __regLevelId = [regLevelId retain_stub];
  __regLevelId_isset = YES;
  __deptId = deptId;
  __deptId_isset = YES;
  __startDate = [startDate retain_stub];
  __startDate_isset = YES;
  __endDate = [endDate retain_stub];
  __endDate_isset = YES;
  __scheduleType = scheduleType;
  __scheduleType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"targetId"])
  {
    __targetId = [decoder decodeInt64ForKey: @"targetId"];
    __targetId_isset = YES;
  }
  if ([decoder containsValueForKey: @"targetType"])
  {
    __targetType = [decoder decodeInt32ForKey: @"targetType"];
    __targetType_isset = YES;
  }
  if ([decoder containsValueForKey: @"regLevelId"])
  {
    __regLevelId = [[decoder decodeObjectForKey: @"regLevelId"] retain_stub];
    __regLevelId_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptId"])
  {
    __deptId = [decoder decodeInt64ForKey: @"deptId"];
    __deptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"startDate"])
  {
    __startDate = [[decoder decodeObjectForKey: @"startDate"] retain_stub];
    __startDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"endDate"])
  {
    __endDate = [[decoder decodeObjectForKey: @"endDate"] retain_stub];
    __endDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"scheduleType"])
  {
    __scheduleType = [decoder decodeInt32ForKey: @"scheduleType"];
    __scheduleType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__targetId_isset)
  {
    [encoder encodeInt64: __targetId forKey: @"targetId"];
  }
  if (__targetType_isset)
  {
    [encoder encodeInt32: __targetType forKey: @"targetType"];
  }
  if (__regLevelId_isset)
  {
    [encoder encodeObject: __regLevelId forKey: @"regLevelId"];
  }
  if (__deptId_isset)
  {
    [encoder encodeInt64: __deptId forKey: @"deptId"];
  }
  if (__startDate_isset)
  {
    [encoder encodeObject: __startDate forKey: @"startDate"];
  }
  if (__endDate_isset)
  {
    [encoder encodeObject: __endDate forKey: @"endDate"];
  }
  if (__scheduleType_isset)
  {
    [encoder encodeInt32: __scheduleType forKey: @"scheduleType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __targetId_isset ? 2654435761 : 0;
  if (__targetId_isset)
  {
    hash = (hash * 31) ^ [@(__targetId) hash];
  }
  hash = (hash * 31) ^ __targetType_isset ? 2654435761 : 0;
  if (__targetType_isset)
  {
    hash = (hash * 31) ^ [@(__targetType) hash];
  }
  hash = (hash * 31) ^ __regLevelId_isset ? 2654435761 : 0;
  if (__regLevelId_isset)
  {
    hash = (hash * 31) ^ [__regLevelId hash];
  }
  hash = (hash * 31) ^ __deptId_isset ? 2654435761 : 0;
  if (__deptId_isset)
  {
    hash = (hash * 31) ^ [@(__deptId) hash];
  }
  hash = (hash * 31) ^ __startDate_isset ? 2654435761 : 0;
  if (__startDate_isset)
  {
    hash = (hash * 31) ^ [__startDate hash];
  }
  hash = (hash * 31) ^ __endDate_isset ? 2654435761 : 0;
  if (__endDate_isset)
  {
    hash = (hash * 31) ^ [__endDate hash];
  }
  hash = (hash * 31) ^ __scheduleType_isset ? 2654435761 : 0;
  if (__scheduleType_isset)
  {
    hash = (hash * 31) ^ [@(__scheduleType) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRegPointsReq class]]) {
    return NO;
  }
  NXTFRegPointsReq *other = (NXTFRegPointsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__targetId_isset != other->__targetId_isset) ||
      (__targetId_isset && (__targetId != other->__targetId))) {
    return NO;
  }
  if ((__targetType_isset != other->__targetType_isset) ||
      (__targetType_isset && (__targetType != other->__targetType))) {
    return NO;
  }
  if ((__regLevelId_isset != other->__regLevelId_isset) ||
      (__regLevelId_isset && ((__regLevelId || other->__regLevelId) && ![__regLevelId isEqual:other->__regLevelId]))) {
    return NO;
  }
  if ((__deptId_isset != other->__deptId_isset) ||
      (__deptId_isset && (__deptId != other->__deptId))) {
    return NO;
  }
  if ((__startDate_isset != other->__startDate_isset) ||
      (__startDate_isset && ((__startDate || other->__startDate) && ![__startDate isEqual:other->__startDate]))) {
    return NO;
  }
  if ((__endDate_isset != other->__endDate_isset) ||
      (__endDate_isset && ((__endDate || other->__endDate) && ![__endDate isEqual:other->__endDate]))) {
    return NO;
  }
  if ((__scheduleType_isset != other->__scheduleType_isset) ||
      (__scheduleType_isset && (__scheduleType != other->__scheduleType))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__regLevelId release_stub];
  [__startDate release_stub];
  [__endDate release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (int64_t) targetId {
  return __targetId;
}

- (void) setTargetId: (int64_t) targetId {
  __targetId = targetId;
  __targetId_isset = YES;
}

- (BOOL) targetIdIsSet {
  return __targetId_isset;
}

- (void) unsetTargetId {
  __targetId_isset = NO;
}

- (int32_t) targetType {
  return __targetType;
}

- (void) setTargetType: (int32_t) targetType {
  __targetType = targetType;
  __targetType_isset = YES;
}

- (BOOL) targetTypeIsSet {
  return __targetType_isset;
}

- (void) unsetTargetType {
  __targetType_isset = NO;
}

- (NSString *) regLevelId {
  return [[__regLevelId retain_stub] autorelease_stub];
}

- (void) setRegLevelId: (NSString *) regLevelId {
  [regLevelId retain_stub];
  [__regLevelId release_stub];
  __regLevelId = regLevelId;
  __regLevelId_isset = YES;
}

- (BOOL) regLevelIdIsSet {
  return __regLevelId_isset;
}

- (void) unsetRegLevelId {
  [__regLevelId release_stub];
  __regLevelId = nil;
  __regLevelId_isset = NO;
}

- (int64_t) deptId {
  return __deptId;
}

- (void) setDeptId: (int64_t) deptId {
  __deptId = deptId;
  __deptId_isset = YES;
}

- (BOOL) deptIdIsSet {
  return __deptId_isset;
}

- (void) unsetDeptId {
  __deptId_isset = NO;
}

- (NSString *) startDate {
  return [[__startDate retain_stub] autorelease_stub];
}

- (void) setStartDate: (NSString *) startDate {
  [startDate retain_stub];
  [__startDate release_stub];
  __startDate = startDate;
  __startDate_isset = YES;
}

- (BOOL) startDateIsSet {
  return __startDate_isset;
}

- (void) unsetStartDate {
  [__startDate release_stub];
  __startDate = nil;
  __startDate_isset = NO;
}

- (NSString *) endDate {
  return [[__endDate retain_stub] autorelease_stub];
}

- (void) setEndDate: (NSString *) endDate {
  [endDate retain_stub];
  [__endDate release_stub];
  __endDate = endDate;
  __endDate_isset = YES;
}

- (BOOL) endDateIsSet {
  return __endDate_isset;
}

- (void) unsetEndDate {
  [__endDate release_stub];
  __endDate = nil;
  __endDate_isset = NO;
}

- (int32_t) scheduleType {
  return __scheduleType;
}

- (void) setScheduleType: (int32_t) scheduleType {
  __scheduleType = scheduleType;
  __scheduleType_isset = YES;
}

- (BOOL) scheduleTypeIsSet {
  return __scheduleType_isset;
}

- (void) unsetScheduleType {
  __scheduleType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTargetId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTargetType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegLevelId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStartDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEndDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setScheduleType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegPointsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__targetId_isset) {
    [outProtocol writeFieldBeginWithName: @"targetId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __targetId];
    [outProtocol writeFieldEnd];
  }
  if (__targetType_isset) {
    [outProtocol writeFieldBeginWithName: @"targetType" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __targetType];
    [outProtocol writeFieldEnd];
  }
  if (__regLevelId_isset) {
    if (__regLevelId != nil) {
      [outProtocol writeFieldBeginWithName: @"regLevelId" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __regLevelId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptId_isset) {
    [outProtocol writeFieldBeginWithName: @"deptId" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __deptId];
    [outProtocol writeFieldEnd];
  }
  if (__startDate_isset) {
    if (__startDate != nil) {
      [outProtocol writeFieldBeginWithName: @"startDate" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __startDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__endDate_isset) {
    if (__endDate != nil) {
      [outProtocol writeFieldBeginWithName: @"endDate" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __endDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__scheduleType_isset) {
    [outProtocol writeFieldBeginWithName: @"scheduleType" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __scheduleType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRegPointsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",targetId:"];
  [ms appendFormat: @"%qi", __targetId];
  [ms appendString: @",targetType:"];
  [ms appendFormat: @"%i", __targetType];
  [ms appendString: @",regLevelId:"];
  [ms appendFormat: @"\"%@\"", __regLevelId];
  [ms appendString: @",deptId:"];
  [ms appendFormat: @"%qi", __deptId];
  [ms appendString: @",startDate:"];
  [ms appendFormat: @"\"%@\"", __startDate];
  [ms appendString: @",endDate:"];
  [ms appendFormat: @"\"%@\"", __endDate];
  [ms appendString: @",scheduleType:"];
  [ms appendFormat: @"%i", __scheduleType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetLatestVerReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetLatestVerReq class]]) {
    return NO;
  }
  NXTFGetLatestVerReq *other = (NXTFGetLatestVerReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetLatestVerReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetLatestVerReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFSignUpReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header phoneNo: (NSString *) phoneNo name: (NSString *) name authCode: (NSString *) authCode pwd: (NSString *) pwd gender: (int32_t) gender papersNo: (NSString *) papersNo papersTypeId: (int32_t) papersTypeId medInsureance: (NSString *) medInsureance stature: (double) stature weight: (double) weight bornDate: (NSString *) bornDate address: (NSString *) address criticalIllness: (NSString *) criticalIllness allergicHistory: (NSString *) allergicHistory familyHistory: (NSString *) familyHistory bloodType: (int32_t) bloodType signTypeName: (NSString *) signTypeName
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __phoneNo = [phoneNo retain_stub];
  __phoneNo_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __authCode = [authCode retain_stub];
  __authCode_isset = YES;
  __pwd = [pwd retain_stub];
  __pwd_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __papersNo = [papersNo retain_stub];
  __papersNo_isset = YES;
  __papersTypeId = papersTypeId;
  __papersTypeId_isset = YES;
  __medInsureance = [medInsureance retain_stub];
  __medInsureance_isset = YES;
  __stature = stature;
  __stature_isset = YES;
  __weight = weight;
  __weight_isset = YES;
  __bornDate = [bornDate retain_stub];
  __bornDate_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __criticalIllness = [criticalIllness retain_stub];
  __criticalIllness_isset = YES;
  __allergicHistory = [allergicHistory retain_stub];
  __allergicHistory_isset = YES;
  __familyHistory = [familyHistory retain_stub];
  __familyHistory_isset = YES;
  __bloodType = bloodType;
  __bloodType_isset = YES;
  __signTypeName = [signTypeName retain_stub];
  __signTypeName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneNo"])
  {
    __phoneNo = [[decoder decodeObjectForKey: @"phoneNo"] retain_stub];
    __phoneNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"authCode"])
  {
    __authCode = [[decoder decodeObjectForKey: @"authCode"] retain_stub];
    __authCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"pwd"])
  {
    __pwd = [[decoder decodeObjectForKey: @"pwd"] retain_stub];
    __pwd_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeInt32ForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersNo"])
  {
    __papersNo = [[decoder decodeObjectForKey: @"papersNo"] retain_stub];
    __papersNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersTypeId"])
  {
    __papersTypeId = [decoder decodeInt32ForKey: @"papersTypeId"];
    __papersTypeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"medInsureance"])
  {
    __medInsureance = [[decoder decodeObjectForKey: @"medInsureance"] retain_stub];
    __medInsureance_isset = YES;
  }
  if ([decoder containsValueForKey: @"stature"])
  {
    __stature = [decoder decodeDoubleForKey: @"stature"];
    __stature_isset = YES;
  }
  if ([decoder containsValueForKey: @"weight"])
  {
    __weight = [decoder decodeDoubleForKey: @"weight"];
    __weight_isset = YES;
  }
  if ([decoder containsValueForKey: @"bornDate"])
  {
    __bornDate = [[decoder decodeObjectForKey: @"bornDate"] retain_stub];
    __bornDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"criticalIllness"])
  {
    __criticalIllness = [[decoder decodeObjectForKey: @"criticalIllness"] retain_stub];
    __criticalIllness_isset = YES;
  }
  if ([decoder containsValueForKey: @"allergicHistory"])
  {
    __allergicHistory = [[decoder decodeObjectForKey: @"allergicHistory"] retain_stub];
    __allergicHistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"familyHistory"])
  {
    __familyHistory = [[decoder decodeObjectForKey: @"familyHistory"] retain_stub];
    __familyHistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"bloodType"])
  {
    __bloodType = [decoder decodeInt32ForKey: @"bloodType"];
    __bloodType_isset = YES;
  }
  if ([decoder containsValueForKey: @"signTypeName"])
  {
    __signTypeName = [[decoder decodeObjectForKey: @"signTypeName"] retain_stub];
    __signTypeName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__phoneNo_isset)
  {
    [encoder encodeObject: __phoneNo forKey: @"phoneNo"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__authCode_isset)
  {
    [encoder encodeObject: __authCode forKey: @"authCode"];
  }
  if (__pwd_isset)
  {
    [encoder encodeObject: __pwd forKey: @"pwd"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt32: __gender forKey: @"gender"];
  }
  if (__papersNo_isset)
  {
    [encoder encodeObject: __papersNo forKey: @"papersNo"];
  }
  if (__papersTypeId_isset)
  {
    [encoder encodeInt32: __papersTypeId forKey: @"papersTypeId"];
  }
  if (__medInsureance_isset)
  {
    [encoder encodeObject: __medInsureance forKey: @"medInsureance"];
  }
  if (__stature_isset)
  {
    [encoder encodeDouble: __stature forKey: @"stature"];
  }
  if (__weight_isset)
  {
    [encoder encodeDouble: __weight forKey: @"weight"];
  }
  if (__bornDate_isset)
  {
    [encoder encodeObject: __bornDate forKey: @"bornDate"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__criticalIllness_isset)
  {
    [encoder encodeObject: __criticalIllness forKey: @"criticalIllness"];
  }
  if (__allergicHistory_isset)
  {
    [encoder encodeObject: __allergicHistory forKey: @"allergicHistory"];
  }
  if (__familyHistory_isset)
  {
    [encoder encodeObject: __familyHistory forKey: @"familyHistory"];
  }
  if (__bloodType_isset)
  {
    [encoder encodeInt32: __bloodType forKey: @"bloodType"];
  }
  if (__signTypeName_isset)
  {
    [encoder encodeObject: __signTypeName forKey: @"signTypeName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __phoneNo_isset ? 2654435761 : 0;
  if (__phoneNo_isset)
  {
    hash = (hash * 31) ^ [__phoneNo hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __authCode_isset ? 2654435761 : 0;
  if (__authCode_isset)
  {
    hash = (hash * 31) ^ [__authCode hash];
  }
  hash = (hash * 31) ^ __pwd_isset ? 2654435761 : 0;
  if (__pwd_isset)
  {
    hash = (hash * 31) ^ [__pwd hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [@(__gender) hash];
  }
  hash = (hash * 31) ^ __papersNo_isset ? 2654435761 : 0;
  if (__papersNo_isset)
  {
    hash = (hash * 31) ^ [__papersNo hash];
  }
  hash = (hash * 31) ^ __papersTypeId_isset ? 2654435761 : 0;
  if (__papersTypeId_isset)
  {
    hash = (hash * 31) ^ [@(__papersTypeId) hash];
  }
  hash = (hash * 31) ^ __medInsureance_isset ? 2654435761 : 0;
  if (__medInsureance_isset)
  {
    hash = (hash * 31) ^ [__medInsureance hash];
  }
  hash = (hash * 31) ^ __stature_isset ? 2654435761 : 0;
  if (__stature_isset)
  {
    hash = (hash * 31) ^ [@(__stature) hash];
  }
  hash = (hash * 31) ^ __weight_isset ? 2654435761 : 0;
  if (__weight_isset)
  {
    hash = (hash * 31) ^ [@(__weight) hash];
  }
  hash = (hash * 31) ^ __bornDate_isset ? 2654435761 : 0;
  if (__bornDate_isset)
  {
    hash = (hash * 31) ^ [__bornDate hash];
  }
  hash = (hash * 31) ^ __address_isset ? 2654435761 : 0;
  if (__address_isset)
  {
    hash = (hash * 31) ^ [__address hash];
  }
  hash = (hash * 31) ^ __criticalIllness_isset ? 2654435761 : 0;
  if (__criticalIllness_isset)
  {
    hash = (hash * 31) ^ [__criticalIllness hash];
  }
  hash = (hash * 31) ^ __allergicHistory_isset ? 2654435761 : 0;
  if (__allergicHistory_isset)
  {
    hash = (hash * 31) ^ [__allergicHistory hash];
  }
  hash = (hash * 31) ^ __familyHistory_isset ? 2654435761 : 0;
  if (__familyHistory_isset)
  {
    hash = (hash * 31) ^ [__familyHistory hash];
  }
  hash = (hash * 31) ^ __bloodType_isset ? 2654435761 : 0;
  if (__bloodType_isset)
  {
    hash = (hash * 31) ^ [@(__bloodType) hash];
  }
  hash = (hash * 31) ^ __signTypeName_isset ? 2654435761 : 0;
  if (__signTypeName_isset)
  {
    hash = (hash * 31) ^ [__signTypeName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFSignUpReq class]]) {
    return NO;
  }
  NXTFSignUpReq *other = (NXTFSignUpReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__phoneNo_isset != other->__phoneNo_isset) ||
      (__phoneNo_isset && ((__phoneNo || other->__phoneNo) && ![__phoneNo isEqual:other->__phoneNo]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__authCode_isset != other->__authCode_isset) ||
      (__authCode_isset && ((__authCode || other->__authCode) && ![__authCode isEqual:other->__authCode]))) {
    return NO;
  }
  if ((__pwd_isset != other->__pwd_isset) ||
      (__pwd_isset && ((__pwd || other->__pwd) && ![__pwd isEqual:other->__pwd]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && (__gender != other->__gender))) {
    return NO;
  }
  if ((__papersNo_isset != other->__papersNo_isset) ||
      (__papersNo_isset && ((__papersNo || other->__papersNo) && ![__papersNo isEqual:other->__papersNo]))) {
    return NO;
  }
  if ((__papersTypeId_isset != other->__papersTypeId_isset) ||
      (__papersTypeId_isset && (__papersTypeId != other->__papersTypeId))) {
    return NO;
  }
  if ((__medInsureance_isset != other->__medInsureance_isset) ||
      (__medInsureance_isset && ((__medInsureance || other->__medInsureance) && ![__medInsureance isEqual:other->__medInsureance]))) {
    return NO;
  }
  if ((__stature_isset != other->__stature_isset) ||
      (__stature_isset && (__stature != other->__stature))) {
    return NO;
  }
  if ((__weight_isset != other->__weight_isset) ||
      (__weight_isset && (__weight != other->__weight))) {
    return NO;
  }
  if ((__bornDate_isset != other->__bornDate_isset) ||
      (__bornDate_isset && ((__bornDate || other->__bornDate) && ![__bornDate isEqual:other->__bornDate]))) {
    return NO;
  }
  if ((__address_isset != other->__address_isset) ||
      (__address_isset && ((__address || other->__address) && ![__address isEqual:other->__address]))) {
    return NO;
  }
  if ((__criticalIllness_isset != other->__criticalIllness_isset) ||
      (__criticalIllness_isset && ((__criticalIllness || other->__criticalIllness) && ![__criticalIllness isEqual:other->__criticalIllness]))) {
    return NO;
  }
  if ((__allergicHistory_isset != other->__allergicHistory_isset) ||
      (__allergicHistory_isset && ((__allergicHistory || other->__allergicHistory) && ![__allergicHistory isEqual:other->__allergicHistory]))) {
    return NO;
  }
  if ((__familyHistory_isset != other->__familyHistory_isset) ||
      (__familyHistory_isset && ((__familyHistory || other->__familyHistory) && ![__familyHistory isEqual:other->__familyHistory]))) {
    return NO;
  }
  if ((__bloodType_isset != other->__bloodType_isset) ||
      (__bloodType_isset && (__bloodType != other->__bloodType))) {
    return NO;
  }
  if ((__signTypeName_isset != other->__signTypeName_isset) ||
      (__signTypeName_isset && ((__signTypeName || other->__signTypeName) && ![__signTypeName isEqual:other->__signTypeName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__phoneNo release_stub];
  [__name release_stub];
  [__authCode release_stub];
  [__pwd release_stub];
  [__papersNo release_stub];
  [__medInsureance release_stub];
  [__bornDate release_stub];
  [__address release_stub];
  [__criticalIllness release_stub];
  [__allergicHistory release_stub];
  [__familyHistory release_stub];
  [__signTypeName release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) phoneNo {
  return [[__phoneNo retain_stub] autorelease_stub];
}

- (void) setPhoneNo: (NSString *) phoneNo {
  [phoneNo retain_stub];
  [__phoneNo release_stub];
  __phoneNo = phoneNo;
  __phoneNo_isset = YES;
}

- (BOOL) phoneNoIsSet {
  return __phoneNo_isset;
}

- (void) unsetPhoneNo {
  [__phoneNo release_stub];
  __phoneNo = nil;
  __phoneNo_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) authCode {
  return [[__authCode retain_stub] autorelease_stub];
}

- (void) setAuthCode: (NSString *) authCode {
  [authCode retain_stub];
  [__authCode release_stub];
  __authCode = authCode;
  __authCode_isset = YES;
}

- (BOOL) authCodeIsSet {
  return __authCode_isset;
}

- (void) unsetAuthCode {
  [__authCode release_stub];
  __authCode = nil;
  __authCode_isset = NO;
}

- (NSString *) pwd {
  return [[__pwd retain_stub] autorelease_stub];
}

- (void) setPwd: (NSString *) pwd {
  [pwd retain_stub];
  [__pwd release_stub];
  __pwd = pwd;
  __pwd_isset = YES;
}

- (BOOL) pwdIsSet {
  return __pwd_isset;
}

- (void) unsetPwd {
  [__pwd release_stub];
  __pwd = nil;
  __pwd_isset = NO;
}

- (int32_t) gender {
  return __gender;
}

- (void) setGender: (int32_t) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (NSString *) papersNo {
  return [[__papersNo retain_stub] autorelease_stub];
}

- (void) setPapersNo: (NSString *) papersNo {
  [papersNo retain_stub];
  [__papersNo release_stub];
  __papersNo = papersNo;
  __papersNo_isset = YES;
}

- (BOOL) papersNoIsSet {
  return __papersNo_isset;
}

- (void) unsetPapersNo {
  [__papersNo release_stub];
  __papersNo = nil;
  __papersNo_isset = NO;
}

- (int32_t) papersTypeId {
  return __papersTypeId;
}

- (void) setPapersTypeId: (int32_t) papersTypeId {
  __papersTypeId = papersTypeId;
  __papersTypeId_isset = YES;
}

- (BOOL) papersTypeIdIsSet {
  return __papersTypeId_isset;
}

- (void) unsetPapersTypeId {
  __papersTypeId_isset = NO;
}

- (NSString *) medInsureance {
  return [[__medInsureance retain_stub] autorelease_stub];
}

- (void) setMedInsureance: (NSString *) medInsureance {
  [medInsureance retain_stub];
  [__medInsureance release_stub];
  __medInsureance = medInsureance;
  __medInsureance_isset = YES;
}

- (BOOL) medInsureanceIsSet {
  return __medInsureance_isset;
}

- (void) unsetMedInsureance {
  [__medInsureance release_stub];
  __medInsureance = nil;
  __medInsureance_isset = NO;
}

- (double) stature {
  return __stature;
}

- (void) setStature: (double) stature {
  __stature = stature;
  __stature_isset = YES;
}

- (BOOL) statureIsSet {
  return __stature_isset;
}

- (void) unsetStature {
  __stature_isset = NO;
}

- (double) weight {
  return __weight;
}

- (void) setWeight: (double) weight {
  __weight = weight;
  __weight_isset = YES;
}

- (BOOL) weightIsSet {
  return __weight_isset;
}

- (void) unsetWeight {
  __weight_isset = NO;
}

- (NSString *) bornDate {
  return [[__bornDate retain_stub] autorelease_stub];
}

- (void) setBornDate: (NSString *) bornDate {
  [bornDate retain_stub];
  [__bornDate release_stub];
  __bornDate = bornDate;
  __bornDate_isset = YES;
}

- (BOOL) bornDateIsSet {
  return __bornDate_isset;
}

- (void) unsetBornDate {
  [__bornDate release_stub];
  __bornDate = nil;
  __bornDate_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (NSString *) criticalIllness {
  return [[__criticalIllness retain_stub] autorelease_stub];
}

- (void) setCriticalIllness: (NSString *) criticalIllness {
  [criticalIllness retain_stub];
  [__criticalIllness release_stub];
  __criticalIllness = criticalIllness;
  __criticalIllness_isset = YES;
}

- (BOOL) criticalIllnessIsSet {
  return __criticalIllness_isset;
}

- (void) unsetCriticalIllness {
  [__criticalIllness release_stub];
  __criticalIllness = nil;
  __criticalIllness_isset = NO;
}

- (NSString *) allergicHistory {
  return [[__allergicHistory retain_stub] autorelease_stub];
}

- (void) setAllergicHistory: (NSString *) allergicHistory {
  [allergicHistory retain_stub];
  [__allergicHistory release_stub];
  __allergicHistory = allergicHistory;
  __allergicHistory_isset = YES;
}

- (BOOL) allergicHistoryIsSet {
  return __allergicHistory_isset;
}

- (void) unsetAllergicHistory {
  [__allergicHistory release_stub];
  __allergicHistory = nil;
  __allergicHistory_isset = NO;
}

- (NSString *) familyHistory {
  return [[__familyHistory retain_stub] autorelease_stub];
}

- (void) setFamilyHistory: (NSString *) familyHistory {
  [familyHistory retain_stub];
  [__familyHistory release_stub];
  __familyHistory = familyHistory;
  __familyHistory_isset = YES;
}

- (BOOL) familyHistoryIsSet {
  return __familyHistory_isset;
}

- (void) unsetFamilyHistory {
  [__familyHistory release_stub];
  __familyHistory = nil;
  __familyHistory_isset = NO;
}

- (int32_t) bloodType {
  return __bloodType;
}

- (void) setBloodType: (int32_t) bloodType {
  __bloodType = bloodType;
  __bloodType_isset = YES;
}

- (BOOL) bloodTypeIsSet {
  return __bloodType_isset;
}

- (void) unsetBloodType {
  __bloodType_isset = NO;
}

- (NSString *) signTypeName {
  return [[__signTypeName retain_stub] autorelease_stub];
}

- (void) setSignTypeName: (NSString *) signTypeName {
  [signTypeName retain_stub];
  [__signTypeName release_stub];
  __signTypeName = signTypeName;
  __signTypeName_isset = YES;
}

- (BOOL) signTypeNameIsSet {
  return __signTypeName_isset;
}

- (void) unsetSignTypeName {
  [__signTypeName release_stub];
  __signTypeName = nil;
  __signTypeName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoneNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPapersNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPapersTypeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMedInsureance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setStature: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setWeight: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBornDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCriticalIllness: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAllergicHistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFamilyHistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBloodType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSignTypeName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignUpReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phoneNo_isset) {
    if (__phoneNo != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __phoneNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__authCode_isset) {
    if (__authCode != nil) {
      [outProtocol writeFieldBeginWithName: @"authCode" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __authCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pwd_isset) {
    if (__pwd != nil) {
      [outProtocol writeFieldBeginWithName: @"pwd" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __pwd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__papersNo_isset) {
    if (__papersNo != nil) {
      [outProtocol writeFieldBeginWithName: @"papersNo" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __papersNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__papersTypeId_isset) {
    [outProtocol writeFieldBeginWithName: @"papersTypeId" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __papersTypeId];
    [outProtocol writeFieldEnd];
  }
  if (__medInsureance_isset) {
    if (__medInsureance != nil) {
      [outProtocol writeFieldBeginWithName: @"medInsureance" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __medInsureance];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stature_isset) {
    [outProtocol writeFieldBeginWithName: @"stature" type: TType_DOUBLE fieldID: 10];
    [outProtocol writeDouble: __stature];
    [outProtocol writeFieldEnd];
  }
  if (__weight_isset) {
    [outProtocol writeFieldBeginWithName: @"weight" type: TType_DOUBLE fieldID: 11];
    [outProtocol writeDouble: __weight];
    [outProtocol writeFieldEnd];
  }
  if (__bornDate_isset) {
    if (__bornDate != nil) {
      [outProtocol writeFieldBeginWithName: @"bornDate" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __bornDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__criticalIllness_isset) {
    if (__criticalIllness != nil) {
      [outProtocol writeFieldBeginWithName: @"criticalIllness" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __criticalIllness];
      [outProtocol writeFieldEnd];
    }
  }
  if (__allergicHistory_isset) {
    if (__allergicHistory != nil) {
      [outProtocol writeFieldBeginWithName: @"allergicHistory" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __allergicHistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__familyHistory_isset) {
    if (__familyHistory != nil) {
      [outProtocol writeFieldBeginWithName: @"familyHistory" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __familyHistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bloodType_isset) {
    [outProtocol writeFieldBeginWithName: @"bloodType" type: TType_I32 fieldID: 17];
    [outProtocol writeI32: __bloodType];
    [outProtocol writeFieldEnd];
  }
  if (__signTypeName_isset) {
    if (__signTypeName != nil) {
      [outProtocol writeFieldBeginWithName: @"signTypeName" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __signTypeName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFSignUpReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",phoneNo:"];
  [ms appendFormat: @"\"%@\"", __phoneNo];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",authCode:"];
  [ms appendFormat: @"\"%@\"", __authCode];
  [ms appendString: @",pwd:"];
  [ms appendFormat: @"\"%@\"", __pwd];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @",papersNo:"];
  [ms appendFormat: @"\"%@\"", __papersNo];
  [ms appendString: @",papersTypeId:"];
  [ms appendFormat: @"%i", __papersTypeId];
  [ms appendString: @",medInsureance:"];
  [ms appendFormat: @"\"%@\"", __medInsureance];
  [ms appendString: @",stature:"];
  [ms appendFormat: @"%f", __stature];
  [ms appendString: @",weight:"];
  [ms appendFormat: @"%f", __weight];
  [ms appendString: @",bornDate:"];
  [ms appendFormat: @"\"%@\"", __bornDate];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",criticalIllness:"];
  [ms appendFormat: @"\"%@\"", __criticalIllness];
  [ms appendString: @",allergicHistory:"];
  [ms appendFormat: @"\"%@\"", __allergicHistory];
  [ms appendString: @",familyHistory:"];
  [ms appendFormat: @"\"%@\"", __familyHistory];
  [ms appendString: @",bloodType:"];
  [ms appendFormat: @"%i", __bloodType];
  [ms appendString: @",signTypeName:"];
  [ms appendFormat: @"\"%@\"", __signTypeName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetCitiesReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetCitiesReq class]]) {
    return NO;
  }
  NXTFGetCitiesReq *other = (NXTFGetCitiesReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetCitiesReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetCitiesReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFBindInpatientNoReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientId: (int64_t) patientId hospId: (int32_t) hospId inpatientNo: (NSString *) inpatientNo
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __inpatientNo = [inpatientNo retain_stub];
  __inpatientNo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"inpatientNo"])
  {
    __inpatientNo = [[decoder decodeObjectForKey: @"inpatientNo"] retain_stub];
    __inpatientNo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__inpatientNo_isset)
  {
    [encoder encodeObject: __inpatientNo forKey: @"inpatientNo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __inpatientNo_isset ? 2654435761 : 0;
  if (__inpatientNo_isset)
  {
    hash = (hash * 31) ^ [__inpatientNo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFBindInpatientNoReq class]]) {
    return NO;
  }
  NXTFBindInpatientNoReq *other = (NXTFBindInpatientNoReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__inpatientNo_isset != other->__inpatientNo_isset) ||
      (__inpatientNo_isset && ((__inpatientNo || other->__inpatientNo) && ![__inpatientNo isEqual:other->__inpatientNo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__inpatientNo release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (NSString *) inpatientNo {
  return [[__inpatientNo retain_stub] autorelease_stub];
}

- (void) setInpatientNo: (NSString *) inpatientNo {
  [inpatientNo retain_stub];
  [__inpatientNo release_stub];
  __inpatientNo = inpatientNo;
  __inpatientNo_isset = YES;
}

- (BOOL) inpatientNoIsSet {
  return __inpatientNo_isset;
}

- (void) unsetInpatientNo {
  [__inpatientNo release_stub];
  __inpatientNo = nil;
  __inpatientNo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInpatientNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BindInpatientNoReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__inpatientNo_isset) {
    if (__inpatientNo != nil) {
      [outProtocol writeFieldBeginWithName: @"inpatientNo" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __inpatientNo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFBindInpatientNoReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",inpatientNo:"];
  [ms appendFormat: @"\"%@\"", __inpatientNo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetInpatientInfosReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientId: (int64_t) patientId hospId: (int32_t) hospId inpatientNo: (NSString *) inpatientNo
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __inpatientNo = [inpatientNo retain_stub];
  __inpatientNo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"inpatientNo"])
  {
    __inpatientNo = [[decoder decodeObjectForKey: @"inpatientNo"] retain_stub];
    __inpatientNo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__inpatientNo_isset)
  {
    [encoder encodeObject: __inpatientNo forKey: @"inpatientNo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __inpatientNo_isset ? 2654435761 : 0;
  if (__inpatientNo_isset)
  {
    hash = (hash * 31) ^ [__inpatientNo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetInpatientInfosReq class]]) {
    return NO;
  }
  NXTFGetInpatientInfosReq *other = (NXTFGetInpatientInfosReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__inpatientNo_isset != other->__inpatientNo_isset) ||
      (__inpatientNo_isset && ((__inpatientNo || other->__inpatientNo) && ![__inpatientNo isEqual:other->__inpatientNo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__inpatientNo release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (NSString *) inpatientNo {
  return [[__inpatientNo retain_stub] autorelease_stub];
}

- (void) setInpatientNo: (NSString *) inpatientNo {
  [inpatientNo retain_stub];
  [__inpatientNo release_stub];
  __inpatientNo = inpatientNo;
  __inpatientNo_isset = YES;
}

- (BOOL) inpatientNoIsSet {
  return __inpatientNo_isset;
}

- (void) unsetInpatientNo {
  [__inpatientNo release_stub];
  __inpatientNo = nil;
  __inpatientNo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInpatientNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetInpatientInfosReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__inpatientNo_isset) {
    if (__inpatientNo != nil) {
      [outProtocol writeFieldBeginWithName: @"inpatientNo" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __inpatientNo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetInpatientInfosReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",inpatientNo:"];
  [ms appendFormat: @"\"%@\"", __inpatientNo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetInpatientInfoReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientId: (int64_t) patientId hospId: (int32_t) hospId recordId: (int64_t) recordId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __recordId = recordId;
  __recordId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"recordId"])
  {
    __recordId = [decoder decodeInt64ForKey: @"recordId"];
    __recordId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__recordId_isset)
  {
    [encoder encodeInt64: __recordId forKey: @"recordId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __recordId_isset ? 2654435761 : 0;
  if (__recordId_isset)
  {
    hash = (hash * 31) ^ [@(__recordId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetInpatientInfoReq class]]) {
    return NO;
  }
  NXTFGetInpatientInfoReq *other = (NXTFGetInpatientInfoReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__recordId_isset != other->__recordId_isset) ||
      (__recordId_isset && (__recordId != other->__recordId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int64_t) recordId {
  return __recordId;
}

- (void) setRecordId: (int64_t) recordId {
  __recordId = recordId;
  __recordId_isset = YES;
}

- (BOOL) recordIdIsSet {
  return __recordId_isset;
}

- (void) unsetRecordId {
  __recordId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRecordId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetInpatientInfoReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__recordId_isset) {
    [outProtocol writeFieldBeginWithName: @"recordId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __recordId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetInpatientInfoReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",recordId:"];
  [ms appendFormat: @"%qi", __recordId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetInpatientFeeListReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientId: (int64_t) patientId hospId: (int32_t) hospId recordId: (int64_t) recordId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __recordId = recordId;
  __recordId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"recordId"])
  {
    __recordId = [decoder decodeInt64ForKey: @"recordId"];
    __recordId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__recordId_isset)
  {
    [encoder encodeInt64: __recordId forKey: @"recordId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __recordId_isset ? 2654435761 : 0;
  if (__recordId_isset)
  {
    hash = (hash * 31) ^ [@(__recordId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetInpatientFeeListReq class]]) {
    return NO;
  }
  NXTFGetInpatientFeeListReq *other = (NXTFGetInpatientFeeListReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__recordId_isset != other->__recordId_isset) ||
      (__recordId_isset && (__recordId != other->__recordId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int64_t) recordId {
  return __recordId;
}

- (void) setRecordId: (int64_t) recordId {
  __recordId = recordId;
  __recordId_isset = YES;
}

- (BOOL) recordIdIsSet {
  return __recordId_isset;
}

- (void) unsetRecordId {
  __recordId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRecordId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetInpatientFeeListReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__recordId_isset) {
    [outProtocol writeFieldBeginWithName: @"recordId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __recordId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetInpatientFeeListReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",recordId:"];
  [ms appendFormat: @"%qi", __recordId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetInpatientFeeDetailReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientId: (int64_t) patientId hospId: (int32_t) hospId recordId: (int64_t) recordId feeDate: (NSString *) feeDate
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __recordId = recordId;
  __recordId_isset = YES;
  __feeDate = [feeDate retain_stub];
  __feeDate_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"recordId"])
  {
    __recordId = [decoder decodeInt64ForKey: @"recordId"];
    __recordId_isset = YES;
  }
  if ([decoder containsValueForKey: @"feeDate"])
  {
    __feeDate = [[decoder decodeObjectForKey: @"feeDate"] retain_stub];
    __feeDate_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__recordId_isset)
  {
    [encoder encodeInt64: __recordId forKey: @"recordId"];
  }
  if (__feeDate_isset)
  {
    [encoder encodeObject: __feeDate forKey: @"feeDate"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __recordId_isset ? 2654435761 : 0;
  if (__recordId_isset)
  {
    hash = (hash * 31) ^ [@(__recordId) hash];
  }
  hash = (hash * 31) ^ __feeDate_isset ? 2654435761 : 0;
  if (__feeDate_isset)
  {
    hash = (hash * 31) ^ [__feeDate hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetInpatientFeeDetailReq class]]) {
    return NO;
  }
  NXTFGetInpatientFeeDetailReq *other = (NXTFGetInpatientFeeDetailReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__recordId_isset != other->__recordId_isset) ||
      (__recordId_isset && (__recordId != other->__recordId))) {
    return NO;
  }
  if ((__feeDate_isset != other->__feeDate_isset) ||
      (__feeDate_isset && ((__feeDate || other->__feeDate) && ![__feeDate isEqual:other->__feeDate]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__feeDate release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int64_t) recordId {
  return __recordId;
}

- (void) setRecordId: (int64_t) recordId {
  __recordId = recordId;
  __recordId_isset = YES;
}

- (BOOL) recordIdIsSet {
  return __recordId_isset;
}

- (void) unsetRecordId {
  __recordId_isset = NO;
}

- (NSString *) feeDate {
  return [[__feeDate retain_stub] autorelease_stub];
}

- (void) setFeeDate: (NSString *) feeDate {
  [feeDate retain_stub];
  [__feeDate release_stub];
  __feeDate = feeDate;
  __feeDate_isset = YES;
}

- (BOOL) feeDateIsSet {
  return __feeDate_isset;
}

- (void) unsetFeeDate {
  [__feeDate release_stub];
  __feeDate = nil;
  __feeDate_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRecordId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFeeDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetInpatientFeeDetailReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__recordId_isset) {
    [outProtocol writeFieldBeginWithName: @"recordId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __recordId];
    [outProtocol writeFieldEnd];
  }
  if (__feeDate_isset) {
    if (__feeDate != nil) {
      [outProtocol writeFieldBeginWithName: @"feeDate" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __feeDate];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetInpatientFeeDetailReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",recordId:"];
  [ms appendFormat: @"%qi", __recordId];
  [ms appendString: @",feeDate:"];
  [ms appendFormat: @"\"%@\"", __feeDate];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFInpatientPrePaymentReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientId: (int64_t) patientId totalFee: (double) totalFee recordId: (int64_t) recordId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __totalFee = totalFee;
  __totalFee_isset = YES;
  __recordId = recordId;
  __recordId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalFee"])
  {
    __totalFee = [decoder decodeDoubleForKey: @"totalFee"];
    __totalFee_isset = YES;
  }
  if ([decoder containsValueForKey: @"recordId"])
  {
    __recordId = [decoder decodeInt64ForKey: @"recordId"];
    __recordId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__totalFee_isset)
  {
    [encoder encodeDouble: __totalFee forKey: @"totalFee"];
  }
  if (__recordId_isset)
  {
    [encoder encodeInt64: __recordId forKey: @"recordId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __totalFee_isset ? 2654435761 : 0;
  if (__totalFee_isset)
  {
    hash = (hash * 31) ^ [@(__totalFee) hash];
  }
  hash = (hash * 31) ^ __recordId_isset ? 2654435761 : 0;
  if (__recordId_isset)
  {
    hash = (hash * 31) ^ [@(__recordId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFInpatientPrePaymentReq class]]) {
    return NO;
  }
  NXTFInpatientPrePaymentReq *other = (NXTFInpatientPrePaymentReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__totalFee_isset != other->__totalFee_isset) ||
      (__totalFee_isset && (__totalFee != other->__totalFee))) {
    return NO;
  }
  if ((__recordId_isset != other->__recordId_isset) ||
      (__recordId_isset && (__recordId != other->__recordId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (double) totalFee {
  return __totalFee;
}

- (void) setTotalFee: (double) totalFee {
  __totalFee = totalFee;
  __totalFee_isset = YES;
}

- (BOOL) totalFeeIsSet {
  return __totalFee_isset;
}

- (void) unsetTotalFee {
  __totalFee_isset = NO;
}

- (int64_t) recordId {
  return __recordId;
}

- (void) setRecordId: (int64_t) recordId {
  __recordId = recordId;
  __recordId_isset = YES;
}

- (BOOL) recordIdIsSet {
  return __recordId_isset;
}

- (void) unsetRecordId {
  __recordId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setTotalFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRecordId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"InpatientPrePaymentReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__totalFee_isset) {
    [outProtocol writeFieldBeginWithName: @"totalFee" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __totalFee];
    [outProtocol writeFieldEnd];
  }
  if (__recordId_isset) {
    [outProtocol writeFieldBeginWithName: @"recordId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __recordId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFInpatientPrePaymentReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",totalFee:"];
  [ms appendFormat: @"%f", __totalFee];
  [ms appendString: @",recordId:"];
  [ms appendFormat: @"%qi", __recordId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetPrePaymentDetailReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.page = [[[NXTFPage alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header page: (NXTFPage *) page hospId: (int32_t) hospId patientId: (int64_t) patientId recordId: (int64_t) recordId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __recordId = recordId;
  __recordId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"recordId"])
  {
    __recordId = [decoder decodeInt64ForKey: @"recordId"];
    __recordId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__recordId_isset)
  {
    [encoder encodeInt64: __recordId forKey: @"recordId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __recordId_isset ? 2654435761 : 0;
  if (__recordId_isset)
  {
    hash = (hash * 31) ^ [@(__recordId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetPrePaymentDetailReq class]]) {
    return NO;
  }
  NXTFGetPrePaymentDetailReq *other = (NXTFGetPrePaymentDetailReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__recordId_isset != other->__recordId_isset) ||
      (__recordId_isset && (__recordId != other->__recordId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (int64_t) recordId {
  return __recordId;
}

- (void) setRecordId: (int64_t) recordId {
  __recordId = recordId;
  __recordId_isset = YES;
}

- (BOOL) recordIdIsSet {
  return __recordId_isset;
}

- (void) unsetRecordId {
  __recordId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRecordId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPrePaymentDetailReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__recordId_isset) {
    [outProtocol writeFieldBeginWithName: @"recordId" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __recordId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetPrePaymentDetailReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",recordId:"];
  [ms appendFormat: @"%qi", __recordId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetHospsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header page: (NXTFPage *) page cityName: (NSString *) cityName
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __cityName = [cityName retain_stub];
  __cityName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"cityName"])
  {
    __cityName = [[decoder decodeObjectForKey: @"cityName"] retain_stub];
    __cityName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__cityName_isset)
  {
    [encoder encodeObject: __cityName forKey: @"cityName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __cityName_isset ? 2654435761 : 0;
  if (__cityName_isset)
  {
    hash = (hash * 31) ^ [__cityName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetHospsReq class]]) {
    return NO;
  }
  NXTFGetHospsReq *other = (NXTFGetHospsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__cityName_isset != other->__cityName_isset) ||
      (__cityName_isset && ((__cityName || other->__cityName) && ![__cityName isEqual:other->__cityName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__cityName release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSString *) cityName {
  return [[__cityName retain_stub] autorelease_stub];
}

- (void) setCityName: (NSString *) cityName {
  [cityName retain_stub];
  [__cityName release_stub];
  __cityName = cityName;
  __cityName_isset = YES;
}

- (BOOL) cityNameIsSet {
  return __cityName_isset;
}

- (void) unsetCityName {
  [__cityName release_stub];
  __cityName = nil;
  __cityName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCityName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetHospsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cityName_isset) {
    if (__cityName != nil) {
      [outProtocol writeFieldBeginWithName: @"cityName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __cityName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetHospsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",cityName:"];
  [ms appendFormat: @"\"%@\"", __cityName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFindHospsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.page = [[[NXTFPage alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header page: (NXTFPage *) page cityCode: (NSString *) cityCode cityName: (NSString *) cityName specialtyId: (int32_t) specialtyId hospType: (int32_t) hospType hospLevel: (int32_t) hospLevel hospName: (NSString *) hospName comDeptId: (int32_t) comDeptId isRecommend: (int32_t) isRecommend orderBy: (int32_t) orderBy isOpened: (int32_t) isOpened currentLng: (double) currentLng currentLat: (double) currentLat isOpenReg: (int32_t) isOpenReg isOpenNet: (int32_t) isOpenNet
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __cityCode = [cityCode retain_stub];
  __cityCode_isset = YES;
  __cityName = [cityName retain_stub];
  __cityName_isset = YES;
  __specialtyId = specialtyId;
  __specialtyId_isset = YES;
  __hospType = hospType;
  __hospType_isset = YES;
  __hospLevel = hospLevel;
  __hospLevel_isset = YES;
  __hospName = [hospName retain_stub];
  __hospName_isset = YES;
  __comDeptId = comDeptId;
  __comDeptId_isset = YES;
  __isRecommend = isRecommend;
  __isRecommend_isset = YES;
  __orderBy = orderBy;
  __orderBy_isset = YES;
  __isOpened = isOpened;
  __isOpened_isset = YES;
  __currentLng = currentLng;
  __currentLng_isset = YES;
  __currentLat = currentLat;
  __currentLat_isset = YES;
  __isOpenReg = isOpenReg;
  __isOpenReg_isset = YES;
  __isOpenNet = isOpenNet;
  __isOpenNet_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"cityCode"])
  {
    __cityCode = [[decoder decodeObjectForKey: @"cityCode"] retain_stub];
    __cityCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"cityName"])
  {
    __cityName = [[decoder decodeObjectForKey: @"cityName"] retain_stub];
    __cityName_isset = YES;
  }
  if ([decoder containsValueForKey: @"specialtyId"])
  {
    __specialtyId = [decoder decodeInt32ForKey: @"specialtyId"];
    __specialtyId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospType"])
  {
    __hospType = [decoder decodeInt32ForKey: @"hospType"];
    __hospType_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospLevel"])
  {
    __hospLevel = [decoder decodeInt32ForKey: @"hospLevel"];
    __hospLevel_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospName"])
  {
    __hospName = [[decoder decodeObjectForKey: @"hospName"] retain_stub];
    __hospName_isset = YES;
  }
  if ([decoder containsValueForKey: @"comDeptId"])
  {
    __comDeptId = [decoder decodeInt32ForKey: @"comDeptId"];
    __comDeptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"isRecommend"])
  {
    __isRecommend = [decoder decodeInt32ForKey: @"isRecommend"];
    __isRecommend_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderBy"])
  {
    __orderBy = [decoder decodeInt32ForKey: @"orderBy"];
    __orderBy_isset = YES;
  }
  if ([decoder containsValueForKey: @"isOpened"])
  {
    __isOpened = [decoder decodeInt32ForKey: @"isOpened"];
    __isOpened_isset = YES;
  }
  if ([decoder containsValueForKey: @"currentLng"])
  {
    __currentLng = [decoder decodeDoubleForKey: @"currentLng"];
    __currentLng_isset = YES;
  }
  if ([decoder containsValueForKey: @"currentLat"])
  {
    __currentLat = [decoder decodeDoubleForKey: @"currentLat"];
    __currentLat_isset = YES;
  }
  if ([decoder containsValueForKey: @"isOpenReg"])
  {
    __isOpenReg = [decoder decodeInt32ForKey: @"isOpenReg"];
    __isOpenReg_isset = YES;
  }
  if ([decoder containsValueForKey: @"isOpenNet"])
  {
    __isOpenNet = [decoder decodeInt32ForKey: @"isOpenNet"];
    __isOpenNet_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__cityCode_isset)
  {
    [encoder encodeObject: __cityCode forKey: @"cityCode"];
  }
  if (__cityName_isset)
  {
    [encoder encodeObject: __cityName forKey: @"cityName"];
  }
  if (__specialtyId_isset)
  {
    [encoder encodeInt32: __specialtyId forKey: @"specialtyId"];
  }
  if (__hospType_isset)
  {
    [encoder encodeInt32: __hospType forKey: @"hospType"];
  }
  if (__hospLevel_isset)
  {
    [encoder encodeInt32: __hospLevel forKey: @"hospLevel"];
  }
  if (__hospName_isset)
  {
    [encoder encodeObject: __hospName forKey: @"hospName"];
  }
  if (__comDeptId_isset)
  {
    [encoder encodeInt32: __comDeptId forKey: @"comDeptId"];
  }
  if (__isRecommend_isset)
  {
    [encoder encodeInt32: __isRecommend forKey: @"isRecommend"];
  }
  if (__orderBy_isset)
  {
    [encoder encodeInt32: __orderBy forKey: @"orderBy"];
  }
  if (__isOpened_isset)
  {
    [encoder encodeInt32: __isOpened forKey: @"isOpened"];
  }
  if (__currentLng_isset)
  {
    [encoder encodeDouble: __currentLng forKey: @"currentLng"];
  }
  if (__currentLat_isset)
  {
    [encoder encodeDouble: __currentLat forKey: @"currentLat"];
  }
  if (__isOpenReg_isset)
  {
    [encoder encodeInt32: __isOpenReg forKey: @"isOpenReg"];
  }
  if (__isOpenNet_isset)
  {
    [encoder encodeInt32: __isOpenNet forKey: @"isOpenNet"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __cityCode_isset ? 2654435761 : 0;
  if (__cityCode_isset)
  {
    hash = (hash * 31) ^ [__cityCode hash];
  }
  hash = (hash * 31) ^ __cityName_isset ? 2654435761 : 0;
  if (__cityName_isset)
  {
    hash = (hash * 31) ^ [__cityName hash];
  }
  hash = (hash * 31) ^ __specialtyId_isset ? 2654435761 : 0;
  if (__specialtyId_isset)
  {
    hash = (hash * 31) ^ [@(__specialtyId) hash];
  }
  hash = (hash * 31) ^ __hospType_isset ? 2654435761 : 0;
  if (__hospType_isset)
  {
    hash = (hash * 31) ^ [@(__hospType) hash];
  }
  hash = (hash * 31) ^ __hospLevel_isset ? 2654435761 : 0;
  if (__hospLevel_isset)
  {
    hash = (hash * 31) ^ [@(__hospLevel) hash];
  }
  hash = (hash * 31) ^ __hospName_isset ? 2654435761 : 0;
  if (__hospName_isset)
  {
    hash = (hash * 31) ^ [__hospName hash];
  }
  hash = (hash * 31) ^ __comDeptId_isset ? 2654435761 : 0;
  if (__comDeptId_isset)
  {
    hash = (hash * 31) ^ [@(__comDeptId) hash];
  }
  hash = (hash * 31) ^ __isRecommend_isset ? 2654435761 : 0;
  if (__isRecommend_isset)
  {
    hash = (hash * 31) ^ [@(__isRecommend) hash];
  }
  hash = (hash * 31) ^ __orderBy_isset ? 2654435761 : 0;
  if (__orderBy_isset)
  {
    hash = (hash * 31) ^ [@(__orderBy) hash];
  }
  hash = (hash * 31) ^ __isOpened_isset ? 2654435761 : 0;
  if (__isOpened_isset)
  {
    hash = (hash * 31) ^ [@(__isOpened) hash];
  }
  hash = (hash * 31) ^ __currentLng_isset ? 2654435761 : 0;
  if (__currentLng_isset)
  {
    hash = (hash * 31) ^ [@(__currentLng) hash];
  }
  hash = (hash * 31) ^ __currentLat_isset ? 2654435761 : 0;
  if (__currentLat_isset)
  {
    hash = (hash * 31) ^ [@(__currentLat) hash];
  }
  hash = (hash * 31) ^ __isOpenReg_isset ? 2654435761 : 0;
  if (__isOpenReg_isset)
  {
    hash = (hash * 31) ^ [@(__isOpenReg) hash];
  }
  hash = (hash * 31) ^ __isOpenNet_isset ? 2654435761 : 0;
  if (__isOpenNet_isset)
  {
    hash = (hash * 31) ^ [@(__isOpenNet) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFindHospsReq class]]) {
    return NO;
  }
  NXTFFindHospsReq *other = (NXTFFindHospsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__cityCode_isset != other->__cityCode_isset) ||
      (__cityCode_isset && ((__cityCode || other->__cityCode) && ![__cityCode isEqual:other->__cityCode]))) {
    return NO;
  }
  if ((__cityName_isset != other->__cityName_isset) ||
      (__cityName_isset && ((__cityName || other->__cityName) && ![__cityName isEqual:other->__cityName]))) {
    return NO;
  }
  if ((__specialtyId_isset != other->__specialtyId_isset) ||
      (__specialtyId_isset && (__specialtyId != other->__specialtyId))) {
    return NO;
  }
  if ((__hospType_isset != other->__hospType_isset) ||
      (__hospType_isset && (__hospType != other->__hospType))) {
    return NO;
  }
  if ((__hospLevel_isset != other->__hospLevel_isset) ||
      (__hospLevel_isset && (__hospLevel != other->__hospLevel))) {
    return NO;
  }
  if ((__hospName_isset != other->__hospName_isset) ||
      (__hospName_isset && ((__hospName || other->__hospName) && ![__hospName isEqual:other->__hospName]))) {
    return NO;
  }
  if ((__comDeptId_isset != other->__comDeptId_isset) ||
      (__comDeptId_isset && (__comDeptId != other->__comDeptId))) {
    return NO;
  }
  if ((__isRecommend_isset != other->__isRecommend_isset) ||
      (__isRecommend_isset && (__isRecommend != other->__isRecommend))) {
    return NO;
  }
  if ((__orderBy_isset != other->__orderBy_isset) ||
      (__orderBy_isset && (__orderBy != other->__orderBy))) {
    return NO;
  }
  if ((__isOpened_isset != other->__isOpened_isset) ||
      (__isOpened_isset && (__isOpened != other->__isOpened))) {
    return NO;
  }
  if ((__currentLng_isset != other->__currentLng_isset) ||
      (__currentLng_isset && (__currentLng != other->__currentLng))) {
    return NO;
  }
  if ((__currentLat_isset != other->__currentLat_isset) ||
      (__currentLat_isset && (__currentLat != other->__currentLat))) {
    return NO;
  }
  if ((__isOpenReg_isset != other->__isOpenReg_isset) ||
      (__isOpenReg_isset && (__isOpenReg != other->__isOpenReg))) {
    return NO;
  }
  if ((__isOpenNet_isset != other->__isOpenNet_isset) ||
      (__isOpenNet_isset && (__isOpenNet != other->__isOpenNet))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__cityCode release_stub];
  [__cityName release_stub];
  [__hospName release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSString *) cityCode {
  return [[__cityCode retain_stub] autorelease_stub];
}

- (void) setCityCode: (NSString *) cityCode {
  [cityCode retain_stub];
  [__cityCode release_stub];
  __cityCode = cityCode;
  __cityCode_isset = YES;
}

- (BOOL) cityCodeIsSet {
  return __cityCode_isset;
}

- (void) unsetCityCode {
  [__cityCode release_stub];
  __cityCode = nil;
  __cityCode_isset = NO;
}

- (NSString *) cityName {
  return [[__cityName retain_stub] autorelease_stub];
}

- (void) setCityName: (NSString *) cityName {
  [cityName retain_stub];
  [__cityName release_stub];
  __cityName = cityName;
  __cityName_isset = YES;
}

- (BOOL) cityNameIsSet {
  return __cityName_isset;
}

- (void) unsetCityName {
  [__cityName release_stub];
  __cityName = nil;
  __cityName_isset = NO;
}

- (int32_t) specialtyId {
  return __specialtyId;
}

- (void) setSpecialtyId: (int32_t) specialtyId {
  __specialtyId = specialtyId;
  __specialtyId_isset = YES;
}

- (BOOL) specialtyIdIsSet {
  return __specialtyId_isset;
}

- (void) unsetSpecialtyId {
  __specialtyId_isset = NO;
}

- (int32_t) hospType {
  return __hospType;
}

- (void) setHospType: (int32_t) hospType {
  __hospType = hospType;
  __hospType_isset = YES;
}

- (BOOL) hospTypeIsSet {
  return __hospType_isset;
}

- (void) unsetHospType {
  __hospType_isset = NO;
}

- (int32_t) hospLevel {
  return __hospLevel;
}

- (void) setHospLevel: (int32_t) hospLevel {
  __hospLevel = hospLevel;
  __hospLevel_isset = YES;
}

- (BOOL) hospLevelIsSet {
  return __hospLevel_isset;
}

- (void) unsetHospLevel {
  __hospLevel_isset = NO;
}

- (NSString *) hospName {
  return [[__hospName retain_stub] autorelease_stub];
}

- (void) setHospName: (NSString *) hospName {
  [hospName retain_stub];
  [__hospName release_stub];
  __hospName = hospName;
  __hospName_isset = YES;
}

- (BOOL) hospNameIsSet {
  return __hospName_isset;
}

- (void) unsetHospName {
  [__hospName release_stub];
  __hospName = nil;
  __hospName_isset = NO;
}

- (int32_t) comDeptId {
  return __comDeptId;
}

- (void) setComDeptId: (int32_t) comDeptId {
  __comDeptId = comDeptId;
  __comDeptId_isset = YES;
}

- (BOOL) comDeptIdIsSet {
  return __comDeptId_isset;
}

- (void) unsetComDeptId {
  __comDeptId_isset = NO;
}

- (int32_t) isRecommend {
  return __isRecommend;
}

- (void) setIsRecommend: (int32_t) isRecommend {
  __isRecommend = isRecommend;
  __isRecommend_isset = YES;
}

- (BOOL) isRecommendIsSet {
  return __isRecommend_isset;
}

- (void) unsetIsRecommend {
  __isRecommend_isset = NO;
}

- (int32_t) orderBy {
  return __orderBy;
}

- (void) setOrderBy: (int32_t) orderBy {
  __orderBy = orderBy;
  __orderBy_isset = YES;
}

- (BOOL) orderByIsSet {
  return __orderBy_isset;
}

- (void) unsetOrderBy {
  __orderBy_isset = NO;
}

- (int32_t) isOpened {
  return __isOpened;
}

- (void) setIsOpened: (int32_t) isOpened {
  __isOpened = isOpened;
  __isOpened_isset = YES;
}

- (BOOL) isOpenedIsSet {
  return __isOpened_isset;
}

- (void) unsetIsOpened {
  __isOpened_isset = NO;
}

- (double) currentLng {
  return __currentLng;
}

- (void) setCurrentLng: (double) currentLng {
  __currentLng = currentLng;
  __currentLng_isset = YES;
}

- (BOOL) currentLngIsSet {
  return __currentLng_isset;
}

- (void) unsetCurrentLng {
  __currentLng_isset = NO;
}

- (double) currentLat {
  return __currentLat;
}

- (void) setCurrentLat: (double) currentLat {
  __currentLat = currentLat;
  __currentLat_isset = YES;
}

- (BOOL) currentLatIsSet {
  return __currentLat_isset;
}

- (void) unsetCurrentLat {
  __currentLat_isset = NO;
}

- (int32_t) isOpenReg {
  return __isOpenReg;
}

- (void) setIsOpenReg: (int32_t) isOpenReg {
  __isOpenReg = isOpenReg;
  __isOpenReg_isset = YES;
}

- (BOOL) isOpenRegIsSet {
  return __isOpenReg_isset;
}

- (void) unsetIsOpenReg {
  __isOpenReg_isset = NO;
}

- (int32_t) isOpenNet {
  return __isOpenNet;
}

- (void) setIsOpenNet: (int32_t) isOpenNet {
  __isOpenNet = isOpenNet;
  __isOpenNet_isset = YES;
}

- (BOOL) isOpenNetIsSet {
  return __isOpenNet_isset;
}

- (void) unsetIsOpenNet {
  __isOpenNet_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCityCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCityName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSpecialtyId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospLevel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setComDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsRecommend: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOrderBy: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsOpened: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setCurrentLng: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setCurrentLat: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsOpenReg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsOpenNet: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FindHospsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cityCode_isset) {
    if (__cityCode != nil) {
      [outProtocol writeFieldBeginWithName: @"cityCode" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __cityCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cityName_isset) {
    if (__cityName != nil) {
      [outProtocol writeFieldBeginWithName: @"cityName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __cityName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__specialtyId_isset) {
    [outProtocol writeFieldBeginWithName: @"specialtyId" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __specialtyId];
    [outProtocol writeFieldEnd];
  }
  if (__hospType_isset) {
    [outProtocol writeFieldBeginWithName: @"hospType" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __hospType];
    [outProtocol writeFieldEnd];
  }
  if (__hospLevel_isset) {
    [outProtocol writeFieldBeginWithName: @"hospLevel" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __hospLevel];
    [outProtocol writeFieldEnd];
  }
  if (__hospName_isset) {
    if (__hospName != nil) {
      [outProtocol writeFieldBeginWithName: @"hospName" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __hospName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__comDeptId_isset) {
    [outProtocol writeFieldBeginWithName: @"comDeptId" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __comDeptId];
    [outProtocol writeFieldEnd];
  }
  if (__isRecommend_isset) {
    [outProtocol writeFieldBeginWithName: @"isRecommend" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __isRecommend];
    [outProtocol writeFieldEnd];
  }
  if (__orderBy_isset) {
    [outProtocol writeFieldBeginWithName: @"orderBy" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __orderBy];
    [outProtocol writeFieldEnd];
  }
  if (__isOpened_isset) {
    [outProtocol writeFieldBeginWithName: @"isOpened" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __isOpened];
    [outProtocol writeFieldEnd];
  }
  if (__currentLng_isset) {
    [outProtocol writeFieldBeginWithName: @"currentLng" type: TType_DOUBLE fieldID: 13];
    [outProtocol writeDouble: __currentLng];
    [outProtocol writeFieldEnd];
  }
  if (__currentLat_isset) {
    [outProtocol writeFieldBeginWithName: @"currentLat" type: TType_DOUBLE fieldID: 14];
    [outProtocol writeDouble: __currentLat];
    [outProtocol writeFieldEnd];
  }
  if (__isOpenReg_isset) {
    [outProtocol writeFieldBeginWithName: @"isOpenReg" type: TType_I32 fieldID: 15];
    [outProtocol writeI32: __isOpenReg];
    [outProtocol writeFieldEnd];
  }
  if (__isOpenNet_isset) {
    [outProtocol writeFieldBeginWithName: @"isOpenNet" type: TType_I32 fieldID: 16];
    [outProtocol writeI32: __isOpenNet];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFindHospsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",cityCode:"];
  [ms appendFormat: @"\"%@\"", __cityCode];
  [ms appendString: @",cityName:"];
  [ms appendFormat: @"\"%@\"", __cityName];
  [ms appendString: @",specialtyId:"];
  [ms appendFormat: @"%i", __specialtyId];
  [ms appendString: @",hospType:"];
  [ms appendFormat: @"%i", __hospType];
  [ms appendString: @",hospLevel:"];
  [ms appendFormat: @"%i", __hospLevel];
  [ms appendString: @",hospName:"];
  [ms appendFormat: @"\"%@\"", __hospName];
  [ms appendString: @",comDeptId:"];
  [ms appendFormat: @"%i", __comDeptId];
  [ms appendString: @",isRecommend:"];
  [ms appendFormat: @"%i", __isRecommend];
  [ms appendString: @",orderBy:"];
  [ms appendFormat: @"%i", __orderBy];
  [ms appendString: @",isOpened:"];
  [ms appendFormat: @"%i", __isOpened];
  [ms appendString: @",currentLng:"];
  [ms appendFormat: @"%f", __currentLng];
  [ms appendString: @",currentLat:"];
  [ms appendFormat: @"%f", __currentLat];
  [ms appendString: @",isOpenReg:"];
  [ms appendFormat: @"%i", __isOpenReg];
  [ms appendString: @",isOpenNet:"];
  [ms appendFormat: @"%i", __isOpenNet];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetDiseasesReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.page = [[[NXTFPage alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header page: (NXTFPage *) page bodyPart: (int32_t) bodyPart crowd: (int32_t) crowd comDeptId: (int32_t) comDeptId name: (NSString *) name
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __bodyPart = bodyPart;
  __bodyPart_isset = YES;
  __crowd = crowd;
  __crowd_isset = YES;
  __comDeptId = comDeptId;
  __comDeptId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"bodyPart"])
  {
    __bodyPart = [decoder decodeInt32ForKey: @"bodyPart"];
    __bodyPart_isset = YES;
  }
  if ([decoder containsValueForKey: @"crowd"])
  {
    __crowd = [decoder decodeInt32ForKey: @"crowd"];
    __crowd_isset = YES;
  }
  if ([decoder containsValueForKey: @"comDeptId"])
  {
    __comDeptId = [decoder decodeInt32ForKey: @"comDeptId"];
    __comDeptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__bodyPart_isset)
  {
    [encoder encodeInt32: __bodyPart forKey: @"bodyPart"];
  }
  if (__crowd_isset)
  {
    [encoder encodeInt32: __crowd forKey: @"crowd"];
  }
  if (__comDeptId_isset)
  {
    [encoder encodeInt32: __comDeptId forKey: @"comDeptId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __bodyPart_isset ? 2654435761 : 0;
  if (__bodyPart_isset)
  {
    hash = (hash * 31) ^ [@(__bodyPart) hash];
  }
  hash = (hash * 31) ^ __crowd_isset ? 2654435761 : 0;
  if (__crowd_isset)
  {
    hash = (hash * 31) ^ [@(__crowd) hash];
  }
  hash = (hash * 31) ^ __comDeptId_isset ? 2654435761 : 0;
  if (__comDeptId_isset)
  {
    hash = (hash * 31) ^ [@(__comDeptId) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetDiseasesReq class]]) {
    return NO;
  }
  NXTFGetDiseasesReq *other = (NXTFGetDiseasesReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__bodyPart_isset != other->__bodyPart_isset) ||
      (__bodyPart_isset && (__bodyPart != other->__bodyPart))) {
    return NO;
  }
  if ((__crowd_isset != other->__crowd_isset) ||
      (__crowd_isset && (__crowd != other->__crowd))) {
    return NO;
  }
  if ((__comDeptId_isset != other->__comDeptId_isset) ||
      (__comDeptId_isset && (__comDeptId != other->__comDeptId))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__name release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (int32_t) bodyPart {
  return __bodyPart;
}

- (void) setBodyPart: (int32_t) bodyPart {
  __bodyPart = bodyPart;
  __bodyPart_isset = YES;
}

- (BOOL) bodyPartIsSet {
  return __bodyPart_isset;
}

- (void) unsetBodyPart {
  __bodyPart_isset = NO;
}

- (int32_t) crowd {
  return __crowd;
}

- (void) setCrowd: (int32_t) crowd {
  __crowd = crowd;
  __crowd_isset = YES;
}

- (BOOL) crowdIsSet {
  return __crowd_isset;
}

- (void) unsetCrowd {
  __crowd_isset = NO;
}

- (int32_t) comDeptId {
  return __comDeptId;
}

- (void) setComDeptId: (int32_t) comDeptId {
  __comDeptId = comDeptId;
  __comDeptId_isset = YES;
}

- (BOOL) comDeptIdIsSet {
  return __comDeptId_isset;
}

- (void) unsetComDeptId {
  __comDeptId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBodyPart: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCrowd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setComDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDiseasesReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bodyPart_isset) {
    [outProtocol writeFieldBeginWithName: @"bodyPart" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __bodyPart];
    [outProtocol writeFieldEnd];
  }
  if (__crowd_isset) {
    [outProtocol writeFieldBeginWithName: @"crowd" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __crowd];
    [outProtocol writeFieldEnd];
  }
  if (__comDeptId_isset) {
    [outProtocol writeFieldBeginWithName: @"comDeptId" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __comDeptId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetDiseasesReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",bodyPart:"];
  [ms appendFormat: @"%i", __bodyPart];
  [ms appendString: @",crowd:"];
  [ms appendFormat: @"%i", __crowd];
  [ms appendString: @",comDeptId:"];
  [ms appendFormat: @"%i", __comDeptId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetDiseaseReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header diseaseId: (int64_t) diseaseId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __diseaseId = diseaseId;
  __diseaseId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"diseaseId"])
  {
    __diseaseId = [decoder decodeInt64ForKey: @"diseaseId"];
    __diseaseId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__diseaseId_isset)
  {
    [encoder encodeInt64: __diseaseId forKey: @"diseaseId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __diseaseId_isset ? 2654435761 : 0;
  if (__diseaseId_isset)
  {
    hash = (hash * 31) ^ [@(__diseaseId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetDiseaseReq class]]) {
    return NO;
  }
  NXTFGetDiseaseReq *other = (NXTFGetDiseaseReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__diseaseId_isset != other->__diseaseId_isset) ||
      (__diseaseId_isset && (__diseaseId != other->__diseaseId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) diseaseId {
  return __diseaseId;
}

- (void) setDiseaseId: (int64_t) diseaseId {
  __diseaseId = diseaseId;
  __diseaseId_isset = YES;
}

- (BOOL) diseaseIdIsSet {
  return __diseaseId_isset;
}

- (void) unsetDiseaseId {
  __diseaseId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDiseaseId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDiseaseReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diseaseId_isset) {
    [outProtocol writeFieldBeginWithName: @"diseaseId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __diseaseId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetDiseaseReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",diseaseId:"];
  [ms appendFormat: @"%qi", __diseaseId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetComDeptsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header showDesc: (BOOL) showDesc type: (int32_t) type
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __showDesc = showDesc;
  __showDesc_isset = YES;
  __type = type;
  __type_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"showDesc"])
  {
    __showDesc = [decoder decodeBoolForKey: @"showDesc"];
    __showDesc_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeInt32ForKey: @"type"];
    __type_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__showDesc_isset)
  {
    [encoder encodeBool: __showDesc forKey: @"showDesc"];
  }
  if (__type_isset)
  {
    [encoder encodeInt32: __type forKey: @"type"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __showDesc_isset ? 2654435761 : 0;
  if (__showDesc_isset)
  {
    hash = (hash * 31) ^ [@(__showDesc) hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetComDeptsReq class]]) {
    return NO;
  }
  NXTFGetComDeptsReq *other = (NXTFGetComDeptsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__showDesc_isset != other->__showDesc_isset) ||
      (__showDesc_isset && (__showDesc != other->__showDesc))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (BOOL) showDesc {
  return __showDesc;
}

- (void) setShowDesc: (BOOL) showDesc {
  __showDesc = showDesc;
  __showDesc_isset = YES;
}

- (BOOL) showDescIsSet {
  return __showDesc_isset;
}

- (void) unsetShowDesc {
  __showDesc_isset = NO;
}

- (int32_t) type {
  return __type;
}

- (void) setType: (int32_t) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setShowDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetComDeptsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__showDesc_isset) {
    [outProtocol writeFieldBeginWithName: @"showDesc" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __showDesc];
    [outProtocol writeFieldEnd];
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetComDeptsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",showDesc:"];
  [ms appendFormat: @"%i", __showDesc];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFH5SignUpReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header phoneNo: (NSString *) phoneNo name: (NSString *) name aliOpenId: (NSString *) aliOpenId pwd: (NSString *) pwd gender: (int32_t) gender papersNo: (NSString *) papersNo papersTypeId: (int32_t) papersTypeId medInsureance: (NSString *) medInsureance stature: (double) stature weight: (double) weight bornDate: (NSString *) bornDate address: (NSString *) address criticalIllness: (NSString *) criticalIllness allergicHistory: (NSString *) allergicHistory familyHistory: (NSString *) familyHistory bloodType: (int32_t) bloodType
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __phoneNo = [phoneNo retain_stub];
  __phoneNo_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __aliOpenId = [aliOpenId retain_stub];
  __aliOpenId_isset = YES;
  __pwd = [pwd retain_stub];
  __pwd_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __papersNo = [papersNo retain_stub];
  __papersNo_isset = YES;
  __papersTypeId = papersTypeId;
  __papersTypeId_isset = YES;
  __medInsureance = [medInsureance retain_stub];
  __medInsureance_isset = YES;
  __stature = stature;
  __stature_isset = YES;
  __weight = weight;
  __weight_isset = YES;
  __bornDate = [bornDate retain_stub];
  __bornDate_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __criticalIllness = [criticalIllness retain_stub];
  __criticalIllness_isset = YES;
  __allergicHistory = [allergicHistory retain_stub];
  __allergicHistory_isset = YES;
  __familyHistory = [familyHistory retain_stub];
  __familyHistory_isset = YES;
  __bloodType = bloodType;
  __bloodType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneNo"])
  {
    __phoneNo = [[decoder decodeObjectForKey: @"phoneNo"] retain_stub];
    __phoneNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"aliOpenId"])
  {
    __aliOpenId = [[decoder decodeObjectForKey: @"aliOpenId"] retain_stub];
    __aliOpenId_isset = YES;
  }
  if ([decoder containsValueForKey: @"pwd"])
  {
    __pwd = [[decoder decodeObjectForKey: @"pwd"] retain_stub];
    __pwd_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeInt32ForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersNo"])
  {
    __papersNo = [[decoder decodeObjectForKey: @"papersNo"] retain_stub];
    __papersNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersTypeId"])
  {
    __papersTypeId = [decoder decodeInt32ForKey: @"papersTypeId"];
    __papersTypeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"medInsureance"])
  {
    __medInsureance = [[decoder decodeObjectForKey: @"medInsureance"] retain_stub];
    __medInsureance_isset = YES;
  }
  if ([decoder containsValueForKey: @"stature"])
  {
    __stature = [decoder decodeDoubleForKey: @"stature"];
    __stature_isset = YES;
  }
  if ([decoder containsValueForKey: @"weight"])
  {
    __weight = [decoder decodeDoubleForKey: @"weight"];
    __weight_isset = YES;
  }
  if ([decoder containsValueForKey: @"bornDate"])
  {
    __bornDate = [[decoder decodeObjectForKey: @"bornDate"] retain_stub];
    __bornDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"criticalIllness"])
  {
    __criticalIllness = [[decoder decodeObjectForKey: @"criticalIllness"] retain_stub];
    __criticalIllness_isset = YES;
  }
  if ([decoder containsValueForKey: @"allergicHistory"])
  {
    __allergicHistory = [[decoder decodeObjectForKey: @"allergicHistory"] retain_stub];
    __allergicHistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"familyHistory"])
  {
    __familyHistory = [[decoder decodeObjectForKey: @"familyHistory"] retain_stub];
    __familyHistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"bloodType"])
  {
    __bloodType = [decoder decodeInt32ForKey: @"bloodType"];
    __bloodType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__phoneNo_isset)
  {
    [encoder encodeObject: __phoneNo forKey: @"phoneNo"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__aliOpenId_isset)
  {
    [encoder encodeObject: __aliOpenId forKey: @"aliOpenId"];
  }
  if (__pwd_isset)
  {
    [encoder encodeObject: __pwd forKey: @"pwd"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt32: __gender forKey: @"gender"];
  }
  if (__papersNo_isset)
  {
    [encoder encodeObject: __papersNo forKey: @"papersNo"];
  }
  if (__papersTypeId_isset)
  {
    [encoder encodeInt32: __papersTypeId forKey: @"papersTypeId"];
  }
  if (__medInsureance_isset)
  {
    [encoder encodeObject: __medInsureance forKey: @"medInsureance"];
  }
  if (__stature_isset)
  {
    [encoder encodeDouble: __stature forKey: @"stature"];
  }
  if (__weight_isset)
  {
    [encoder encodeDouble: __weight forKey: @"weight"];
  }
  if (__bornDate_isset)
  {
    [encoder encodeObject: __bornDate forKey: @"bornDate"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__criticalIllness_isset)
  {
    [encoder encodeObject: __criticalIllness forKey: @"criticalIllness"];
  }
  if (__allergicHistory_isset)
  {
    [encoder encodeObject: __allergicHistory forKey: @"allergicHistory"];
  }
  if (__familyHistory_isset)
  {
    [encoder encodeObject: __familyHistory forKey: @"familyHistory"];
  }
  if (__bloodType_isset)
  {
    [encoder encodeInt32: __bloodType forKey: @"bloodType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __phoneNo_isset ? 2654435761 : 0;
  if (__phoneNo_isset)
  {
    hash = (hash * 31) ^ [__phoneNo hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __aliOpenId_isset ? 2654435761 : 0;
  if (__aliOpenId_isset)
  {
    hash = (hash * 31) ^ [__aliOpenId hash];
  }
  hash = (hash * 31) ^ __pwd_isset ? 2654435761 : 0;
  if (__pwd_isset)
  {
    hash = (hash * 31) ^ [__pwd hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [@(__gender) hash];
  }
  hash = (hash * 31) ^ __papersNo_isset ? 2654435761 : 0;
  if (__papersNo_isset)
  {
    hash = (hash * 31) ^ [__papersNo hash];
  }
  hash = (hash * 31) ^ __papersTypeId_isset ? 2654435761 : 0;
  if (__papersTypeId_isset)
  {
    hash = (hash * 31) ^ [@(__papersTypeId) hash];
  }
  hash = (hash * 31) ^ __medInsureance_isset ? 2654435761 : 0;
  if (__medInsureance_isset)
  {
    hash = (hash * 31) ^ [__medInsureance hash];
  }
  hash = (hash * 31) ^ __stature_isset ? 2654435761 : 0;
  if (__stature_isset)
  {
    hash = (hash * 31) ^ [@(__stature) hash];
  }
  hash = (hash * 31) ^ __weight_isset ? 2654435761 : 0;
  if (__weight_isset)
  {
    hash = (hash * 31) ^ [@(__weight) hash];
  }
  hash = (hash * 31) ^ __bornDate_isset ? 2654435761 : 0;
  if (__bornDate_isset)
  {
    hash = (hash * 31) ^ [__bornDate hash];
  }
  hash = (hash * 31) ^ __address_isset ? 2654435761 : 0;
  if (__address_isset)
  {
    hash = (hash * 31) ^ [__address hash];
  }
  hash = (hash * 31) ^ __criticalIllness_isset ? 2654435761 : 0;
  if (__criticalIllness_isset)
  {
    hash = (hash * 31) ^ [__criticalIllness hash];
  }
  hash = (hash * 31) ^ __allergicHistory_isset ? 2654435761 : 0;
  if (__allergicHistory_isset)
  {
    hash = (hash * 31) ^ [__allergicHistory hash];
  }
  hash = (hash * 31) ^ __familyHistory_isset ? 2654435761 : 0;
  if (__familyHistory_isset)
  {
    hash = (hash * 31) ^ [__familyHistory hash];
  }
  hash = (hash * 31) ^ __bloodType_isset ? 2654435761 : 0;
  if (__bloodType_isset)
  {
    hash = (hash * 31) ^ [@(__bloodType) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFH5SignUpReq class]]) {
    return NO;
  }
  NXTFH5SignUpReq *other = (NXTFH5SignUpReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__phoneNo_isset != other->__phoneNo_isset) ||
      (__phoneNo_isset && ((__phoneNo || other->__phoneNo) && ![__phoneNo isEqual:other->__phoneNo]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__aliOpenId_isset != other->__aliOpenId_isset) ||
      (__aliOpenId_isset && ((__aliOpenId || other->__aliOpenId) && ![__aliOpenId isEqual:other->__aliOpenId]))) {
    return NO;
  }
  if ((__pwd_isset != other->__pwd_isset) ||
      (__pwd_isset && ((__pwd || other->__pwd) && ![__pwd isEqual:other->__pwd]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && (__gender != other->__gender))) {
    return NO;
  }
  if ((__papersNo_isset != other->__papersNo_isset) ||
      (__papersNo_isset && ((__papersNo || other->__papersNo) && ![__papersNo isEqual:other->__papersNo]))) {
    return NO;
  }
  if ((__papersTypeId_isset != other->__papersTypeId_isset) ||
      (__papersTypeId_isset && (__papersTypeId != other->__papersTypeId))) {
    return NO;
  }
  if ((__medInsureance_isset != other->__medInsureance_isset) ||
      (__medInsureance_isset && ((__medInsureance || other->__medInsureance) && ![__medInsureance isEqual:other->__medInsureance]))) {
    return NO;
  }
  if ((__stature_isset != other->__stature_isset) ||
      (__stature_isset && (__stature != other->__stature))) {
    return NO;
  }
  if ((__weight_isset != other->__weight_isset) ||
      (__weight_isset && (__weight != other->__weight))) {
    return NO;
  }
  if ((__bornDate_isset != other->__bornDate_isset) ||
      (__bornDate_isset && ((__bornDate || other->__bornDate) && ![__bornDate isEqual:other->__bornDate]))) {
    return NO;
  }
  if ((__address_isset != other->__address_isset) ||
      (__address_isset && ((__address || other->__address) && ![__address isEqual:other->__address]))) {
    return NO;
  }
  if ((__criticalIllness_isset != other->__criticalIllness_isset) ||
      (__criticalIllness_isset && ((__criticalIllness || other->__criticalIllness) && ![__criticalIllness isEqual:other->__criticalIllness]))) {
    return NO;
  }
  if ((__allergicHistory_isset != other->__allergicHistory_isset) ||
      (__allergicHistory_isset && ((__allergicHistory || other->__allergicHistory) && ![__allergicHistory isEqual:other->__allergicHistory]))) {
    return NO;
  }
  if ((__familyHistory_isset != other->__familyHistory_isset) ||
      (__familyHistory_isset && ((__familyHistory || other->__familyHistory) && ![__familyHistory isEqual:other->__familyHistory]))) {
    return NO;
  }
  if ((__bloodType_isset != other->__bloodType_isset) ||
      (__bloodType_isset && (__bloodType != other->__bloodType))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__phoneNo release_stub];
  [__name release_stub];
  [__aliOpenId release_stub];
  [__pwd release_stub];
  [__papersNo release_stub];
  [__medInsureance release_stub];
  [__bornDate release_stub];
  [__address release_stub];
  [__criticalIllness release_stub];
  [__allergicHistory release_stub];
  [__familyHistory release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) phoneNo {
  return [[__phoneNo retain_stub] autorelease_stub];
}

- (void) setPhoneNo: (NSString *) phoneNo {
  [phoneNo retain_stub];
  [__phoneNo release_stub];
  __phoneNo = phoneNo;
  __phoneNo_isset = YES;
}

- (BOOL) phoneNoIsSet {
  return __phoneNo_isset;
}

- (void) unsetPhoneNo {
  [__phoneNo release_stub];
  __phoneNo = nil;
  __phoneNo_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) aliOpenId {
  return [[__aliOpenId retain_stub] autorelease_stub];
}

- (void) setAliOpenId: (NSString *) aliOpenId {
  [aliOpenId retain_stub];
  [__aliOpenId release_stub];
  __aliOpenId = aliOpenId;
  __aliOpenId_isset = YES;
}

- (BOOL) aliOpenIdIsSet {
  return __aliOpenId_isset;
}

- (void) unsetAliOpenId {
  [__aliOpenId release_stub];
  __aliOpenId = nil;
  __aliOpenId_isset = NO;
}

- (NSString *) pwd {
  return [[__pwd retain_stub] autorelease_stub];
}

- (void) setPwd: (NSString *) pwd {
  [pwd retain_stub];
  [__pwd release_stub];
  __pwd = pwd;
  __pwd_isset = YES;
}

- (BOOL) pwdIsSet {
  return __pwd_isset;
}

- (void) unsetPwd {
  [__pwd release_stub];
  __pwd = nil;
  __pwd_isset = NO;
}

- (int32_t) gender {
  return __gender;
}

- (void) setGender: (int32_t) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (NSString *) papersNo {
  return [[__papersNo retain_stub] autorelease_stub];
}

- (void) setPapersNo: (NSString *) papersNo {
  [papersNo retain_stub];
  [__papersNo release_stub];
  __papersNo = papersNo;
  __papersNo_isset = YES;
}

- (BOOL) papersNoIsSet {
  return __papersNo_isset;
}

- (void) unsetPapersNo {
  [__papersNo release_stub];
  __papersNo = nil;
  __papersNo_isset = NO;
}

- (int32_t) papersTypeId {
  return __papersTypeId;
}

- (void) setPapersTypeId: (int32_t) papersTypeId {
  __papersTypeId = papersTypeId;
  __papersTypeId_isset = YES;
}

- (BOOL) papersTypeIdIsSet {
  return __papersTypeId_isset;
}

- (void) unsetPapersTypeId {
  __papersTypeId_isset = NO;
}

- (NSString *) medInsureance {
  return [[__medInsureance retain_stub] autorelease_stub];
}

- (void) setMedInsureance: (NSString *) medInsureance {
  [medInsureance retain_stub];
  [__medInsureance release_stub];
  __medInsureance = medInsureance;
  __medInsureance_isset = YES;
}

- (BOOL) medInsureanceIsSet {
  return __medInsureance_isset;
}

- (void) unsetMedInsureance {
  [__medInsureance release_stub];
  __medInsureance = nil;
  __medInsureance_isset = NO;
}

- (double) stature {
  return __stature;
}

- (void) setStature: (double) stature {
  __stature = stature;
  __stature_isset = YES;
}

- (BOOL) statureIsSet {
  return __stature_isset;
}

- (void) unsetStature {
  __stature_isset = NO;
}

- (double) weight {
  return __weight;
}

- (void) setWeight: (double) weight {
  __weight = weight;
  __weight_isset = YES;
}

- (BOOL) weightIsSet {
  return __weight_isset;
}

- (void) unsetWeight {
  __weight_isset = NO;
}

- (NSString *) bornDate {
  return [[__bornDate retain_stub] autorelease_stub];
}

- (void) setBornDate: (NSString *) bornDate {
  [bornDate retain_stub];
  [__bornDate release_stub];
  __bornDate = bornDate;
  __bornDate_isset = YES;
}

- (BOOL) bornDateIsSet {
  return __bornDate_isset;
}

- (void) unsetBornDate {
  [__bornDate release_stub];
  __bornDate = nil;
  __bornDate_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (NSString *) criticalIllness {
  return [[__criticalIllness retain_stub] autorelease_stub];
}

- (void) setCriticalIllness: (NSString *) criticalIllness {
  [criticalIllness retain_stub];
  [__criticalIllness release_stub];
  __criticalIllness = criticalIllness;
  __criticalIllness_isset = YES;
}

- (BOOL) criticalIllnessIsSet {
  return __criticalIllness_isset;
}

- (void) unsetCriticalIllness {
  [__criticalIllness release_stub];
  __criticalIllness = nil;
  __criticalIllness_isset = NO;
}

- (NSString *) allergicHistory {
  return [[__allergicHistory retain_stub] autorelease_stub];
}

- (void) setAllergicHistory: (NSString *) allergicHistory {
  [allergicHistory retain_stub];
  [__allergicHistory release_stub];
  __allergicHistory = allergicHistory;
  __allergicHistory_isset = YES;
}

- (BOOL) allergicHistoryIsSet {
  return __allergicHistory_isset;
}

- (void) unsetAllergicHistory {
  [__allergicHistory release_stub];
  __allergicHistory = nil;
  __allergicHistory_isset = NO;
}

- (NSString *) familyHistory {
  return [[__familyHistory retain_stub] autorelease_stub];
}

- (void) setFamilyHistory: (NSString *) familyHistory {
  [familyHistory retain_stub];
  [__familyHistory release_stub];
  __familyHistory = familyHistory;
  __familyHistory_isset = YES;
}

- (BOOL) familyHistoryIsSet {
  return __familyHistory_isset;
}

- (void) unsetFamilyHistory {
  [__familyHistory release_stub];
  __familyHistory = nil;
  __familyHistory_isset = NO;
}

- (int32_t) bloodType {
  return __bloodType;
}

- (void) setBloodType: (int32_t) bloodType {
  __bloodType = bloodType;
  __bloodType_isset = YES;
}

- (BOOL) bloodTypeIsSet {
  return __bloodType_isset;
}

- (void) unsetBloodType {
  __bloodType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoneNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAliOpenId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPapersNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPapersTypeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMedInsureance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setStature: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setWeight: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBornDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCriticalIllness: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAllergicHistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFamilyHistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBloodType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"H5SignUpReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phoneNo_isset) {
    if (__phoneNo != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __phoneNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__aliOpenId_isset) {
    if (__aliOpenId != nil) {
      [outProtocol writeFieldBeginWithName: @"aliOpenId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __aliOpenId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pwd_isset) {
    if (__pwd != nil) {
      [outProtocol writeFieldBeginWithName: @"pwd" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __pwd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__papersNo_isset) {
    if (__papersNo != nil) {
      [outProtocol writeFieldBeginWithName: @"papersNo" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __papersNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__papersTypeId_isset) {
    [outProtocol writeFieldBeginWithName: @"papersTypeId" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __papersTypeId];
    [outProtocol writeFieldEnd];
  }
  if (__medInsureance_isset) {
    if (__medInsureance != nil) {
      [outProtocol writeFieldBeginWithName: @"medInsureance" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __medInsureance];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stature_isset) {
    [outProtocol writeFieldBeginWithName: @"stature" type: TType_DOUBLE fieldID: 10];
    [outProtocol writeDouble: __stature];
    [outProtocol writeFieldEnd];
  }
  if (__weight_isset) {
    [outProtocol writeFieldBeginWithName: @"weight" type: TType_DOUBLE fieldID: 11];
    [outProtocol writeDouble: __weight];
    [outProtocol writeFieldEnd];
  }
  if (__bornDate_isset) {
    if (__bornDate != nil) {
      [outProtocol writeFieldBeginWithName: @"bornDate" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __bornDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__criticalIllness_isset) {
    if (__criticalIllness != nil) {
      [outProtocol writeFieldBeginWithName: @"criticalIllness" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __criticalIllness];
      [outProtocol writeFieldEnd];
    }
  }
  if (__allergicHistory_isset) {
    if (__allergicHistory != nil) {
      [outProtocol writeFieldBeginWithName: @"allergicHistory" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __allergicHistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__familyHistory_isset) {
    if (__familyHistory != nil) {
      [outProtocol writeFieldBeginWithName: @"familyHistory" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __familyHistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bloodType_isset) {
    [outProtocol writeFieldBeginWithName: @"bloodType" type: TType_I32 fieldID: 17];
    [outProtocol writeI32: __bloodType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFH5SignUpReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",phoneNo:"];
  [ms appendFormat: @"\"%@\"", __phoneNo];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",aliOpenId:"];
  [ms appendFormat: @"\"%@\"", __aliOpenId];
  [ms appendString: @",pwd:"];
  [ms appendFormat: @"\"%@\"", __pwd];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @",papersNo:"];
  [ms appendFormat: @"\"%@\"", __papersNo];
  [ms appendString: @",papersTypeId:"];
  [ms appendFormat: @"%i", __papersTypeId];
  [ms appendString: @",medInsureance:"];
  [ms appendFormat: @"\"%@\"", __medInsureance];
  [ms appendString: @",stature:"];
  [ms appendFormat: @"%f", __stature];
  [ms appendString: @",weight:"];
  [ms appendFormat: @"%f", __weight];
  [ms appendString: @",bornDate:"];
  [ms appendFormat: @"\"%@\"", __bornDate];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",criticalIllness:"];
  [ms appendFormat: @"\"%@\"", __criticalIllness];
  [ms appendString: @",allergicHistory:"];
  [ms appendFormat: @"\"%@\"", __allergicHistory];
  [ms appendString: @",familyHistory:"];
  [ms appendFormat: @"\"%@\"", __familyHistory];
  [ms appendString: @",bloodType:"];
  [ms appendFormat: @"%i", __bloodType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFH5SignInReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header phoneNo: (NSString *) phoneNo times: (int64_t) times aliOpenId: (NSString *) aliOpenId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __phoneNo = [phoneNo retain_stub];
  __phoneNo_isset = YES;
  __times = times;
  __times_isset = YES;
  __aliOpenId = [aliOpenId retain_stub];
  __aliOpenId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneNo"])
  {
    __phoneNo = [[decoder decodeObjectForKey: @"phoneNo"] retain_stub];
    __phoneNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"times"])
  {
    __times = [decoder decodeInt64ForKey: @"times"];
    __times_isset = YES;
  }
  if ([decoder containsValueForKey: @"aliOpenId"])
  {
    __aliOpenId = [[decoder decodeObjectForKey: @"aliOpenId"] retain_stub];
    __aliOpenId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__phoneNo_isset)
  {
    [encoder encodeObject: __phoneNo forKey: @"phoneNo"];
  }
  if (__times_isset)
  {
    [encoder encodeInt64: __times forKey: @"times"];
  }
  if (__aliOpenId_isset)
  {
    [encoder encodeObject: __aliOpenId forKey: @"aliOpenId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __phoneNo_isset ? 2654435761 : 0;
  if (__phoneNo_isset)
  {
    hash = (hash * 31) ^ [__phoneNo hash];
  }
  hash = (hash * 31) ^ __times_isset ? 2654435761 : 0;
  if (__times_isset)
  {
    hash = (hash * 31) ^ [@(__times) hash];
  }
  hash = (hash * 31) ^ __aliOpenId_isset ? 2654435761 : 0;
  if (__aliOpenId_isset)
  {
    hash = (hash * 31) ^ [__aliOpenId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFH5SignInReq class]]) {
    return NO;
  }
  NXTFH5SignInReq *other = (NXTFH5SignInReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__phoneNo_isset != other->__phoneNo_isset) ||
      (__phoneNo_isset && ((__phoneNo || other->__phoneNo) && ![__phoneNo isEqual:other->__phoneNo]))) {
    return NO;
  }
  if ((__times_isset != other->__times_isset) ||
      (__times_isset && (__times != other->__times))) {
    return NO;
  }
  if ((__aliOpenId_isset != other->__aliOpenId_isset) ||
      (__aliOpenId_isset && ((__aliOpenId || other->__aliOpenId) && ![__aliOpenId isEqual:other->__aliOpenId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__phoneNo release_stub];
  [__aliOpenId release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) phoneNo {
  return [[__phoneNo retain_stub] autorelease_stub];
}

- (void) setPhoneNo: (NSString *) phoneNo {
  [phoneNo retain_stub];
  [__phoneNo release_stub];
  __phoneNo = phoneNo;
  __phoneNo_isset = YES;
}

- (BOOL) phoneNoIsSet {
  return __phoneNo_isset;
}

- (void) unsetPhoneNo {
  [__phoneNo release_stub];
  __phoneNo = nil;
  __phoneNo_isset = NO;
}

- (int64_t) times {
  return __times;
}

- (void) setTimes: (int64_t) times {
  __times = times;
  __times_isset = YES;
}

- (BOOL) timesIsSet {
  return __times_isset;
}

- (void) unsetTimes {
  __times_isset = NO;
}

- (NSString *) aliOpenId {
  return [[__aliOpenId retain_stub] autorelease_stub];
}

- (void) setAliOpenId: (NSString *) aliOpenId {
  [aliOpenId retain_stub];
  [__aliOpenId release_stub];
  __aliOpenId = aliOpenId;
  __aliOpenId_isset = YES;
}

- (BOOL) aliOpenIdIsSet {
  return __aliOpenId_isset;
}

- (void) unsetAliOpenId {
  [__aliOpenId release_stub];
  __aliOpenId = nil;
  __aliOpenId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoneNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAliOpenId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"H5SignInReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phoneNo_isset) {
    if (__phoneNo != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __phoneNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__times_isset) {
    [outProtocol writeFieldBeginWithName: @"times" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __times];
    [outProtocol writeFieldEnd];
  }
  if (__aliOpenId_isset) {
    if (__aliOpenId != nil) {
      [outProtocol writeFieldBeginWithName: @"aliOpenId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __aliOpenId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFH5SignInReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",phoneNo:"];
  [ms appendFormat: @"\"%@\"", __phoneNo];
  [ms appendString: @",times:"];
  [ms appendFormat: @"%qi", __times];
  [ms appendString: @",aliOpenId:"];
  [ms appendFormat: @"\"%@\"", __aliOpenId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetHospReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetHospReq class]]) {
    return NO;
  }
  NXTFGetHospReq *other = (NXTFGetHospReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetHospReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetHospReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetReportsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header regId: (int64_t) regId hospId: (int32_t) hospId patientId: (int64_t) patientId reportType: (NSString *) reportType fromDate: (NSString *) fromDate toDate: (NSString *) toDate status: (int32_t) status page: (NXTFPage *) page
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __regId = regId;
  __regId_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __reportType = [reportType retain_stub];
  __reportType_isset = YES;
  __fromDate = [fromDate retain_stub];
  __fromDate_isset = YES;
  __toDate = [toDate retain_stub];
  __toDate_isset = YES;
  __status = status;
  __status_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [decoder decodeInt64ForKey: @"regId"];
    __regId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"reportType"])
  {
    __reportType = [[decoder decodeObjectForKey: @"reportType"] retain_stub];
    __reportType_isset = YES;
  }
  if ([decoder containsValueForKey: @"fromDate"])
  {
    __fromDate = [[decoder decodeObjectForKey: @"fromDate"] retain_stub];
    __fromDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"toDate"])
  {
    __toDate = [[decoder decodeObjectForKey: @"toDate"] retain_stub];
    __toDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeInt32ForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__regId_isset)
  {
    [encoder encodeInt64: __regId forKey: @"regId"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__reportType_isset)
  {
    [encoder encodeObject: __reportType forKey: @"reportType"];
  }
  if (__fromDate_isset)
  {
    [encoder encodeObject: __fromDate forKey: @"fromDate"];
  }
  if (__toDate_isset)
  {
    [encoder encodeObject: __toDate forKey: @"toDate"];
  }
  if (__status_isset)
  {
    [encoder encodeInt32: __status forKey: @"status"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [@(__regId) hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __reportType_isset ? 2654435761 : 0;
  if (__reportType_isset)
  {
    hash = (hash * 31) ^ [__reportType hash];
  }
  hash = (hash * 31) ^ __fromDate_isset ? 2654435761 : 0;
  if (__fromDate_isset)
  {
    hash = (hash * 31) ^ [__fromDate hash];
  }
  hash = (hash * 31) ^ __toDate_isset ? 2654435761 : 0;
  if (__toDate_isset)
  {
    hash = (hash * 31) ^ [__toDate hash];
  }
  hash = (hash * 31) ^ __status_isset ? 2654435761 : 0;
  if (__status_isset)
  {
    hash = (hash * 31) ^ [@(__status) hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetReportsReq class]]) {
    return NO;
  }
  NXTFGetReportsReq *other = (NXTFGetReportsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && (__regId != other->__regId))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__reportType_isset != other->__reportType_isset) ||
      (__reportType_isset && ((__reportType || other->__reportType) && ![__reportType isEqual:other->__reportType]))) {
    return NO;
  }
  if ((__fromDate_isset != other->__fromDate_isset) ||
      (__fromDate_isset && ((__fromDate || other->__fromDate) && ![__fromDate isEqual:other->__fromDate]))) {
    return NO;
  }
  if ((__toDate_isset != other->__toDate_isset) ||
      (__toDate_isset && ((__toDate || other->__toDate) && ![__toDate isEqual:other->__toDate]))) {
    return NO;
  }
  if ((__status_isset != other->__status_isset) ||
      (__status_isset && (__status != other->__status))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__reportType release_stub];
  [__fromDate release_stub];
  [__toDate release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) regId {
  return __regId;
}

- (void) setRegId: (int64_t) regId {
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  __regId_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (NSString *) reportType {
  return [[__reportType retain_stub] autorelease_stub];
}

- (void) setReportType: (NSString *) reportType {
  [reportType retain_stub];
  [__reportType release_stub];
  __reportType = reportType;
  __reportType_isset = YES;
}

- (BOOL) reportTypeIsSet {
  return __reportType_isset;
}

- (void) unsetReportType {
  [__reportType release_stub];
  __reportType = nil;
  __reportType_isset = NO;
}

- (NSString *) fromDate {
  return [[__fromDate retain_stub] autorelease_stub];
}

- (void) setFromDate: (NSString *) fromDate {
  [fromDate retain_stub];
  [__fromDate release_stub];
  __fromDate = fromDate;
  __fromDate_isset = YES;
}

- (BOOL) fromDateIsSet {
  return __fromDate_isset;
}

- (void) unsetFromDate {
  [__fromDate release_stub];
  __fromDate = nil;
  __fromDate_isset = NO;
}

- (NSString *) toDate {
  return [[__toDate retain_stub] autorelease_stub];
}

- (void) setToDate: (NSString *) toDate {
  [toDate retain_stub];
  [__toDate release_stub];
  __toDate = toDate;
  __toDate_isset = YES;
}

- (BOOL) toDateIsSet {
  return __toDate_isset;
}

- (void) unsetToDate {
  [__toDate release_stub];
  __toDate = nil;
  __toDate_isset = NO;
}

- (int32_t) status {
  return __status;
}

- (void) setStatus: (int32_t) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReportType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFromDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetReportsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    [outProtocol writeFieldBeginWithName: @"regId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __regId];
    [outProtocol writeFieldEnd];
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__reportType_isset) {
    if (__reportType != nil) {
      [outProtocol writeFieldBeginWithName: @"reportType" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __reportType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fromDate_isset) {
    if (__fromDate != nil) {
      [outProtocol writeFieldBeginWithName: @"fromDate" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __fromDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__toDate_isset) {
    if (__toDate != nil) {
      [outProtocol writeFieldBeginWithName: @"toDate" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __toDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 9];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetReportsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"%qi", __regId];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",reportType:"];
  [ms appendFormat: @"\"%@\"", __reportType];
  [ms appendString: @",fromDate:"];
  [ms appendFormat: @"\"%@\"", __fromDate];
  [ms appendString: @",toDate:"];
  [ms appendFormat: @"\"%@\"", __toDate];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFindDoctorsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.page = [[[NXTFPage alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header page: (NXTFPage *) page cityCode: (NSString *) cityCode cityName: (NSString *) cityName specialtyId: (int32_t) specialtyId hospType: (int32_t) hospType hospLevel: (int32_t) hospLevel comDeptId: (int32_t) comDeptId isExpert: (int32_t) isExpert isRecommend: (int32_t) isRecommend orderBy: (int32_t) orderBy isRegisted: (int32_t) isRegisted docName: (NSString *) docName hospId: (int32_t) hospId isConsulted: (int32_t) isConsulted docLevel: (int32_t) docLevel
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __cityCode = [cityCode retain_stub];
  __cityCode_isset = YES;
  __cityName = [cityName retain_stub];
  __cityName_isset = YES;
  __specialtyId = specialtyId;
  __specialtyId_isset = YES;
  __hospType = hospType;
  __hospType_isset = YES;
  __hospLevel = hospLevel;
  __hospLevel_isset = YES;
  __comDeptId = comDeptId;
  __comDeptId_isset = YES;
  __isExpert = isExpert;
  __isExpert_isset = YES;
  __isRecommend = isRecommend;
  __isRecommend_isset = YES;
  __orderBy = orderBy;
  __orderBy_isset = YES;
  __isRegisted = isRegisted;
  __isRegisted_isset = YES;
  __docName = [docName retain_stub];
  __docName_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __isConsulted = isConsulted;
  __isConsulted_isset = YES;
  __docLevel = docLevel;
  __docLevel_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"cityCode"])
  {
    __cityCode = [[decoder decodeObjectForKey: @"cityCode"] retain_stub];
    __cityCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"cityName"])
  {
    __cityName = [[decoder decodeObjectForKey: @"cityName"] retain_stub];
    __cityName_isset = YES;
  }
  if ([decoder containsValueForKey: @"specialtyId"])
  {
    __specialtyId = [decoder decodeInt32ForKey: @"specialtyId"];
    __specialtyId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospType"])
  {
    __hospType = [decoder decodeInt32ForKey: @"hospType"];
    __hospType_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospLevel"])
  {
    __hospLevel = [decoder decodeInt32ForKey: @"hospLevel"];
    __hospLevel_isset = YES;
  }
  if ([decoder containsValueForKey: @"comDeptId"])
  {
    __comDeptId = [decoder decodeInt32ForKey: @"comDeptId"];
    __comDeptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"isExpert"])
  {
    __isExpert = [decoder decodeInt32ForKey: @"isExpert"];
    __isExpert_isset = YES;
  }
  if ([decoder containsValueForKey: @"isRecommend"])
  {
    __isRecommend = [decoder decodeInt32ForKey: @"isRecommend"];
    __isRecommend_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderBy"])
  {
    __orderBy = [decoder decodeInt32ForKey: @"orderBy"];
    __orderBy_isset = YES;
  }
  if ([decoder containsValueForKey: @"isRegisted"])
  {
    __isRegisted = [decoder decodeInt32ForKey: @"isRegisted"];
    __isRegisted_isset = YES;
  }
  if ([decoder containsValueForKey: @"docName"])
  {
    __docName = [[decoder decodeObjectForKey: @"docName"] retain_stub];
    __docName_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"isConsulted"])
  {
    __isConsulted = [decoder decodeInt32ForKey: @"isConsulted"];
    __isConsulted_isset = YES;
  }
  if ([decoder containsValueForKey: @"docLevel"])
  {
    __docLevel = [decoder decodeInt32ForKey: @"docLevel"];
    __docLevel_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__cityCode_isset)
  {
    [encoder encodeObject: __cityCode forKey: @"cityCode"];
  }
  if (__cityName_isset)
  {
    [encoder encodeObject: __cityName forKey: @"cityName"];
  }
  if (__specialtyId_isset)
  {
    [encoder encodeInt32: __specialtyId forKey: @"specialtyId"];
  }
  if (__hospType_isset)
  {
    [encoder encodeInt32: __hospType forKey: @"hospType"];
  }
  if (__hospLevel_isset)
  {
    [encoder encodeInt32: __hospLevel forKey: @"hospLevel"];
  }
  if (__comDeptId_isset)
  {
    [encoder encodeInt32: __comDeptId forKey: @"comDeptId"];
  }
  if (__isExpert_isset)
  {
    [encoder encodeInt32: __isExpert forKey: @"isExpert"];
  }
  if (__isRecommend_isset)
  {
    [encoder encodeInt32: __isRecommend forKey: @"isRecommend"];
  }
  if (__orderBy_isset)
  {
    [encoder encodeInt32: __orderBy forKey: @"orderBy"];
  }
  if (__isRegisted_isset)
  {
    [encoder encodeInt32: __isRegisted forKey: @"isRegisted"];
  }
  if (__docName_isset)
  {
    [encoder encodeObject: __docName forKey: @"docName"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__isConsulted_isset)
  {
    [encoder encodeInt32: __isConsulted forKey: @"isConsulted"];
  }
  if (__docLevel_isset)
  {
    [encoder encodeInt32: __docLevel forKey: @"docLevel"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __cityCode_isset ? 2654435761 : 0;
  if (__cityCode_isset)
  {
    hash = (hash * 31) ^ [__cityCode hash];
  }
  hash = (hash * 31) ^ __cityName_isset ? 2654435761 : 0;
  if (__cityName_isset)
  {
    hash = (hash * 31) ^ [__cityName hash];
  }
  hash = (hash * 31) ^ __specialtyId_isset ? 2654435761 : 0;
  if (__specialtyId_isset)
  {
    hash = (hash * 31) ^ [@(__specialtyId) hash];
  }
  hash = (hash * 31) ^ __hospType_isset ? 2654435761 : 0;
  if (__hospType_isset)
  {
    hash = (hash * 31) ^ [@(__hospType) hash];
  }
  hash = (hash * 31) ^ __hospLevel_isset ? 2654435761 : 0;
  if (__hospLevel_isset)
  {
    hash = (hash * 31) ^ [@(__hospLevel) hash];
  }
  hash = (hash * 31) ^ __comDeptId_isset ? 2654435761 : 0;
  if (__comDeptId_isset)
  {
    hash = (hash * 31) ^ [@(__comDeptId) hash];
  }
  hash = (hash * 31) ^ __isExpert_isset ? 2654435761 : 0;
  if (__isExpert_isset)
  {
    hash = (hash * 31) ^ [@(__isExpert) hash];
  }
  hash = (hash * 31) ^ __isRecommend_isset ? 2654435761 : 0;
  if (__isRecommend_isset)
  {
    hash = (hash * 31) ^ [@(__isRecommend) hash];
  }
  hash = (hash * 31) ^ __orderBy_isset ? 2654435761 : 0;
  if (__orderBy_isset)
  {
    hash = (hash * 31) ^ [@(__orderBy) hash];
  }
  hash = (hash * 31) ^ __isRegisted_isset ? 2654435761 : 0;
  if (__isRegisted_isset)
  {
    hash = (hash * 31) ^ [@(__isRegisted) hash];
  }
  hash = (hash * 31) ^ __docName_isset ? 2654435761 : 0;
  if (__docName_isset)
  {
    hash = (hash * 31) ^ [__docName hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __isConsulted_isset ? 2654435761 : 0;
  if (__isConsulted_isset)
  {
    hash = (hash * 31) ^ [@(__isConsulted) hash];
  }
  hash = (hash * 31) ^ __docLevel_isset ? 2654435761 : 0;
  if (__docLevel_isset)
  {
    hash = (hash * 31) ^ [@(__docLevel) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFindDoctorsReq class]]) {
    return NO;
  }
  NXTFFindDoctorsReq *other = (NXTFFindDoctorsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__cityCode_isset != other->__cityCode_isset) ||
      (__cityCode_isset && ((__cityCode || other->__cityCode) && ![__cityCode isEqual:other->__cityCode]))) {
    return NO;
  }
  if ((__cityName_isset != other->__cityName_isset) ||
      (__cityName_isset && ((__cityName || other->__cityName) && ![__cityName isEqual:other->__cityName]))) {
    return NO;
  }
  if ((__specialtyId_isset != other->__specialtyId_isset) ||
      (__specialtyId_isset && (__specialtyId != other->__specialtyId))) {
    return NO;
  }
  if ((__hospType_isset != other->__hospType_isset) ||
      (__hospType_isset && (__hospType != other->__hospType))) {
    return NO;
  }
  if ((__hospLevel_isset != other->__hospLevel_isset) ||
      (__hospLevel_isset && (__hospLevel != other->__hospLevel))) {
    return NO;
  }
  if ((__comDeptId_isset != other->__comDeptId_isset) ||
      (__comDeptId_isset && (__comDeptId != other->__comDeptId))) {
    return NO;
  }
  if ((__isExpert_isset != other->__isExpert_isset) ||
      (__isExpert_isset && (__isExpert != other->__isExpert))) {
    return NO;
  }
  if ((__isRecommend_isset != other->__isRecommend_isset) ||
      (__isRecommend_isset && (__isRecommend != other->__isRecommend))) {
    return NO;
  }
  if ((__orderBy_isset != other->__orderBy_isset) ||
      (__orderBy_isset && (__orderBy != other->__orderBy))) {
    return NO;
  }
  if ((__isRegisted_isset != other->__isRegisted_isset) ||
      (__isRegisted_isset && (__isRegisted != other->__isRegisted))) {
    return NO;
  }
  if ((__docName_isset != other->__docName_isset) ||
      (__docName_isset && ((__docName || other->__docName) && ![__docName isEqual:other->__docName]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__isConsulted_isset != other->__isConsulted_isset) ||
      (__isConsulted_isset && (__isConsulted != other->__isConsulted))) {
    return NO;
  }
  if ((__docLevel_isset != other->__docLevel_isset) ||
      (__docLevel_isset && (__docLevel != other->__docLevel))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__cityCode release_stub];
  [__cityName release_stub];
  [__docName release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSString *) cityCode {
  return [[__cityCode retain_stub] autorelease_stub];
}

- (void) setCityCode: (NSString *) cityCode {
  [cityCode retain_stub];
  [__cityCode release_stub];
  __cityCode = cityCode;
  __cityCode_isset = YES;
}

- (BOOL) cityCodeIsSet {
  return __cityCode_isset;
}

- (void) unsetCityCode {
  [__cityCode release_stub];
  __cityCode = nil;
  __cityCode_isset = NO;
}

- (NSString *) cityName {
  return [[__cityName retain_stub] autorelease_stub];
}

- (void) setCityName: (NSString *) cityName {
  [cityName retain_stub];
  [__cityName release_stub];
  __cityName = cityName;
  __cityName_isset = YES;
}

- (BOOL) cityNameIsSet {
  return __cityName_isset;
}

- (void) unsetCityName {
  [__cityName release_stub];
  __cityName = nil;
  __cityName_isset = NO;
}

- (int32_t) specialtyId {
  return __specialtyId;
}

- (void) setSpecialtyId: (int32_t) specialtyId {
  __specialtyId = specialtyId;
  __specialtyId_isset = YES;
}

- (BOOL) specialtyIdIsSet {
  return __specialtyId_isset;
}

- (void) unsetSpecialtyId {
  __specialtyId_isset = NO;
}

- (int32_t) hospType {
  return __hospType;
}

- (void) setHospType: (int32_t) hospType {
  __hospType = hospType;
  __hospType_isset = YES;
}

- (BOOL) hospTypeIsSet {
  return __hospType_isset;
}

- (void) unsetHospType {
  __hospType_isset = NO;
}

- (int32_t) hospLevel {
  return __hospLevel;
}

- (void) setHospLevel: (int32_t) hospLevel {
  __hospLevel = hospLevel;
  __hospLevel_isset = YES;
}

- (BOOL) hospLevelIsSet {
  return __hospLevel_isset;
}

- (void) unsetHospLevel {
  __hospLevel_isset = NO;
}

- (int32_t) comDeptId {
  return __comDeptId;
}

- (void) setComDeptId: (int32_t) comDeptId {
  __comDeptId = comDeptId;
  __comDeptId_isset = YES;
}

- (BOOL) comDeptIdIsSet {
  return __comDeptId_isset;
}

- (void) unsetComDeptId {
  __comDeptId_isset = NO;
}

- (int32_t) isExpert {
  return __isExpert;
}

- (void) setIsExpert: (int32_t) isExpert {
  __isExpert = isExpert;
  __isExpert_isset = YES;
}

- (BOOL) isExpertIsSet {
  return __isExpert_isset;
}

- (void) unsetIsExpert {
  __isExpert_isset = NO;
}

- (int32_t) isRecommend {
  return __isRecommend;
}

- (void) setIsRecommend: (int32_t) isRecommend {
  __isRecommend = isRecommend;
  __isRecommend_isset = YES;
}

- (BOOL) isRecommendIsSet {
  return __isRecommend_isset;
}

- (void) unsetIsRecommend {
  __isRecommend_isset = NO;
}

- (int32_t) orderBy {
  return __orderBy;
}

- (void) setOrderBy: (int32_t) orderBy {
  __orderBy = orderBy;
  __orderBy_isset = YES;
}

- (BOOL) orderByIsSet {
  return __orderBy_isset;
}

- (void) unsetOrderBy {
  __orderBy_isset = NO;
}

- (int32_t) isRegisted {
  return __isRegisted;
}

- (void) setIsRegisted: (int32_t) isRegisted {
  __isRegisted = isRegisted;
  __isRegisted_isset = YES;
}

- (BOOL) isRegistedIsSet {
  return __isRegisted_isset;
}

- (void) unsetIsRegisted {
  __isRegisted_isset = NO;
}

- (NSString *) docName {
  return [[__docName retain_stub] autorelease_stub];
}

- (void) setDocName: (NSString *) docName {
  [docName retain_stub];
  [__docName release_stub];
  __docName = docName;
  __docName_isset = YES;
}

- (BOOL) docNameIsSet {
  return __docName_isset;
}

- (void) unsetDocName {
  [__docName release_stub];
  __docName = nil;
  __docName_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int32_t) isConsulted {
  return __isConsulted;
}

- (void) setIsConsulted: (int32_t) isConsulted {
  __isConsulted = isConsulted;
  __isConsulted_isset = YES;
}

- (BOOL) isConsultedIsSet {
  return __isConsulted_isset;
}

- (void) unsetIsConsulted {
  __isConsulted_isset = NO;
}

- (int32_t) docLevel {
  return __docLevel;
}

- (void) setDocLevel: (int32_t) docLevel {
  __docLevel = docLevel;
  __docLevel_isset = YES;
}

- (BOOL) docLevelIsSet {
  return __docLevel_isset;
}

- (void) unsetDocLevel {
  __docLevel_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCityCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCityName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSpecialtyId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospLevel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setComDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsExpert: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsRecommend: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOrderBy: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsRegisted: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDocName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsConsulted: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDocLevel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FindDoctorsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cityCode_isset) {
    if (__cityCode != nil) {
      [outProtocol writeFieldBeginWithName: @"cityCode" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __cityCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cityName_isset) {
    if (__cityName != nil) {
      [outProtocol writeFieldBeginWithName: @"cityName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __cityName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__specialtyId_isset) {
    [outProtocol writeFieldBeginWithName: @"specialtyId" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __specialtyId];
    [outProtocol writeFieldEnd];
  }
  if (__hospType_isset) {
    [outProtocol writeFieldBeginWithName: @"hospType" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __hospType];
    [outProtocol writeFieldEnd];
  }
  if (__hospLevel_isset) {
    [outProtocol writeFieldBeginWithName: @"hospLevel" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __hospLevel];
    [outProtocol writeFieldEnd];
  }
  if (__comDeptId_isset) {
    [outProtocol writeFieldBeginWithName: @"comDeptId" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __comDeptId];
    [outProtocol writeFieldEnd];
  }
  if (__isExpert_isset) {
    [outProtocol writeFieldBeginWithName: @"isExpert" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __isExpert];
    [outProtocol writeFieldEnd];
  }
  if (__isRecommend_isset) {
    [outProtocol writeFieldBeginWithName: @"isRecommend" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __isRecommend];
    [outProtocol writeFieldEnd];
  }
  if (__orderBy_isset) {
    [outProtocol writeFieldBeginWithName: @"orderBy" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __orderBy];
    [outProtocol writeFieldEnd];
  }
  if (__isRegisted_isset) {
    [outProtocol writeFieldBeginWithName: @"isRegisted" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __isRegisted];
    [outProtocol writeFieldEnd];
  }
  if (__docName_isset) {
    if (__docName != nil) {
      [outProtocol writeFieldBeginWithName: @"docName" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __docName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 14];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__isConsulted_isset) {
    [outProtocol writeFieldBeginWithName: @"isConsulted" type: TType_I32 fieldID: 15];
    [outProtocol writeI32: __isConsulted];
    [outProtocol writeFieldEnd];
  }
  if (__docLevel_isset) {
    [outProtocol writeFieldBeginWithName: @"docLevel" type: TType_I32 fieldID: 16];
    [outProtocol writeI32: __docLevel];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFindDoctorsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",cityCode:"];
  [ms appendFormat: @"\"%@\"", __cityCode];
  [ms appendString: @",cityName:"];
  [ms appendFormat: @"\"%@\"", __cityName];
  [ms appendString: @",specialtyId:"];
  [ms appendFormat: @"%i", __specialtyId];
  [ms appendString: @",hospType:"];
  [ms appendFormat: @"%i", __hospType];
  [ms appendString: @",hospLevel:"];
  [ms appendFormat: @"%i", __hospLevel];
  [ms appendString: @",comDeptId:"];
  [ms appendFormat: @"%i", __comDeptId];
  [ms appendString: @",isExpert:"];
  [ms appendFormat: @"%i", __isExpert];
  [ms appendString: @",isRecommend:"];
  [ms appendFormat: @"%i", __isRecommend];
  [ms appendString: @",orderBy:"];
  [ms appendFormat: @"%i", __orderBy];
  [ms appendString: @",isRegisted:"];
  [ms appendFormat: @"%i", __isRegisted];
  [ms appendString: @",docName:"];
  [ms appendFormat: @"\"%@\"", __docName];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",isConsulted:"];
  [ms appendFormat: @"%i", __isConsulted];
  [ms appendString: @",docLevel:"];
  [ms appendFormat: @"%i", __docLevel];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFSignInReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.signInMode = 1;

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header phoneNo: (NSString *) phoneNo pwd: (NSString *) pwd signInMode: (int32_t) signInMode authCode: (NSString *) authCode signTypeName: (NSString *) signTypeName
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __phoneNo = [phoneNo retain_stub];
  __phoneNo_isset = YES;
  __pwd = [pwd retain_stub];
  __pwd_isset = YES;
  __signInMode = signInMode;
  __signInMode_isset = YES;
  __authCode = [authCode retain_stub];
  __authCode_isset = YES;
  __signTypeName = [signTypeName retain_stub];
  __signTypeName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneNo"])
  {
    __phoneNo = [[decoder decodeObjectForKey: @"phoneNo"] retain_stub];
    __phoneNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"pwd"])
  {
    __pwd = [[decoder decodeObjectForKey: @"pwd"] retain_stub];
    __pwd_isset = YES;
  }
  if ([decoder containsValueForKey: @"signInMode"])
  {
    __signInMode = [decoder decodeInt32ForKey: @"signInMode"];
    __signInMode_isset = YES;
  }
  if ([decoder containsValueForKey: @"authCode"])
  {
    __authCode = [[decoder decodeObjectForKey: @"authCode"] retain_stub];
    __authCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"signTypeName"])
  {
    __signTypeName = [[decoder decodeObjectForKey: @"signTypeName"] retain_stub];
    __signTypeName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__phoneNo_isset)
  {
    [encoder encodeObject: __phoneNo forKey: @"phoneNo"];
  }
  if (__pwd_isset)
  {
    [encoder encodeObject: __pwd forKey: @"pwd"];
  }
  if (__signInMode_isset)
  {
    [encoder encodeInt32: __signInMode forKey: @"signInMode"];
  }
  if (__authCode_isset)
  {
    [encoder encodeObject: __authCode forKey: @"authCode"];
  }
  if (__signTypeName_isset)
  {
    [encoder encodeObject: __signTypeName forKey: @"signTypeName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __phoneNo_isset ? 2654435761 : 0;
  if (__phoneNo_isset)
  {
    hash = (hash * 31) ^ [__phoneNo hash];
  }
  hash = (hash * 31) ^ __pwd_isset ? 2654435761 : 0;
  if (__pwd_isset)
  {
    hash = (hash * 31) ^ [__pwd hash];
  }
  hash = (hash * 31) ^ __signInMode_isset ? 2654435761 : 0;
  if (__signInMode_isset)
  {
    hash = (hash * 31) ^ [@(__signInMode) hash];
  }
  hash = (hash * 31) ^ __authCode_isset ? 2654435761 : 0;
  if (__authCode_isset)
  {
    hash = (hash * 31) ^ [__authCode hash];
  }
  hash = (hash * 31) ^ __signTypeName_isset ? 2654435761 : 0;
  if (__signTypeName_isset)
  {
    hash = (hash * 31) ^ [__signTypeName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFSignInReq class]]) {
    return NO;
  }
  NXTFSignInReq *other = (NXTFSignInReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__phoneNo_isset != other->__phoneNo_isset) ||
      (__phoneNo_isset && ((__phoneNo || other->__phoneNo) && ![__phoneNo isEqual:other->__phoneNo]))) {
    return NO;
  }
  if ((__pwd_isset != other->__pwd_isset) ||
      (__pwd_isset && ((__pwd || other->__pwd) && ![__pwd isEqual:other->__pwd]))) {
    return NO;
  }
  if ((__signInMode_isset != other->__signInMode_isset) ||
      (__signInMode_isset && (__signInMode != other->__signInMode))) {
    return NO;
  }
  if ((__authCode_isset != other->__authCode_isset) ||
      (__authCode_isset && ((__authCode || other->__authCode) && ![__authCode isEqual:other->__authCode]))) {
    return NO;
  }
  if ((__signTypeName_isset != other->__signTypeName_isset) ||
      (__signTypeName_isset && ((__signTypeName || other->__signTypeName) && ![__signTypeName isEqual:other->__signTypeName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__phoneNo release_stub];
  [__pwd release_stub];
  [__authCode release_stub];
  [__signTypeName release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) phoneNo {
  return [[__phoneNo retain_stub] autorelease_stub];
}

- (void) setPhoneNo: (NSString *) phoneNo {
  [phoneNo retain_stub];
  [__phoneNo release_stub];
  __phoneNo = phoneNo;
  __phoneNo_isset = YES;
}

- (BOOL) phoneNoIsSet {
  return __phoneNo_isset;
}

- (void) unsetPhoneNo {
  [__phoneNo release_stub];
  __phoneNo = nil;
  __phoneNo_isset = NO;
}

- (NSString *) pwd {
  return [[__pwd retain_stub] autorelease_stub];
}

- (void) setPwd: (NSString *) pwd {
  [pwd retain_stub];
  [__pwd release_stub];
  __pwd = pwd;
  __pwd_isset = YES;
}

- (BOOL) pwdIsSet {
  return __pwd_isset;
}

- (void) unsetPwd {
  [__pwd release_stub];
  __pwd = nil;
  __pwd_isset = NO;
}

- (int32_t) signInMode {
  return __signInMode;
}

- (void) setSignInMode: (int32_t) signInMode {
  __signInMode = signInMode;
  __signInMode_isset = YES;
}

- (BOOL) signInModeIsSet {
  return __signInMode_isset;
}

- (void) unsetSignInMode {
  __signInMode_isset = NO;
}

- (NSString *) authCode {
  return [[__authCode retain_stub] autorelease_stub];
}

- (void) setAuthCode: (NSString *) authCode {
  [authCode retain_stub];
  [__authCode release_stub];
  __authCode = authCode;
  __authCode_isset = YES;
}

- (BOOL) authCodeIsSet {
  return __authCode_isset;
}

- (void) unsetAuthCode {
  [__authCode release_stub];
  __authCode = nil;
  __authCode_isset = NO;
}

- (NSString *) signTypeName {
  return [[__signTypeName retain_stub] autorelease_stub];
}

- (void) setSignTypeName: (NSString *) signTypeName {
  [signTypeName retain_stub];
  [__signTypeName release_stub];
  __signTypeName = signTypeName;
  __signTypeName_isset = YES;
}

- (BOOL) signTypeNameIsSet {
  return __signTypeName_isset;
}

- (void) unsetSignTypeName {
  [__signTypeName release_stub];
  __signTypeName = nil;
  __signTypeName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoneNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSignInMode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSignTypeName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignInReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phoneNo_isset) {
    if (__phoneNo != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __phoneNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pwd_isset) {
    if (__pwd != nil) {
      [outProtocol writeFieldBeginWithName: @"pwd" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __pwd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__signInMode_isset) {
    [outProtocol writeFieldBeginWithName: @"signInMode" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __signInMode];
    [outProtocol writeFieldEnd];
  }
  if (__authCode_isset) {
    if (__authCode != nil) {
      [outProtocol writeFieldBeginWithName: @"authCode" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __authCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__signTypeName_isset) {
    if (__signTypeName != nil) {
      [outProtocol writeFieldBeginWithName: @"signTypeName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __signTypeName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFSignInReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",phoneNo:"];
  [ms appendFormat: @"\"%@\"", __phoneNo];
  [ms appendString: @",pwd:"];
  [ms appendFormat: @"\"%@\"", __pwd];
  [ms appendString: @",signInMode:"];
  [ms appendFormat: @"%i", __signInMode];
  [ms appendString: @",authCode:"];
  [ms appendFormat: @"\"%@\"", __authCode];
  [ms appendString: @",signTypeName:"];
  [ms appendFormat: @"\"%@\"", __signTypeName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetGuideReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetGuideReq class]]) {
    return NO;
  }
  NXTFGetGuideReq *other = (NXTFGetGuideReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetGuideReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetGuideReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFOrderRecipeReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId patientId: (int64_t) patientId regNo: (NSString *) regNo recipeIds: (NSMutableSet *) recipeIds regId: (int64_t) regId scheduleType: (int32_t) scheduleType
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __regNo = [regNo retain_stub];
  __regNo_isset = YES;
  __recipeIds = [recipeIds retain_stub];
  __recipeIds_isset = YES;
  __regId = regId;
  __regId_isset = YES;
  __scheduleType = scheduleType;
  __scheduleType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"regNo"])
  {
    __regNo = [[decoder decodeObjectForKey: @"regNo"] retain_stub];
    __regNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"recipeIds"])
  {
    __recipeIds = [[decoder decodeObjectForKey: @"recipeIds"] retain_stub];
    __recipeIds_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [decoder decodeInt64ForKey: @"regId"];
    __regId_isset = YES;
  }
  if ([decoder containsValueForKey: @"scheduleType"])
  {
    __scheduleType = [decoder decodeInt32ForKey: @"scheduleType"];
    __scheduleType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__regNo_isset)
  {
    [encoder encodeObject: __regNo forKey: @"regNo"];
  }
  if (__recipeIds_isset)
  {
    [encoder encodeObject: __recipeIds forKey: @"recipeIds"];
  }
  if (__regId_isset)
  {
    [encoder encodeInt64: __regId forKey: @"regId"];
  }
  if (__scheduleType_isset)
  {
    [encoder encodeInt32: __scheduleType forKey: @"scheduleType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __regNo_isset ? 2654435761 : 0;
  if (__regNo_isset)
  {
    hash = (hash * 31) ^ [__regNo hash];
  }
  hash = (hash * 31) ^ __recipeIds_isset ? 2654435761 : 0;
  if (__recipeIds_isset)
  {
    hash = (hash * 31) ^ [__recipeIds hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [@(__regId) hash];
  }
  hash = (hash * 31) ^ __scheduleType_isset ? 2654435761 : 0;
  if (__scheduleType_isset)
  {
    hash = (hash * 31) ^ [@(__scheduleType) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFOrderRecipeReq class]]) {
    return NO;
  }
  NXTFOrderRecipeReq *other = (NXTFOrderRecipeReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__regNo_isset != other->__regNo_isset) ||
      (__regNo_isset && ((__regNo || other->__regNo) && ![__regNo isEqual:other->__regNo]))) {
    return NO;
  }
  if ((__recipeIds_isset != other->__recipeIds_isset) ||
      (__recipeIds_isset && ((__recipeIds || other->__recipeIds) && ![__recipeIds isEqual:other->__recipeIds]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && (__regId != other->__regId))) {
    return NO;
  }
  if ((__scheduleType_isset != other->__scheduleType_isset) ||
      (__scheduleType_isset && (__scheduleType != other->__scheduleType))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__regNo release_stub];
  [__recipeIds release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (NSString *) regNo {
  return [[__regNo retain_stub] autorelease_stub];
}

- (void) setRegNo: (NSString *) regNo {
  [regNo retain_stub];
  [__regNo release_stub];
  __regNo = regNo;
  __regNo_isset = YES;
}

- (BOOL) regNoIsSet {
  return __regNo_isset;
}

- (void) unsetRegNo {
  [__regNo release_stub];
  __regNo = nil;
  __regNo_isset = NO;
}

- (NSMutableSet *) recipeIds {
  return [[__recipeIds retain_stub] autorelease_stub];
}

- (void) setRecipeIds: (NSMutableSet *) recipeIds {
  [recipeIds retain_stub];
  [__recipeIds release_stub];
  __recipeIds = recipeIds;
  __recipeIds_isset = YES;
}

- (BOOL) recipeIdsIsSet {
  return __recipeIds_isset;
}

- (void) unsetRecipeIds {
  [__recipeIds release_stub];
  __recipeIds = nil;
  __recipeIds_isset = NO;
}

- (int64_t) regId {
  return __regId;
}

- (void) setRegId: (int64_t) regId {
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  __regId_isset = NO;
}

- (int32_t) scheduleType {
  return __scheduleType;
}

- (void) setScheduleType: (int32_t) scheduleType {
  __scheduleType = scheduleType;
  __scheduleType_isset = YES;
}

- (BOOL) scheduleTypeIsSet {
  return __scheduleType_isset;
}

- (void) unsetScheduleType {
  __scheduleType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_SET) {
          int _size25;
          [inProtocol readSetBeginReturningElementType: NULL size: &_size25];
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            int64_t _elem27 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem27]];
          }
          [inProtocol readSetEnd];
          [self setRecipeIds: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setScheduleType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OrderRecipeReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__regNo_isset) {
    if (__regNo != nil) {
      [outProtocol writeFieldBeginWithName: @"regNo" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __regNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__recipeIds_isset) {
    if (__recipeIds != nil) {
      [outProtocol writeFieldBeginWithName: @"recipeIds" type: TType_SET fieldID: 5];
      {
        [outProtocol writeSetBeginWithElementType: TType_I64 size: [__recipeIds count]];
        NSEnumerator * _iter28 = [__recipeIds objectEnumerator];
        id obj29;
        while ((obj29 = [_iter28 nextObject]))
        {
          [outProtocol writeI64: [obj29 longLongValue]];
        }
        [outProtocol writeSetEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    [outProtocol writeFieldBeginWithName: @"regId" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __regId];
    [outProtocol writeFieldEnd];
  }
  if (__scheduleType_isset) {
    [outProtocol writeFieldBeginWithName: @"scheduleType" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __scheduleType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFOrderRecipeReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",regNo:"];
  [ms appendFormat: @"\"%@\"", __regNo];
  [ms appendString: @",recipeIds:"];
  [ms appendFormat: @"%@", __recipeIds];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"%qi", __regId];
  [ms appendString: @",scheduleType:"];
  [ms appendFormat: @"%i", __scheduleType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetQueReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientId: (int64_t) patientId hospId: (int32_t) hospId mode: (int32_t) mode
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __mode = mode;
  __mode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"mode"])
  {
    __mode = [decoder decodeInt32ForKey: @"mode"];
    __mode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__mode_isset)
  {
    [encoder encodeInt32: __mode forKey: @"mode"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __mode_isset ? 2654435761 : 0;
  if (__mode_isset)
  {
    hash = (hash * 31) ^ [@(__mode) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetQueReq class]]) {
    return NO;
  }
  NXTFGetQueReq *other = (NXTFGetQueReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__mode_isset != other->__mode_isset) ||
      (__mode_isset && (__mode != other->__mode))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int32_t) mode {
  return __mode;
}

- (void) setMode: (int32_t) mode {
  __mode = mode;
  __mode_isset = YES;
}

- (BOOL) modeIsSet {
  return __mode_isset;
}

- (void) unsetMode {
  __mode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetQueReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__mode_isset) {
    [outProtocol writeFieldBeginWithName: @"mode" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __mode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetQueReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",mode:"];
  [ms appendFormat: @"%i", __mode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetRecipesReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header regId: (int64_t) regId patientId: (int64_t) patientId hospId: (int32_t) hospId payStatus: (int32_t) payStatus fromDate: (NSString *) fromDate toDate: (NSString *) toDate
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __regId = regId;
  __regId_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __payStatus = payStatus;
  __payStatus_isset = YES;
  __fromDate = [fromDate retain_stub];
  __fromDate_isset = YES;
  __toDate = [toDate retain_stub];
  __toDate_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [decoder decodeInt64ForKey: @"regId"];
    __regId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"payStatus"])
  {
    __payStatus = [decoder decodeInt32ForKey: @"payStatus"];
    __payStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"fromDate"])
  {
    __fromDate = [[decoder decodeObjectForKey: @"fromDate"] retain_stub];
    __fromDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"toDate"])
  {
    __toDate = [[decoder decodeObjectForKey: @"toDate"] retain_stub];
    __toDate_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__regId_isset)
  {
    [encoder encodeInt64: __regId forKey: @"regId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__payStatus_isset)
  {
    [encoder encodeInt32: __payStatus forKey: @"payStatus"];
  }
  if (__fromDate_isset)
  {
    [encoder encodeObject: __fromDate forKey: @"fromDate"];
  }
  if (__toDate_isset)
  {
    [encoder encodeObject: __toDate forKey: @"toDate"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [@(__regId) hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __payStatus_isset ? 2654435761 : 0;
  if (__payStatus_isset)
  {
    hash = (hash * 31) ^ [@(__payStatus) hash];
  }
  hash = (hash * 31) ^ __fromDate_isset ? 2654435761 : 0;
  if (__fromDate_isset)
  {
    hash = (hash * 31) ^ [__fromDate hash];
  }
  hash = (hash * 31) ^ __toDate_isset ? 2654435761 : 0;
  if (__toDate_isset)
  {
    hash = (hash * 31) ^ [__toDate hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetRecipesReq class]]) {
    return NO;
  }
  NXTFGetRecipesReq *other = (NXTFGetRecipesReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && (__regId != other->__regId))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__payStatus_isset != other->__payStatus_isset) ||
      (__payStatus_isset && (__payStatus != other->__payStatus))) {
    return NO;
  }
  if ((__fromDate_isset != other->__fromDate_isset) ||
      (__fromDate_isset && ((__fromDate || other->__fromDate) && ![__fromDate isEqual:other->__fromDate]))) {
    return NO;
  }
  if ((__toDate_isset != other->__toDate_isset) ||
      (__toDate_isset && ((__toDate || other->__toDate) && ![__toDate isEqual:other->__toDate]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__fromDate release_stub];
  [__toDate release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) regId {
  return __regId;
}

- (void) setRegId: (int64_t) regId {
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  __regId_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int32_t) payStatus {
  return __payStatus;
}

- (void) setPayStatus: (int32_t) payStatus {
  __payStatus = payStatus;
  __payStatus_isset = YES;
}

- (BOOL) payStatusIsSet {
  return __payStatus_isset;
}

- (void) unsetPayStatus {
  __payStatus_isset = NO;
}

- (NSString *) fromDate {
  return [[__fromDate retain_stub] autorelease_stub];
}

- (void) setFromDate: (NSString *) fromDate {
  [fromDate retain_stub];
  [__fromDate release_stub];
  __fromDate = fromDate;
  __fromDate_isset = YES;
}

- (BOOL) fromDateIsSet {
  return __fromDate_isset;
}

- (void) unsetFromDate {
  [__fromDate release_stub];
  __fromDate = nil;
  __fromDate_isset = NO;
}

- (NSString *) toDate {
  return [[__toDate retain_stub] autorelease_stub];
}

- (void) setToDate: (NSString *) toDate {
  [toDate retain_stub];
  [__toDate release_stub];
  __toDate = toDate;
  __toDate_isset = YES;
}

- (BOOL) toDateIsSet {
  return __toDate_isset;
}

- (void) unsetToDate {
  [__toDate release_stub];
  __toDate = nil;
  __toDate_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPayStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFromDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRecipesReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    [outProtocol writeFieldBeginWithName: @"regId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __regId];
    [outProtocol writeFieldEnd];
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__payStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"payStatus" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __payStatus];
    [outProtocol writeFieldEnd];
  }
  if (__fromDate_isset) {
    if (__fromDate != nil) {
      [outProtocol writeFieldBeginWithName: @"fromDate" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __fromDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__toDate_isset) {
    if (__toDate != nil) {
      [outProtocol writeFieldBeginWithName: @"toDate" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __toDate];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetRecipesReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"%qi", __regId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",payStatus:"];
  [ms appendFormat: @"%i", __payStatus];
  [ms appendString: @",fromDate:"];
  [ms appendFormat: @"\"%@\"", __fromDate];
  [ms appendString: @",toDate:"];
  [ms appendFormat: @"\"%@\"", __toDate];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetSpecialtiesReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetSpecialtiesReq class]]) {
    return NO;
  }
  NXTFGetSpecialtiesReq *other = (NXTFGetSpecialtiesReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetSpecialtiesReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetSpecialtiesReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetPrefReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetPrefReq class]]) {
    return NO;
  }
  NXTFGetPrefReq *other = (NXTFGetPrefReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPrefReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetPrefReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGDSearchReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.page = [[[NXTFPage alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header page: (NXTFPage *) page cityName: (NSString *) cityName searchText: (NSString *) searchText searchType: (int32_t) searchType cityCode: (NSString *) cityCode
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __cityName = [cityName retain_stub];
  __cityName_isset = YES;
  __searchText = [searchText retain_stub];
  __searchText_isset = YES;
  __searchType = searchType;
  __searchType_isset = YES;
  __cityCode = [cityCode retain_stub];
  __cityCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"cityName"])
  {
    __cityName = [[decoder decodeObjectForKey: @"cityName"] retain_stub];
    __cityName_isset = YES;
  }
  if ([decoder containsValueForKey: @"searchText"])
  {
    __searchText = [[decoder decodeObjectForKey: @"searchText"] retain_stub];
    __searchText_isset = YES;
  }
  if ([decoder containsValueForKey: @"searchType"])
  {
    __searchType = [decoder decodeInt32ForKey: @"searchType"];
    __searchType_isset = YES;
  }
  if ([decoder containsValueForKey: @"cityCode"])
  {
    __cityCode = [[decoder decodeObjectForKey: @"cityCode"] retain_stub];
    __cityCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__cityName_isset)
  {
    [encoder encodeObject: __cityName forKey: @"cityName"];
  }
  if (__searchText_isset)
  {
    [encoder encodeObject: __searchText forKey: @"searchText"];
  }
  if (__searchType_isset)
  {
    [encoder encodeInt32: __searchType forKey: @"searchType"];
  }
  if (__cityCode_isset)
  {
    [encoder encodeObject: __cityCode forKey: @"cityCode"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __cityName_isset ? 2654435761 : 0;
  if (__cityName_isset)
  {
    hash = (hash * 31) ^ [__cityName hash];
  }
  hash = (hash * 31) ^ __searchText_isset ? 2654435761 : 0;
  if (__searchText_isset)
  {
    hash = (hash * 31) ^ [__searchText hash];
  }
  hash = (hash * 31) ^ __searchType_isset ? 2654435761 : 0;
  if (__searchType_isset)
  {
    hash = (hash * 31) ^ [@(__searchType) hash];
  }
  hash = (hash * 31) ^ __cityCode_isset ? 2654435761 : 0;
  if (__cityCode_isset)
  {
    hash = (hash * 31) ^ [__cityCode hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGDSearchReq class]]) {
    return NO;
  }
  NXTFGDSearchReq *other = (NXTFGDSearchReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__cityName_isset != other->__cityName_isset) ||
      (__cityName_isset && ((__cityName || other->__cityName) && ![__cityName isEqual:other->__cityName]))) {
    return NO;
  }
  if ((__searchText_isset != other->__searchText_isset) ||
      (__searchText_isset && ((__searchText || other->__searchText) && ![__searchText isEqual:other->__searchText]))) {
    return NO;
  }
  if ((__searchType_isset != other->__searchType_isset) ||
      (__searchType_isset && (__searchType != other->__searchType))) {
    return NO;
  }
  if ((__cityCode_isset != other->__cityCode_isset) ||
      (__cityCode_isset && ((__cityCode || other->__cityCode) && ![__cityCode isEqual:other->__cityCode]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__cityName release_stub];
  [__searchText release_stub];
  [__cityCode release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSString *) cityName {
  return [[__cityName retain_stub] autorelease_stub];
}

- (void) setCityName: (NSString *) cityName {
  [cityName retain_stub];
  [__cityName release_stub];
  __cityName = cityName;
  __cityName_isset = YES;
}

- (BOOL) cityNameIsSet {
  return __cityName_isset;
}

- (void) unsetCityName {
  [__cityName release_stub];
  __cityName = nil;
  __cityName_isset = NO;
}

- (NSString *) searchText {
  return [[__searchText retain_stub] autorelease_stub];
}

- (void) setSearchText: (NSString *) searchText {
  [searchText retain_stub];
  [__searchText release_stub];
  __searchText = searchText;
  __searchText_isset = YES;
}

- (BOOL) searchTextIsSet {
  return __searchText_isset;
}

- (void) unsetSearchText {
  [__searchText release_stub];
  __searchText = nil;
  __searchText_isset = NO;
}

- (int32_t) searchType {
  return __searchType;
}

- (void) setSearchType: (int32_t) searchType {
  __searchType = searchType;
  __searchType_isset = YES;
}

- (BOOL) searchTypeIsSet {
  return __searchType_isset;
}

- (void) unsetSearchType {
  __searchType_isset = NO;
}

- (NSString *) cityCode {
  return [[__cityCode retain_stub] autorelease_stub];
}

- (void) setCityCode: (NSString *) cityCode {
  [cityCode retain_stub];
  [__cityCode release_stub];
  __cityCode = cityCode;
  __cityCode_isset = YES;
}

- (BOOL) cityCodeIsSet {
  return __cityCode_isset;
}

- (void) unsetCityCode {
  [__cityCode release_stub];
  __cityCode = nil;
  __cityCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCityName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSearchText: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSearchType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCityCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GDSearchReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cityName_isset) {
    if (__cityName != nil) {
      [outProtocol writeFieldBeginWithName: @"cityName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __cityName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__searchText_isset) {
    if (__searchText != nil) {
      [outProtocol writeFieldBeginWithName: @"searchText" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __searchText];
      [outProtocol writeFieldEnd];
    }
  }
  if (__searchType_isset) {
    [outProtocol writeFieldBeginWithName: @"searchType" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __searchType];
    [outProtocol writeFieldEnd];
  }
  if (__cityCode_isset) {
    if (__cityCode != nil) {
      [outProtocol writeFieldBeginWithName: @"cityCode" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __cityCode];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGDSearchReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",cityName:"];
  [ms appendFormat: @"\"%@\"", __cityName];
  [ms appendString: @",searchText:"];
  [ms appendFormat: @"\"%@\"", __searchText];
  [ms appendString: @",searchType:"];
  [ms appendFormat: @"%i", __searchType];
  [ms appendString: @",cityCode:"];
  [ms appendFormat: @"\"%@\"", __cityCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRemovePatientReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientId: (int64_t) patientId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRemovePatientReq class]]) {
    return NO;
  }
  NXTFRemovePatientReq *other = (NXTFRemovePatientReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemovePatientReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRemovePatientReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFUpdateUserReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header updMode: (int32_t) updMode accountName: (NSString *) accountName newPhoneNo: (NSString *) newPhoneNo pwd: (NSString *) pwd authCode: (NSString *) authCode signTypeName: (NSString *) signTypeName sendType: (int32_t) sendType nickName: (NSString *) nickName
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __updMode = updMode;
  __updMode_isset = YES;
  __accountName = [accountName retain_stub];
  __accountName_isset = YES;
  __newPhoneNo = [newPhoneNo retain_stub];
  __newPhoneNo_isset = YES;
  __pwd = [pwd retain_stub];
  __pwd_isset = YES;
  __authCode = [authCode retain_stub];
  __authCode_isset = YES;
  __signTypeName = [signTypeName retain_stub];
  __signTypeName_isset = YES;
  __sendType = sendType;
  __sendType_isset = YES;
  __nickName = [nickName retain_stub];
  __nickName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"updMode"])
  {
    __updMode = [decoder decodeInt32ForKey: @"updMode"];
    __updMode_isset = YES;
  }
  if ([decoder containsValueForKey: @"accountName"])
  {
    __accountName = [[decoder decodeObjectForKey: @"accountName"] retain_stub];
    __accountName_isset = YES;
  }
  if ([decoder containsValueForKey: @"newPhoneNo"])
  {
    __newPhoneNo = [[decoder decodeObjectForKey: @"newPhoneNo"] retain_stub];
    __newPhoneNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"pwd"])
  {
    __pwd = [[decoder decodeObjectForKey: @"pwd"] retain_stub];
    __pwd_isset = YES;
  }
  if ([decoder containsValueForKey: @"authCode"])
  {
    __authCode = [[decoder decodeObjectForKey: @"authCode"] retain_stub];
    __authCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"signTypeName"])
  {
    __signTypeName = [[decoder decodeObjectForKey: @"signTypeName"] retain_stub];
    __signTypeName_isset = YES;
  }
  if ([decoder containsValueForKey: @"sendType"])
  {
    __sendType = [decoder decodeInt32ForKey: @"sendType"];
    __sendType_isset = YES;
  }
  if ([decoder containsValueForKey: @"nickName"])
  {
    __nickName = [[decoder decodeObjectForKey: @"nickName"] retain_stub];
    __nickName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__updMode_isset)
  {
    [encoder encodeInt32: __updMode forKey: @"updMode"];
  }
  if (__accountName_isset)
  {
    [encoder encodeObject: __accountName forKey: @"accountName"];
  }
  if (__newPhoneNo_isset)
  {
    [encoder encodeObject: __newPhoneNo forKey: @"newPhoneNo"];
  }
  if (__pwd_isset)
  {
    [encoder encodeObject: __pwd forKey: @"pwd"];
  }
  if (__authCode_isset)
  {
    [encoder encodeObject: __authCode forKey: @"authCode"];
  }
  if (__signTypeName_isset)
  {
    [encoder encodeObject: __signTypeName forKey: @"signTypeName"];
  }
  if (__sendType_isset)
  {
    [encoder encodeInt32: __sendType forKey: @"sendType"];
  }
  if (__nickName_isset)
  {
    [encoder encodeObject: __nickName forKey: @"nickName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __updMode_isset ? 2654435761 : 0;
  if (__updMode_isset)
  {
    hash = (hash * 31) ^ [@(__updMode) hash];
  }
  hash = (hash * 31) ^ __accountName_isset ? 2654435761 : 0;
  if (__accountName_isset)
  {
    hash = (hash * 31) ^ [__accountName hash];
  }
  hash = (hash * 31) ^ __newPhoneNo_isset ? 2654435761 : 0;
  if (__newPhoneNo_isset)
  {
    hash = (hash * 31) ^ [__newPhoneNo hash];
  }
  hash = (hash * 31) ^ __pwd_isset ? 2654435761 : 0;
  if (__pwd_isset)
  {
    hash = (hash * 31) ^ [__pwd hash];
  }
  hash = (hash * 31) ^ __authCode_isset ? 2654435761 : 0;
  if (__authCode_isset)
  {
    hash = (hash * 31) ^ [__authCode hash];
  }
  hash = (hash * 31) ^ __signTypeName_isset ? 2654435761 : 0;
  if (__signTypeName_isset)
  {
    hash = (hash * 31) ^ [__signTypeName hash];
  }
  hash = (hash * 31) ^ __sendType_isset ? 2654435761 : 0;
  if (__sendType_isset)
  {
    hash = (hash * 31) ^ [@(__sendType) hash];
  }
  hash = (hash * 31) ^ __nickName_isset ? 2654435761 : 0;
  if (__nickName_isset)
  {
    hash = (hash * 31) ^ [__nickName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFUpdateUserReq class]]) {
    return NO;
  }
  NXTFUpdateUserReq *other = (NXTFUpdateUserReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__updMode_isset != other->__updMode_isset) ||
      (__updMode_isset && (__updMode != other->__updMode))) {
    return NO;
  }
  if ((__accountName_isset != other->__accountName_isset) ||
      (__accountName_isset && ((__accountName || other->__accountName) && ![__accountName isEqual:other->__accountName]))) {
    return NO;
  }
  if ((__newPhoneNo_isset != other->__newPhoneNo_isset) ||
      (__newPhoneNo_isset && ((__newPhoneNo || other->__newPhoneNo) && ![__newPhoneNo isEqual:other->__newPhoneNo]))) {
    return NO;
  }
  if ((__pwd_isset != other->__pwd_isset) ||
      (__pwd_isset && ((__pwd || other->__pwd) && ![__pwd isEqual:other->__pwd]))) {
    return NO;
  }
  if ((__authCode_isset != other->__authCode_isset) ||
      (__authCode_isset && ((__authCode || other->__authCode) && ![__authCode isEqual:other->__authCode]))) {
    return NO;
  }
  if ((__signTypeName_isset != other->__signTypeName_isset) ||
      (__signTypeName_isset && ((__signTypeName || other->__signTypeName) && ![__signTypeName isEqual:other->__signTypeName]))) {
    return NO;
  }
  if ((__sendType_isset != other->__sendType_isset) ||
      (__sendType_isset && (__sendType != other->__sendType))) {
    return NO;
  }
  if ((__nickName_isset != other->__nickName_isset) ||
      (__nickName_isset && ((__nickName || other->__nickName) && ![__nickName isEqual:other->__nickName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__accountName release_stub];
  [__newPhoneNo release_stub];
  [__pwd release_stub];
  [__authCode release_stub];
  [__signTypeName release_stub];
  [__nickName release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) updMode {
  return __updMode;
}

- (void) setUpdMode: (int32_t) updMode {
  __updMode = updMode;
  __updMode_isset = YES;
}

- (BOOL) updModeIsSet {
  return __updMode_isset;
}

- (void) unsetUpdMode {
  __updMode_isset = NO;
}

- (NSString *) accountName {
  return [[__accountName retain_stub] autorelease_stub];
}

- (void) setAccountName: (NSString *) accountName {
  [accountName retain_stub];
  [__accountName release_stub];
  __accountName = accountName;
  __accountName_isset = YES;
}

- (BOOL) accountNameIsSet {
  return __accountName_isset;
}

- (void) unsetAccountName {
  [__accountName release_stub];
  __accountName = nil;
  __accountName_isset = NO;
}

- (NSString *) newPhoneNo {
  return [[__newPhoneNo retain_stub] autorelease_stub];
}

- (void) setNewPhoneNo: (NSString *) newPhoneNo {
  [newPhoneNo retain_stub];
  [__newPhoneNo release_stub];
  __newPhoneNo = newPhoneNo;
  __newPhoneNo_isset = YES;
}

- (BOOL) newPhoneNoIsSet {
  return __newPhoneNo_isset;
}

- (void) unsetNewPhoneNo {
  [__newPhoneNo release_stub];
  __newPhoneNo = nil;
  __newPhoneNo_isset = NO;
}

- (NSString *) pwd {
  return [[__pwd retain_stub] autorelease_stub];
}

- (void) setPwd: (NSString *) pwd {
  [pwd retain_stub];
  [__pwd release_stub];
  __pwd = pwd;
  __pwd_isset = YES;
}

- (BOOL) pwdIsSet {
  return __pwd_isset;
}

- (void) unsetPwd {
  [__pwd release_stub];
  __pwd = nil;
  __pwd_isset = NO;
}

- (NSString *) authCode {
  return [[__authCode retain_stub] autorelease_stub];
}

- (void) setAuthCode: (NSString *) authCode {
  [authCode retain_stub];
  [__authCode release_stub];
  __authCode = authCode;
  __authCode_isset = YES;
}

- (BOOL) authCodeIsSet {
  return __authCode_isset;
}

- (void) unsetAuthCode {
  [__authCode release_stub];
  __authCode = nil;
  __authCode_isset = NO;
}

- (NSString *) signTypeName {
  return [[__signTypeName retain_stub] autorelease_stub];
}

- (void) setSignTypeName: (NSString *) signTypeName {
  [signTypeName retain_stub];
  [__signTypeName release_stub];
  __signTypeName = signTypeName;
  __signTypeName_isset = YES;
}

- (BOOL) signTypeNameIsSet {
  return __signTypeName_isset;
}

- (void) unsetSignTypeName {
  [__signTypeName release_stub];
  __signTypeName = nil;
  __signTypeName_isset = NO;
}

- (int32_t) sendType {
  return __sendType;
}

- (void) setSendType: (int32_t) sendType {
  __sendType = sendType;
  __sendType_isset = YES;
}

- (BOOL) sendTypeIsSet {
  return __sendType_isset;
}

- (void) unsetSendType {
  __sendType_isset = NO;
}

- (NSString *) nickName {
  return [[__nickName retain_stub] autorelease_stub];
}

- (void) setNickName: (NSString *) nickName {
  [nickName retain_stub];
  [__nickName release_stub];
  __nickName = nickName;
  __nickName_isset = YES;
}

- (BOOL) nickNameIsSet {
  return __nickName_isset;
}

- (void) unsetNickName {
  [__nickName release_stub];
  __nickName = nil;
  __nickName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUpdMode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccountName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNewPhoneNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSignTypeName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSendType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNickName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UpdateUserReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__updMode_isset) {
    [outProtocol writeFieldBeginWithName: @"updMode" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __updMode];
    [outProtocol writeFieldEnd];
  }
  if (__accountName_isset) {
    if (__accountName != nil) {
      [outProtocol writeFieldBeginWithName: @"accountName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __accountName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__newPhoneNo_isset) {
    if (__newPhoneNo != nil) {
      [outProtocol writeFieldBeginWithName: @"newPhoneNo" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __newPhoneNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pwd_isset) {
    if (__pwd != nil) {
      [outProtocol writeFieldBeginWithName: @"pwd" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __pwd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__authCode_isset) {
    if (__authCode != nil) {
      [outProtocol writeFieldBeginWithName: @"authCode" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __authCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__signTypeName_isset) {
    if (__signTypeName != nil) {
      [outProtocol writeFieldBeginWithName: @"signTypeName" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __signTypeName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sendType_isset) {
    [outProtocol writeFieldBeginWithName: @"sendType" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __sendType];
    [outProtocol writeFieldEnd];
  }
  if (__nickName_isset) {
    if (__nickName != nil) {
      [outProtocol writeFieldBeginWithName: @"nickName" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __nickName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFUpdateUserReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",updMode:"];
  [ms appendFormat: @"%i", __updMode];
  [ms appendString: @",accountName:"];
  [ms appendFormat: @"\"%@\"", __accountName];
  [ms appendString: @",newPhoneNo:"];
  [ms appendFormat: @"\"%@\"", __newPhoneNo];
  [ms appendString: @",pwd:"];
  [ms appendFormat: @"\"%@\"", __pwd];
  [ms appendString: @",authCode:"];
  [ms appendFormat: @"\"%@\"", __authCode];
  [ms appendString: @",signTypeName:"];
  [ms appendFormat: @"\"%@\"", __signTypeName];
  [ms appendString: @",sendType:"];
  [ms appendFormat: @"%i", __sendType];
  [ms appendString: @",nickName:"];
  [ms appendFormat: @"\"%@\"", __nickName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFAddConsultReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header drId: (NSString *) drId desc: (NSString *) desc patientId: (int64_t) patientId serviceType: (int32_t) serviceType fee: (NSString *) fee patientName: (NSString *) patientName gender: (int32_t) gender timId: (NSString *) timId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __drId = [drId retain_stub];
  __drId_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __serviceType = serviceType;
  __serviceType_isset = YES;
  __fee = [fee retain_stub];
  __fee_isset = YES;
  __patientName = [patientName retain_stub];
  __patientName_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __timId = [timId retain_stub];
  __timId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"drId"])
  {
    __drId = [[decoder decodeObjectForKey: @"drId"] retain_stub];
    __drId_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceType"])
  {
    __serviceType = [decoder decodeInt32ForKey: @"serviceType"];
    __serviceType_isset = YES;
  }
  if ([decoder containsValueForKey: @"fee"])
  {
    __fee = [[decoder decodeObjectForKey: @"fee"] retain_stub];
    __fee_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientName"])
  {
    __patientName = [[decoder decodeObjectForKey: @"patientName"] retain_stub];
    __patientName_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeInt32ForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"timId"])
  {
    __timId = [[decoder decodeObjectForKey: @"timId"] retain_stub];
    __timId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__drId_isset)
  {
    [encoder encodeObject: __drId forKey: @"drId"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__serviceType_isset)
  {
    [encoder encodeInt32: __serviceType forKey: @"serviceType"];
  }
  if (__fee_isset)
  {
    [encoder encodeObject: __fee forKey: @"fee"];
  }
  if (__patientName_isset)
  {
    [encoder encodeObject: __patientName forKey: @"patientName"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt32: __gender forKey: @"gender"];
  }
  if (__timId_isset)
  {
    [encoder encodeObject: __timId forKey: @"timId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __drId_isset ? 2654435761 : 0;
  if (__drId_isset)
  {
    hash = (hash * 31) ^ [__drId hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __serviceType_isset ? 2654435761 : 0;
  if (__serviceType_isset)
  {
    hash = (hash * 31) ^ [@(__serviceType) hash];
  }
  hash = (hash * 31) ^ __fee_isset ? 2654435761 : 0;
  if (__fee_isset)
  {
    hash = (hash * 31) ^ [__fee hash];
  }
  hash = (hash * 31) ^ __patientName_isset ? 2654435761 : 0;
  if (__patientName_isset)
  {
    hash = (hash * 31) ^ [__patientName hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [@(__gender) hash];
  }
  hash = (hash * 31) ^ __timId_isset ? 2654435761 : 0;
  if (__timId_isset)
  {
    hash = (hash * 31) ^ [__timId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFAddConsultReq class]]) {
    return NO;
  }
  NXTFAddConsultReq *other = (NXTFAddConsultReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__drId_isset != other->__drId_isset) ||
      (__drId_isset && ((__drId || other->__drId) && ![__drId isEqual:other->__drId]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__serviceType_isset != other->__serviceType_isset) ||
      (__serviceType_isset && (__serviceType != other->__serviceType))) {
    return NO;
  }
  if ((__fee_isset != other->__fee_isset) ||
      (__fee_isset && ((__fee || other->__fee) && ![__fee isEqual:other->__fee]))) {
    return NO;
  }
  if ((__patientName_isset != other->__patientName_isset) ||
      (__patientName_isset && ((__patientName || other->__patientName) && ![__patientName isEqual:other->__patientName]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && (__gender != other->__gender))) {
    return NO;
  }
  if ((__timId_isset != other->__timId_isset) ||
      (__timId_isset && ((__timId || other->__timId) && ![__timId isEqual:other->__timId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__drId release_stub];
  [__desc release_stub];
  [__fee release_stub];
  [__patientName release_stub];
  [__timId release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) drId {
  return [[__drId retain_stub] autorelease_stub];
}

- (void) setDrId: (NSString *) drId {
  [drId retain_stub];
  [__drId release_stub];
  __drId = drId;
  __drId_isset = YES;
}

- (BOOL) drIdIsSet {
  return __drId_isset;
}

- (void) unsetDrId {
  [__drId release_stub];
  __drId = nil;
  __drId_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (int32_t) serviceType {
  return __serviceType;
}

- (void) setServiceType: (int32_t) serviceType {
  __serviceType = serviceType;
  __serviceType_isset = YES;
}

- (BOOL) serviceTypeIsSet {
  return __serviceType_isset;
}

- (void) unsetServiceType {
  __serviceType_isset = NO;
}

- (NSString *) fee {
  return [[__fee retain_stub] autorelease_stub];
}

- (void) setFee: (NSString *) fee {
  [fee retain_stub];
  [__fee release_stub];
  __fee = fee;
  __fee_isset = YES;
}

- (BOOL) feeIsSet {
  return __fee_isset;
}

- (void) unsetFee {
  [__fee release_stub];
  __fee = nil;
  __fee_isset = NO;
}

- (NSString *) patientName {
  return [[__patientName retain_stub] autorelease_stub];
}

- (void) setPatientName: (NSString *) patientName {
  [patientName retain_stub];
  [__patientName release_stub];
  __patientName = patientName;
  __patientName_isset = YES;
}

- (BOOL) patientNameIsSet {
  return __patientName_isset;
}

- (void) unsetPatientName {
  [__patientName release_stub];
  __patientName = nil;
  __patientName_isset = NO;
}

- (int32_t) gender {
  return __gender;
}

- (void) setGender: (int32_t) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (NSString *) timId {
  return [[__timId retain_stub] autorelease_stub];
}

- (void) setTimId: (NSString *) timId {
  [timId retain_stub];
  [__timId release_stub];
  __timId = timId;
  __timId_isset = YES;
}

- (BOOL) timIdIsSet {
  return __timId_isset;
}

- (void) unsetTimId {
  [__timId release_stub];
  __timId = nil;
  __timId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setServiceType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTimId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddConsultReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drId_isset) {
    if (__drId != nil) {
      [outProtocol writeFieldBeginWithName: @"drId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __drId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__serviceType_isset) {
    [outProtocol writeFieldBeginWithName: @"serviceType" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __serviceType];
    [outProtocol writeFieldEnd];
  }
  if (__fee_isset) {
    if (__fee != nil) {
      [outProtocol writeFieldBeginWithName: @"fee" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __fee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientName_isset) {
    if (__patientName != nil) {
      [outProtocol writeFieldBeginWithName: @"patientName" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __patientName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__timId_isset) {
    if (__timId != nil) {
      [outProtocol writeFieldBeginWithName: @"timId" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __timId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFAddConsultReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",drId:"];
  [ms appendFormat: @"\"%@\"", __drId];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",serviceType:"];
  [ms appendFormat: @"%i", __serviceType];
  [ms appendString: @",fee:"];
  [ms appendFormat: @"\"%@\"", __fee];
  [ms appendString: @",patientName:"];
  [ms appendFormat: @"\"%@\"", __patientName];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @",timId:"];
  [ms appendFormat: @"\"%@\"", __timId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetConsultsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientId: (int64_t) patientId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetConsultsReq class]]) {
    return NO;
  }
  NXTFGetConsultsReq *other = (NXTFGetConsultsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetConsultsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetConsultsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFAddEvaluateReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header evalType: (int32_t) evalType bizId: (NSString *) bizId patientName: (NSString *) patientName docId: (int64_t) docId docName: (NSString *) docName disease: (NSString *) disease message: (NSString *) message attitude: (int32_t) attitude effect: (int32_t) effect hospSrv: (int32_t) hospSrv waiting: (int32_t) waiting consult: (int32_t) consult visit: (int32_t) visit hospId: (int32_t) hospId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __evalType = evalType;
  __evalType_isset = YES;
  __bizId = [bizId retain_stub];
  __bizId_isset = YES;
  __patientName = [patientName retain_stub];
  __patientName_isset = YES;
  __docId = docId;
  __docId_isset = YES;
  __docName = [docName retain_stub];
  __docName_isset = YES;
  __disease = [disease retain_stub];
  __disease_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  __attitude = attitude;
  __attitude_isset = YES;
  __effect = effect;
  __effect_isset = YES;
  __hospSrv = hospSrv;
  __hospSrv_isset = YES;
  __waiting = waiting;
  __waiting_isset = YES;
  __consult = consult;
  __consult_isset = YES;
  __visit = visit;
  __visit_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"evalType"])
  {
    __evalType = [decoder decodeInt32ForKey: @"evalType"];
    __evalType_isset = YES;
  }
  if ([decoder containsValueForKey: @"bizId"])
  {
    __bizId = [[decoder decodeObjectForKey: @"bizId"] retain_stub];
    __bizId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientName"])
  {
    __patientName = [[decoder decodeObjectForKey: @"patientName"] retain_stub];
    __patientName_isset = YES;
  }
  if ([decoder containsValueForKey: @"docId"])
  {
    __docId = [decoder decodeInt64ForKey: @"docId"];
    __docId_isset = YES;
  }
  if ([decoder containsValueForKey: @"docName"])
  {
    __docName = [[decoder decodeObjectForKey: @"docName"] retain_stub];
    __docName_isset = YES;
  }
  if ([decoder containsValueForKey: @"disease"])
  {
    __disease = [[decoder decodeObjectForKey: @"disease"] retain_stub];
    __disease_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"attitude"])
  {
    __attitude = [decoder decodeInt32ForKey: @"attitude"];
    __attitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"effect"])
  {
    __effect = [decoder decodeInt32ForKey: @"effect"];
    __effect_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospSrv"])
  {
    __hospSrv = [decoder decodeInt32ForKey: @"hospSrv"];
    __hospSrv_isset = YES;
  }
  if ([decoder containsValueForKey: @"waiting"])
  {
    __waiting = [decoder decodeInt32ForKey: @"waiting"];
    __waiting_isset = YES;
  }
  if ([decoder containsValueForKey: @"consult"])
  {
    __consult = [decoder decodeInt32ForKey: @"consult"];
    __consult_isset = YES;
  }
  if ([decoder containsValueForKey: @"visit"])
  {
    __visit = [decoder decodeInt32ForKey: @"visit"];
    __visit_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__evalType_isset)
  {
    [encoder encodeInt32: __evalType forKey: @"evalType"];
  }
  if (__bizId_isset)
  {
    [encoder encodeObject: __bizId forKey: @"bizId"];
  }
  if (__patientName_isset)
  {
    [encoder encodeObject: __patientName forKey: @"patientName"];
  }
  if (__docId_isset)
  {
    [encoder encodeInt64: __docId forKey: @"docId"];
  }
  if (__docName_isset)
  {
    [encoder encodeObject: __docName forKey: @"docName"];
  }
  if (__disease_isset)
  {
    [encoder encodeObject: __disease forKey: @"disease"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__attitude_isset)
  {
    [encoder encodeInt32: __attitude forKey: @"attitude"];
  }
  if (__effect_isset)
  {
    [encoder encodeInt32: __effect forKey: @"effect"];
  }
  if (__hospSrv_isset)
  {
    [encoder encodeInt32: __hospSrv forKey: @"hospSrv"];
  }
  if (__waiting_isset)
  {
    [encoder encodeInt32: __waiting forKey: @"waiting"];
  }
  if (__consult_isset)
  {
    [encoder encodeInt32: __consult forKey: @"consult"];
  }
  if (__visit_isset)
  {
    [encoder encodeInt32: __visit forKey: @"visit"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __evalType_isset ? 2654435761 : 0;
  if (__evalType_isset)
  {
    hash = (hash * 31) ^ [@(__evalType) hash];
  }
  hash = (hash * 31) ^ __bizId_isset ? 2654435761 : 0;
  if (__bizId_isset)
  {
    hash = (hash * 31) ^ [__bizId hash];
  }
  hash = (hash * 31) ^ __patientName_isset ? 2654435761 : 0;
  if (__patientName_isset)
  {
    hash = (hash * 31) ^ [__patientName hash];
  }
  hash = (hash * 31) ^ __docId_isset ? 2654435761 : 0;
  if (__docId_isset)
  {
    hash = (hash * 31) ^ [@(__docId) hash];
  }
  hash = (hash * 31) ^ __docName_isset ? 2654435761 : 0;
  if (__docName_isset)
  {
    hash = (hash * 31) ^ [__docName hash];
  }
  hash = (hash * 31) ^ __disease_isset ? 2654435761 : 0;
  if (__disease_isset)
  {
    hash = (hash * 31) ^ [__disease hash];
  }
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __attitude_isset ? 2654435761 : 0;
  if (__attitude_isset)
  {
    hash = (hash * 31) ^ [@(__attitude) hash];
  }
  hash = (hash * 31) ^ __effect_isset ? 2654435761 : 0;
  if (__effect_isset)
  {
    hash = (hash * 31) ^ [@(__effect) hash];
  }
  hash = (hash * 31) ^ __hospSrv_isset ? 2654435761 : 0;
  if (__hospSrv_isset)
  {
    hash = (hash * 31) ^ [@(__hospSrv) hash];
  }
  hash = (hash * 31) ^ __waiting_isset ? 2654435761 : 0;
  if (__waiting_isset)
  {
    hash = (hash * 31) ^ [@(__waiting) hash];
  }
  hash = (hash * 31) ^ __consult_isset ? 2654435761 : 0;
  if (__consult_isset)
  {
    hash = (hash * 31) ^ [@(__consult) hash];
  }
  hash = (hash * 31) ^ __visit_isset ? 2654435761 : 0;
  if (__visit_isset)
  {
    hash = (hash * 31) ^ [@(__visit) hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFAddEvaluateReq class]]) {
    return NO;
  }
  NXTFAddEvaluateReq *other = (NXTFAddEvaluateReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__evalType_isset != other->__evalType_isset) ||
      (__evalType_isset && (__evalType != other->__evalType))) {
    return NO;
  }
  if ((__bizId_isset != other->__bizId_isset) ||
      (__bizId_isset && ((__bizId || other->__bizId) && ![__bizId isEqual:other->__bizId]))) {
    return NO;
  }
  if ((__patientName_isset != other->__patientName_isset) ||
      (__patientName_isset && ((__patientName || other->__patientName) && ![__patientName isEqual:other->__patientName]))) {
    return NO;
  }
  if ((__docId_isset != other->__docId_isset) ||
      (__docId_isset && (__docId != other->__docId))) {
    return NO;
  }
  if ((__docName_isset != other->__docName_isset) ||
      (__docName_isset && ((__docName || other->__docName) && ![__docName isEqual:other->__docName]))) {
    return NO;
  }
  if ((__disease_isset != other->__disease_isset) ||
      (__disease_isset && ((__disease || other->__disease) && ![__disease isEqual:other->__disease]))) {
    return NO;
  }
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__attitude_isset != other->__attitude_isset) ||
      (__attitude_isset && (__attitude != other->__attitude))) {
    return NO;
  }
  if ((__effect_isset != other->__effect_isset) ||
      (__effect_isset && (__effect != other->__effect))) {
    return NO;
  }
  if ((__hospSrv_isset != other->__hospSrv_isset) ||
      (__hospSrv_isset && (__hospSrv != other->__hospSrv))) {
    return NO;
  }
  if ((__waiting_isset != other->__waiting_isset) ||
      (__waiting_isset && (__waiting != other->__waiting))) {
    return NO;
  }
  if ((__consult_isset != other->__consult_isset) ||
      (__consult_isset && (__consult != other->__consult))) {
    return NO;
  }
  if ((__visit_isset != other->__visit_isset) ||
      (__visit_isset && (__visit != other->__visit))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__bizId release_stub];
  [__patientName release_stub];
  [__docName release_stub];
  [__disease release_stub];
  [__message release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) evalType {
  return __evalType;
}

- (void) setEvalType: (int32_t) evalType {
  __evalType = evalType;
  __evalType_isset = YES;
}

- (BOOL) evalTypeIsSet {
  return __evalType_isset;
}

- (void) unsetEvalType {
  __evalType_isset = NO;
}

- (NSString *) bizId {
  return [[__bizId retain_stub] autorelease_stub];
}

- (void) setBizId: (NSString *) bizId {
  [bizId retain_stub];
  [__bizId release_stub];
  __bizId = bizId;
  __bizId_isset = YES;
}

- (BOOL) bizIdIsSet {
  return __bizId_isset;
}

- (void) unsetBizId {
  [__bizId release_stub];
  __bizId = nil;
  __bizId_isset = NO;
}

- (NSString *) patientName {
  return [[__patientName retain_stub] autorelease_stub];
}

- (void) setPatientName: (NSString *) patientName {
  [patientName retain_stub];
  [__patientName release_stub];
  __patientName = patientName;
  __patientName_isset = YES;
}

- (BOOL) patientNameIsSet {
  return __patientName_isset;
}

- (void) unsetPatientName {
  [__patientName release_stub];
  __patientName = nil;
  __patientName_isset = NO;
}

- (int64_t) docId {
  return __docId;
}

- (void) setDocId: (int64_t) docId {
  __docId = docId;
  __docId_isset = YES;
}

- (BOOL) docIdIsSet {
  return __docId_isset;
}

- (void) unsetDocId {
  __docId_isset = NO;
}

- (NSString *) docName {
  return [[__docName retain_stub] autorelease_stub];
}

- (void) setDocName: (NSString *) docName {
  [docName retain_stub];
  [__docName release_stub];
  __docName = docName;
  __docName_isset = YES;
}

- (BOOL) docNameIsSet {
  return __docName_isset;
}

- (void) unsetDocName {
  [__docName release_stub];
  __docName = nil;
  __docName_isset = NO;
}

- (NSString *) disease {
  return [[__disease retain_stub] autorelease_stub];
}

- (void) setDisease: (NSString *) disease {
  [disease retain_stub];
  [__disease release_stub];
  __disease = disease;
  __disease_isset = YES;
}

- (BOOL) diseaseIsSet {
  return __disease_isset;
}

- (void) unsetDisease {
  [__disease release_stub];
  __disease = nil;
  __disease_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (int32_t) attitude {
  return __attitude;
}

- (void) setAttitude: (int32_t) attitude {
  __attitude = attitude;
  __attitude_isset = YES;
}

- (BOOL) attitudeIsSet {
  return __attitude_isset;
}

- (void) unsetAttitude {
  __attitude_isset = NO;
}

- (int32_t) effect {
  return __effect;
}

- (void) setEffect: (int32_t) effect {
  __effect = effect;
  __effect_isset = YES;
}

- (BOOL) effectIsSet {
  return __effect_isset;
}

- (void) unsetEffect {
  __effect_isset = NO;
}

- (int32_t) hospSrv {
  return __hospSrv;
}

- (void) setHospSrv: (int32_t) hospSrv {
  __hospSrv = hospSrv;
  __hospSrv_isset = YES;
}

- (BOOL) hospSrvIsSet {
  return __hospSrv_isset;
}

- (void) unsetHospSrv {
  __hospSrv_isset = NO;
}

- (int32_t) waiting {
  return __waiting;
}

- (void) setWaiting: (int32_t) waiting {
  __waiting = waiting;
  __waiting_isset = YES;
}

- (BOOL) waitingIsSet {
  return __waiting_isset;
}

- (void) unsetWaiting {
  __waiting_isset = NO;
}

- (int32_t) consult {
  return __consult;
}

- (void) setConsult: (int32_t) consult {
  __consult = consult;
  __consult_isset = YES;
}

- (BOOL) consultIsSet {
  return __consult_isset;
}

- (void) unsetConsult {
  __consult_isset = NO;
}

- (int32_t) visit {
  return __visit;
}

- (void) setVisit: (int32_t) visit {
  __visit = visit;
  __visit_isset = YES;
}

- (BOOL) visitIsSet {
  return __visit_isset;
}

- (void) unsetVisit {
  __visit_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setEvalType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBizId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDocId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDocName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDisease: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setAttitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setEffect: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospSrv: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setWaiting: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setConsult: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setVisit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddEvaluateReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__evalType_isset) {
    [outProtocol writeFieldBeginWithName: @"evalType" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __evalType];
    [outProtocol writeFieldEnd];
  }
  if (__bizId_isset) {
    if (__bizId != nil) {
      [outProtocol writeFieldBeginWithName: @"bizId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __bizId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientName_isset) {
    if (__patientName != nil) {
      [outProtocol writeFieldBeginWithName: @"patientName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __patientName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__docId_isset) {
    [outProtocol writeFieldBeginWithName: @"docId" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __docId];
    [outProtocol writeFieldEnd];
  }
  if (__docName_isset) {
    if (__docName != nil) {
      [outProtocol writeFieldBeginWithName: @"docName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __docName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__disease_isset) {
    if (__disease != nil) {
      [outProtocol writeFieldBeginWithName: @"disease" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __disease];
      [outProtocol writeFieldEnd];
    }
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__attitude_isset) {
    [outProtocol writeFieldBeginWithName: @"attitude" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __attitude];
    [outProtocol writeFieldEnd];
  }
  if (__effect_isset) {
    [outProtocol writeFieldBeginWithName: @"effect" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __effect];
    [outProtocol writeFieldEnd];
  }
  if (__hospSrv_isset) {
    [outProtocol writeFieldBeginWithName: @"hospSrv" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __hospSrv];
    [outProtocol writeFieldEnd];
  }
  if (__waiting_isset) {
    [outProtocol writeFieldBeginWithName: @"waiting" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __waiting];
    [outProtocol writeFieldEnd];
  }
  if (__consult_isset) {
    [outProtocol writeFieldBeginWithName: @"consult" type: TType_I32 fieldID: 13];
    [outProtocol writeI32: __consult];
    [outProtocol writeFieldEnd];
  }
  if (__visit_isset) {
    [outProtocol writeFieldBeginWithName: @"visit" type: TType_I32 fieldID: 14];
    [outProtocol writeI32: __visit];
    [outProtocol writeFieldEnd];
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 15];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFAddEvaluateReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",evalType:"];
  [ms appendFormat: @"%i", __evalType];
  [ms appendString: @",bizId:"];
  [ms appendFormat: @"\"%@\"", __bizId];
  [ms appendString: @",patientName:"];
  [ms appendFormat: @"\"%@\"", __patientName];
  [ms appendString: @",docId:"];
  [ms appendFormat: @"%qi", __docId];
  [ms appendString: @",docName:"];
  [ms appendFormat: @"\"%@\"", __docName];
  [ms appendString: @",disease:"];
  [ms appendFormat: @"\"%@\"", __disease];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",attitude:"];
  [ms appendFormat: @"%i", __attitude];
  [ms appendString: @",effect:"];
  [ms appendFormat: @"%i", __effect];
  [ms appendString: @",hospSrv:"];
  [ms appendFormat: @"%i", __hospSrv];
  [ms appendString: @",waiting:"];
  [ms appendFormat: @"%i", __waiting];
  [ms appendString: @",consult:"];
  [ms appendFormat: @"%i", __consult];
  [ms appendString: @",visit:"];
  [ms appendFormat: @"%i", __visit];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetEvaluatesReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.page = [[[NXTFPage alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header page: (NXTFPage *) page docId: (int64_t) docId mode: (int32_t) mode bizId: (NSString *) bizId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __docId = docId;
  __docId_isset = YES;
  __mode = mode;
  __mode_isset = YES;
  __bizId = [bizId retain_stub];
  __bizId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"docId"])
  {
    __docId = [decoder decodeInt64ForKey: @"docId"];
    __docId_isset = YES;
  }
  if ([decoder containsValueForKey: @"mode"])
  {
    __mode = [decoder decodeInt32ForKey: @"mode"];
    __mode_isset = YES;
  }
  if ([decoder containsValueForKey: @"bizId"])
  {
    __bizId = [[decoder decodeObjectForKey: @"bizId"] retain_stub];
    __bizId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__docId_isset)
  {
    [encoder encodeInt64: __docId forKey: @"docId"];
  }
  if (__mode_isset)
  {
    [encoder encodeInt32: __mode forKey: @"mode"];
  }
  if (__bizId_isset)
  {
    [encoder encodeObject: __bizId forKey: @"bizId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __docId_isset ? 2654435761 : 0;
  if (__docId_isset)
  {
    hash = (hash * 31) ^ [@(__docId) hash];
  }
  hash = (hash * 31) ^ __mode_isset ? 2654435761 : 0;
  if (__mode_isset)
  {
    hash = (hash * 31) ^ [@(__mode) hash];
  }
  hash = (hash * 31) ^ __bizId_isset ? 2654435761 : 0;
  if (__bizId_isset)
  {
    hash = (hash * 31) ^ [__bizId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetEvaluatesReq class]]) {
    return NO;
  }
  NXTFGetEvaluatesReq *other = (NXTFGetEvaluatesReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__docId_isset != other->__docId_isset) ||
      (__docId_isset && (__docId != other->__docId))) {
    return NO;
  }
  if ((__mode_isset != other->__mode_isset) ||
      (__mode_isset && (__mode != other->__mode))) {
    return NO;
  }
  if ((__bizId_isset != other->__bizId_isset) ||
      (__bizId_isset && ((__bizId || other->__bizId) && ![__bizId isEqual:other->__bizId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__bizId release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (int64_t) docId {
  return __docId;
}

- (void) setDocId: (int64_t) docId {
  __docId = docId;
  __docId_isset = YES;
}

- (BOOL) docIdIsSet {
  return __docId_isset;
}

- (void) unsetDocId {
  __docId_isset = NO;
}

- (int32_t) mode {
  return __mode;
}

- (void) setMode: (int32_t) mode {
  __mode = mode;
  __mode_isset = YES;
}

- (BOOL) modeIsSet {
  return __mode_isset;
}

- (void) unsetMode {
  __mode_isset = NO;
}

- (NSString *) bizId {
  return [[__bizId retain_stub] autorelease_stub];
}

- (void) setBizId: (NSString *) bizId {
  [bizId retain_stub];
  [__bizId release_stub];
  __bizId = bizId;
  __bizId_isset = YES;
}

- (BOOL) bizIdIsSet {
  return __bizId_isset;
}

- (void) unsetBizId {
  [__bizId release_stub];
  __bizId = nil;
  __bizId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDocId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBizId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetEvaluatesReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__docId_isset) {
    [outProtocol writeFieldBeginWithName: @"docId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __docId];
    [outProtocol writeFieldEnd];
  }
  if (__mode_isset) {
    [outProtocol writeFieldBeginWithName: @"mode" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __mode];
    [outProtocol writeFieldEnd];
  }
  if (__bizId_isset) {
    if (__bizId != nil) {
      [outProtocol writeFieldBeginWithName: @"bizId" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __bizId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetEvaluatesReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",docId:"];
  [ms appendFormat: @"%qi", __docId];
  [ms appendString: @",mode:"];
  [ms appendFormat: @"%i", __mode];
  [ms appendString: @",bizId:"];
  [ms appendFormat: @"\"%@\"", __bizId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPullMsgsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header msgStartTime: (int64_t) msgStartTime
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __msgStartTime = msgStartTime;
  __msgStartTime_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"msgStartTime"])
  {
    __msgStartTime = [decoder decodeInt64ForKey: @"msgStartTime"];
    __msgStartTime_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__msgStartTime_isset)
  {
    [encoder encodeInt64: __msgStartTime forKey: @"msgStartTime"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __msgStartTime_isset ? 2654435761 : 0;
  if (__msgStartTime_isset)
  {
    hash = (hash * 31) ^ [@(__msgStartTime) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPullMsgsReq class]]) {
    return NO;
  }
  NXTFPullMsgsReq *other = (NXTFPullMsgsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__msgStartTime_isset != other->__msgStartTime_isset) ||
      (__msgStartTime_isset && (__msgStartTime != other->__msgStartTime))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) msgStartTime {
  return __msgStartTime;
}

- (void) setMsgStartTime: (int64_t) msgStartTime {
  __msgStartTime = msgStartTime;
  __msgStartTime_isset = YES;
}

- (BOOL) msgStartTimeIsSet {
  return __msgStartTime_isset;
}

- (void) unsetMsgStartTime {
  __msgStartTime_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMsgStartTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PullMsgsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__msgStartTime_isset) {
    [outProtocol writeFieldBeginWithName: @"msgStartTime" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __msgStartTime];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPullMsgsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",msgStartTime:"];
  [ms appendFormat: @"%qi", __msgStartTime];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetRegDatesReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId targetType: (int32_t) targetType docId: (int64_t) docId deptId: (int64_t) deptId startDate: (NSString *) startDate endDate: (NSString *) endDate hisDeptId: (NSString *) hisDeptId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __targetType = targetType;
  __targetType_isset = YES;
  __docId = docId;
  __docId_isset = YES;
  __deptId = deptId;
  __deptId_isset = YES;
  __startDate = [startDate retain_stub];
  __startDate_isset = YES;
  __endDate = [endDate retain_stub];
  __endDate_isset = YES;
  __hisDeptId = [hisDeptId retain_stub];
  __hisDeptId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"targetType"])
  {
    __targetType = [decoder decodeInt32ForKey: @"targetType"];
    __targetType_isset = YES;
  }
  if ([decoder containsValueForKey: @"docId"])
  {
    __docId = [decoder decodeInt64ForKey: @"docId"];
    __docId_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptId"])
  {
    __deptId = [decoder decodeInt64ForKey: @"deptId"];
    __deptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"startDate"])
  {
    __startDate = [[decoder decodeObjectForKey: @"startDate"] retain_stub];
    __startDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"endDate"])
  {
    __endDate = [[decoder decodeObjectForKey: @"endDate"] retain_stub];
    __endDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"hisDeptId"])
  {
    __hisDeptId = [[decoder decodeObjectForKey: @"hisDeptId"] retain_stub];
    __hisDeptId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__targetType_isset)
  {
    [encoder encodeInt32: __targetType forKey: @"targetType"];
  }
  if (__docId_isset)
  {
    [encoder encodeInt64: __docId forKey: @"docId"];
  }
  if (__deptId_isset)
  {
    [encoder encodeInt64: __deptId forKey: @"deptId"];
  }
  if (__startDate_isset)
  {
    [encoder encodeObject: __startDate forKey: @"startDate"];
  }
  if (__endDate_isset)
  {
    [encoder encodeObject: __endDate forKey: @"endDate"];
  }
  if (__hisDeptId_isset)
  {
    [encoder encodeObject: __hisDeptId forKey: @"hisDeptId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __targetType_isset ? 2654435761 : 0;
  if (__targetType_isset)
  {
    hash = (hash * 31) ^ [@(__targetType) hash];
  }
  hash = (hash * 31) ^ __docId_isset ? 2654435761 : 0;
  if (__docId_isset)
  {
    hash = (hash * 31) ^ [@(__docId) hash];
  }
  hash = (hash * 31) ^ __deptId_isset ? 2654435761 : 0;
  if (__deptId_isset)
  {
    hash = (hash * 31) ^ [@(__deptId) hash];
  }
  hash = (hash * 31) ^ __startDate_isset ? 2654435761 : 0;
  if (__startDate_isset)
  {
    hash = (hash * 31) ^ [__startDate hash];
  }
  hash = (hash * 31) ^ __endDate_isset ? 2654435761 : 0;
  if (__endDate_isset)
  {
    hash = (hash * 31) ^ [__endDate hash];
  }
  hash = (hash * 31) ^ __hisDeptId_isset ? 2654435761 : 0;
  if (__hisDeptId_isset)
  {
    hash = (hash * 31) ^ [__hisDeptId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetRegDatesReq class]]) {
    return NO;
  }
  NXTFGetRegDatesReq *other = (NXTFGetRegDatesReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__targetType_isset != other->__targetType_isset) ||
      (__targetType_isset && (__targetType != other->__targetType))) {
    return NO;
  }
  if ((__docId_isset != other->__docId_isset) ||
      (__docId_isset && (__docId != other->__docId))) {
    return NO;
  }
  if ((__deptId_isset != other->__deptId_isset) ||
      (__deptId_isset && (__deptId != other->__deptId))) {
    return NO;
  }
  if ((__startDate_isset != other->__startDate_isset) ||
      (__startDate_isset && ((__startDate || other->__startDate) && ![__startDate isEqual:other->__startDate]))) {
    return NO;
  }
  if ((__endDate_isset != other->__endDate_isset) ||
      (__endDate_isset && ((__endDate || other->__endDate) && ![__endDate isEqual:other->__endDate]))) {
    return NO;
  }
  if ((__hisDeptId_isset != other->__hisDeptId_isset) ||
      (__hisDeptId_isset && ((__hisDeptId || other->__hisDeptId) && ![__hisDeptId isEqual:other->__hisDeptId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__startDate release_stub];
  [__endDate release_stub];
  [__hisDeptId release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int32_t) targetType {
  return __targetType;
}

- (void) setTargetType: (int32_t) targetType {
  __targetType = targetType;
  __targetType_isset = YES;
}

- (BOOL) targetTypeIsSet {
  return __targetType_isset;
}

- (void) unsetTargetType {
  __targetType_isset = NO;
}

- (int64_t) docId {
  return __docId;
}

- (void) setDocId: (int64_t) docId {
  __docId = docId;
  __docId_isset = YES;
}

- (BOOL) docIdIsSet {
  return __docId_isset;
}

- (void) unsetDocId {
  __docId_isset = NO;
}

- (int64_t) deptId {
  return __deptId;
}

- (void) setDeptId: (int64_t) deptId {
  __deptId = deptId;
  __deptId_isset = YES;
}

- (BOOL) deptIdIsSet {
  return __deptId_isset;
}

- (void) unsetDeptId {
  __deptId_isset = NO;
}

- (NSString *) startDate {
  return [[__startDate retain_stub] autorelease_stub];
}

- (void) setStartDate: (NSString *) startDate {
  [startDate retain_stub];
  [__startDate release_stub];
  __startDate = startDate;
  __startDate_isset = YES;
}

- (BOOL) startDateIsSet {
  return __startDate_isset;
}

- (void) unsetStartDate {
  [__startDate release_stub];
  __startDate = nil;
  __startDate_isset = NO;
}

- (NSString *) endDate {
  return [[__endDate retain_stub] autorelease_stub];
}

- (void) setEndDate: (NSString *) endDate {
  [endDate retain_stub];
  [__endDate release_stub];
  __endDate = endDate;
  __endDate_isset = YES;
}

- (BOOL) endDateIsSet {
  return __endDate_isset;
}

- (void) unsetEndDate {
  [__endDate release_stub];
  __endDate = nil;
  __endDate_isset = NO;
}

- (NSString *) hisDeptId {
  return [[__hisDeptId retain_stub] autorelease_stub];
}

- (void) setHisDeptId: (NSString *) hisDeptId {
  [hisDeptId retain_stub];
  [__hisDeptId release_stub];
  __hisDeptId = hisDeptId;
  __hisDeptId_isset = YES;
}

- (BOOL) hisDeptIdIsSet {
  return __hisDeptId_isset;
}

- (void) unsetHisDeptId {
  [__hisDeptId release_stub];
  __hisDeptId = nil;
  __hisDeptId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTargetType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDocId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStartDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEndDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHisDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRegDatesReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__targetType_isset) {
    [outProtocol writeFieldBeginWithName: @"targetType" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __targetType];
    [outProtocol writeFieldEnd];
  }
  if (__docId_isset) {
    [outProtocol writeFieldBeginWithName: @"docId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __docId];
    [outProtocol writeFieldEnd];
  }
  if (__deptId_isset) {
    [outProtocol writeFieldBeginWithName: @"deptId" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __deptId];
    [outProtocol writeFieldEnd];
  }
  if (__startDate_isset) {
    if (__startDate != nil) {
      [outProtocol writeFieldBeginWithName: @"startDate" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __startDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__endDate_isset) {
    if (__endDate != nil) {
      [outProtocol writeFieldBeginWithName: @"endDate" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __endDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hisDeptId_isset) {
    if (__hisDeptId != nil) {
      [outProtocol writeFieldBeginWithName: @"hisDeptId" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __hisDeptId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetRegDatesReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",targetType:"];
  [ms appendFormat: @"%i", __targetType];
  [ms appendString: @",docId:"];
  [ms appendFormat: @"%qi", __docId];
  [ms appendString: @",deptId:"];
  [ms appendFormat: @"%qi", __deptId];
  [ms appendString: @",startDate:"];
  [ms appendFormat: @"\"%@\"", __startDate];
  [ms appendString: @",endDate:"];
  [ms appendFormat: @"\"%@\"", __endDate];
  [ms appendString: @",hisDeptId:"];
  [ms appendFormat: @"\"%@\"", __hisDeptId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetHospAnnReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.page = [[[NXTFPage alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header page: (NXTFPage *) page hospId: (int32_t) hospId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetHospAnnReq class]]) {
    return NO;
  }
  NXTFGetHospAnnReq *other = (NXTFGetHospAnnReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetHospAnnReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetHospAnnReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetDescSymptomReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header regId: (int64_t) regId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __regId = regId;
  __regId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [decoder decodeInt64ForKey: @"regId"];
    __regId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__regId_isset)
  {
    [encoder encodeInt64: __regId forKey: @"regId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [@(__regId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetDescSymptomReq class]]) {
    return NO;
  }
  NXTFGetDescSymptomReq *other = (NXTFGetDescSymptomReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && (__regId != other->__regId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) regId {
  return __regId;
}

- (void) setRegId: (int64_t) regId {
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  __regId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDescSymptomReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    [outProtocol writeFieldBeginWithName: @"regId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __regId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetDescSymptomReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"%qi", __regId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetAdvertisReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetAdvertisReq class]]) {
    return NO;
  }
  NXTFGetAdvertisReq *other = (NXTFGetAdvertisReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAdvertisReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetAdvertisReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPointNumReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header adId: (NSString *) adId hospId: (NSString *) hospId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __adId = [adId retain_stub];
  __adId_isset = YES;
  __hospId = [hospId retain_stub];
  __hospId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"adId"])
  {
    __adId = [[decoder decodeObjectForKey: @"adId"] retain_stub];
    __adId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [[decoder decodeObjectForKey: @"hospId"] retain_stub];
    __hospId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__adId_isset)
  {
    [encoder encodeObject: __adId forKey: @"adId"];
  }
  if (__hospId_isset)
  {
    [encoder encodeObject: __hospId forKey: @"hospId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __adId_isset ? 2654435761 : 0;
  if (__adId_isset)
  {
    hash = (hash * 31) ^ [__adId hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [__hospId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPointNumReq class]]) {
    return NO;
  }
  NXTFPointNumReq *other = (NXTFPointNumReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__adId_isset != other->__adId_isset) ||
      (__adId_isset && ((__adId || other->__adId) && ![__adId isEqual:other->__adId]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && ((__hospId || other->__hospId) && ![__hospId isEqual:other->__hospId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__adId release_stub];
  [__hospId release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) adId {
  return [[__adId retain_stub] autorelease_stub];
}

- (void) setAdId: (NSString *) adId {
  [adId retain_stub];
  [__adId release_stub];
  __adId = adId;
  __adId_isset = YES;
}

- (BOOL) adIdIsSet {
  return __adId_isset;
}

- (void) unsetAdId {
  [__adId release_stub];
  __adId = nil;
  __adId_isset = NO;
}

- (NSString *) hospId {
  return [[__hospId retain_stub] autorelease_stub];
}

- (void) setHospId: (NSString *) hospId {
  [hospId retain_stub];
  [__hospId release_stub];
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  [__hospId release_stub];
  __hospId = nil;
  __hospId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAdId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PointNumReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__adId_isset) {
    if (__adId != nil) {
      [outProtocol writeFieldBeginWithName: @"adId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __adId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    if (__hospId != nil) {
      [outProtocol writeFieldBeginWithName: @"hospId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __hospId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPointNumReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",adId:"];
  [ms appendFormat: @"\"%@\"", __adId];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"\"%@\"", __hospId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPatientHeadReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientHead: (NSData *) patientHead patientId: (NSString *) patientId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientHead = [patientHead retain_stub];
  __patientHead_isset = YES;
  __patientId = [patientId retain_stub];
  __patientId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientHead"])
  {
    __patientHead = [[decoder decodeObjectForKey: @"patientHead"] retain_stub];
    __patientHead_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [[decoder decodeObjectForKey: @"patientId"] retain_stub];
    __patientId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientHead_isset)
  {
    [encoder encodeObject: __patientHead forKey: @"patientHead"];
  }
  if (__patientId_isset)
  {
    [encoder encodeObject: __patientId forKey: @"patientId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientHead_isset ? 2654435761 : 0;
  if (__patientHead_isset)
  {
    hash = (hash * 31) ^ [__patientHead hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [__patientId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPatientHeadReq class]]) {
    return NO;
  }
  NXTFPatientHeadReq *other = (NXTFPatientHeadReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientHead_isset != other->__patientHead_isset) ||
      (__patientHead_isset && ((__patientHead || other->__patientHead) && ![__patientHead isEqual:other->__patientHead]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && ((__patientId || other->__patientId) && ![__patientId isEqual:other->__patientId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__patientHead release_stub];
  [__patientId release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSData *) patientHead {
  return [[__patientHead retain_stub] autorelease_stub];
}

- (void) setPatientHead: (NSData *) patientHead {
  [patientHead retain_stub];
  [__patientHead release_stub];
  __patientHead = patientHead;
  __patientHead_isset = YES;
}

- (BOOL) patientHeadIsSet {
  return __patientHead_isset;
}

- (void) unsetPatientHead {
  [__patientHead release_stub];
  __patientHead = nil;
  __patientHead_isset = NO;
}

- (NSString *) patientId {
  return [[__patientId retain_stub] autorelease_stub];
}

- (void) setPatientId: (NSString *) patientId {
  [patientId retain_stub];
  [__patientId release_stub];
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  [__patientId release_stub];
  __patientId = nil;
  __patientId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setPatientHead: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PatientHeadReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientHead_isset) {
    if (__patientHead != nil) {
      [outProtocol writeFieldBeginWithName: @"patientHead" type: TType_STRING fieldID: 2];
      [outProtocol writeBinary: __patientHead];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    if (__patientId != nil) {
      [outProtocol writeFieldBeginWithName: @"patientId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __patientId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPatientHeadReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientHead:"];
  [ms appendFormat: @"\"%@\"", __patientHead];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"\"%@\"", __patientId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetAutognosisSymsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header clientDictVer: (NSString *) clientDictVer
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __clientDictVer = [clientDictVer retain_stub];
  __clientDictVer_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"clientDictVer"])
  {
    __clientDictVer = [[decoder decodeObjectForKey: @"clientDictVer"] retain_stub];
    __clientDictVer_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__clientDictVer_isset)
  {
    [encoder encodeObject: __clientDictVer forKey: @"clientDictVer"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __clientDictVer_isset ? 2654435761 : 0;
  if (__clientDictVer_isset)
  {
    hash = (hash * 31) ^ [__clientDictVer hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetAutognosisSymsReq class]]) {
    return NO;
  }
  NXTFGetAutognosisSymsReq *other = (NXTFGetAutognosisSymsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__clientDictVer_isset != other->__clientDictVer_isset) ||
      (__clientDictVer_isset && ((__clientDictVer || other->__clientDictVer) && ![__clientDictVer isEqual:other->__clientDictVer]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__clientDictVer release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) clientDictVer {
  return [[__clientDictVer retain_stub] autorelease_stub];
}

- (void) setClientDictVer: (NSString *) clientDictVer {
  [clientDictVer retain_stub];
  [__clientDictVer release_stub];
  __clientDictVer = clientDictVer;
  __clientDictVer_isset = YES;
}

- (BOOL) clientDictVerIsSet {
  return __clientDictVer_isset;
}

- (void) unsetClientDictVer {
  [__clientDictVer release_stub];
  __clientDictVer = nil;
  __clientDictVer_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClientDictVer: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAutognosisSymsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__clientDictVer_isset) {
    if (__clientDictVer != nil) {
      [outProtocol writeFieldBeginWithName: @"clientDictVer" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __clientDictVer];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetAutognosisSymsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",clientDictVer:"];
  [ms appendFormat: @"\"%@\"", __clientDictVer];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetAutognosisDetailReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header crownId: (int32_t) crownId symptoms: (NSMutableArray *) symptoms dispMode: (int32_t) dispMode bodyPartId: (int32_t) bodyPartId bodyPartName: (NSString *) bodyPartName
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __crownId = crownId;
  __crownId_isset = YES;
  __symptoms = [symptoms retain_stub];
  __symptoms_isset = YES;
  __dispMode = dispMode;
  __dispMode_isset = YES;
  __bodyPartId = bodyPartId;
  __bodyPartId_isset = YES;
  __bodyPartName = [bodyPartName retain_stub];
  __bodyPartName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"crownId"])
  {
    __crownId = [decoder decodeInt32ForKey: @"crownId"];
    __crownId_isset = YES;
  }
  if ([decoder containsValueForKey: @"symptoms"])
  {
    __symptoms = [[decoder decodeObjectForKey: @"symptoms"] retain_stub];
    __symptoms_isset = YES;
  }
  if ([decoder containsValueForKey: @"dispMode"])
  {
    __dispMode = [decoder decodeInt32ForKey: @"dispMode"];
    __dispMode_isset = YES;
  }
  if ([decoder containsValueForKey: @"bodyPartId"])
  {
    __bodyPartId = [decoder decodeInt32ForKey: @"bodyPartId"];
    __bodyPartId_isset = YES;
  }
  if ([decoder containsValueForKey: @"bodyPartName"])
  {
    __bodyPartName = [[decoder decodeObjectForKey: @"bodyPartName"] retain_stub];
    __bodyPartName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__crownId_isset)
  {
    [encoder encodeInt32: __crownId forKey: @"crownId"];
  }
  if (__symptoms_isset)
  {
    [encoder encodeObject: __symptoms forKey: @"symptoms"];
  }
  if (__dispMode_isset)
  {
    [encoder encodeInt32: __dispMode forKey: @"dispMode"];
  }
  if (__bodyPartId_isset)
  {
    [encoder encodeInt32: __bodyPartId forKey: @"bodyPartId"];
  }
  if (__bodyPartName_isset)
  {
    [encoder encodeObject: __bodyPartName forKey: @"bodyPartName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __crownId_isset ? 2654435761 : 0;
  if (__crownId_isset)
  {
    hash = (hash * 31) ^ [@(__crownId) hash];
  }
  hash = (hash * 31) ^ __symptoms_isset ? 2654435761 : 0;
  if (__symptoms_isset)
  {
    hash = (hash * 31) ^ [__symptoms hash];
  }
  hash = (hash * 31) ^ __dispMode_isset ? 2654435761 : 0;
  if (__dispMode_isset)
  {
    hash = (hash * 31) ^ [@(__dispMode) hash];
  }
  hash = (hash * 31) ^ __bodyPartId_isset ? 2654435761 : 0;
  if (__bodyPartId_isset)
  {
    hash = (hash * 31) ^ [@(__bodyPartId) hash];
  }
  hash = (hash * 31) ^ __bodyPartName_isset ? 2654435761 : 0;
  if (__bodyPartName_isset)
  {
    hash = (hash * 31) ^ [__bodyPartName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetAutognosisDetailReq class]]) {
    return NO;
  }
  NXTFGetAutognosisDetailReq *other = (NXTFGetAutognosisDetailReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__crownId_isset != other->__crownId_isset) ||
      (__crownId_isset && (__crownId != other->__crownId))) {
    return NO;
  }
  if ((__symptoms_isset != other->__symptoms_isset) ||
      (__symptoms_isset && ((__symptoms || other->__symptoms) && ![__symptoms isEqual:other->__symptoms]))) {
    return NO;
  }
  if ((__dispMode_isset != other->__dispMode_isset) ||
      (__dispMode_isset && (__dispMode != other->__dispMode))) {
    return NO;
  }
  if ((__bodyPartId_isset != other->__bodyPartId_isset) ||
      (__bodyPartId_isset && (__bodyPartId != other->__bodyPartId))) {
    return NO;
  }
  if ((__bodyPartName_isset != other->__bodyPartName_isset) ||
      (__bodyPartName_isset && ((__bodyPartName || other->__bodyPartName) && ![__bodyPartName isEqual:other->__bodyPartName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__symptoms release_stub];
  [__bodyPartName release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) crownId {
  return __crownId;
}

- (void) setCrownId: (int32_t) crownId {
  __crownId = crownId;
  __crownId_isset = YES;
}

- (BOOL) crownIdIsSet {
  return __crownId_isset;
}

- (void) unsetCrownId {
  __crownId_isset = NO;
}

- (NSMutableArray *) symptoms {
  return [[__symptoms retain_stub] autorelease_stub];
}

- (void) setSymptoms: (NSMutableArray *) symptoms {
  [symptoms retain_stub];
  [__symptoms release_stub];
  __symptoms = symptoms;
  __symptoms_isset = YES;
}

- (BOOL) symptomsIsSet {
  return __symptoms_isset;
}

- (void) unsetSymptoms {
  [__symptoms release_stub];
  __symptoms = nil;
  __symptoms_isset = NO;
}

- (int32_t) dispMode {
  return __dispMode;
}

- (void) setDispMode: (int32_t) dispMode {
  __dispMode = dispMode;
  __dispMode_isset = YES;
}

- (BOOL) dispModeIsSet {
  return __dispMode_isset;
}

- (void) unsetDispMode {
  __dispMode_isset = NO;
}

- (int32_t) bodyPartId {
  return __bodyPartId;
}

- (void) setBodyPartId: (int32_t) bodyPartId {
  __bodyPartId = bodyPartId;
  __bodyPartId_isset = YES;
}

- (BOOL) bodyPartIdIsSet {
  return __bodyPartId_isset;
}

- (void) unsetBodyPartId {
  __bodyPartId_isset = NO;
}

- (NSString *) bodyPartName {
  return [[__bodyPartName retain_stub] autorelease_stub];
}

- (void) setBodyPartName: (NSString *) bodyPartName {
  [bodyPartName retain_stub];
  [__bodyPartName release_stub];
  __bodyPartName = bodyPartName;
  __bodyPartName_isset = YES;
}

- (BOOL) bodyPartNameIsSet {
  return __bodyPartName_isset;
}

- (void) unsetBodyPartName {
  [__bodyPartName release_stub];
  __bodyPartName = nil;
  __bodyPartName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCrownId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size30;
          [inProtocol readListBeginReturningElementType: NULL size: &_size30];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size30];
          int _i31;
          for (_i31 = 0; _i31 < _size30; ++_i31)
          {
            NSString * _elem32 = [inProtocol readString];
            [fieldValue addObject: _elem32];
          }
          [inProtocol readListEnd];
          [self setSymptoms: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDispMode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBodyPartId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBodyPartName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAutognosisDetailReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__crownId_isset) {
    [outProtocol writeFieldBeginWithName: @"crownId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __crownId];
    [outProtocol writeFieldEnd];
  }
  if (__symptoms_isset) {
    if (__symptoms != nil) {
      [outProtocol writeFieldBeginWithName: @"symptoms" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__symptoms count]];
        int idx34;
        for (idx34 = 0; idx34 < [__symptoms count]; idx34++)
        {
          [outProtocol writeString: [__symptoms objectAtIndex: idx34]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__dispMode_isset) {
    [outProtocol writeFieldBeginWithName: @"dispMode" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __dispMode];
    [outProtocol writeFieldEnd];
  }
  if (__bodyPartId_isset) {
    [outProtocol writeFieldBeginWithName: @"bodyPartId" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __bodyPartId];
    [outProtocol writeFieldEnd];
  }
  if (__bodyPartName_isset) {
    if (__bodyPartName != nil) {
      [outProtocol writeFieldBeginWithName: @"bodyPartName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __bodyPartName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetAutognosisDetailReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",crownId:"];
  [ms appendFormat: @"%i", __crownId];
  [ms appendString: @",symptoms:"];
  [ms appendFormat: @"%@", __symptoms];
  [ms appendString: @",dispMode:"];
  [ms appendFormat: @"%i", __dispMode];
  [ms appendString: @",bodyPartId:"];
  [ms appendFormat: @"%i", __bodyPartId];
  [ms appendString: @",bodyPartName:"];
  [ms appendFormat: @"\"%@\"", __bodyPartName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetAutognosisDisReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header diseaseId: (int64_t) diseaseId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __diseaseId = diseaseId;
  __diseaseId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"diseaseId"])
  {
    __diseaseId = [decoder decodeInt64ForKey: @"diseaseId"];
    __diseaseId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__diseaseId_isset)
  {
    [encoder encodeInt64: __diseaseId forKey: @"diseaseId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __diseaseId_isset ? 2654435761 : 0;
  if (__diseaseId_isset)
  {
    hash = (hash * 31) ^ [@(__diseaseId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetAutognosisDisReq class]]) {
    return NO;
  }
  NXTFGetAutognosisDisReq *other = (NXTFGetAutognosisDisReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__diseaseId_isset != other->__diseaseId_isset) ||
      (__diseaseId_isset && (__diseaseId != other->__diseaseId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) diseaseId {
  return __diseaseId;
}

- (void) setDiseaseId: (int64_t) diseaseId {
  __diseaseId = diseaseId;
  __diseaseId_isset = YES;
}

- (BOOL) diseaseIdIsSet {
  return __diseaseId_isset;
}

- (void) unsetDiseaseId {
  __diseaseId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDiseaseId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAutognosisDisReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diseaseId_isset) {
    [outProtocol writeFieldBeginWithName: @"diseaseId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __diseaseId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetAutognosisDisReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",diseaseId:"];
  [ms appendFormat: @"%qi", __diseaseId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFSetDefaultCardReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId patientId: (int64_t) patientId cardId: (int64_t) cardId isDefault: (int32_t) isDefault
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __cardId = cardId;
  __cardId_isset = YES;
  __isDefault = isDefault;
  __isDefault_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardId"])
  {
    __cardId = [decoder decodeInt64ForKey: @"cardId"];
    __cardId_isset = YES;
  }
  if ([decoder containsValueForKey: @"isDefault"])
  {
    __isDefault = [decoder decodeInt32ForKey: @"isDefault"];
    __isDefault_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__cardId_isset)
  {
    [encoder encodeInt64: __cardId forKey: @"cardId"];
  }
  if (__isDefault_isset)
  {
    [encoder encodeInt32: __isDefault forKey: @"isDefault"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __cardId_isset ? 2654435761 : 0;
  if (__cardId_isset)
  {
    hash = (hash * 31) ^ [@(__cardId) hash];
  }
  hash = (hash * 31) ^ __isDefault_isset ? 2654435761 : 0;
  if (__isDefault_isset)
  {
    hash = (hash * 31) ^ [@(__isDefault) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFSetDefaultCardReq class]]) {
    return NO;
  }
  NXTFSetDefaultCardReq *other = (NXTFSetDefaultCardReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__cardId_isset != other->__cardId_isset) ||
      (__cardId_isset && (__cardId != other->__cardId))) {
    return NO;
  }
  if ((__isDefault_isset != other->__isDefault_isset) ||
      (__isDefault_isset && (__isDefault != other->__isDefault))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (int64_t) cardId {
  return __cardId;
}

- (void) setCardId: (int64_t) cardId {
  __cardId = cardId;
  __cardId_isset = YES;
}

- (BOOL) cardIdIsSet {
  return __cardId_isset;
}

- (void) unsetCardId {
  __cardId_isset = NO;
}

- (int32_t) isDefault {
  return __isDefault;
}

- (void) setIsDefault: (int32_t) isDefault {
  __isDefault = isDefault;
  __isDefault_isset = YES;
}

- (BOOL) isDefaultIsSet {
  return __isDefault_isset;
}

- (void) unsetIsDefault {
  __isDefault_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCardId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsDefault: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetDefaultCardReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__cardId_isset) {
    [outProtocol writeFieldBeginWithName: @"cardId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __cardId];
    [outProtocol writeFieldEnd];
  }
  if (__isDefault_isset) {
    [outProtocol writeFieldBeginWithName: @"isDefault" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __isDefault];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFSetDefaultCardReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",cardId:"];
  [ms appendFormat: @"%qi", __cardId];
  [ms appendString: @",isDefault:"];
  [ms appendFormat: @"%i", __isDefault];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRemoveMedCardReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId patientId: (int64_t) patientId cardId: (int64_t) cardId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __cardId = cardId;
  __cardId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardId"])
  {
    __cardId = [decoder decodeInt64ForKey: @"cardId"];
    __cardId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__cardId_isset)
  {
    [encoder encodeInt64: __cardId forKey: @"cardId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __cardId_isset ? 2654435761 : 0;
  if (__cardId_isset)
  {
    hash = (hash * 31) ^ [@(__cardId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRemoveMedCardReq class]]) {
    return NO;
  }
  NXTFRemoveMedCardReq *other = (NXTFRemoveMedCardReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__cardId_isset != other->__cardId_isset) ||
      (__cardId_isset && (__cardId != other->__cardId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (int64_t) cardId {
  return __cardId;
}

- (void) setCardId: (int64_t) cardId {
  __cardId = cardId;
  __cardId_isset = YES;
}

- (BOOL) cardIdIsSet {
  return __cardId_isset;
}

- (void) unsetCardId {
  __cardId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCardId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemoveMedCardReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__cardId_isset) {
    [outProtocol writeFieldBeginWithName: @"cardId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __cardId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRemoveMedCardReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",cardId:"];
  [ms appendFormat: @"%qi", __cardId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFCheckInReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header regId: (int64_t) regId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __regId = regId;
  __regId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [decoder decodeInt64ForKey: @"regId"];
    __regId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__regId_isset)
  {
    [encoder encodeInt64: __regId forKey: @"regId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [@(__regId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFCheckInReq class]]) {
    return NO;
  }
  NXTFCheckInReq *other = (NXTFCheckInReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && (__regId != other->__regId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) regId {
  return __regId;
}

- (void) setRegId: (int64_t) regId {
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  __regId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CheckInReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    [outProtocol writeFieldBeginWithName: @"regId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __regId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFCheckInReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"%qi", __regId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetStartPicsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header weight: (int32_t) weight height: (int32_t) height prevPicVer: (NSString *) prevPicVer
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __weight = weight;
  __weight_isset = YES;
  __height = height;
  __height_isset = YES;
  __prevPicVer = [prevPicVer retain_stub];
  __prevPicVer_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"weight"])
  {
    __weight = [decoder decodeInt32ForKey: @"weight"];
    __weight_isset = YES;
  }
  if ([decoder containsValueForKey: @"height"])
  {
    __height = [decoder decodeInt32ForKey: @"height"];
    __height_isset = YES;
  }
  if ([decoder containsValueForKey: @"prevPicVer"])
  {
    __prevPicVer = [[decoder decodeObjectForKey: @"prevPicVer"] retain_stub];
    __prevPicVer_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__weight_isset)
  {
    [encoder encodeInt32: __weight forKey: @"weight"];
  }
  if (__height_isset)
  {
    [encoder encodeInt32: __height forKey: @"height"];
  }
  if (__prevPicVer_isset)
  {
    [encoder encodeObject: __prevPicVer forKey: @"prevPicVer"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __weight_isset ? 2654435761 : 0;
  if (__weight_isset)
  {
    hash = (hash * 31) ^ [@(__weight) hash];
  }
  hash = (hash * 31) ^ __height_isset ? 2654435761 : 0;
  if (__height_isset)
  {
    hash = (hash * 31) ^ [@(__height) hash];
  }
  hash = (hash * 31) ^ __prevPicVer_isset ? 2654435761 : 0;
  if (__prevPicVer_isset)
  {
    hash = (hash * 31) ^ [__prevPicVer hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetStartPicsReq class]]) {
    return NO;
  }
  NXTFGetStartPicsReq *other = (NXTFGetStartPicsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__weight_isset != other->__weight_isset) ||
      (__weight_isset && (__weight != other->__weight))) {
    return NO;
  }
  if ((__height_isset != other->__height_isset) ||
      (__height_isset && (__height != other->__height))) {
    return NO;
  }
  if ((__prevPicVer_isset != other->__prevPicVer_isset) ||
      (__prevPicVer_isset && ((__prevPicVer || other->__prevPicVer) && ![__prevPicVer isEqual:other->__prevPicVer]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__prevPicVer release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) weight {
  return __weight;
}

- (void) setWeight: (int32_t) weight {
  __weight = weight;
  __weight_isset = YES;
}

- (BOOL) weightIsSet {
  return __weight_isset;
}

- (void) unsetWeight {
  __weight_isset = NO;
}

- (int32_t) height {
  return __height;
}

- (void) setHeight: (int32_t) height {
  __height = height;
  __height_isset = YES;
}

- (BOOL) heightIsSet {
  return __height_isset;
}

- (void) unsetHeight {
  __height_isset = NO;
}

- (NSString *) prevPicVer {
  return [[__prevPicVer retain_stub] autorelease_stub];
}

- (void) setPrevPicVer: (NSString *) prevPicVer {
  [prevPicVer retain_stub];
  [__prevPicVer release_stub];
  __prevPicVer = prevPicVer;
  __prevPicVer_isset = YES;
}

- (BOOL) prevPicVerIsSet {
  return __prevPicVer_isset;
}

- (void) unsetPrevPicVer {
  [__prevPicVer release_stub];
  __prevPicVer = nil;
  __prevPicVer_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setWeight: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHeight: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPrevPicVer: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetStartPicsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__weight_isset) {
    [outProtocol writeFieldBeginWithName: @"weight" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __weight];
    [outProtocol writeFieldEnd];
  }
  if (__height_isset) {
    [outProtocol writeFieldBeginWithName: @"height" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __height];
    [outProtocol writeFieldEnd];
  }
  if (__prevPicVer_isset) {
    if (__prevPicVer != nil) {
      [outProtocol writeFieldBeginWithName: @"prevPicVer" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __prevPicVer];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetStartPicsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",weight:"];
  [ms appendFormat: @"%i", __weight];
  [ms appendString: @",height:"];
  [ms appendFormat: @"%i", __height];
  [ms appendString: @",prevPicVer:"];
  [ms appendFormat: @"\"%@\"", __prevPicVer];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetMedRecordReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientId: (int64_t) patientId hospId: (int32_t) hospId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetMedRecordReq class]]) {
    return NO;
  }
  NXTFGetMedRecordReq *other = (NXTFGetMedRecordReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMedRecordReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetMedRecordReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFOrderChargeReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header cardId: (int64_t) cardId paymentFee: (double) paymentFee
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __cardId = cardId;
  __cardId_isset = YES;
  __paymentFee = paymentFee;
  __paymentFee_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardId"])
  {
    __cardId = [decoder decodeInt64ForKey: @"cardId"];
    __cardId_isset = YES;
  }
  if ([decoder containsValueForKey: @"paymentFee"])
  {
    __paymentFee = [decoder decodeDoubleForKey: @"paymentFee"];
    __paymentFee_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__cardId_isset)
  {
    [encoder encodeInt64: __cardId forKey: @"cardId"];
  }
  if (__paymentFee_isset)
  {
    [encoder encodeDouble: __paymentFee forKey: @"paymentFee"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __cardId_isset ? 2654435761 : 0;
  if (__cardId_isset)
  {
    hash = (hash * 31) ^ [@(__cardId) hash];
  }
  hash = (hash * 31) ^ __paymentFee_isset ? 2654435761 : 0;
  if (__paymentFee_isset)
  {
    hash = (hash * 31) ^ [@(__paymentFee) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFOrderChargeReq class]]) {
    return NO;
  }
  NXTFOrderChargeReq *other = (NXTFOrderChargeReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__cardId_isset != other->__cardId_isset) ||
      (__cardId_isset && (__cardId != other->__cardId))) {
    return NO;
  }
  if ((__paymentFee_isset != other->__paymentFee_isset) ||
      (__paymentFee_isset && (__paymentFee != other->__paymentFee))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) cardId {
  return __cardId;
}

- (void) setCardId: (int64_t) cardId {
  __cardId = cardId;
  __cardId_isset = YES;
}

- (BOOL) cardIdIsSet {
  return __cardId_isset;
}

- (void) unsetCardId {
  __cardId_isset = NO;
}

- (double) paymentFee {
  return __paymentFee;
}

- (void) setPaymentFee: (double) paymentFee {
  __paymentFee = paymentFee;
  __paymentFee_isset = YES;
}

- (BOOL) paymentFeeIsSet {
  return __paymentFee_isset;
}

- (void) unsetPaymentFee {
  __paymentFee_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCardId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setPaymentFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OrderChargeReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cardId_isset) {
    [outProtocol writeFieldBeginWithName: @"cardId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __cardId];
    [outProtocol writeFieldEnd];
  }
  if (__paymentFee_isset) {
    [outProtocol writeFieldBeginWithName: @"paymentFee" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __paymentFee];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFOrderChargeReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",cardId:"];
  [ms appendFormat: @"%qi", __cardId];
  [ms appendString: @",paymentFee:"];
  [ms appendFormat: @"%f", __paymentFee];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetImHostsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetImHostsReq class]]) {
    return NO;
  }
  NXTFGetImHostsReq *other = (NXTFGetImHostsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetImHostsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetImHostsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRegisterImReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRegisterImReq class]]) {
    return NO;
  }
  NXTFRegisterImReq *other = (NXTFRegisterImReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterImReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRegisterImReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetDrImIdReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header drId: (int64_t) drId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __drId = drId;
  __drId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"drId"])
  {
    __drId = [decoder decodeInt64ForKey: @"drId"];
    __drId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__drId_isset)
  {
    [encoder encodeInt64: __drId forKey: @"drId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __drId_isset ? 2654435761 : 0;
  if (__drId_isset)
  {
    hash = (hash * 31) ^ [@(__drId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetDrImIdReq class]]) {
    return NO;
  }
  NXTFGetDrImIdReq *other = (NXTFGetDrImIdReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__drId_isset != other->__drId_isset) ||
      (__drId_isset && (__drId != other->__drId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) drId {
  return __drId;
}

- (void) setDrId: (int64_t) drId {
  __drId = drId;
  __drId_isset = YES;
}

- (BOOL) drIdIsSet {
  return __drId_isset;
}

- (void) unsetDrId {
  __drId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDrId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDrImIdReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drId_isset) {
    [outProtocol writeFieldBeginWithName: @"drId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __drId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetDrImIdReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",drId:"];
  [ms appendFormat: @"%qi", __drId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRegistConsultReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header drId: (int64_t) drId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __drId = drId;
  __drId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"drId"])
  {
    __drId = [decoder decodeInt64ForKey: @"drId"];
    __drId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__drId_isset)
  {
    [encoder encodeInt64: __drId forKey: @"drId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __drId_isset ? 2654435761 : 0;
  if (__drId_isset)
  {
    hash = (hash * 31) ^ [@(__drId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRegistConsultReq class]]) {
    return NO;
  }
  NXTFRegistConsultReq *other = (NXTFRegistConsultReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__drId_isset != other->__drId_isset) ||
      (__drId_isset && (__drId != other->__drId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) drId {
  return __drId;
}

- (void) setDrId: (int64_t) drId {
  __drId = drId;
  __drId_isset = YES;
}

- (BOOL) drIdIsSet {
  return __drId_isset;
}

- (void) unsetDrId {
  __drId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDrId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegistConsultReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drId_isset) {
    [outProtocol writeFieldBeginWithName: @"drId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __drId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRegistConsultReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",drId:"];
  [ms appendFormat: @"%qi", __drId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFileDownloadReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header groupName: (NSString *) groupName remoteFilename: (NSString *) remoteFilename msgId: (NSString *) msgId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __groupName = [groupName retain_stub];
  __groupName_isset = YES;
  __remoteFilename = [remoteFilename retain_stub];
  __remoteFilename_isset = YES;
  __msgId = [msgId retain_stub];
  __msgId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"groupName"])
  {
    __groupName = [[decoder decodeObjectForKey: @"groupName"] retain_stub];
    __groupName_isset = YES;
  }
  if ([decoder containsValueForKey: @"remoteFilename"])
  {
    __remoteFilename = [[decoder decodeObjectForKey: @"remoteFilename"] retain_stub];
    __remoteFilename_isset = YES;
  }
  if ([decoder containsValueForKey: @"msgId"])
  {
    __msgId = [[decoder decodeObjectForKey: @"msgId"] retain_stub];
    __msgId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__groupName_isset)
  {
    [encoder encodeObject: __groupName forKey: @"groupName"];
  }
  if (__remoteFilename_isset)
  {
    [encoder encodeObject: __remoteFilename forKey: @"remoteFilename"];
  }
  if (__msgId_isset)
  {
    [encoder encodeObject: __msgId forKey: @"msgId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __groupName_isset ? 2654435761 : 0;
  if (__groupName_isset)
  {
    hash = (hash * 31) ^ [__groupName hash];
  }
  hash = (hash * 31) ^ __remoteFilename_isset ? 2654435761 : 0;
  if (__remoteFilename_isset)
  {
    hash = (hash * 31) ^ [__remoteFilename hash];
  }
  hash = (hash * 31) ^ __msgId_isset ? 2654435761 : 0;
  if (__msgId_isset)
  {
    hash = (hash * 31) ^ [__msgId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFileDownloadReq class]]) {
    return NO;
  }
  NXTFFileDownloadReq *other = (NXTFFileDownloadReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__groupName_isset != other->__groupName_isset) ||
      (__groupName_isset && ((__groupName || other->__groupName) && ![__groupName isEqual:other->__groupName]))) {
    return NO;
  }
  if ((__remoteFilename_isset != other->__remoteFilename_isset) ||
      (__remoteFilename_isset && ((__remoteFilename || other->__remoteFilename) && ![__remoteFilename isEqual:other->__remoteFilename]))) {
    return NO;
  }
  if ((__msgId_isset != other->__msgId_isset) ||
      (__msgId_isset && ((__msgId || other->__msgId) && ![__msgId isEqual:other->__msgId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__groupName release_stub];
  [__remoteFilename release_stub];
  [__msgId release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) groupName {
  return [[__groupName retain_stub] autorelease_stub];
}

- (void) setGroupName: (NSString *) groupName {
  [groupName retain_stub];
  [__groupName release_stub];
  __groupName = groupName;
  __groupName_isset = YES;
}

- (BOOL) groupNameIsSet {
  return __groupName_isset;
}

- (void) unsetGroupName {
  [__groupName release_stub];
  __groupName = nil;
  __groupName_isset = NO;
}

- (NSString *) remoteFilename {
  return [[__remoteFilename retain_stub] autorelease_stub];
}

- (void) setRemoteFilename: (NSString *) remoteFilename {
  [remoteFilename retain_stub];
  [__remoteFilename release_stub];
  __remoteFilename = remoteFilename;
  __remoteFilename_isset = YES;
}

- (BOOL) remoteFilenameIsSet {
  return __remoteFilename_isset;
}

- (void) unsetRemoteFilename {
  [__remoteFilename release_stub];
  __remoteFilename = nil;
  __remoteFilename_isset = NO;
}

- (NSString *) msgId {
  return [[__msgId retain_stub] autorelease_stub];
}

- (void) setMsgId: (NSString *) msgId {
  [msgId retain_stub];
  [__msgId release_stub];
  __msgId = msgId;
  __msgId_isset = YES;
}

- (BOOL) msgIdIsSet {
  return __msgId_isset;
}

- (void) unsetMsgId {
  [__msgId release_stub];
  __msgId = nil;
  __msgId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGroupName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemoteFilename: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsgId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FileDownloadReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__groupName_isset) {
    if (__groupName != nil) {
      [outProtocol writeFieldBeginWithName: @"groupName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __groupName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__remoteFilename_isset) {
    if (__remoteFilename != nil) {
      [outProtocol writeFieldBeginWithName: @"remoteFilename" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __remoteFilename];
      [outProtocol writeFieldEnd];
    }
  }
  if (__msgId_isset) {
    if (__msgId != nil) {
      [outProtocol writeFieldBeginWithName: @"msgId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __msgId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFileDownloadReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",groupName:"];
  [ms appendFormat: @"\"%@\"", __groupName];
  [ms appendString: @",remoteFilename:"];
  [ms appendFormat: @"\"%@\"", __remoteFilename];
  [ms appendString: @",msgId:"];
  [ms appendFormat: @"\"%@\"", __msgId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFileUploadReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.ttl = 30;

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header groupName: (NSString *) groupName fileContent: (NSData *) fileContent fileExtName: (NSString *) fileExtName masterFilename: (NSString *) masterFilename slavePrefixName: (NSString *) slavePrefixName msgId: (NSString *) msgId ttl: (int32_t) ttl
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __groupName = [groupName retain_stub];
  __groupName_isset = YES;
  __fileContent = [fileContent retain_stub];
  __fileContent_isset = YES;
  __fileExtName = [fileExtName retain_stub];
  __fileExtName_isset = YES;
  __masterFilename = [masterFilename retain_stub];
  __masterFilename_isset = YES;
  __slavePrefixName = [slavePrefixName retain_stub];
  __slavePrefixName_isset = YES;
  __msgId = [msgId retain_stub];
  __msgId_isset = YES;
  __ttl = ttl;
  __ttl_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"groupName"])
  {
    __groupName = [[decoder decodeObjectForKey: @"groupName"] retain_stub];
    __groupName_isset = YES;
  }
  if ([decoder containsValueForKey: @"fileContent"])
  {
    __fileContent = [[decoder decodeObjectForKey: @"fileContent"] retain_stub];
    __fileContent_isset = YES;
  }
  if ([decoder containsValueForKey: @"fileExtName"])
  {
    __fileExtName = [[decoder decodeObjectForKey: @"fileExtName"] retain_stub];
    __fileExtName_isset = YES;
  }
  if ([decoder containsValueForKey: @"masterFilename"])
  {
    __masterFilename = [[decoder decodeObjectForKey: @"masterFilename"] retain_stub];
    __masterFilename_isset = YES;
  }
  if ([decoder containsValueForKey: @"slavePrefixName"])
  {
    __slavePrefixName = [[decoder decodeObjectForKey: @"slavePrefixName"] retain_stub];
    __slavePrefixName_isset = YES;
  }
  if ([decoder containsValueForKey: @"msgId"])
  {
    __msgId = [[decoder decodeObjectForKey: @"msgId"] retain_stub];
    __msgId_isset = YES;
  }
  if ([decoder containsValueForKey: @"ttl"])
  {
    __ttl = [decoder decodeInt32ForKey: @"ttl"];
    __ttl_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__groupName_isset)
  {
    [encoder encodeObject: __groupName forKey: @"groupName"];
  }
  if (__fileContent_isset)
  {
    [encoder encodeObject: __fileContent forKey: @"fileContent"];
  }
  if (__fileExtName_isset)
  {
    [encoder encodeObject: __fileExtName forKey: @"fileExtName"];
  }
  if (__masterFilename_isset)
  {
    [encoder encodeObject: __masterFilename forKey: @"masterFilename"];
  }
  if (__slavePrefixName_isset)
  {
    [encoder encodeObject: __slavePrefixName forKey: @"slavePrefixName"];
  }
  if (__msgId_isset)
  {
    [encoder encodeObject: __msgId forKey: @"msgId"];
  }
  if (__ttl_isset)
  {
    [encoder encodeInt32: __ttl forKey: @"ttl"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __groupName_isset ? 2654435761 : 0;
  if (__groupName_isset)
  {
    hash = (hash * 31) ^ [__groupName hash];
  }
  hash = (hash * 31) ^ __fileContent_isset ? 2654435761 : 0;
  if (__fileContent_isset)
  {
    hash = (hash * 31) ^ [__fileContent hash];
  }
  hash = (hash * 31) ^ __fileExtName_isset ? 2654435761 : 0;
  if (__fileExtName_isset)
  {
    hash = (hash * 31) ^ [__fileExtName hash];
  }
  hash = (hash * 31) ^ __masterFilename_isset ? 2654435761 : 0;
  if (__masterFilename_isset)
  {
    hash = (hash * 31) ^ [__masterFilename hash];
  }
  hash = (hash * 31) ^ __slavePrefixName_isset ? 2654435761 : 0;
  if (__slavePrefixName_isset)
  {
    hash = (hash * 31) ^ [__slavePrefixName hash];
  }
  hash = (hash * 31) ^ __msgId_isset ? 2654435761 : 0;
  if (__msgId_isset)
  {
    hash = (hash * 31) ^ [__msgId hash];
  }
  hash = (hash * 31) ^ __ttl_isset ? 2654435761 : 0;
  if (__ttl_isset)
  {
    hash = (hash * 31) ^ [@(__ttl) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFileUploadReq class]]) {
    return NO;
  }
  NXTFFileUploadReq *other = (NXTFFileUploadReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__groupName_isset != other->__groupName_isset) ||
      (__groupName_isset && ((__groupName || other->__groupName) && ![__groupName isEqual:other->__groupName]))) {
    return NO;
  }
  if ((__fileContent_isset != other->__fileContent_isset) ||
      (__fileContent_isset && ((__fileContent || other->__fileContent) && ![__fileContent isEqual:other->__fileContent]))) {
    return NO;
  }
  if ((__fileExtName_isset != other->__fileExtName_isset) ||
      (__fileExtName_isset && ((__fileExtName || other->__fileExtName) && ![__fileExtName isEqual:other->__fileExtName]))) {
    return NO;
  }
  if ((__masterFilename_isset != other->__masterFilename_isset) ||
      (__masterFilename_isset && ((__masterFilename || other->__masterFilename) && ![__masterFilename isEqual:other->__masterFilename]))) {
    return NO;
  }
  if ((__slavePrefixName_isset != other->__slavePrefixName_isset) ||
      (__slavePrefixName_isset && ((__slavePrefixName || other->__slavePrefixName) && ![__slavePrefixName isEqual:other->__slavePrefixName]))) {
    return NO;
  }
  if ((__msgId_isset != other->__msgId_isset) ||
      (__msgId_isset && ((__msgId || other->__msgId) && ![__msgId isEqual:other->__msgId]))) {
    return NO;
  }
  if ((__ttl_isset != other->__ttl_isset) ||
      (__ttl_isset && (__ttl != other->__ttl))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__groupName release_stub];
  [__fileContent release_stub];
  [__fileExtName release_stub];
  [__masterFilename release_stub];
  [__slavePrefixName release_stub];
  [__msgId release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) groupName {
  return [[__groupName retain_stub] autorelease_stub];
}

- (void) setGroupName: (NSString *) groupName {
  [groupName retain_stub];
  [__groupName release_stub];
  __groupName = groupName;
  __groupName_isset = YES;
}

- (BOOL) groupNameIsSet {
  return __groupName_isset;
}

- (void) unsetGroupName {
  [__groupName release_stub];
  __groupName = nil;
  __groupName_isset = NO;
}

- (NSData *) fileContent {
  return [[__fileContent retain_stub] autorelease_stub];
}

- (void) setFileContent: (NSData *) fileContent {
  [fileContent retain_stub];
  [__fileContent release_stub];
  __fileContent = fileContent;
  __fileContent_isset = YES;
}

- (BOOL) fileContentIsSet {
  return __fileContent_isset;
}

- (void) unsetFileContent {
  [__fileContent release_stub];
  __fileContent = nil;
  __fileContent_isset = NO;
}

- (NSString *) fileExtName {
  return [[__fileExtName retain_stub] autorelease_stub];
}

- (void) setFileExtName: (NSString *) fileExtName {
  [fileExtName retain_stub];
  [__fileExtName release_stub];
  __fileExtName = fileExtName;
  __fileExtName_isset = YES;
}

- (BOOL) fileExtNameIsSet {
  return __fileExtName_isset;
}

- (void) unsetFileExtName {
  [__fileExtName release_stub];
  __fileExtName = nil;
  __fileExtName_isset = NO;
}

- (NSString *) masterFilename {
  return [[__masterFilename retain_stub] autorelease_stub];
}

- (void) setMasterFilename: (NSString *) masterFilename {
  [masterFilename retain_stub];
  [__masterFilename release_stub];
  __masterFilename = masterFilename;
  __masterFilename_isset = YES;
}

- (BOOL) masterFilenameIsSet {
  return __masterFilename_isset;
}

- (void) unsetMasterFilename {
  [__masterFilename release_stub];
  __masterFilename = nil;
  __masterFilename_isset = NO;
}

- (NSString *) slavePrefixName {
  return [[__slavePrefixName retain_stub] autorelease_stub];
}

- (void) setSlavePrefixName: (NSString *) slavePrefixName {
  [slavePrefixName retain_stub];
  [__slavePrefixName release_stub];
  __slavePrefixName = slavePrefixName;
  __slavePrefixName_isset = YES;
}

- (BOOL) slavePrefixNameIsSet {
  return __slavePrefixName_isset;
}

- (void) unsetSlavePrefixName {
  [__slavePrefixName release_stub];
  __slavePrefixName = nil;
  __slavePrefixName_isset = NO;
}

- (NSString *) msgId {
  return [[__msgId retain_stub] autorelease_stub];
}

- (void) setMsgId: (NSString *) msgId {
  [msgId retain_stub];
  [__msgId release_stub];
  __msgId = msgId;
  __msgId_isset = YES;
}

- (BOOL) msgIdIsSet {
  return __msgId_isset;
}

- (void) unsetMsgId {
  [__msgId release_stub];
  __msgId = nil;
  __msgId_isset = NO;
}

- (int32_t) ttl {
  return __ttl;
}

- (void) setTtl: (int32_t) ttl {
  __ttl = ttl;
  __ttl_isset = YES;
}

- (BOOL) ttlIsSet {
  return __ttl_isset;
}

- (void) unsetTtl {
  __ttl_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGroupName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setFileContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFileExtName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMasterFilename: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSlavePrefixName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsgId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTtl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FileUploadReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__groupName_isset) {
    if (__groupName != nil) {
      [outProtocol writeFieldBeginWithName: @"groupName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __groupName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fileContent_isset) {
    if (__fileContent != nil) {
      [outProtocol writeFieldBeginWithName: @"fileContent" type: TType_STRING fieldID: 3];
      [outProtocol writeBinary: __fileContent];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fileExtName_isset) {
    if (__fileExtName != nil) {
      [outProtocol writeFieldBeginWithName: @"fileExtName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __fileExtName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__masterFilename_isset) {
    if (__masterFilename != nil) {
      [outProtocol writeFieldBeginWithName: @"masterFilename" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __masterFilename];
      [outProtocol writeFieldEnd];
    }
  }
  if (__slavePrefixName_isset) {
    if (__slavePrefixName != nil) {
      [outProtocol writeFieldBeginWithName: @"slavePrefixName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __slavePrefixName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__msgId_isset) {
    if (__msgId != nil) {
      [outProtocol writeFieldBeginWithName: @"msgId" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __msgId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ttl_isset) {
    [outProtocol writeFieldBeginWithName: @"ttl" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __ttl];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFileUploadReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",groupName:"];
  [ms appendFormat: @"\"%@\"", __groupName];
  [ms appendString: @",fileContent:"];
  [ms appendFormat: @"\"%@\"", __fileContent];
  [ms appendString: @",fileExtName:"];
  [ms appendFormat: @"\"%@\"", __fileExtName];
  [ms appendString: @",masterFilename:"];
  [ms appendFormat: @"\"%@\"", __masterFilename];
  [ms appendString: @",slavePrefixName:"];
  [ms appendFormat: @"\"%@\"", __slavePrefixName];
  [ms appendString: @",msgId:"];
  [ms appendFormat: @"\"%@\"", __msgId];
  [ms appendString: @",ttl:"];
  [ms appendFormat: @"%i", __ttl];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetEmrInfoReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header regId: (int64_t) regId hospId: (int32_t) hospId patientId: (int64_t) patientId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __regId = regId;
  __regId_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [decoder decodeInt64ForKey: @"regId"];
    __regId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__regId_isset)
  {
    [encoder encodeInt64: __regId forKey: @"regId"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [@(__regId) hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetEmrInfoReq class]]) {
    return NO;
  }
  NXTFGetEmrInfoReq *other = (NXTFGetEmrInfoReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && (__regId != other->__regId))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) regId {
  return __regId;
}

- (void) setRegId: (int64_t) regId {
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  __regId_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetEmrInfoReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    [outProtocol writeFieldBeginWithName: @"regId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __regId];
    [outProtocol writeFieldEnd];
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetEmrInfoReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"%qi", __regId];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetVisitsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId hisDeptId: (NSString *) hisDeptId startDate: (NSString *) startDate endDate: (NSString *) endDate deptId: (int64_t) deptId scheduleType: (int32_t) scheduleType
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __hisDeptId = [hisDeptId retain_stub];
  __hisDeptId_isset = YES;
  __startDate = [startDate retain_stub];
  __startDate_isset = YES;
  __endDate = [endDate retain_stub];
  __endDate_isset = YES;
  __deptId = deptId;
  __deptId_isset = YES;
  __scheduleType = scheduleType;
  __scheduleType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hisDeptId"])
  {
    __hisDeptId = [[decoder decodeObjectForKey: @"hisDeptId"] retain_stub];
    __hisDeptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"startDate"])
  {
    __startDate = [[decoder decodeObjectForKey: @"startDate"] retain_stub];
    __startDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"endDate"])
  {
    __endDate = [[decoder decodeObjectForKey: @"endDate"] retain_stub];
    __endDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptId"])
  {
    __deptId = [decoder decodeInt64ForKey: @"deptId"];
    __deptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"scheduleType"])
  {
    __scheduleType = [decoder decodeInt32ForKey: @"scheduleType"];
    __scheduleType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__hisDeptId_isset)
  {
    [encoder encodeObject: __hisDeptId forKey: @"hisDeptId"];
  }
  if (__startDate_isset)
  {
    [encoder encodeObject: __startDate forKey: @"startDate"];
  }
  if (__endDate_isset)
  {
    [encoder encodeObject: __endDate forKey: @"endDate"];
  }
  if (__deptId_isset)
  {
    [encoder encodeInt64: __deptId forKey: @"deptId"];
  }
  if (__scheduleType_isset)
  {
    [encoder encodeInt32: __scheduleType forKey: @"scheduleType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __hisDeptId_isset ? 2654435761 : 0;
  if (__hisDeptId_isset)
  {
    hash = (hash * 31) ^ [__hisDeptId hash];
  }
  hash = (hash * 31) ^ __startDate_isset ? 2654435761 : 0;
  if (__startDate_isset)
  {
    hash = (hash * 31) ^ [__startDate hash];
  }
  hash = (hash * 31) ^ __endDate_isset ? 2654435761 : 0;
  if (__endDate_isset)
  {
    hash = (hash * 31) ^ [__endDate hash];
  }
  hash = (hash * 31) ^ __deptId_isset ? 2654435761 : 0;
  if (__deptId_isset)
  {
    hash = (hash * 31) ^ [@(__deptId) hash];
  }
  hash = (hash * 31) ^ __scheduleType_isset ? 2654435761 : 0;
  if (__scheduleType_isset)
  {
    hash = (hash * 31) ^ [@(__scheduleType) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetVisitsReq class]]) {
    return NO;
  }
  NXTFGetVisitsReq *other = (NXTFGetVisitsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__hisDeptId_isset != other->__hisDeptId_isset) ||
      (__hisDeptId_isset && ((__hisDeptId || other->__hisDeptId) && ![__hisDeptId isEqual:other->__hisDeptId]))) {
    return NO;
  }
  if ((__startDate_isset != other->__startDate_isset) ||
      (__startDate_isset && ((__startDate || other->__startDate) && ![__startDate isEqual:other->__startDate]))) {
    return NO;
  }
  if ((__endDate_isset != other->__endDate_isset) ||
      (__endDate_isset && ((__endDate || other->__endDate) && ![__endDate isEqual:other->__endDate]))) {
    return NO;
  }
  if ((__deptId_isset != other->__deptId_isset) ||
      (__deptId_isset && (__deptId != other->__deptId))) {
    return NO;
  }
  if ((__scheduleType_isset != other->__scheduleType_isset) ||
      (__scheduleType_isset && (__scheduleType != other->__scheduleType))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__hisDeptId release_stub];
  [__startDate release_stub];
  [__endDate release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (NSString *) hisDeptId {
  return [[__hisDeptId retain_stub] autorelease_stub];
}

- (void) setHisDeptId: (NSString *) hisDeptId {
  [hisDeptId retain_stub];
  [__hisDeptId release_stub];
  __hisDeptId = hisDeptId;
  __hisDeptId_isset = YES;
}

- (BOOL) hisDeptIdIsSet {
  return __hisDeptId_isset;
}

- (void) unsetHisDeptId {
  [__hisDeptId release_stub];
  __hisDeptId = nil;
  __hisDeptId_isset = NO;
}

- (NSString *) startDate {
  return [[__startDate retain_stub] autorelease_stub];
}

- (void) setStartDate: (NSString *) startDate {
  [startDate retain_stub];
  [__startDate release_stub];
  __startDate = startDate;
  __startDate_isset = YES;
}

- (BOOL) startDateIsSet {
  return __startDate_isset;
}

- (void) unsetStartDate {
  [__startDate release_stub];
  __startDate = nil;
  __startDate_isset = NO;
}

- (NSString *) endDate {
  return [[__endDate retain_stub] autorelease_stub];
}

- (void) setEndDate: (NSString *) endDate {
  [endDate retain_stub];
  [__endDate release_stub];
  __endDate = endDate;
  __endDate_isset = YES;
}

- (BOOL) endDateIsSet {
  return __endDate_isset;
}

- (void) unsetEndDate {
  [__endDate release_stub];
  __endDate = nil;
  __endDate_isset = NO;
}

- (int64_t) deptId {
  return __deptId;
}

- (void) setDeptId: (int64_t) deptId {
  __deptId = deptId;
  __deptId_isset = YES;
}

- (BOOL) deptIdIsSet {
  return __deptId_isset;
}

- (void) unsetDeptId {
  __deptId_isset = NO;
}

- (int32_t) scheduleType {
  return __scheduleType;
}

- (void) setScheduleType: (int32_t) scheduleType {
  __scheduleType = scheduleType;
  __scheduleType_isset = YES;
}

- (BOOL) scheduleTypeIsSet {
  return __scheduleType_isset;
}

- (void) unsetScheduleType {
  __scheduleType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHisDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStartDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEndDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setScheduleType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetVisitsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__hisDeptId_isset) {
    if (__hisDeptId != nil) {
      [outProtocol writeFieldBeginWithName: @"hisDeptId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __hisDeptId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__startDate_isset) {
    if (__startDate != nil) {
      [outProtocol writeFieldBeginWithName: @"startDate" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __startDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__endDate_isset) {
    if (__endDate != nil) {
      [outProtocol writeFieldBeginWithName: @"endDate" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __endDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptId_isset) {
    [outProtocol writeFieldBeginWithName: @"deptId" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __deptId];
    [outProtocol writeFieldEnd];
  }
  if (__scheduleType_isset) {
    [outProtocol writeFieldBeginWithName: @"scheduleType" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __scheduleType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetVisitsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",hisDeptId:"];
  [ms appendFormat: @"\"%@\"", __hisDeptId];
  [ms appendString: @",startDate:"];
  [ms appendFormat: @"\"%@\"", __startDate];
  [ms appendString: @",endDate:"];
  [ms appendFormat: @"\"%@\"", __endDate];
  [ms appendString: @",deptId:"];
  [ms appendFormat: @"%qi", __deptId];
  [ms appendString: @",scheduleType:"];
  [ms appendFormat: @"%i", __scheduleType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPhysicalRptInfoReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId patientId: (int64_t) patientId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPhysicalRptInfoReq class]]) {
    return NO;
  }
  NXTFPhysicalRptInfoReq *other = (NXTFPhysicalRptInfoReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PhysicalRptInfoReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPhysicalRptInfoReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPhysicalReportReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId physicalID: (NSString *) physicalID
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __physicalID = [physicalID retain_stub];
  __physicalID_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"physicalID"])
  {
    __physicalID = [[decoder decodeObjectForKey: @"physicalID"] retain_stub];
    __physicalID_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__physicalID_isset)
  {
    [encoder encodeObject: __physicalID forKey: @"physicalID"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __physicalID_isset ? 2654435761 : 0;
  if (__physicalID_isset)
  {
    hash = (hash * 31) ^ [__physicalID hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPhysicalReportReq class]]) {
    return NO;
  }
  NXTFPhysicalReportReq *other = (NXTFPhysicalReportReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__physicalID_isset != other->__physicalID_isset) ||
      (__physicalID_isset && ((__physicalID || other->__physicalID) && ![__physicalID isEqual:other->__physicalID]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__physicalID release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (NSString *) physicalID {
  return [[__physicalID retain_stub] autorelease_stub];
}

- (void) setPhysicalID: (NSString *) physicalID {
  [physicalID retain_stub];
  [__physicalID release_stub];
  __physicalID = physicalID;
  __physicalID_isset = YES;
}

- (BOOL) physicalIDIsSet {
  return __physicalID_isset;
}

- (void) unsetPhysicalID {
  [__physicalID release_stub];
  __physicalID = nil;
  __physicalID_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhysicalID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PhysicalReportReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__physicalID_isset) {
    if (__physicalID != nil) {
      [outProtocol writeFieldBeginWithName: @"physicalID" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __physicalID];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPhysicalReportReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",physicalID:"];
  [ms appendFormat: @"\"%@\"", __physicalID];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetRecomOptsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetRecomOptsReq class]]) {
    return NO;
  }
  NXTFGetRecomOptsReq *other = (NXTFGetRecomOptsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRecomOptsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetRecomOptsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetInsInfosReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.page = [[[NXTFPage alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header page: (NXTFPage *) page companyId: (int32_t) companyId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __companyId = companyId;
  __companyId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"companyId"])
  {
    __companyId = [decoder decodeInt32ForKey: @"companyId"];
    __companyId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__companyId_isset)
  {
    [encoder encodeInt32: __companyId forKey: @"companyId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __companyId_isset ? 2654435761 : 0;
  if (__companyId_isset)
  {
    hash = (hash * 31) ^ [@(__companyId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetInsInfosReq class]]) {
    return NO;
  }
  NXTFGetInsInfosReq *other = (NXTFGetInsInfosReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__companyId_isset != other->__companyId_isset) ||
      (__companyId_isset && (__companyId != other->__companyId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (int32_t) companyId {
  return __companyId;
}

- (void) setCompanyId: (int32_t) companyId {
  __companyId = companyId;
  __companyId_isset = YES;
}

- (BOOL) companyIdIsSet {
  return __companyId_isset;
}

- (void) unsetCompanyId {
  __companyId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCompanyId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetInsInfosReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__companyId_isset) {
    [outProtocol writeFieldBeginWithName: @"companyId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __companyId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetInsInfosReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",companyId:"];
  [ms appendFormat: @"%i", __companyId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetInsPkgReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header packageId: (int32_t) packageId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __packageId = packageId;
  __packageId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"packageId"])
  {
    __packageId = [decoder decodeInt32ForKey: @"packageId"];
    __packageId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__packageId_isset)
  {
    [encoder encodeInt32: __packageId forKey: @"packageId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __packageId_isset ? 2654435761 : 0;
  if (__packageId_isset)
  {
    hash = (hash * 31) ^ [@(__packageId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetInsPkgReq class]]) {
    return NO;
  }
  NXTFGetInsPkgReq *other = (NXTFGetInsPkgReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__packageId_isset != other->__packageId_isset) ||
      (__packageId_isset && (__packageId != other->__packageId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) packageId {
  return __packageId;
}

- (void) setPackageId: (int32_t) packageId {
  __packageId = packageId;
  __packageId_isset = YES;
}

- (BOOL) packageIdIsSet {
  return __packageId_isset;
}

- (void) unsetPackageId {
  __packageId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPackageId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetInsPkgReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__packageId_isset) {
    [outProtocol writeFieldBeginWithName: @"packageId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __packageId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetInsPkgReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",packageId:"];
  [ms appendFormat: @"%i", __packageId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetStInsCalResultReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header regId: (int64_t) regId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __regId = regId;
  __regId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [decoder decodeInt64ForKey: @"regId"];
    __regId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__regId_isset)
  {
    [encoder encodeInt64: __regId forKey: @"regId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [@(__regId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetStInsCalResultReq class]]) {
    return NO;
  }
  NXTFGetStInsCalResultReq *other = (NXTFGetStInsCalResultReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && (__regId != other->__regId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) regId {
  return __regId;
}

- (void) setRegId: (int64_t) regId {
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  __regId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetStInsCalResultReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    [outProtocol writeFieldBeginWithName: @"regId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __regId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetStInsCalResultReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"%qi", __regId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFOrderStInsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header regId: (int64_t) regId messageId: (NSString *) messageId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __regId = regId;
  __regId_isset = YES;
  __messageId = [messageId retain_stub];
  __messageId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [decoder decodeInt64ForKey: @"regId"];
    __regId_isset = YES;
  }
  if ([decoder containsValueForKey: @"messageId"])
  {
    __messageId = [[decoder decodeObjectForKey: @"messageId"] retain_stub];
    __messageId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__regId_isset)
  {
    [encoder encodeInt64: __regId forKey: @"regId"];
  }
  if (__messageId_isset)
  {
    [encoder encodeObject: __messageId forKey: @"messageId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [@(__regId) hash];
  }
  hash = (hash * 31) ^ __messageId_isset ? 2654435761 : 0;
  if (__messageId_isset)
  {
    hash = (hash * 31) ^ [__messageId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFOrderStInsReq class]]) {
    return NO;
  }
  NXTFOrderStInsReq *other = (NXTFOrderStInsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && (__regId != other->__regId))) {
    return NO;
  }
  if ((__messageId_isset != other->__messageId_isset) ||
      (__messageId_isset && ((__messageId || other->__messageId) && ![__messageId isEqual:other->__messageId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__messageId release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) regId {
  return __regId;
}

- (void) setRegId: (int64_t) regId {
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  __regId_isset = NO;
}

- (NSString *) messageId {
  return [[__messageId retain_stub] autorelease_stub];
}

- (void) setMessageId: (NSString *) messageId {
  [messageId retain_stub];
  [__messageId release_stub];
  __messageId = messageId;
  __messageId_isset = YES;
}

- (BOOL) messageIdIsSet {
  return __messageId_isset;
}

- (void) unsetMessageId {
  [__messageId release_stub];
  __messageId = nil;
  __messageId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessageId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OrderStInsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    [outProtocol writeFieldBeginWithName: @"regId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __regId];
    [outProtocol writeFieldEnd];
  }
  if (__messageId_isset) {
    if (__messageId != nil) {
      [outProtocol writeFieldBeginWithName: @"messageId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __messageId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFOrderStInsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"%qi", __regId];
  [ms appendString: @",messageId:"];
  [ms appendFormat: @"\"%@\"", __messageId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetStInsPayInfoReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header payWayTypeId: (int32_t) payWayTypeId regId: (int64_t) regId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __payWayTypeId = payWayTypeId;
  __payWayTypeId_isset = YES;
  __regId = regId;
  __regId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"payWayTypeId"])
  {
    __payWayTypeId = [decoder decodeInt32ForKey: @"payWayTypeId"];
    __payWayTypeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [decoder decodeInt64ForKey: @"regId"];
    __regId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__payWayTypeId_isset)
  {
    [encoder encodeInt32: __payWayTypeId forKey: @"payWayTypeId"];
  }
  if (__regId_isset)
  {
    [encoder encodeInt64: __regId forKey: @"regId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __payWayTypeId_isset ? 2654435761 : 0;
  if (__payWayTypeId_isset)
  {
    hash = (hash * 31) ^ [@(__payWayTypeId) hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [@(__regId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetStInsPayInfoReq class]]) {
    return NO;
  }
  NXTFGetStInsPayInfoReq *other = (NXTFGetStInsPayInfoReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__payWayTypeId_isset != other->__payWayTypeId_isset) ||
      (__payWayTypeId_isset && (__payWayTypeId != other->__payWayTypeId))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && (__regId != other->__regId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) payWayTypeId {
  return __payWayTypeId;
}

- (void) setPayWayTypeId: (int32_t) payWayTypeId {
  __payWayTypeId = payWayTypeId;
  __payWayTypeId_isset = YES;
}

- (BOOL) payWayTypeIdIsSet {
  return __payWayTypeId_isset;
}

- (void) unsetPayWayTypeId {
  __payWayTypeId_isset = NO;
}

- (int64_t) regId {
  return __regId;
}

- (void) setRegId: (int64_t) regId {
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  __regId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPayWayTypeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetStInsPayInfoReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__payWayTypeId_isset) {
    [outProtocol writeFieldBeginWithName: @"payWayTypeId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __payWayTypeId];
    [outProtocol writeFieldEnd];
  }
  if (__regId_isset) {
    [outProtocol writeFieldBeginWithName: @"regId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __regId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetStInsPayInfoReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",payWayTypeId:"];
  [ms appendFormat: @"%i", __payWayTypeId];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"%qi", __regId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetStInsDetailReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header regId: (int64_t) regId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __regId = regId;
  __regId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [decoder decodeInt64ForKey: @"regId"];
    __regId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__regId_isset)
  {
    [encoder encodeInt64: __regId forKey: @"regId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [@(__regId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetStInsDetailReq class]]) {
    return NO;
  }
  NXTFGetStInsDetailReq *other = (NXTFGetStInsDetailReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && (__regId != other->__regId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) regId {
  return __regId;
}

- (void) setRegId: (int64_t) regId {
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  __regId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetStInsDetailReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    [outProtocol writeFieldBeginWithName: @"regId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __regId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetStInsDetailReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"%qi", __regId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetStInsBanksReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header type: (int32_t) type
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __type = type;
  __type_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeInt32ForKey: @"type"];
    __type_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__type_isset)
  {
    [encoder encodeInt32: __type forKey: @"type"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetStInsBanksReq class]]) {
    return NO;
  }
  NXTFGetStInsBanksReq *other = (NXTFGetStInsBanksReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) type {
  return __type;
}

- (void) setType: (int32_t) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetStInsBanksReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetStInsBanksReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetMyPayInfosReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientId: (int64_t) patientId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetMyPayInfosReq class]]) {
    return NO;
  }
  NXTFGetMyPayInfosReq *other = (NXTFGetMyPayInfosReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMyPayInfosReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetMyPayInfosReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFReqStInsClaimReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header regId: (int64_t) regId payee: (NSString *) payee payMethod: (NSString *) payMethod bankCode: (NSString *) bankCode bankName: (NSString *) bankName accountNum: (NSString *) accountNum
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __regId = regId;
  __regId_isset = YES;
  __payee = [payee retain_stub];
  __payee_isset = YES;
  __payMethod = [payMethod retain_stub];
  __payMethod_isset = YES;
  __bankCode = [bankCode retain_stub];
  __bankCode_isset = YES;
  __bankName = [bankName retain_stub];
  __bankName_isset = YES;
  __accountNum = [accountNum retain_stub];
  __accountNum_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [decoder decodeInt64ForKey: @"regId"];
    __regId_isset = YES;
  }
  if ([decoder containsValueForKey: @"payee"])
  {
    __payee = [[decoder decodeObjectForKey: @"payee"] retain_stub];
    __payee_isset = YES;
  }
  if ([decoder containsValueForKey: @"payMethod"])
  {
    __payMethod = [[decoder decodeObjectForKey: @"payMethod"] retain_stub];
    __payMethod_isset = YES;
  }
  if ([decoder containsValueForKey: @"bankCode"])
  {
    __bankCode = [[decoder decodeObjectForKey: @"bankCode"] retain_stub];
    __bankCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"bankName"])
  {
    __bankName = [[decoder decodeObjectForKey: @"bankName"] retain_stub];
    __bankName_isset = YES;
  }
  if ([decoder containsValueForKey: @"accountNum"])
  {
    __accountNum = [[decoder decodeObjectForKey: @"accountNum"] retain_stub];
    __accountNum_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__regId_isset)
  {
    [encoder encodeInt64: __regId forKey: @"regId"];
  }
  if (__payee_isset)
  {
    [encoder encodeObject: __payee forKey: @"payee"];
  }
  if (__payMethod_isset)
  {
    [encoder encodeObject: __payMethod forKey: @"payMethod"];
  }
  if (__bankCode_isset)
  {
    [encoder encodeObject: __bankCode forKey: @"bankCode"];
  }
  if (__bankName_isset)
  {
    [encoder encodeObject: __bankName forKey: @"bankName"];
  }
  if (__accountNum_isset)
  {
    [encoder encodeObject: __accountNum forKey: @"accountNum"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [@(__regId) hash];
  }
  hash = (hash * 31) ^ __payee_isset ? 2654435761 : 0;
  if (__payee_isset)
  {
    hash = (hash * 31) ^ [__payee hash];
  }
  hash = (hash * 31) ^ __payMethod_isset ? 2654435761 : 0;
  if (__payMethod_isset)
  {
    hash = (hash * 31) ^ [__payMethod hash];
  }
  hash = (hash * 31) ^ __bankCode_isset ? 2654435761 : 0;
  if (__bankCode_isset)
  {
    hash = (hash * 31) ^ [__bankCode hash];
  }
  hash = (hash * 31) ^ __bankName_isset ? 2654435761 : 0;
  if (__bankName_isset)
  {
    hash = (hash * 31) ^ [__bankName hash];
  }
  hash = (hash * 31) ^ __accountNum_isset ? 2654435761 : 0;
  if (__accountNum_isset)
  {
    hash = (hash * 31) ^ [__accountNum hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFReqStInsClaimReq class]]) {
    return NO;
  }
  NXTFReqStInsClaimReq *other = (NXTFReqStInsClaimReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && (__regId != other->__regId))) {
    return NO;
  }
  if ((__payee_isset != other->__payee_isset) ||
      (__payee_isset && ((__payee || other->__payee) && ![__payee isEqual:other->__payee]))) {
    return NO;
  }
  if ((__payMethod_isset != other->__payMethod_isset) ||
      (__payMethod_isset && ((__payMethod || other->__payMethod) && ![__payMethod isEqual:other->__payMethod]))) {
    return NO;
  }
  if ((__bankCode_isset != other->__bankCode_isset) ||
      (__bankCode_isset && ((__bankCode || other->__bankCode) && ![__bankCode isEqual:other->__bankCode]))) {
    return NO;
  }
  if ((__bankName_isset != other->__bankName_isset) ||
      (__bankName_isset && ((__bankName || other->__bankName) && ![__bankName isEqual:other->__bankName]))) {
    return NO;
  }
  if ((__accountNum_isset != other->__accountNum_isset) ||
      (__accountNum_isset && ((__accountNum || other->__accountNum) && ![__accountNum isEqual:other->__accountNum]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__payee release_stub];
  [__payMethod release_stub];
  [__bankCode release_stub];
  [__bankName release_stub];
  [__accountNum release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) regId {
  return __regId;
}

- (void) setRegId: (int64_t) regId {
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  __regId_isset = NO;
}

- (NSString *) payee {
  return [[__payee retain_stub] autorelease_stub];
}

- (void) setPayee: (NSString *) payee {
  [payee retain_stub];
  [__payee release_stub];
  __payee = payee;
  __payee_isset = YES;
}

- (BOOL) payeeIsSet {
  return __payee_isset;
}

- (void) unsetPayee {
  [__payee release_stub];
  __payee = nil;
  __payee_isset = NO;
}

- (NSString *) payMethod {
  return [[__payMethod retain_stub] autorelease_stub];
}

- (void) setPayMethod: (NSString *) payMethod {
  [payMethod retain_stub];
  [__payMethod release_stub];
  __payMethod = payMethod;
  __payMethod_isset = YES;
}

- (BOOL) payMethodIsSet {
  return __payMethod_isset;
}

- (void) unsetPayMethod {
  [__payMethod release_stub];
  __payMethod = nil;
  __payMethod_isset = NO;
}

- (NSString *) bankCode {
  return [[__bankCode retain_stub] autorelease_stub];
}

- (void) setBankCode: (NSString *) bankCode {
  [bankCode retain_stub];
  [__bankCode release_stub];
  __bankCode = bankCode;
  __bankCode_isset = YES;
}

- (BOOL) bankCodeIsSet {
  return __bankCode_isset;
}

- (void) unsetBankCode {
  [__bankCode release_stub];
  __bankCode = nil;
  __bankCode_isset = NO;
}

- (NSString *) bankName {
  return [[__bankName retain_stub] autorelease_stub];
}

- (void) setBankName: (NSString *) bankName {
  [bankName retain_stub];
  [__bankName release_stub];
  __bankName = bankName;
  __bankName_isset = YES;
}

- (BOOL) bankNameIsSet {
  return __bankName_isset;
}

- (void) unsetBankName {
  [__bankName release_stub];
  __bankName = nil;
  __bankName_isset = NO;
}

- (NSString *) accountNum {
  return [[__accountNum retain_stub] autorelease_stub];
}

- (void) setAccountNum: (NSString *) accountNum {
  [accountNum retain_stub];
  [__accountNum release_stub];
  __accountNum = accountNum;
  __accountNum_isset = YES;
}

- (BOOL) accountNumIsSet {
  return __accountNum_isset;
}

- (void) unsetAccountNum {
  [__accountNum release_stub];
  __accountNum = nil;
  __accountNum_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPayee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPayMethod: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBankCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBankName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccountNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReqStInsClaimReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    [outProtocol writeFieldBeginWithName: @"regId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __regId];
    [outProtocol writeFieldEnd];
  }
  if (__payee_isset) {
    if (__payee != nil) {
      [outProtocol writeFieldBeginWithName: @"payee" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __payee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__payMethod_isset) {
    if (__payMethod != nil) {
      [outProtocol writeFieldBeginWithName: @"payMethod" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __payMethod];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bankCode_isset) {
    if (__bankCode != nil) {
      [outProtocol writeFieldBeginWithName: @"bankCode" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __bankCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bankName_isset) {
    if (__bankName != nil) {
      [outProtocol writeFieldBeginWithName: @"bankName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __bankName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__accountNum_isset) {
    if (__accountNum != nil) {
      [outProtocol writeFieldBeginWithName: @"accountNum" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __accountNum];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFReqStInsClaimReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"%qi", __regId];
  [ms appendString: @",payee:"];
  [ms appendFormat: @"\"%@\"", __payee];
  [ms appendString: @",payMethod:"];
  [ms appendFormat: @"\"%@\"", __payMethod];
  [ms appendString: @",bankCode:"];
  [ms appendFormat: @"\"%@\"", __bankCode];
  [ms appendString: @",bankName:"];
  [ms appendFormat: @"\"%@\"", __bankName];
  [ms appendString: @",accountNum:"];
  [ms appendFormat: @"\"%@\"", __accountNum];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetLastestActReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetLastestActReq class]]) {
    return NO;
  }
  NXTFGetLastestActReq *other = (NXTFGetLastestActReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetLastestActReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetLastestActReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetActsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header sort: (int32_t) sort page: (NXTFPage *) page drId: (NSString *) drId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __sort = sort;
  __sort_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __drId = [drId retain_stub];
  __drId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"sort"])
  {
    __sort = [decoder decodeInt32ForKey: @"sort"];
    __sort_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"drId"])
  {
    __drId = [[decoder decodeObjectForKey: @"drId"] retain_stub];
    __drId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__sort_isset)
  {
    [encoder encodeInt32: __sort forKey: @"sort"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__drId_isset)
  {
    [encoder encodeObject: __drId forKey: @"drId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __sort_isset ? 2654435761 : 0;
  if (__sort_isset)
  {
    hash = (hash * 31) ^ [@(__sort) hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __drId_isset ? 2654435761 : 0;
  if (__drId_isset)
  {
    hash = (hash * 31) ^ [__drId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetActsReq class]]) {
    return NO;
  }
  NXTFGetActsReq *other = (NXTFGetActsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__sort_isset != other->__sort_isset) ||
      (__sort_isset && (__sort != other->__sort))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__drId_isset != other->__drId_isset) ||
      (__drId_isset && ((__drId || other->__drId) && ![__drId isEqual:other->__drId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__drId release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) sort {
  return __sort;
}

- (void) setSort: (int32_t) sort {
  __sort = sort;
  __sort_isset = YES;
}

- (BOOL) sortIsSet {
  return __sort_isset;
}

- (void) unsetSort {
  __sort_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSString *) drId {
  return [[__drId retain_stub] autorelease_stub];
}

- (void) setDrId: (NSString *) drId {
  [drId retain_stub];
  [__drId release_stub];
  __drId = drId;
  __drId_isset = YES;
}

- (BOOL) drIdIsSet {
  return __drId_isset;
}

- (void) unsetDrId {
  [__drId release_stub];
  __drId = nil;
  __drId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSort: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetActsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sort_isset) {
    [outProtocol writeFieldBeginWithName: @"sort" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __sort];
    [outProtocol writeFieldEnd];
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 3];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drId_isset) {
    if (__drId != nil) {
      [outProtocol writeFieldBeginWithName: @"drId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __drId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetActsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",sort:"];
  [ms appendFormat: @"%i", __sort];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",drId:"];
  [ms appendFormat: @"\"%@\"", __drId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetActDetailReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header actId: (NSString *) actId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __actId = [actId retain_stub];
  __actId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"actId"])
  {
    __actId = [[decoder decodeObjectForKey: @"actId"] retain_stub];
    __actId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__actId_isset)
  {
    [encoder encodeObject: __actId forKey: @"actId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __actId_isset ? 2654435761 : 0;
  if (__actId_isset)
  {
    hash = (hash * 31) ^ [__actId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetActDetailReq class]]) {
    return NO;
  }
  NXTFGetActDetailReq *other = (NXTFGetActDetailReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__actId_isset != other->__actId_isset) ||
      (__actId_isset && ((__actId || other->__actId) && ![__actId isEqual:other->__actId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__actId release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) actId {
  return [[__actId retain_stub] autorelease_stub];
}

- (void) setActId: (NSString *) actId {
  [actId retain_stub];
  [__actId release_stub];
  __actId = actId;
  __actId_isset = YES;
}

- (BOOL) actIdIsSet {
  return __actId_isset;
}

- (void) unsetActId {
  [__actId release_stub];
  __actId = nil;
  __actId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setActId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetActDetailReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__actId_isset) {
    if (__actId != nil) {
      [outProtocol writeFieldBeginWithName: @"actId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __actId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetActDetailReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",actId:"];
  [ms appendFormat: @"\"%@\"", __actId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRegLiveReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header actId: (NSString *) actId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __actId = [actId retain_stub];
  __actId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"actId"])
  {
    __actId = [[decoder decodeObjectForKey: @"actId"] retain_stub];
    __actId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__actId_isset)
  {
    [encoder encodeObject: __actId forKey: @"actId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __actId_isset ? 2654435761 : 0;
  if (__actId_isset)
  {
    hash = (hash * 31) ^ [__actId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRegLiveReq class]]) {
    return NO;
  }
  NXTFRegLiveReq *other = (NXTFRegLiveReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__actId_isset != other->__actId_isset) ||
      (__actId_isset && ((__actId || other->__actId) && ![__actId isEqual:other->__actId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__actId release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) actId {
  return [[__actId retain_stub] autorelease_stub];
}

- (void) setActId: (NSString *) actId {
  [actId retain_stub];
  [__actId release_stub];
  __actId = actId;
  __actId_isset = YES;
}

- (BOOL) actIdIsSet {
  return __actId_isset;
}

- (void) unsetActId {
  [__actId release_stub];
  __actId = nil;
  __actId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setActId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegLiveReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__actId_isset) {
    if (__actId != nil) {
      [outProtocol writeFieldBeginWithName: @"actId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __actId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRegLiveReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",actId:"];
  [ms appendFormat: @"\"%@\"", __actId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetBannersReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header cityCode: (NSString *) cityCode
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __cityCode = [cityCode retain_stub];
  __cityCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"cityCode"])
  {
    __cityCode = [[decoder decodeObjectForKey: @"cityCode"] retain_stub];
    __cityCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__cityCode_isset)
  {
    [encoder encodeObject: __cityCode forKey: @"cityCode"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __cityCode_isset ? 2654435761 : 0;
  if (__cityCode_isset)
  {
    hash = (hash * 31) ^ [__cityCode hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetBannersReq class]]) {
    return NO;
  }
  NXTFGetBannersReq *other = (NXTFGetBannersReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__cityCode_isset != other->__cityCode_isset) ||
      (__cityCode_isset && ((__cityCode || other->__cityCode) && ![__cityCode isEqual:other->__cityCode]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__cityCode release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) cityCode {
  return [[__cityCode retain_stub] autorelease_stub];
}

- (void) setCityCode: (NSString *) cityCode {
  [cityCode retain_stub];
  [__cityCode release_stub];
  __cityCode = cityCode;
  __cityCode_isset = YES;
}

- (BOOL) cityCodeIsSet {
  return __cityCode_isset;
}

- (void) unsetCityCode {
  [__cityCode release_stub];
  __cityCode = nil;
  __cityCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCityCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetBannersReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cityCode_isset) {
    if (__cityCode != nil) {
      [outProtocol writeFieldBeginWithName: @"cityCode" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __cityCode];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetBannersReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",cityCode:"];
  [ms appendFormat: @"\"%@\"", __cityCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFAddConsultationReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header serviceName: (NSString *) serviceName desc: (NSString *) desc
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __serviceName = [serviceName retain_stub];
  __serviceName_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceName"])
  {
    __serviceName = [[decoder decodeObjectForKey: @"serviceName"] retain_stub];
    __serviceName_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__serviceName_isset)
  {
    [encoder encodeObject: __serviceName forKey: @"serviceName"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __serviceName_isset ? 2654435761 : 0;
  if (__serviceName_isset)
  {
    hash = (hash * 31) ^ [__serviceName hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFAddConsultationReq class]]) {
    return NO;
  }
  NXTFAddConsultationReq *other = (NXTFAddConsultationReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__serviceName_isset != other->__serviceName_isset) ||
      (__serviceName_isset && ((__serviceName || other->__serviceName) && ![__serviceName isEqual:other->__serviceName]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__serviceName release_stub];
  [__desc release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) serviceName {
  return [[__serviceName retain_stub] autorelease_stub];
}

- (void) setServiceName: (NSString *) serviceName {
  [serviceName retain_stub];
  [__serviceName release_stub];
  __serviceName = serviceName;
  __serviceName_isset = YES;
}

- (BOOL) serviceNameIsSet {
  return __serviceName_isset;
}

- (void) unsetServiceName {
  [__serviceName release_stub];
  __serviceName = nil;
  __serviceName_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddConsultationReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceName_isset) {
    if (__serviceName != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __serviceName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFAddConsultationReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",serviceName:"];
  [ms appendFormat: @"\"%@\"", __serviceName];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFTerminateConsultationReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header consultationId: (NSString *) consultationId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __consultationId = [consultationId retain_stub];
  __consultationId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"consultationId"])
  {
    __consultationId = [[decoder decodeObjectForKey: @"consultationId"] retain_stub];
    __consultationId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__consultationId_isset)
  {
    [encoder encodeObject: __consultationId forKey: @"consultationId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __consultationId_isset ? 2654435761 : 0;
  if (__consultationId_isset)
  {
    hash = (hash * 31) ^ [__consultationId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFTerminateConsultationReq class]]) {
    return NO;
  }
  NXTFTerminateConsultationReq *other = (NXTFTerminateConsultationReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__consultationId_isset != other->__consultationId_isset) ||
      (__consultationId_isset && ((__consultationId || other->__consultationId) && ![__consultationId isEqual:other->__consultationId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__consultationId release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) consultationId {
  return [[__consultationId retain_stub] autorelease_stub];
}

- (void) setConsultationId: (NSString *) consultationId {
  [consultationId retain_stub];
  [__consultationId release_stub];
  __consultationId = consultationId;
  __consultationId_isset = YES;
}

- (BOOL) consultationIdIsSet {
  return __consultationId_isset;
}

- (void) unsetConsultationId {
  [__consultationId release_stub];
  __consultationId = nil;
  __consultationId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConsultationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TerminateConsultationReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__consultationId_isset) {
    if (__consultationId != nil) {
      [outProtocol writeFieldBeginWithName: @"consultationId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __consultationId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFTerminateConsultationReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",consultationId:"];
  [ms appendFormat: @"\"%@\"", __consultationId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetConsultationsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientId: (int64_t) patientId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetConsultationsReq class]]) {
    return NO;
  }
  NXTFGetConsultationsReq *other = (NXTFGetConsultationsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetConsultationsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetConsultationsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetHealthProfileReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientId: (int64_t) patientId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetHealthProfileReq class]]) {
    return NO;
  }
  NXTFGetHealthProfileReq *other = (NXTFGetHealthProfileReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetHealthProfileReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetHealthProfileReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetVisitListReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientId: (int64_t) patientId code: (NSString *) code card: (NSString *) card page: (NXTFPage *) page hospId: (int32_t) hospId version: (int32_t) version
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __code = [code retain_stub];
  __code_isset = YES;
  __card = [card retain_stub];
  __card_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __version = version;
  __version_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [[decoder decodeObjectForKey: @"code"] retain_stub];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"card"])
  {
    __card = [[decoder decodeObjectForKey: @"card"] retain_stub];
    __card_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"version"])
  {
    __version = [decoder decodeInt32ForKey: @"version"];
    __version_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__code_isset)
  {
    [encoder encodeObject: __code forKey: @"code"];
  }
  if (__card_isset)
  {
    [encoder encodeObject: __card forKey: @"card"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__version_isset)
  {
    [encoder encodeInt32: __version forKey: @"version"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __code_isset ? 2654435761 : 0;
  if (__code_isset)
  {
    hash = (hash * 31) ^ [__code hash];
  }
  hash = (hash * 31) ^ __card_isset ? 2654435761 : 0;
  if (__card_isset)
  {
    hash = (hash * 31) ^ [__card hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __version_isset ? 2654435761 : 0;
  if (__version_isset)
  {
    hash = (hash * 31) ^ [@(__version) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetVisitListReq class]]) {
    return NO;
  }
  NXTFGetVisitListReq *other = (NXTFGetVisitListReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__code_isset != other->__code_isset) ||
      (__code_isset && ((__code || other->__code) && ![__code isEqual:other->__code]))) {
    return NO;
  }
  if ((__card_isset != other->__card_isset) ||
      (__card_isset && ((__card || other->__card) && ![__card isEqual:other->__card]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__version_isset != other->__version_isset) ||
      (__version_isset && (__version != other->__version))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__code release_stub];
  [__card release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (NSString *) code {
  return [[__code retain_stub] autorelease_stub];
}

- (void) setCode: (NSString *) code {
  [code retain_stub];
  [__code release_stub];
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  [__code release_stub];
  __code = nil;
  __code_isset = NO;
}

- (NSString *) card {
  return [[__card retain_stub] autorelease_stub];
}

- (void) setCard: (NSString *) card {
  [card retain_stub];
  [__card release_stub];
  __card = card;
  __card_isset = YES;
}

- (BOOL) cardIsSet {
  return __card_isset;
}

- (void) unsetCard {
  [__card release_stub];
  __card = nil;
  __card_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int32_t) version {
  return __version;
}

- (void) setVersion: (int32_t) version {
  __version = version;
  __version_isset = YES;
}

- (BOOL) versionIsSet {
  return __version_isset;
}

- (void) unsetVersion {
  __version_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCard: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetVisitListReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__code_isset) {
    if (__code != nil) {
      [outProtocol writeFieldBeginWithName: @"code" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __code];
      [outProtocol writeFieldEnd];
    }
  }
  if (__card_isset) {
    if (__card != nil) {
      [outProtocol writeFieldBeginWithName: @"card" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __card];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 5];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__version_isset) {
    [outProtocol writeFieldBeginWithName: @"version" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __version];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetVisitListReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",code:"];
  [ms appendFormat: @"\"%@\"", __code];
  [ms appendString: @",card:"];
  [ms appendFormat: @"\"%@\"", __card];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",version:"];
  [ms appendFormat: @"%i", __version];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetVisitDetailReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header chid: (NSString *) chid visitType: (int32_t) visitType patientId: (int64_t) patientId hospId: (int32_t) hospId version: (int32_t) version
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __chid = [chid retain_stub];
  __chid_isset = YES;
  __visitType = visitType;
  __visitType_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __version = version;
  __version_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"chid"])
  {
    __chid = [[decoder decodeObjectForKey: @"chid"] retain_stub];
    __chid_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitType"])
  {
    __visitType = [decoder decodeInt32ForKey: @"visitType"];
    __visitType_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"version"])
  {
    __version = [decoder decodeInt32ForKey: @"version"];
    __version_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__chid_isset)
  {
    [encoder encodeObject: __chid forKey: @"chid"];
  }
  if (__visitType_isset)
  {
    [encoder encodeInt32: __visitType forKey: @"visitType"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__version_isset)
  {
    [encoder encodeInt32: __version forKey: @"version"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __chid_isset ? 2654435761 : 0;
  if (__chid_isset)
  {
    hash = (hash * 31) ^ [__chid hash];
  }
  hash = (hash * 31) ^ __visitType_isset ? 2654435761 : 0;
  if (__visitType_isset)
  {
    hash = (hash * 31) ^ [@(__visitType) hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __version_isset ? 2654435761 : 0;
  if (__version_isset)
  {
    hash = (hash * 31) ^ [@(__version) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetVisitDetailReq class]]) {
    return NO;
  }
  NXTFGetVisitDetailReq *other = (NXTFGetVisitDetailReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__chid_isset != other->__chid_isset) ||
      (__chid_isset && ((__chid || other->__chid) && ![__chid isEqual:other->__chid]))) {
    return NO;
  }
  if ((__visitType_isset != other->__visitType_isset) ||
      (__visitType_isset && (__visitType != other->__visitType))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__version_isset != other->__version_isset) ||
      (__version_isset && (__version != other->__version))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__chid release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) chid {
  return [[__chid retain_stub] autorelease_stub];
}

- (void) setChid: (NSString *) chid {
  [chid retain_stub];
  [__chid release_stub];
  __chid = chid;
  __chid_isset = YES;
}

- (BOOL) chidIsSet {
  return __chid_isset;
}

- (void) unsetChid {
  [__chid release_stub];
  __chid = nil;
  __chid_isset = NO;
}

- (int32_t) visitType {
  return __visitType;
}

- (void) setVisitType: (int32_t) visitType {
  __visitType = visitType;
  __visitType_isset = YES;
}

- (BOOL) visitTypeIsSet {
  return __visitType_isset;
}

- (void) unsetVisitType {
  __visitType_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int32_t) version {
  return __version;
}

- (void) setVersion: (int32_t) version {
  __version = version;
  __version_isset = YES;
}

- (BOOL) versionIsSet {
  return __version_isset;
}

- (void) unsetVersion {
  __version_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setChid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setVisitType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetVisitDetailReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__chid_isset) {
    if (__chid != nil) {
      [outProtocol writeFieldBeginWithName: @"chid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __chid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__visitType_isset) {
    [outProtocol writeFieldBeginWithName: @"visitType" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __visitType];
    [outProtocol writeFieldEnd];
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__version_isset) {
    [outProtocol writeFieldBeginWithName: @"version" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __version];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetVisitDetailReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",chid:"];
  [ms appendFormat: @"\"%@\"", __chid];
  [ms appendString: @",visitType:"];
  [ms appendFormat: @"%i", __visitType];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",version:"];
  [ms appendFormat: @"%i", __version];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetConsultationReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header roomId: (int32_t) roomId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __roomId = roomId;
  __roomId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomId"])
  {
    __roomId = [decoder decodeInt32ForKey: @"roomId"];
    __roomId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__roomId_isset)
  {
    [encoder encodeInt32: __roomId forKey: @"roomId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __roomId_isset ? 2654435761 : 0;
  if (__roomId_isset)
  {
    hash = (hash * 31) ^ [@(__roomId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetConsultationReq class]]) {
    return NO;
  }
  NXTFGetConsultationReq *other = (NXTFGetConsultationReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__roomId_isset != other->__roomId_isset) ||
      (__roomId_isset && (__roomId != other->__roomId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) roomId {
  return __roomId;
}

- (void) setRoomId: (int32_t) roomId {
  __roomId = roomId;
  __roomId_isset = YES;
}

- (BOOL) roomIdIsSet {
  return __roomId_isset;
}

- (void) unsetRoomId {
  __roomId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRoomId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetConsultationReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__roomId_isset) {
    [outProtocol writeFieldBeginWithName: @"roomId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __roomId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetConsultationReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",roomId:"];
  [ms appendFormat: @"%i", __roomId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetChargeBalanceReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId patientId: (int64_t) patientId markType: (NSString *) markType markNo: (NSString *) markNo pwd: (NSString *) pwd
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __markType = [markType retain_stub];
  __markType_isset = YES;
  __markNo = [markNo retain_stub];
  __markNo_isset = YES;
  __pwd = [pwd retain_stub];
  __pwd_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"markType"])
  {
    __markType = [[decoder decodeObjectForKey: @"markType"] retain_stub];
    __markType_isset = YES;
  }
  if ([decoder containsValueForKey: @"markNo"])
  {
    __markNo = [[decoder decodeObjectForKey: @"markNo"] retain_stub];
    __markNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"pwd"])
  {
    __pwd = [[decoder decodeObjectForKey: @"pwd"] retain_stub];
    __pwd_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__markType_isset)
  {
    [encoder encodeObject: __markType forKey: @"markType"];
  }
  if (__markNo_isset)
  {
    [encoder encodeObject: __markNo forKey: @"markNo"];
  }
  if (__pwd_isset)
  {
    [encoder encodeObject: __pwd forKey: @"pwd"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __markType_isset ? 2654435761 : 0;
  if (__markType_isset)
  {
    hash = (hash * 31) ^ [__markType hash];
  }
  hash = (hash * 31) ^ __markNo_isset ? 2654435761 : 0;
  if (__markNo_isset)
  {
    hash = (hash * 31) ^ [__markNo hash];
  }
  hash = (hash * 31) ^ __pwd_isset ? 2654435761 : 0;
  if (__pwd_isset)
  {
    hash = (hash * 31) ^ [__pwd hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetChargeBalanceReq class]]) {
    return NO;
  }
  NXTFGetChargeBalanceReq *other = (NXTFGetChargeBalanceReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__markType_isset != other->__markType_isset) ||
      (__markType_isset && ((__markType || other->__markType) && ![__markType isEqual:other->__markType]))) {
    return NO;
  }
  if ((__markNo_isset != other->__markNo_isset) ||
      (__markNo_isset && ((__markNo || other->__markNo) && ![__markNo isEqual:other->__markNo]))) {
    return NO;
  }
  if ((__pwd_isset != other->__pwd_isset) ||
      (__pwd_isset && ((__pwd || other->__pwd) && ![__pwd isEqual:other->__pwd]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__markType release_stub];
  [__markNo release_stub];
  [__pwd release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (NSString *) markType {
  return [[__markType retain_stub] autorelease_stub];
}

- (void) setMarkType: (NSString *) markType {
  [markType retain_stub];
  [__markType release_stub];
  __markType = markType;
  __markType_isset = YES;
}

- (BOOL) markTypeIsSet {
  return __markType_isset;
}

- (void) unsetMarkType {
  [__markType release_stub];
  __markType = nil;
  __markType_isset = NO;
}

- (NSString *) markNo {
  return [[__markNo retain_stub] autorelease_stub];
}

- (void) setMarkNo: (NSString *) markNo {
  [markNo retain_stub];
  [__markNo release_stub];
  __markNo = markNo;
  __markNo_isset = YES;
}

- (BOOL) markNoIsSet {
  return __markNo_isset;
}

- (void) unsetMarkNo {
  [__markNo release_stub];
  __markNo = nil;
  __markNo_isset = NO;
}

- (NSString *) pwd {
  return [[__pwd retain_stub] autorelease_stub];
}

- (void) setPwd: (NSString *) pwd {
  [pwd retain_stub];
  [__pwd release_stub];
  __pwd = pwd;
  __pwd_isset = YES;
}

- (BOOL) pwdIsSet {
  return __pwd_isset;
}

- (void) unsetPwd {
  [__pwd release_stub];
  __pwd = nil;
  __pwd_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMarkType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMarkNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetChargeBalanceReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__markType_isset) {
    if (__markType != nil) {
      [outProtocol writeFieldBeginWithName: @"markType" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __markType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__markNo_isset) {
    if (__markNo != nil) {
      [outProtocol writeFieldBeginWithName: @"markNo" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __markNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pwd_isset) {
    if (__pwd != nil) {
      [outProtocol writeFieldBeginWithName: @"pwd" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __pwd];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetChargeBalanceReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",markType:"];
  [ms appendFormat: @"\"%@\"", __markType];
  [ms appendString: @",markNo:"];
  [ms appendFormat: @"\"%@\"", __markNo];
  [ms appendString: @",pwd:"];
  [ms appendFormat: @"\"%@\"", __pwd];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFAuthPmrReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header authPmrs: (NSMutableArray *) authPmrs
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __authPmrs = [authPmrs retain_stub];
  __authPmrs_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"authPmrs"])
  {
    __authPmrs = [[decoder decodeObjectForKey: @"authPmrs"] retain_stub];
    __authPmrs_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__authPmrs_isset)
  {
    [encoder encodeObject: __authPmrs forKey: @"authPmrs"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __authPmrs_isset ? 2654435761 : 0;
  if (__authPmrs_isset)
  {
    hash = (hash * 31) ^ [__authPmrs hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFAuthPmrReq class]]) {
    return NO;
  }
  NXTFAuthPmrReq *other = (NXTFAuthPmrReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__authPmrs_isset != other->__authPmrs_isset) ||
      (__authPmrs_isset && ((__authPmrs || other->__authPmrs) && ![__authPmrs isEqual:other->__authPmrs]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__authPmrs release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) authPmrs {
  return [[__authPmrs retain_stub] autorelease_stub];
}

- (void) setAuthPmrs: (NSMutableArray *) authPmrs {
  [authPmrs retain_stub];
  [__authPmrs release_stub];
  __authPmrs = authPmrs;
  __authPmrs_isset = YES;
}

- (BOOL) authPmrsIsSet {
  return __authPmrs_isset;
}

- (void) unsetAuthPmrs {
  [__authPmrs release_stub];
  __authPmrs = nil;
  __authPmrs_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size35;
          [inProtocol readListBeginReturningElementType: NULL size: &_size35];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size35];
          int _i36;
          for (_i36 = 0; _i36 < _size35; ++_i36)
          {
            NXTFAuthPmrDto *_elem37 = [[NXTFAuthPmrDto alloc] init];
            [_elem37 read: inProtocol];
            [fieldValue addObject: _elem37];
            [_elem37 release_stub];
          }
          [inProtocol readListEnd];
          [self setAuthPmrs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthPmrReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__authPmrs_isset) {
    if (__authPmrs != nil) {
      [outProtocol writeFieldBeginWithName: @"authPmrs" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__authPmrs count]];
        int idx39;
        for (idx39 = 0; idx39 < [__authPmrs count]; idx39++)
        {
          [[__authPmrs objectAtIndex: idx39] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFAuthPmrReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",authPmrs:"];
  [ms appendFormat: @"%@", __authPmrs];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFAuthPmrDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTimId: (NSString *) timId patientId: (int64_t) patientId regId: (int64_t) regId
{
  self = [super init];
  __timId = [timId retain_stub];
  __timId_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __regId = regId;
  __regId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"timId"])
  {
    __timId = [[decoder decodeObjectForKey: @"timId"] retain_stub];
    __timId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [decoder decodeInt64ForKey: @"regId"];
    __regId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__timId_isset)
  {
    [encoder encodeObject: __timId forKey: @"timId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__regId_isset)
  {
    [encoder encodeInt64: __regId forKey: @"regId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __timId_isset ? 2654435761 : 0;
  if (__timId_isset)
  {
    hash = (hash * 31) ^ [__timId hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [@(__regId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFAuthPmrDto class]]) {
    return NO;
  }
  NXTFAuthPmrDto *other = (NXTFAuthPmrDto *)anObject;
  if ((__timId_isset != other->__timId_isset) ||
      (__timId_isset && ((__timId || other->__timId) && ![__timId isEqual:other->__timId]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && (__regId != other->__regId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__timId release_stub];
  [super dealloc_stub];
}

- (NSString *) timId {
  return [[__timId retain_stub] autorelease_stub];
}

- (void) setTimId: (NSString *) timId {
  [timId retain_stub];
  [__timId release_stub];
  __timId = timId;
  __timId_isset = YES;
}

- (BOOL) timIdIsSet {
  return __timId_isset;
}

- (void) unsetTimId {
  [__timId release_stub];
  __timId = nil;
  __timId_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (int64_t) regId {
  return __regId;
}

- (void) setRegId: (int64_t) regId {
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  __regId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTimId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthPmrDto"];
  if (__timId_isset) {
    if (__timId != nil) {
      [outProtocol writeFieldBeginWithName: @"timId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __timId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__regId_isset) {
    [outProtocol writeFieldBeginWithName: @"regId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __regId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFAuthPmrDto("];
  [ms appendString: @"timId:"];
  [ms appendFormat: @"\"%@\"", __timId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"%qi", __regId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFUpLoadTreatPicReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hisRegId: (NSString *) hisRegId hospId: (int32_t) hospId fileContent: (NSData *) fileContent picName: (NSString *) picName patientId: (int64_t) patientId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hisRegId = [hisRegId retain_stub];
  __hisRegId_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __fileContent = [fileContent retain_stub];
  __fileContent_isset = YES;
  __picName = [picName retain_stub];
  __picName_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hisRegId"])
  {
    __hisRegId = [[decoder decodeObjectForKey: @"hisRegId"] retain_stub];
    __hisRegId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"fileContent"])
  {
    __fileContent = [[decoder decodeObjectForKey: @"fileContent"] retain_stub];
    __fileContent_isset = YES;
  }
  if ([decoder containsValueForKey: @"picName"])
  {
    __picName = [[decoder decodeObjectForKey: @"picName"] retain_stub];
    __picName_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hisRegId_isset)
  {
    [encoder encodeObject: __hisRegId forKey: @"hisRegId"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__fileContent_isset)
  {
    [encoder encodeObject: __fileContent forKey: @"fileContent"];
  }
  if (__picName_isset)
  {
    [encoder encodeObject: __picName forKey: @"picName"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hisRegId_isset ? 2654435761 : 0;
  if (__hisRegId_isset)
  {
    hash = (hash * 31) ^ [__hisRegId hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __fileContent_isset ? 2654435761 : 0;
  if (__fileContent_isset)
  {
    hash = (hash * 31) ^ [__fileContent hash];
  }
  hash = (hash * 31) ^ __picName_isset ? 2654435761 : 0;
  if (__picName_isset)
  {
    hash = (hash * 31) ^ [__picName hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFUpLoadTreatPicReq class]]) {
    return NO;
  }
  NXTFUpLoadTreatPicReq *other = (NXTFUpLoadTreatPicReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hisRegId_isset != other->__hisRegId_isset) ||
      (__hisRegId_isset && ((__hisRegId || other->__hisRegId) && ![__hisRegId isEqual:other->__hisRegId]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__fileContent_isset != other->__fileContent_isset) ||
      (__fileContent_isset && ((__fileContent || other->__fileContent) && ![__fileContent isEqual:other->__fileContent]))) {
    return NO;
  }
  if ((__picName_isset != other->__picName_isset) ||
      (__picName_isset && ((__picName || other->__picName) && ![__picName isEqual:other->__picName]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__hisRegId release_stub];
  [__fileContent release_stub];
  [__picName release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) hisRegId {
  return [[__hisRegId retain_stub] autorelease_stub];
}

- (void) setHisRegId: (NSString *) hisRegId {
  [hisRegId retain_stub];
  [__hisRegId release_stub];
  __hisRegId = hisRegId;
  __hisRegId_isset = YES;
}

- (BOOL) hisRegIdIsSet {
  return __hisRegId_isset;
}

- (void) unsetHisRegId {
  [__hisRegId release_stub];
  __hisRegId = nil;
  __hisRegId_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (NSData *) fileContent {
  return [[__fileContent retain_stub] autorelease_stub];
}

- (void) setFileContent: (NSData *) fileContent {
  [fileContent retain_stub];
  [__fileContent release_stub];
  __fileContent = fileContent;
  __fileContent_isset = YES;
}

- (BOOL) fileContentIsSet {
  return __fileContent_isset;
}

- (void) unsetFileContent {
  [__fileContent release_stub];
  __fileContent = nil;
  __fileContent_isset = NO;
}

- (NSString *) picName {
  return [[__picName retain_stub] autorelease_stub];
}

- (void) setPicName: (NSString *) picName {
  [picName retain_stub];
  [__picName release_stub];
  __picName = picName;
  __picName_isset = YES;
}

- (BOOL) picNameIsSet {
  return __picName_isset;
}

- (void) unsetPicName {
  [__picName release_stub];
  __picName = nil;
  __picName_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHisRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setFileContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPicName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UpLoadTreatPicReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hisRegId_isset) {
    if (__hisRegId != nil) {
      [outProtocol writeFieldBeginWithName: @"hisRegId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __hisRegId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__fileContent_isset) {
    if (__fileContent != nil) {
      [outProtocol writeFieldBeginWithName: @"fileContent" type: TType_STRING fieldID: 4];
      [outProtocol writeBinary: __fileContent];
      [outProtocol writeFieldEnd];
    }
  }
  if (__picName_isset) {
    if (__picName != nil) {
      [outProtocol writeFieldBeginWithName: @"picName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __picName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFUpLoadTreatPicReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hisRegId:"];
  [ms appendFormat: @"\"%@\"", __hisRegId];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",fileContent:"];
  [ms appendFormat: @"\"%@\"", __fileContent];
  [ms appendString: @",picName:"];
  [ms appendFormat: @"\"%@\"", __picName];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetQueInfoReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetQueInfoReq class]]) {
    return NO;
  }
  NXTFGetQueInfoReq *other = (NXTFGetQueInfoReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetQueInfoReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetQueInfoReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFStatDataReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header statType: (int32_t) statType statBody: (NSString *) statBody
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __statType = statType;
  __statType_isset = YES;
  __statBody = [statBody retain_stub];
  __statBody_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"statType"])
  {
    __statType = [decoder decodeInt32ForKey: @"statType"];
    __statType_isset = YES;
  }
  if ([decoder containsValueForKey: @"statBody"])
  {
    __statBody = [[decoder decodeObjectForKey: @"statBody"] retain_stub];
    __statBody_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__statType_isset)
  {
    [encoder encodeInt32: __statType forKey: @"statType"];
  }
  if (__statBody_isset)
  {
    [encoder encodeObject: __statBody forKey: @"statBody"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __statType_isset ? 2654435761 : 0;
  if (__statType_isset)
  {
    hash = (hash * 31) ^ [@(__statType) hash];
  }
  hash = (hash * 31) ^ __statBody_isset ? 2654435761 : 0;
  if (__statBody_isset)
  {
    hash = (hash * 31) ^ [__statBody hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFStatDataReq class]]) {
    return NO;
  }
  NXTFStatDataReq *other = (NXTFStatDataReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__statType_isset != other->__statType_isset) ||
      (__statType_isset && (__statType != other->__statType))) {
    return NO;
  }
  if ((__statBody_isset != other->__statBody_isset) ||
      (__statBody_isset && ((__statBody || other->__statBody) && ![__statBody isEqual:other->__statBody]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__statBody release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) statType {
  return __statType;
}

- (void) setStatType: (int32_t) statType {
  __statType = statType;
  __statType_isset = YES;
}

- (BOOL) statTypeIsSet {
  return __statType_isset;
}

- (void) unsetStatType {
  __statType_isset = NO;
}

- (NSString *) statBody {
  return [[__statBody retain_stub] autorelease_stub];
}

- (void) setStatBody: (NSString *) statBody {
  [statBody retain_stub];
  [__statBody release_stub];
  __statBody = statBody;
  __statBody_isset = YES;
}

- (BOOL) statBodyIsSet {
  return __statBody_isset;
}

- (void) unsetStatBody {
  [__statBody release_stub];
  __statBody = nil;
  __statBody_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStatType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStatBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"StatDataReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__statType_isset) {
    [outProtocol writeFieldBeginWithName: @"statType" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __statType];
    [outProtocol writeFieldEnd];
  }
  if (__statBody_isset) {
    if (__statBody != nil) {
      [outProtocol writeFieldBeginWithName: @"statBody" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __statBody];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFStatDataReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",statType:"];
  [ms appendFormat: @"%i", __statType];
  [ms appendString: @",statBody:"];
  [ms appendFormat: @"\"%@\"", __statBody];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFDwellerInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDwellerID: (NSString *) dwellerID dwellerName: (NSString *) dwellerName dwellerGender: (NSString *) dwellerGender birthDate: (NSString *) birthDate region: (NSString *) region idNumber: (NSString *) idNumber bloodType: (NSString *) bloodType phone: (NSString *) phone maritalSts: (NSString *) maritalSts workUnit: (NSString *) workUnit addr: (NSString *) addr lastFollowupID: (NSString *) lastFollowupID linkB: (NSString *) linkB linkD: (NSString *) linkD signStatus: (NSString *) signStatus caseTypes: (NSMutableArray *) caseTypes disability: (NSString *) disability familyHistory: (NSString *) familyHistory allergichistory: (NSString *) allergichistory healthRecordCode: (NSString *) healthRecordCode contractID: (NSString *) contractID province: (NSString *) province city: (NSString *) city area: (NSString *) area linkR: (NSString *) linkR patientId: (int64_t) patientId
{
  self = [super init];
  __dwellerID = [dwellerID retain_stub];
  __dwellerID_isset = YES;
  __dwellerName = [dwellerName retain_stub];
  __dwellerName_isset = YES;
  __dwellerGender = [dwellerGender retain_stub];
  __dwellerGender_isset = YES;
  __birthDate = [birthDate retain_stub];
  __birthDate_isset = YES;
  __region = [region retain_stub];
  __region_isset = YES;
  __idNumber = [idNumber retain_stub];
  __idNumber_isset = YES;
  __bloodType = [bloodType retain_stub];
  __bloodType_isset = YES;
  __phone = [phone retain_stub];
  __phone_isset = YES;
  __maritalSts = [maritalSts retain_stub];
  __maritalSts_isset = YES;
  __workUnit = [workUnit retain_stub];
  __workUnit_isset = YES;
  __addr = [addr retain_stub];
  __addr_isset = YES;
  __lastFollowupID = [lastFollowupID retain_stub];
  __lastFollowupID_isset = YES;
  __linkB = [linkB retain_stub];
  __linkB_isset = YES;
  __linkD = [linkD retain_stub];
  __linkD_isset = YES;
  __signStatus = [signStatus retain_stub];
  __signStatus_isset = YES;
  __caseTypes = [caseTypes retain_stub];
  __caseTypes_isset = YES;
  __disability = [disability retain_stub];
  __disability_isset = YES;
  __familyHistory = [familyHistory retain_stub];
  __familyHistory_isset = YES;
  __allergichistory = [allergichistory retain_stub];
  __allergichistory_isset = YES;
  __healthRecordCode = [healthRecordCode retain_stub];
  __healthRecordCode_isset = YES;
  __contractID = [contractID retain_stub];
  __contractID_isset = YES;
  __province = [province retain_stub];
  __province_isset = YES;
  __city = [city retain_stub];
  __city_isset = YES;
  __area = [area retain_stub];
  __area_isset = YES;
  __linkR = [linkR retain_stub];
  __linkR_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dwellerID"])
  {
    __dwellerID = [[decoder decodeObjectForKey: @"dwellerID"] retain_stub];
    __dwellerID_isset = YES;
  }
  if ([decoder containsValueForKey: @"dwellerName"])
  {
    __dwellerName = [[decoder decodeObjectForKey: @"dwellerName"] retain_stub];
    __dwellerName_isset = YES;
  }
  if ([decoder containsValueForKey: @"dwellerGender"])
  {
    __dwellerGender = [[decoder decodeObjectForKey: @"dwellerGender"] retain_stub];
    __dwellerGender_isset = YES;
  }
  if ([decoder containsValueForKey: @"birthDate"])
  {
    __birthDate = [[decoder decodeObjectForKey: @"birthDate"] retain_stub];
    __birthDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"region"])
  {
    __region = [[decoder decodeObjectForKey: @"region"] retain_stub];
    __region_isset = YES;
  }
  if ([decoder containsValueForKey: @"idNumber"])
  {
    __idNumber = [[decoder decodeObjectForKey: @"idNumber"] retain_stub];
    __idNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"bloodType"])
  {
    __bloodType = [[decoder decodeObjectForKey: @"bloodType"] retain_stub];
    __bloodType_isset = YES;
  }
  if ([decoder containsValueForKey: @"phone"])
  {
    __phone = [[decoder decodeObjectForKey: @"phone"] retain_stub];
    __phone_isset = YES;
  }
  if ([decoder containsValueForKey: @"maritalSts"])
  {
    __maritalSts = [[decoder decodeObjectForKey: @"maritalSts"] retain_stub];
    __maritalSts_isset = YES;
  }
  if ([decoder containsValueForKey: @"workUnit"])
  {
    __workUnit = [[decoder decodeObjectForKey: @"workUnit"] retain_stub];
    __workUnit_isset = YES;
  }
  if ([decoder containsValueForKey: @"addr"])
  {
    __addr = [[decoder decodeObjectForKey: @"addr"] retain_stub];
    __addr_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastFollowupID"])
  {
    __lastFollowupID = [[decoder decodeObjectForKey: @"lastFollowupID"] retain_stub];
    __lastFollowupID_isset = YES;
  }
  if ([decoder containsValueForKey: @"linkB"])
  {
    __linkB = [[decoder decodeObjectForKey: @"linkB"] retain_stub];
    __linkB_isset = YES;
  }
  if ([decoder containsValueForKey: @"linkD"])
  {
    __linkD = [[decoder decodeObjectForKey: @"linkD"] retain_stub];
    __linkD_isset = YES;
  }
  if ([decoder containsValueForKey: @"signStatus"])
  {
    __signStatus = [[decoder decodeObjectForKey: @"signStatus"] retain_stub];
    __signStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"caseTypes"])
  {
    __caseTypes = [[decoder decodeObjectForKey: @"caseTypes"] retain_stub];
    __caseTypes_isset = YES;
  }
  if ([decoder containsValueForKey: @"disability"])
  {
    __disability = [[decoder decodeObjectForKey: @"disability"] retain_stub];
    __disability_isset = YES;
  }
  if ([decoder containsValueForKey: @"familyHistory"])
  {
    __familyHistory = [[decoder decodeObjectForKey: @"familyHistory"] retain_stub];
    __familyHistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"allergichistory"])
  {
    __allergichistory = [[decoder decodeObjectForKey: @"allergichistory"] retain_stub];
    __allergichistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"healthRecordCode"])
  {
    __healthRecordCode = [[decoder decodeObjectForKey: @"healthRecordCode"] retain_stub];
    __healthRecordCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"contractID"])
  {
    __contractID = [[decoder decodeObjectForKey: @"contractID"] retain_stub];
    __contractID_isset = YES;
  }
  if ([decoder containsValueForKey: @"province"])
  {
    __province = [[decoder decodeObjectForKey: @"province"] retain_stub];
    __province_isset = YES;
  }
  if ([decoder containsValueForKey: @"city"])
  {
    __city = [[decoder decodeObjectForKey: @"city"] retain_stub];
    __city_isset = YES;
  }
  if ([decoder containsValueForKey: @"area"])
  {
    __area = [[decoder decodeObjectForKey: @"area"] retain_stub];
    __area_isset = YES;
  }
  if ([decoder containsValueForKey: @"linkR"])
  {
    __linkR = [[decoder decodeObjectForKey: @"linkR"] retain_stub];
    __linkR_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dwellerID_isset)
  {
    [encoder encodeObject: __dwellerID forKey: @"dwellerID"];
  }
  if (__dwellerName_isset)
  {
    [encoder encodeObject: __dwellerName forKey: @"dwellerName"];
  }
  if (__dwellerGender_isset)
  {
    [encoder encodeObject: __dwellerGender forKey: @"dwellerGender"];
  }
  if (__birthDate_isset)
  {
    [encoder encodeObject: __birthDate forKey: @"birthDate"];
  }
  if (__region_isset)
  {
    [encoder encodeObject: __region forKey: @"region"];
  }
  if (__idNumber_isset)
  {
    [encoder encodeObject: __idNumber forKey: @"idNumber"];
  }
  if (__bloodType_isset)
  {
    [encoder encodeObject: __bloodType forKey: @"bloodType"];
  }
  if (__phone_isset)
  {
    [encoder encodeObject: __phone forKey: @"phone"];
  }
  if (__maritalSts_isset)
  {
    [encoder encodeObject: __maritalSts forKey: @"maritalSts"];
  }
  if (__workUnit_isset)
  {
    [encoder encodeObject: __workUnit forKey: @"workUnit"];
  }
  if (__addr_isset)
  {
    [encoder encodeObject: __addr forKey: @"addr"];
  }
  if (__lastFollowupID_isset)
  {
    [encoder encodeObject: __lastFollowupID forKey: @"lastFollowupID"];
  }
  if (__linkB_isset)
  {
    [encoder encodeObject: __linkB forKey: @"linkB"];
  }
  if (__linkD_isset)
  {
    [encoder encodeObject: __linkD forKey: @"linkD"];
  }
  if (__signStatus_isset)
  {
    [encoder encodeObject: __signStatus forKey: @"signStatus"];
  }
  if (__caseTypes_isset)
  {
    [encoder encodeObject: __caseTypes forKey: @"caseTypes"];
  }
  if (__disability_isset)
  {
    [encoder encodeObject: __disability forKey: @"disability"];
  }
  if (__familyHistory_isset)
  {
    [encoder encodeObject: __familyHistory forKey: @"familyHistory"];
  }
  if (__allergichistory_isset)
  {
    [encoder encodeObject: __allergichistory forKey: @"allergichistory"];
  }
  if (__healthRecordCode_isset)
  {
    [encoder encodeObject: __healthRecordCode forKey: @"healthRecordCode"];
  }
  if (__contractID_isset)
  {
    [encoder encodeObject: __contractID forKey: @"contractID"];
  }
  if (__province_isset)
  {
    [encoder encodeObject: __province forKey: @"province"];
  }
  if (__city_isset)
  {
    [encoder encodeObject: __city forKey: @"city"];
  }
  if (__area_isset)
  {
    [encoder encodeObject: __area forKey: @"area"];
  }
  if (__linkR_isset)
  {
    [encoder encodeObject: __linkR forKey: @"linkR"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __dwellerID_isset ? 2654435761 : 0;
  if (__dwellerID_isset)
  {
    hash = (hash * 31) ^ [__dwellerID hash];
  }
  hash = (hash * 31) ^ __dwellerName_isset ? 2654435761 : 0;
  if (__dwellerName_isset)
  {
    hash = (hash * 31) ^ [__dwellerName hash];
  }
  hash = (hash * 31) ^ __dwellerGender_isset ? 2654435761 : 0;
  if (__dwellerGender_isset)
  {
    hash = (hash * 31) ^ [__dwellerGender hash];
  }
  hash = (hash * 31) ^ __birthDate_isset ? 2654435761 : 0;
  if (__birthDate_isset)
  {
    hash = (hash * 31) ^ [__birthDate hash];
  }
  hash = (hash * 31) ^ __region_isset ? 2654435761 : 0;
  if (__region_isset)
  {
    hash = (hash * 31) ^ [__region hash];
  }
  hash = (hash * 31) ^ __idNumber_isset ? 2654435761 : 0;
  if (__idNumber_isset)
  {
    hash = (hash * 31) ^ [__idNumber hash];
  }
  hash = (hash * 31) ^ __bloodType_isset ? 2654435761 : 0;
  if (__bloodType_isset)
  {
    hash = (hash * 31) ^ [__bloodType hash];
  }
  hash = (hash * 31) ^ __phone_isset ? 2654435761 : 0;
  if (__phone_isset)
  {
    hash = (hash * 31) ^ [__phone hash];
  }
  hash = (hash * 31) ^ __maritalSts_isset ? 2654435761 : 0;
  if (__maritalSts_isset)
  {
    hash = (hash * 31) ^ [__maritalSts hash];
  }
  hash = (hash * 31) ^ __workUnit_isset ? 2654435761 : 0;
  if (__workUnit_isset)
  {
    hash = (hash * 31) ^ [__workUnit hash];
  }
  hash = (hash * 31) ^ __addr_isset ? 2654435761 : 0;
  if (__addr_isset)
  {
    hash = (hash * 31) ^ [__addr hash];
  }
  hash = (hash * 31) ^ __lastFollowupID_isset ? 2654435761 : 0;
  if (__lastFollowupID_isset)
  {
    hash = (hash * 31) ^ [__lastFollowupID hash];
  }
  hash = (hash * 31) ^ __linkB_isset ? 2654435761 : 0;
  if (__linkB_isset)
  {
    hash = (hash * 31) ^ [__linkB hash];
  }
  hash = (hash * 31) ^ __linkD_isset ? 2654435761 : 0;
  if (__linkD_isset)
  {
    hash = (hash * 31) ^ [__linkD hash];
  }
  hash = (hash * 31) ^ __signStatus_isset ? 2654435761 : 0;
  if (__signStatus_isset)
  {
    hash = (hash * 31) ^ [__signStatus hash];
  }
  hash = (hash * 31) ^ __caseTypes_isset ? 2654435761 : 0;
  if (__caseTypes_isset)
  {
    hash = (hash * 31) ^ [__caseTypes hash];
  }
  hash = (hash * 31) ^ __disability_isset ? 2654435761 : 0;
  if (__disability_isset)
  {
    hash = (hash * 31) ^ [__disability hash];
  }
  hash = (hash * 31) ^ __familyHistory_isset ? 2654435761 : 0;
  if (__familyHistory_isset)
  {
    hash = (hash * 31) ^ [__familyHistory hash];
  }
  hash = (hash * 31) ^ __allergichistory_isset ? 2654435761 : 0;
  if (__allergichistory_isset)
  {
    hash = (hash * 31) ^ [__allergichistory hash];
  }
  hash = (hash * 31) ^ __healthRecordCode_isset ? 2654435761 : 0;
  if (__healthRecordCode_isset)
  {
    hash = (hash * 31) ^ [__healthRecordCode hash];
  }
  hash = (hash * 31) ^ __contractID_isset ? 2654435761 : 0;
  if (__contractID_isset)
  {
    hash = (hash * 31) ^ [__contractID hash];
  }
  hash = (hash * 31) ^ __province_isset ? 2654435761 : 0;
  if (__province_isset)
  {
    hash = (hash * 31) ^ [__province hash];
  }
  hash = (hash * 31) ^ __city_isset ? 2654435761 : 0;
  if (__city_isset)
  {
    hash = (hash * 31) ^ [__city hash];
  }
  hash = (hash * 31) ^ __area_isset ? 2654435761 : 0;
  if (__area_isset)
  {
    hash = (hash * 31) ^ [__area hash];
  }
  hash = (hash * 31) ^ __linkR_isset ? 2654435761 : 0;
  if (__linkR_isset)
  {
    hash = (hash * 31) ^ [__linkR hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFDwellerInfo class]]) {
    return NO;
  }
  NXTFDwellerInfo *other = (NXTFDwellerInfo *)anObject;
  if ((__dwellerID_isset != other->__dwellerID_isset) ||
      (__dwellerID_isset && ((__dwellerID || other->__dwellerID) && ![__dwellerID isEqual:other->__dwellerID]))) {
    return NO;
  }
  if ((__dwellerName_isset != other->__dwellerName_isset) ||
      (__dwellerName_isset && ((__dwellerName || other->__dwellerName) && ![__dwellerName isEqual:other->__dwellerName]))) {
    return NO;
  }
  if ((__dwellerGender_isset != other->__dwellerGender_isset) ||
      (__dwellerGender_isset && ((__dwellerGender || other->__dwellerGender) && ![__dwellerGender isEqual:other->__dwellerGender]))) {
    return NO;
  }
  if ((__birthDate_isset != other->__birthDate_isset) ||
      (__birthDate_isset && ((__birthDate || other->__birthDate) && ![__birthDate isEqual:other->__birthDate]))) {
    return NO;
  }
  if ((__region_isset != other->__region_isset) ||
      (__region_isset && ((__region || other->__region) && ![__region isEqual:other->__region]))) {
    return NO;
  }
  if ((__idNumber_isset != other->__idNumber_isset) ||
      (__idNumber_isset && ((__idNumber || other->__idNumber) && ![__idNumber isEqual:other->__idNumber]))) {
    return NO;
  }
  if ((__bloodType_isset != other->__bloodType_isset) ||
      (__bloodType_isset && ((__bloodType || other->__bloodType) && ![__bloodType isEqual:other->__bloodType]))) {
    return NO;
  }
  if ((__phone_isset != other->__phone_isset) ||
      (__phone_isset && ((__phone || other->__phone) && ![__phone isEqual:other->__phone]))) {
    return NO;
  }
  if ((__maritalSts_isset != other->__maritalSts_isset) ||
      (__maritalSts_isset && ((__maritalSts || other->__maritalSts) && ![__maritalSts isEqual:other->__maritalSts]))) {
    return NO;
  }
  if ((__workUnit_isset != other->__workUnit_isset) ||
      (__workUnit_isset && ((__workUnit || other->__workUnit) && ![__workUnit isEqual:other->__workUnit]))) {
    return NO;
  }
  if ((__addr_isset != other->__addr_isset) ||
      (__addr_isset && ((__addr || other->__addr) && ![__addr isEqual:other->__addr]))) {
    return NO;
  }
  if ((__lastFollowupID_isset != other->__lastFollowupID_isset) ||
      (__lastFollowupID_isset && ((__lastFollowupID || other->__lastFollowupID) && ![__lastFollowupID isEqual:other->__lastFollowupID]))) {
    return NO;
  }
  if ((__linkB_isset != other->__linkB_isset) ||
      (__linkB_isset && ((__linkB || other->__linkB) && ![__linkB isEqual:other->__linkB]))) {
    return NO;
  }
  if ((__linkD_isset != other->__linkD_isset) ||
      (__linkD_isset && ((__linkD || other->__linkD) && ![__linkD isEqual:other->__linkD]))) {
    return NO;
  }
  if ((__signStatus_isset != other->__signStatus_isset) ||
      (__signStatus_isset && ((__signStatus || other->__signStatus) && ![__signStatus isEqual:other->__signStatus]))) {
    return NO;
  }
  if ((__caseTypes_isset != other->__caseTypes_isset) ||
      (__caseTypes_isset && ((__caseTypes || other->__caseTypes) && ![__caseTypes isEqual:other->__caseTypes]))) {
    return NO;
  }
  if ((__disability_isset != other->__disability_isset) ||
      (__disability_isset && ((__disability || other->__disability) && ![__disability isEqual:other->__disability]))) {
    return NO;
  }
  if ((__familyHistory_isset != other->__familyHistory_isset) ||
      (__familyHistory_isset && ((__familyHistory || other->__familyHistory) && ![__familyHistory isEqual:other->__familyHistory]))) {
    return NO;
  }
  if ((__allergichistory_isset != other->__allergichistory_isset) ||
      (__allergichistory_isset && ((__allergichistory || other->__allergichistory) && ![__allergichistory isEqual:other->__allergichistory]))) {
    return NO;
  }
  if ((__healthRecordCode_isset != other->__healthRecordCode_isset) ||
      (__healthRecordCode_isset && ((__healthRecordCode || other->__healthRecordCode) && ![__healthRecordCode isEqual:other->__healthRecordCode]))) {
    return NO;
  }
  if ((__contractID_isset != other->__contractID_isset) ||
      (__contractID_isset && ((__contractID || other->__contractID) && ![__contractID isEqual:other->__contractID]))) {
    return NO;
  }
  if ((__province_isset != other->__province_isset) ||
      (__province_isset && ((__province || other->__province) && ![__province isEqual:other->__province]))) {
    return NO;
  }
  if ((__city_isset != other->__city_isset) ||
      (__city_isset && ((__city || other->__city) && ![__city isEqual:other->__city]))) {
    return NO;
  }
  if ((__area_isset != other->__area_isset) ||
      (__area_isset && ((__area || other->__area) && ![__area isEqual:other->__area]))) {
    return NO;
  }
  if ((__linkR_isset != other->__linkR_isset) ||
      (__linkR_isset && ((__linkR || other->__linkR) && ![__linkR isEqual:other->__linkR]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__dwellerID release_stub];
  [__dwellerName release_stub];
  [__dwellerGender release_stub];
  [__birthDate release_stub];
  [__region release_stub];
  [__idNumber release_stub];
  [__bloodType release_stub];
  [__phone release_stub];
  [__maritalSts release_stub];
  [__workUnit release_stub];
  [__addr release_stub];
  [__lastFollowupID release_stub];
  [__linkB release_stub];
  [__linkD release_stub];
  [__signStatus release_stub];
  [__caseTypes release_stub];
  [__disability release_stub];
  [__familyHistory release_stub];
  [__allergichistory release_stub];
  [__healthRecordCode release_stub];
  [__contractID release_stub];
  [__province release_stub];
  [__city release_stub];
  [__area release_stub];
  [__linkR release_stub];
  [super dealloc_stub];
}

- (NSString *) dwellerID {
  return [[__dwellerID retain_stub] autorelease_stub];
}

- (void) setDwellerID: (NSString *) dwellerID {
  [dwellerID retain_stub];
  [__dwellerID release_stub];
  __dwellerID = dwellerID;
  __dwellerID_isset = YES;
}

- (BOOL) dwellerIDIsSet {
  return __dwellerID_isset;
}

- (void) unsetDwellerID {
  [__dwellerID release_stub];
  __dwellerID = nil;
  __dwellerID_isset = NO;
}

- (NSString *) dwellerName {
  return [[__dwellerName retain_stub] autorelease_stub];
}

- (void) setDwellerName: (NSString *) dwellerName {
  [dwellerName retain_stub];
  [__dwellerName release_stub];
  __dwellerName = dwellerName;
  __dwellerName_isset = YES;
}

- (BOOL) dwellerNameIsSet {
  return __dwellerName_isset;
}

- (void) unsetDwellerName {
  [__dwellerName release_stub];
  __dwellerName = nil;
  __dwellerName_isset = NO;
}

- (NSString *) dwellerGender {
  return [[__dwellerGender retain_stub] autorelease_stub];
}

- (void) setDwellerGender: (NSString *) dwellerGender {
  [dwellerGender retain_stub];
  [__dwellerGender release_stub];
  __dwellerGender = dwellerGender;
  __dwellerGender_isset = YES;
}

- (BOOL) dwellerGenderIsSet {
  return __dwellerGender_isset;
}

- (void) unsetDwellerGender {
  [__dwellerGender release_stub];
  __dwellerGender = nil;
  __dwellerGender_isset = NO;
}

- (NSString *) birthDate {
  return [[__birthDate retain_stub] autorelease_stub];
}

- (void) setBirthDate: (NSString *) birthDate {
  [birthDate retain_stub];
  [__birthDate release_stub];
  __birthDate = birthDate;
  __birthDate_isset = YES;
}

- (BOOL) birthDateIsSet {
  return __birthDate_isset;
}

- (void) unsetBirthDate {
  [__birthDate release_stub];
  __birthDate = nil;
  __birthDate_isset = NO;
}

- (NSString *) region {
  return [[__region retain_stub] autorelease_stub];
}

- (void) setRegion: (NSString *) region {
  [region retain_stub];
  [__region release_stub];
  __region = region;
  __region_isset = YES;
}

- (BOOL) regionIsSet {
  return __region_isset;
}

- (void) unsetRegion {
  [__region release_stub];
  __region = nil;
  __region_isset = NO;
}

- (NSString *) idNumber {
  return [[__idNumber retain_stub] autorelease_stub];
}

- (void) setIdNumber: (NSString *) idNumber {
  [idNumber retain_stub];
  [__idNumber release_stub];
  __idNumber = idNumber;
  __idNumber_isset = YES;
}

- (BOOL) idNumberIsSet {
  return __idNumber_isset;
}

- (void) unsetIdNumber {
  [__idNumber release_stub];
  __idNumber = nil;
  __idNumber_isset = NO;
}

- (NSString *) bloodType {
  return [[__bloodType retain_stub] autorelease_stub];
}

- (void) setBloodType: (NSString *) bloodType {
  [bloodType retain_stub];
  [__bloodType release_stub];
  __bloodType = bloodType;
  __bloodType_isset = YES;
}

- (BOOL) bloodTypeIsSet {
  return __bloodType_isset;
}

- (void) unsetBloodType {
  [__bloodType release_stub];
  __bloodType = nil;
  __bloodType_isset = NO;
}

- (NSString *) phone {
  return [[__phone retain_stub] autorelease_stub];
}

- (void) setPhone: (NSString *) phone {
  [phone retain_stub];
  [__phone release_stub];
  __phone = phone;
  __phone_isset = YES;
}

- (BOOL) phoneIsSet {
  return __phone_isset;
}

- (void) unsetPhone {
  [__phone release_stub];
  __phone = nil;
  __phone_isset = NO;
}

- (NSString *) maritalSts {
  return [[__maritalSts retain_stub] autorelease_stub];
}

- (void) setMaritalSts: (NSString *) maritalSts {
  [maritalSts retain_stub];
  [__maritalSts release_stub];
  __maritalSts = maritalSts;
  __maritalSts_isset = YES;
}

- (BOOL) maritalStsIsSet {
  return __maritalSts_isset;
}

- (void) unsetMaritalSts {
  [__maritalSts release_stub];
  __maritalSts = nil;
  __maritalSts_isset = NO;
}

- (NSString *) workUnit {
  return [[__workUnit retain_stub] autorelease_stub];
}

- (void) setWorkUnit: (NSString *) workUnit {
  [workUnit retain_stub];
  [__workUnit release_stub];
  __workUnit = workUnit;
  __workUnit_isset = YES;
}

- (BOOL) workUnitIsSet {
  return __workUnit_isset;
}

- (void) unsetWorkUnit {
  [__workUnit release_stub];
  __workUnit = nil;
  __workUnit_isset = NO;
}

- (NSString *) addr {
  return [[__addr retain_stub] autorelease_stub];
}

- (void) setAddr: (NSString *) addr {
  [addr retain_stub];
  [__addr release_stub];
  __addr = addr;
  __addr_isset = YES;
}

- (BOOL) addrIsSet {
  return __addr_isset;
}

- (void) unsetAddr {
  [__addr release_stub];
  __addr = nil;
  __addr_isset = NO;
}

- (NSString *) lastFollowupID {
  return [[__lastFollowupID retain_stub] autorelease_stub];
}

- (void) setLastFollowupID: (NSString *) lastFollowupID {
  [lastFollowupID retain_stub];
  [__lastFollowupID release_stub];
  __lastFollowupID = lastFollowupID;
  __lastFollowupID_isset = YES;
}

- (BOOL) lastFollowupIDIsSet {
  return __lastFollowupID_isset;
}

- (void) unsetLastFollowupID {
  [__lastFollowupID release_stub];
  __lastFollowupID = nil;
  __lastFollowupID_isset = NO;
}

- (NSString *) linkB {
  return [[__linkB retain_stub] autorelease_stub];
}

- (void) setLinkB: (NSString *) linkB {
  [linkB retain_stub];
  [__linkB release_stub];
  __linkB = linkB;
  __linkB_isset = YES;
}

- (BOOL) linkBIsSet {
  return __linkB_isset;
}

- (void) unsetLinkB {
  [__linkB release_stub];
  __linkB = nil;
  __linkB_isset = NO;
}

- (NSString *) linkD {
  return [[__linkD retain_stub] autorelease_stub];
}

- (void) setLinkD: (NSString *) linkD {
  [linkD retain_stub];
  [__linkD release_stub];
  __linkD = linkD;
  __linkD_isset = YES;
}

- (BOOL) linkDIsSet {
  return __linkD_isset;
}

- (void) unsetLinkD {
  [__linkD release_stub];
  __linkD = nil;
  __linkD_isset = NO;
}

- (NSString *) signStatus {
  return [[__signStatus retain_stub] autorelease_stub];
}

- (void) setSignStatus: (NSString *) signStatus {
  [signStatus retain_stub];
  [__signStatus release_stub];
  __signStatus = signStatus;
  __signStatus_isset = YES;
}

- (BOOL) signStatusIsSet {
  return __signStatus_isset;
}

- (void) unsetSignStatus {
  [__signStatus release_stub];
  __signStatus = nil;
  __signStatus_isset = NO;
}

- (NSMutableArray *) caseTypes {
  return [[__caseTypes retain_stub] autorelease_stub];
}

- (void) setCaseTypes: (NSMutableArray *) caseTypes {
  [caseTypes retain_stub];
  [__caseTypes release_stub];
  __caseTypes = caseTypes;
  __caseTypes_isset = YES;
}

- (BOOL) caseTypesIsSet {
  return __caseTypes_isset;
}

- (void) unsetCaseTypes {
  [__caseTypes release_stub];
  __caseTypes = nil;
  __caseTypes_isset = NO;
}

- (NSString *) disability {
  return [[__disability retain_stub] autorelease_stub];
}

- (void) setDisability: (NSString *) disability {
  [disability retain_stub];
  [__disability release_stub];
  __disability = disability;
  __disability_isset = YES;
}

- (BOOL) disabilityIsSet {
  return __disability_isset;
}

- (void) unsetDisability {
  [__disability release_stub];
  __disability = nil;
  __disability_isset = NO;
}

- (NSString *) familyHistory {
  return [[__familyHistory retain_stub] autorelease_stub];
}

- (void) setFamilyHistory: (NSString *) familyHistory {
  [familyHistory retain_stub];
  [__familyHistory release_stub];
  __familyHistory = familyHistory;
  __familyHistory_isset = YES;
}

- (BOOL) familyHistoryIsSet {
  return __familyHistory_isset;
}

- (void) unsetFamilyHistory {
  [__familyHistory release_stub];
  __familyHistory = nil;
  __familyHistory_isset = NO;
}

- (NSString *) allergichistory {
  return [[__allergichistory retain_stub] autorelease_stub];
}

- (void) setAllergichistory: (NSString *) allergichistory {
  [allergichistory retain_stub];
  [__allergichistory release_stub];
  __allergichistory = allergichistory;
  __allergichistory_isset = YES;
}

- (BOOL) allergichistoryIsSet {
  return __allergichistory_isset;
}

- (void) unsetAllergichistory {
  [__allergichistory release_stub];
  __allergichistory = nil;
  __allergichistory_isset = NO;
}

- (NSString *) healthRecordCode {
  return [[__healthRecordCode retain_stub] autorelease_stub];
}

- (void) setHealthRecordCode: (NSString *) healthRecordCode {
  [healthRecordCode retain_stub];
  [__healthRecordCode release_stub];
  __healthRecordCode = healthRecordCode;
  __healthRecordCode_isset = YES;
}

- (BOOL) healthRecordCodeIsSet {
  return __healthRecordCode_isset;
}

- (void) unsetHealthRecordCode {
  [__healthRecordCode release_stub];
  __healthRecordCode = nil;
  __healthRecordCode_isset = NO;
}

- (NSString *) contractID {
  return [[__contractID retain_stub] autorelease_stub];
}

- (void) setContractID: (NSString *) contractID {
  [contractID retain_stub];
  [__contractID release_stub];
  __contractID = contractID;
  __contractID_isset = YES;
}

- (BOOL) contractIDIsSet {
  return __contractID_isset;
}

- (void) unsetContractID {
  [__contractID release_stub];
  __contractID = nil;
  __contractID_isset = NO;
}

- (NSString *) province {
  return [[__province retain_stub] autorelease_stub];
}

- (void) setProvince: (NSString *) province {
  [province retain_stub];
  [__province release_stub];
  __province = province;
  __province_isset = YES;
}

- (BOOL) provinceIsSet {
  return __province_isset;
}

- (void) unsetProvince {
  [__province release_stub];
  __province = nil;
  __province_isset = NO;
}

- (NSString *) city {
  return [[__city retain_stub] autorelease_stub];
}

- (void) setCity: (NSString *) city {
  [city retain_stub];
  [__city release_stub];
  __city = city;
  __city_isset = YES;
}

- (BOOL) cityIsSet {
  return __city_isset;
}

- (void) unsetCity {
  [__city release_stub];
  __city = nil;
  __city_isset = NO;
}

- (NSString *) area {
  return [[__area retain_stub] autorelease_stub];
}

- (void) setArea: (NSString *) area {
  [area retain_stub];
  [__area release_stub];
  __area = area;
  __area_isset = YES;
}

- (BOOL) areaIsSet {
  return __area_isset;
}

- (void) unsetArea {
  [__area release_stub];
  __area = nil;
  __area_isset = NO;
}

- (NSString *) linkR {
  return [[__linkR retain_stub] autorelease_stub];
}

- (void) setLinkR: (NSString *) linkR {
  [linkR retain_stub];
  [__linkR release_stub];
  __linkR = linkR;
  __linkR_isset = YES;
}

- (BOOL) linkRIsSet {
  return __linkR_isset;
}

- (void) unsetLinkR {
  [__linkR release_stub];
  __linkR = nil;
  __linkR_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDwellerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDwellerName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDwellerGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBirthDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIdNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBloodType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMaritalSts: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWorkUnit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddr: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLastFollowupID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLinkB: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLinkD: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSignStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_LIST) {
          int _size40;
          [inProtocol readListBeginReturningElementType: NULL size: &_size40];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size40];
          int _i41;
          for (_i41 = 0; _i41 < _size40; ++_i41)
          {
            NSString * _elem42 = [inProtocol readString];
            [fieldValue addObject: _elem42];
          }
          [inProtocol readListEnd];
          [self setCaseTypes: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDisability: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFamilyHistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAllergichistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHealthRecordCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContractID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProvince: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setArea: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLinkR: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 26:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DwellerInfo"];
  if (__dwellerID_isset) {
    if (__dwellerID != nil) {
      [outProtocol writeFieldBeginWithName: @"dwellerID" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dwellerID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dwellerName_isset) {
    if (__dwellerName != nil) {
      [outProtocol writeFieldBeginWithName: @"dwellerName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __dwellerName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dwellerGender_isset) {
    if (__dwellerGender != nil) {
      [outProtocol writeFieldBeginWithName: @"dwellerGender" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __dwellerGender];
      [outProtocol writeFieldEnd];
    }
  }
  if (__birthDate_isset) {
    if (__birthDate != nil) {
      [outProtocol writeFieldBeginWithName: @"birthDate" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __birthDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__region_isset) {
    if (__region != nil) {
      [outProtocol writeFieldBeginWithName: @"region" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __region];
      [outProtocol writeFieldEnd];
    }
  }
  if (__idNumber_isset) {
    if (__idNumber != nil) {
      [outProtocol writeFieldBeginWithName: @"idNumber" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __idNumber];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bloodType_isset) {
    if (__bloodType != nil) {
      [outProtocol writeFieldBeginWithName: @"bloodType" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __bloodType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phone_isset) {
    if (__phone != nil) {
      [outProtocol writeFieldBeginWithName: @"phone" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __phone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__maritalSts_isset) {
    if (__maritalSts != nil) {
      [outProtocol writeFieldBeginWithName: @"maritalSts" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __maritalSts];
      [outProtocol writeFieldEnd];
    }
  }
  if (__workUnit_isset) {
    if (__workUnit != nil) {
      [outProtocol writeFieldBeginWithName: @"workUnit" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __workUnit];
      [outProtocol writeFieldEnd];
    }
  }
  if (__addr_isset) {
    if (__addr != nil) {
      [outProtocol writeFieldBeginWithName: @"addr" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __addr];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastFollowupID_isset) {
    if (__lastFollowupID != nil) {
      [outProtocol writeFieldBeginWithName: @"lastFollowupID" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __lastFollowupID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__linkB_isset) {
    if (__linkB != nil) {
      [outProtocol writeFieldBeginWithName: @"linkB" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __linkB];
      [outProtocol writeFieldEnd];
    }
  }
  if (__linkD_isset) {
    if (__linkD != nil) {
      [outProtocol writeFieldBeginWithName: @"linkD" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __linkD];
      [outProtocol writeFieldEnd];
    }
  }
  if (__signStatus_isset) {
    if (__signStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"signStatus" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __signStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__caseTypes_isset) {
    if (__caseTypes != nil) {
      [outProtocol writeFieldBeginWithName: @"caseTypes" type: TType_LIST fieldID: 16];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__caseTypes count]];
        int idx44;
        for (idx44 = 0; idx44 < [__caseTypes count]; idx44++)
        {
          [outProtocol writeString: [__caseTypes objectAtIndex: idx44]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__disability_isset) {
    if (__disability != nil) {
      [outProtocol writeFieldBeginWithName: @"disability" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __disability];
      [outProtocol writeFieldEnd];
    }
  }
  if (__familyHistory_isset) {
    if (__familyHistory != nil) {
      [outProtocol writeFieldBeginWithName: @"familyHistory" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __familyHistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__allergichistory_isset) {
    if (__allergichistory != nil) {
      [outProtocol writeFieldBeginWithName: @"allergichistory" type: TType_STRING fieldID: 19];
      [outProtocol writeString: __allergichistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__healthRecordCode_isset) {
    if (__healthRecordCode != nil) {
      [outProtocol writeFieldBeginWithName: @"healthRecordCode" type: TType_STRING fieldID: 20];
      [outProtocol writeString: __healthRecordCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__contractID_isset) {
    if (__contractID != nil) {
      [outProtocol writeFieldBeginWithName: @"contractID" type: TType_STRING fieldID: 21];
      [outProtocol writeString: __contractID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__province_isset) {
    if (__province != nil) {
      [outProtocol writeFieldBeginWithName: @"province" type: TType_STRING fieldID: 22];
      [outProtocol writeString: __province];
      [outProtocol writeFieldEnd];
    }
  }
  if (__city_isset) {
    if (__city != nil) {
      [outProtocol writeFieldBeginWithName: @"city" type: TType_STRING fieldID: 23];
      [outProtocol writeString: __city];
      [outProtocol writeFieldEnd];
    }
  }
  if (__area_isset) {
    if (__area != nil) {
      [outProtocol writeFieldBeginWithName: @"area" type: TType_STRING fieldID: 24];
      [outProtocol writeString: __area];
      [outProtocol writeFieldEnd];
    }
  }
  if (__linkR_isset) {
    if (__linkR != nil) {
      [outProtocol writeFieldBeginWithName: @"linkR" type: TType_STRING fieldID: 25];
      [outProtocol writeString: __linkR];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 26];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFDwellerInfo("];
  [ms appendString: @"dwellerID:"];
  [ms appendFormat: @"\"%@\"", __dwellerID];
  [ms appendString: @",dwellerName:"];
  [ms appendFormat: @"\"%@\"", __dwellerName];
  [ms appendString: @",dwellerGender:"];
  [ms appendFormat: @"\"%@\"", __dwellerGender];
  [ms appendString: @",birthDate:"];
  [ms appendFormat: @"\"%@\"", __birthDate];
  [ms appendString: @",region:"];
  [ms appendFormat: @"\"%@\"", __region];
  [ms appendString: @",idNumber:"];
  [ms appendFormat: @"\"%@\"", __idNumber];
  [ms appendString: @",bloodType:"];
  [ms appendFormat: @"\"%@\"", __bloodType];
  [ms appendString: @",phone:"];
  [ms appendFormat: @"\"%@\"", __phone];
  [ms appendString: @",maritalSts:"];
  [ms appendFormat: @"\"%@\"", __maritalSts];
  [ms appendString: @",workUnit:"];
  [ms appendFormat: @"\"%@\"", __workUnit];
  [ms appendString: @",addr:"];
  [ms appendFormat: @"\"%@\"", __addr];
  [ms appendString: @",lastFollowupID:"];
  [ms appendFormat: @"\"%@\"", __lastFollowupID];
  [ms appendString: @",linkB:"];
  [ms appendFormat: @"\"%@\"", __linkB];
  [ms appendString: @",linkD:"];
  [ms appendFormat: @"\"%@\"", __linkD];
  [ms appendString: @",signStatus:"];
  [ms appendFormat: @"\"%@\"", __signStatus];
  [ms appendString: @",caseTypes:"];
  [ms appendFormat: @"%@", __caseTypes];
  [ms appendString: @",disability:"];
  [ms appendFormat: @"\"%@\"", __disability];
  [ms appendString: @",familyHistory:"];
  [ms appendFormat: @"\"%@\"", __familyHistory];
  [ms appendString: @",allergichistory:"];
  [ms appendFormat: @"\"%@\"", __allergichistory];
  [ms appendString: @",healthRecordCode:"];
  [ms appendFormat: @"\"%@\"", __healthRecordCode];
  [ms appendString: @",contractID:"];
  [ms appendFormat: @"\"%@\"", __contractID];
  [ms appendString: @",province:"];
  [ms appendFormat: @"\"%@\"", __province];
  [ms appendString: @",city:"];
  [ms appendFormat: @"\"%@\"", __city];
  [ms appendString: @",area:"];
  [ms appendFormat: @"\"%@\"", __area];
  [ms appendString: @",linkR:"];
  [ms appendFormat: @"\"%@\"", __linkR];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFSignContractReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.dwellerInfos = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

  self.packageIds = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header teamId: (NSString *) teamId dwellerInfos: (NSMutableArray *) dwellerInfos packageIds: (NSMutableArray *) packageIds contractDuration: (int32_t) contractDuration hospId: (int32_t) hospId docId: (int64_t) docId teamName: (NSString *) teamName
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __teamId = [teamId retain_stub];
  __teamId_isset = YES;
  __dwellerInfos = [dwellerInfos retain_stub];
  __dwellerInfos_isset = YES;
  __packageIds = [packageIds retain_stub];
  __packageIds_isset = YES;
  __contractDuration = contractDuration;
  __contractDuration_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __docId = docId;
  __docId_isset = YES;
  __teamName = [teamName retain_stub];
  __teamName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"teamId"])
  {
    __teamId = [[decoder decodeObjectForKey: @"teamId"] retain_stub];
    __teamId_isset = YES;
  }
  if ([decoder containsValueForKey: @"dwellerInfos"])
  {
    __dwellerInfos = [[decoder decodeObjectForKey: @"dwellerInfos"] retain_stub];
    __dwellerInfos_isset = YES;
  }
  if ([decoder containsValueForKey: @"packageIds"])
  {
    __packageIds = [[decoder decodeObjectForKey: @"packageIds"] retain_stub];
    __packageIds_isset = YES;
  }
  if ([decoder containsValueForKey: @"contractDuration"])
  {
    __contractDuration = [decoder decodeInt32ForKey: @"contractDuration"];
    __contractDuration_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"docId"])
  {
    __docId = [decoder decodeInt64ForKey: @"docId"];
    __docId_isset = YES;
  }
  if ([decoder containsValueForKey: @"teamName"])
  {
    __teamName = [[decoder decodeObjectForKey: @"teamName"] retain_stub];
    __teamName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__teamId_isset)
  {
    [encoder encodeObject: __teamId forKey: @"teamId"];
  }
  if (__dwellerInfos_isset)
  {
    [encoder encodeObject: __dwellerInfos forKey: @"dwellerInfos"];
  }
  if (__packageIds_isset)
  {
    [encoder encodeObject: __packageIds forKey: @"packageIds"];
  }
  if (__contractDuration_isset)
  {
    [encoder encodeInt32: __contractDuration forKey: @"contractDuration"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__docId_isset)
  {
    [encoder encodeInt64: __docId forKey: @"docId"];
  }
  if (__teamName_isset)
  {
    [encoder encodeObject: __teamName forKey: @"teamName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __teamId_isset ? 2654435761 : 0;
  if (__teamId_isset)
  {
    hash = (hash * 31) ^ [__teamId hash];
  }
  hash = (hash * 31) ^ __dwellerInfos_isset ? 2654435761 : 0;
  if (__dwellerInfos_isset)
  {
    hash = (hash * 31) ^ [__dwellerInfos hash];
  }
  hash = (hash * 31) ^ __packageIds_isset ? 2654435761 : 0;
  if (__packageIds_isset)
  {
    hash = (hash * 31) ^ [__packageIds hash];
  }
  hash = (hash * 31) ^ __contractDuration_isset ? 2654435761 : 0;
  if (__contractDuration_isset)
  {
    hash = (hash * 31) ^ [@(__contractDuration) hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __docId_isset ? 2654435761 : 0;
  if (__docId_isset)
  {
    hash = (hash * 31) ^ [@(__docId) hash];
  }
  hash = (hash * 31) ^ __teamName_isset ? 2654435761 : 0;
  if (__teamName_isset)
  {
    hash = (hash * 31) ^ [__teamName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFSignContractReq class]]) {
    return NO;
  }
  NXTFSignContractReq *other = (NXTFSignContractReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__teamId_isset != other->__teamId_isset) ||
      (__teamId_isset && ((__teamId || other->__teamId) && ![__teamId isEqual:other->__teamId]))) {
    return NO;
  }
  if ((__dwellerInfos_isset != other->__dwellerInfos_isset) ||
      (__dwellerInfos_isset && ((__dwellerInfos || other->__dwellerInfos) && ![__dwellerInfos isEqual:other->__dwellerInfos]))) {
    return NO;
  }
  if ((__packageIds_isset != other->__packageIds_isset) ||
      (__packageIds_isset && ((__packageIds || other->__packageIds) && ![__packageIds isEqual:other->__packageIds]))) {
    return NO;
  }
  if ((__contractDuration_isset != other->__contractDuration_isset) ||
      (__contractDuration_isset && (__contractDuration != other->__contractDuration))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__docId_isset != other->__docId_isset) ||
      (__docId_isset && (__docId != other->__docId))) {
    return NO;
  }
  if ((__teamName_isset != other->__teamName_isset) ||
      (__teamName_isset && ((__teamName || other->__teamName) && ![__teamName isEqual:other->__teamName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__teamId release_stub];
  [__dwellerInfos release_stub];
  [__packageIds release_stub];
  [__teamName release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) teamId {
  return [[__teamId retain_stub] autorelease_stub];
}

- (void) setTeamId: (NSString *) teamId {
  [teamId retain_stub];
  [__teamId release_stub];
  __teamId = teamId;
  __teamId_isset = YES;
}

- (BOOL) teamIdIsSet {
  return __teamId_isset;
}

- (void) unsetTeamId {
  [__teamId release_stub];
  __teamId = nil;
  __teamId_isset = NO;
}

- (NSMutableArray *) dwellerInfos {
  return [[__dwellerInfos retain_stub] autorelease_stub];
}

- (void) setDwellerInfos: (NSMutableArray *) dwellerInfos {
  [dwellerInfos retain_stub];
  [__dwellerInfos release_stub];
  __dwellerInfos = dwellerInfos;
  __dwellerInfos_isset = YES;
}

- (BOOL) dwellerInfosIsSet {
  return __dwellerInfos_isset;
}

- (void) unsetDwellerInfos {
  [__dwellerInfos release_stub];
  __dwellerInfos = nil;
  __dwellerInfos_isset = NO;
}

- (NSMutableArray *) packageIds {
  return [[__packageIds retain_stub] autorelease_stub];
}

- (void) setPackageIds: (NSMutableArray *) packageIds {
  [packageIds retain_stub];
  [__packageIds release_stub];
  __packageIds = packageIds;
  __packageIds_isset = YES;
}

- (BOOL) packageIdsIsSet {
  return __packageIds_isset;
}

- (void) unsetPackageIds {
  [__packageIds release_stub];
  __packageIds = nil;
  __packageIds_isset = NO;
}

- (int32_t) contractDuration {
  return __contractDuration;
}

- (void) setContractDuration: (int32_t) contractDuration {
  __contractDuration = contractDuration;
  __contractDuration_isset = YES;
}

- (BOOL) contractDurationIsSet {
  return __contractDuration_isset;
}

- (void) unsetContractDuration {
  __contractDuration_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int64_t) docId {
  return __docId;
}

- (void) setDocId: (int64_t) docId {
  __docId = docId;
  __docId_isset = YES;
}

- (BOOL) docIdIsSet {
  return __docId_isset;
}

- (void) unsetDocId {
  __docId_isset = NO;
}

- (NSString *) teamName {
  return [[__teamName retain_stub] autorelease_stub];
}

- (void) setTeamName: (NSString *) teamName {
  [teamName retain_stub];
  [__teamName release_stub];
  __teamName = teamName;
  __teamName_isset = YES;
}

- (BOOL) teamNameIsSet {
  return __teamName_isset;
}

- (void) unsetTeamName {
  [__teamName release_stub];
  __teamName = nil;
  __teamName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTeamId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size45;
          [inProtocol readListBeginReturningElementType: NULL size: &_size45];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size45];
          int _i46;
          for (_i46 = 0; _i46 < _size45; ++_i46)
          {
            NXTFDwellerInfo *_elem47 = [[NXTFDwellerInfo alloc] init];
            [_elem47 read: inProtocol];
            [fieldValue addObject: _elem47];
            [_elem47 release_stub];
          }
          [inProtocol readListEnd];
          [self setDwellerInfos: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size48;
          [inProtocol readListBeginReturningElementType: NULL size: &_size48];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size48];
          int _i49;
          for (_i49 = 0; _i49 < _size48; ++_i49)
          {
            NSString * _elem50 = [inProtocol readString];
            [fieldValue addObject: _elem50];
          }
          [inProtocol readListEnd];
          [self setPackageIds: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setContractDuration: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDocId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTeamName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignContractReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__teamId_isset) {
    if (__teamId != nil) {
      [outProtocol writeFieldBeginWithName: @"teamId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __teamId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dwellerInfos_isset) {
    if (__dwellerInfos != nil) {
      [outProtocol writeFieldBeginWithName: @"dwellerInfos" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__dwellerInfos count]];
        int idx52;
        for (idx52 = 0; idx52 < [__dwellerInfos count]; idx52++)
        {
          [[__dwellerInfos objectAtIndex: idx52] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__packageIds_isset) {
    if (__packageIds != nil) {
      [outProtocol writeFieldBeginWithName: @"packageIds" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__packageIds count]];
        int idx54;
        for (idx54 = 0; idx54 < [__packageIds count]; idx54++)
        {
          [outProtocol writeString: [__packageIds objectAtIndex: idx54]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__contractDuration_isset) {
    [outProtocol writeFieldBeginWithName: @"contractDuration" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __contractDuration];
    [outProtocol writeFieldEnd];
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__docId_isset) {
    [outProtocol writeFieldBeginWithName: @"docId" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __docId];
    [outProtocol writeFieldEnd];
  }
  if (__teamName_isset) {
    if (__teamName != nil) {
      [outProtocol writeFieldBeginWithName: @"teamName" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __teamName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFSignContractReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",teamId:"];
  [ms appendFormat: @"\"%@\"", __teamId];
  [ms appendString: @",dwellerInfos:"];
  [ms appendFormat: @"%@", __dwellerInfos];
  [ms appendString: @",packageIds:"];
  [ms appendFormat: @"%@", __packageIds];
  [ms appendString: @",contractDuration:"];
  [ms appendFormat: @"%i", __contractDuration];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",docId:"];
  [ms appendFormat: @"%qi", __docId];
  [ms appendString: @",teamName:"];
  [ms appendFormat: @"\"%@\"", __teamName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetPackageInfosReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header teamID: (NSString *) teamID hospId: (int32_t) hospId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __teamID = [teamID retain_stub];
  __teamID_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"teamID"])
  {
    __teamID = [[decoder decodeObjectForKey: @"teamID"] retain_stub];
    __teamID_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__teamID_isset)
  {
    [encoder encodeObject: __teamID forKey: @"teamID"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __teamID_isset ? 2654435761 : 0;
  if (__teamID_isset)
  {
    hash = (hash * 31) ^ [__teamID hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetPackageInfosReq class]]) {
    return NO;
  }
  NXTFGetPackageInfosReq *other = (NXTFGetPackageInfosReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__teamID_isset != other->__teamID_isset) ||
      (__teamID_isset && ((__teamID || other->__teamID) && ![__teamID isEqual:other->__teamID]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__teamID release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) teamID {
  return [[__teamID retain_stub] autorelease_stub];
}

- (void) setTeamID: (NSString *) teamID {
  [teamID retain_stub];
  [__teamID release_stub];
  __teamID = teamID;
  __teamID_isset = YES;
}

- (BOOL) teamIDIsSet {
  return __teamID_isset;
}

- (void) unsetTeamID {
  [__teamID release_stub];
  __teamID = nil;
  __teamID_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTeamID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPackageInfosReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__teamID_isset) {
    if (__teamID != nil) {
      [outProtocol writeFieldBeginWithName: @"teamID" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __teamID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetPackageInfosReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",teamID:"];
  [ms appendFormat: @"\"%@\"", __teamID];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetMyDoctorReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFReqHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header patientId: (int64_t) patientId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetMyDoctorReq class]]) {
    return NO;
  }
  NXTFGetMyDoctorReq *other = (NXTFGetMyDoctorReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMyDoctorReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetMyDoctorReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFLinkPatReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFReqHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header dwellerId: (NSString *) dwellerId hospId: (int32_t) hospId patientId: (int64_t) patientId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __dwellerId = [dwellerId retain_stub];
  __dwellerId_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"dwellerId"])
  {
    __dwellerId = [[decoder decodeObjectForKey: @"dwellerId"] retain_stub];
    __dwellerId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__dwellerId_isset)
  {
    [encoder encodeObject: __dwellerId forKey: @"dwellerId"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __dwellerId_isset ? 2654435761 : 0;
  if (__dwellerId_isset)
  {
    hash = (hash * 31) ^ [__dwellerId hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFLinkPatReq class]]) {
    return NO;
  }
  NXTFLinkPatReq *other = (NXTFLinkPatReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__dwellerId_isset != other->__dwellerId_isset) ||
      (__dwellerId_isset && ((__dwellerId || other->__dwellerId) && ![__dwellerId isEqual:other->__dwellerId]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__dwellerId release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) dwellerId {
  return [[__dwellerId retain_stub] autorelease_stub];
}

- (void) setDwellerId: (NSString *) dwellerId {
  [dwellerId retain_stub];
  [__dwellerId release_stub];
  __dwellerId = dwellerId;
  __dwellerId_isset = YES;
}

- (BOOL) dwellerIdIsSet {
  return __dwellerId_isset;
}

- (void) unsetDwellerId {
  [__dwellerId release_stub];
  __dwellerId = nil;
  __dwellerId_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDwellerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LinkPatReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dwellerId_isset) {
    if (__dwellerId != nil) {
      [outProtocol writeFieldBeginWithName: @"dwellerId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __dwellerId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFLinkPatReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",dwellerId:"];
  [ms appendFormat: @"\"%@\"", __dwellerId];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetRegistedDeptReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFReqHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header hospId: (int32_t) hospId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetRegistedDeptReq class]]) {
    return NO;
  }
  NXTFGetRegistedDeptReq *other = (NXTFGetRegistedDeptReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRegistedDeptReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetRegistedDeptReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFDeptDocsReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFReqHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFReqHeader *) header deptId: (int64_t) deptId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __deptId = deptId;
  __deptId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptId"])
  {
    __deptId = [decoder decodeInt64ForKey: @"deptId"];
    __deptId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__deptId_isset)
  {
    [encoder encodeInt64: __deptId forKey: @"deptId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __deptId_isset ? 2654435761 : 0;
  if (__deptId_isset)
  {
    hash = (hash * 31) ^ [@(__deptId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFDeptDocsReq class]]) {
    return NO;
  }
  NXTFDeptDocsReq *other = (NXTFDeptDocsReq *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__deptId_isset != other->__deptId_isset) ||
      (__deptId_isset && (__deptId != other->__deptId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFReqHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFReqHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) deptId {
  return __deptId;
}

- (void) setDeptId: (int64_t) deptId {
  __deptId = deptId;
  __deptId_isset = YES;
}

- (BOOL) deptIdIsSet {
  return __deptId_isset;
}

- (void) unsetDeptId {
  __deptId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFReqHeader *fieldValue = [[NXTFReqHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeptDocsReq"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptId_isset) {
    [outProtocol writeFieldBeginWithName: @"deptId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __deptId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFDeptDocsReq("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",deptId:"];
  [ms appendFormat: @"%qi", __deptId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation NXTFReqConstants
+ (void) initialize {
}
@end

