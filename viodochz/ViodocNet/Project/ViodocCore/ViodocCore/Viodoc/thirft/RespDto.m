/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Base.h"

#import "RespDto.h"

@implementation NXTFOptDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOptType: (int32_t) optType bizId: (NSString *) bizId bizName: (NSString *) bizName imgUrl: (NSString *) imgUrl
{
  self = [super init];
  __optType = optType;
  __optType_isset = YES;
  __bizId = [bizId retain_stub];
  __bizId_isset = YES;
  __bizName = [bizName retain_stub];
  __bizName_isset = YES;
  __imgUrl = [imgUrl retain_stub];
  __imgUrl_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"optType"])
  {
    __optType = [decoder decodeInt32ForKey: @"optType"];
    __optType_isset = YES;
  }
  if ([decoder containsValueForKey: @"bizId"])
  {
    __bizId = [[decoder decodeObjectForKey: @"bizId"] retain_stub];
    __bizId_isset = YES;
  }
  if ([decoder containsValueForKey: @"bizName"])
  {
    __bizName = [[decoder decodeObjectForKey: @"bizName"] retain_stub];
    __bizName_isset = YES;
  }
  if ([decoder containsValueForKey: @"imgUrl"])
  {
    __imgUrl = [[decoder decodeObjectForKey: @"imgUrl"] retain_stub];
    __imgUrl_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__optType_isset)
  {
    [encoder encodeInt32: __optType forKey: @"optType"];
  }
  if (__bizId_isset)
  {
    [encoder encodeObject: __bizId forKey: @"bizId"];
  }
  if (__bizName_isset)
  {
    [encoder encodeObject: __bizName forKey: @"bizName"];
  }
  if (__imgUrl_isset)
  {
    [encoder encodeObject: __imgUrl forKey: @"imgUrl"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __optType_isset ? 2654435761 : 0;
  if (__optType_isset)
  {
    hash = (hash * 31) ^ [@(__optType) hash];
  }
  hash = (hash * 31) ^ __bizId_isset ? 2654435761 : 0;
  if (__bizId_isset)
  {
    hash = (hash * 31) ^ [__bizId hash];
  }
  hash = (hash * 31) ^ __bizName_isset ? 2654435761 : 0;
  if (__bizName_isset)
  {
    hash = (hash * 31) ^ [__bizName hash];
  }
  hash = (hash * 31) ^ __imgUrl_isset ? 2654435761 : 0;
  if (__imgUrl_isset)
  {
    hash = (hash * 31) ^ [__imgUrl hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFOptDto class]]) {
    return NO;
  }
  NXTFOptDto *other = (NXTFOptDto *)anObject;
  if ((__optType_isset != other->__optType_isset) ||
      (__optType_isset && (__optType != other->__optType))) {
    return NO;
  }
  if ((__bizId_isset != other->__bizId_isset) ||
      (__bizId_isset && ((__bizId || other->__bizId) && ![__bizId isEqual:other->__bizId]))) {
    return NO;
  }
  if ((__bizName_isset != other->__bizName_isset) ||
      (__bizName_isset && ((__bizName || other->__bizName) && ![__bizName isEqual:other->__bizName]))) {
    return NO;
  }
  if ((__imgUrl_isset != other->__imgUrl_isset) ||
      (__imgUrl_isset && ((__imgUrl || other->__imgUrl) && ![__imgUrl isEqual:other->__imgUrl]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__bizId release_stub];
  [__bizName release_stub];
  [__imgUrl release_stub];
  [super dealloc_stub];
}

- (int32_t) optType {
  return __optType;
}

- (void) setOptType: (int32_t) optType {
  __optType = optType;
  __optType_isset = YES;
}

- (BOOL) optTypeIsSet {
  return __optType_isset;
}

- (void) unsetOptType {
  __optType_isset = NO;
}

- (NSString *) bizId {
  return [[__bizId retain_stub] autorelease_stub];
}

- (void) setBizId: (NSString *) bizId {
  [bizId retain_stub];
  [__bizId release_stub];
  __bizId = bizId;
  __bizId_isset = YES;
}

- (BOOL) bizIdIsSet {
  return __bizId_isset;
}

- (void) unsetBizId {
  [__bizId release_stub];
  __bizId = nil;
  __bizId_isset = NO;
}

- (NSString *) bizName {
  return [[__bizName retain_stub] autorelease_stub];
}

- (void) setBizName: (NSString *) bizName {
  [bizName retain_stub];
  [__bizName release_stub];
  __bizName = bizName;
  __bizName_isset = YES;
}

- (BOOL) bizNameIsSet {
  return __bizName_isset;
}

- (void) unsetBizName {
  [__bizName release_stub];
  __bizName = nil;
  __bizName_isset = NO;
}

- (NSString *) imgUrl {
  return [[__imgUrl retain_stub] autorelease_stub];
}

- (void) setImgUrl: (NSString *) imgUrl {
  [imgUrl retain_stub];
  [__imgUrl release_stub];
  __imgUrl = imgUrl;
  __imgUrl_isset = YES;
}

- (BOOL) imgUrlIsSet {
  return __imgUrl_isset;
}

- (void) unsetImgUrl {
  [__imgUrl release_stub];
  __imgUrl = nil;
  __imgUrl_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOptType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBizId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBizName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImgUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OptDto"];
  if (__optType_isset) {
    [outProtocol writeFieldBeginWithName: @"optType" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __optType];
    [outProtocol writeFieldEnd];
  }
  if (__bizId_isset) {
    if (__bizId != nil) {
      [outProtocol writeFieldBeginWithName: @"bizId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __bizId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bizName_isset) {
    if (__bizName != nil) {
      [outProtocol writeFieldBeginWithName: @"bizName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __bizName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__imgUrl_isset) {
    if (__imgUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"imgUrl" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __imgUrl];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFOptDto("];
  [ms appendString: @"optType:"];
  [ms appendFormat: @"%i", __optType];
  [ms appendString: @",bizId:"];
  [ms appendFormat: @"\"%@\"", __bizId];
  [ms appendString: @",bizName:"];
  [ms appendFormat: @"\"%@\"", __bizName];
  [ms appendString: @",imgUrl:"];
  [ms appendFormat: @"\"%@\"", __imgUrl];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFInsEvalDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStars: (int32_t) stars comment: (NSString *) comment evalBy: (NSString *) evalBy evalTime: (NSString *) evalTime
{
  self = [super init];
  __stars = stars;
  __stars_isset = YES;
  __comment = [comment retain_stub];
  __comment_isset = YES;
  __evalBy = [evalBy retain_stub];
  __evalBy_isset = YES;
  __evalTime = [evalTime retain_stub];
  __evalTime_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"stars"])
  {
    __stars = [decoder decodeInt32ForKey: @"stars"];
    __stars_isset = YES;
  }
  if ([decoder containsValueForKey: @"comment"])
  {
    __comment = [[decoder decodeObjectForKey: @"comment"] retain_stub];
    __comment_isset = YES;
  }
  if ([decoder containsValueForKey: @"evalBy"])
  {
    __evalBy = [[decoder decodeObjectForKey: @"evalBy"] retain_stub];
    __evalBy_isset = YES;
  }
  if ([decoder containsValueForKey: @"evalTime"])
  {
    __evalTime = [[decoder decodeObjectForKey: @"evalTime"] retain_stub];
    __evalTime_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__stars_isset)
  {
    [encoder encodeInt32: __stars forKey: @"stars"];
  }
  if (__comment_isset)
  {
    [encoder encodeObject: __comment forKey: @"comment"];
  }
  if (__evalBy_isset)
  {
    [encoder encodeObject: __evalBy forKey: @"evalBy"];
  }
  if (__evalTime_isset)
  {
    [encoder encodeObject: __evalTime forKey: @"evalTime"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __stars_isset ? 2654435761 : 0;
  if (__stars_isset)
  {
    hash = (hash * 31) ^ [@(__stars) hash];
  }
  hash = (hash * 31) ^ __comment_isset ? 2654435761 : 0;
  if (__comment_isset)
  {
    hash = (hash * 31) ^ [__comment hash];
  }
  hash = (hash * 31) ^ __evalBy_isset ? 2654435761 : 0;
  if (__evalBy_isset)
  {
    hash = (hash * 31) ^ [__evalBy hash];
  }
  hash = (hash * 31) ^ __evalTime_isset ? 2654435761 : 0;
  if (__evalTime_isset)
  {
    hash = (hash * 31) ^ [__evalTime hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFInsEvalDto class]]) {
    return NO;
  }
  NXTFInsEvalDto *other = (NXTFInsEvalDto *)anObject;
  if ((__stars_isset != other->__stars_isset) ||
      (__stars_isset && (__stars != other->__stars))) {
    return NO;
  }
  if ((__comment_isset != other->__comment_isset) ||
      (__comment_isset && ((__comment || other->__comment) && ![__comment isEqual:other->__comment]))) {
    return NO;
  }
  if ((__evalBy_isset != other->__evalBy_isset) ||
      (__evalBy_isset && ((__evalBy || other->__evalBy) && ![__evalBy isEqual:other->__evalBy]))) {
    return NO;
  }
  if ((__evalTime_isset != other->__evalTime_isset) ||
      (__evalTime_isset && ((__evalTime || other->__evalTime) && ![__evalTime isEqual:other->__evalTime]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__comment release_stub];
  [__evalBy release_stub];
  [__evalTime release_stub];
  [super dealloc_stub];
}

- (int32_t) stars {
  return __stars;
}

- (void) setStars: (int32_t) stars {
  __stars = stars;
  __stars_isset = YES;
}

- (BOOL) starsIsSet {
  return __stars_isset;
}

- (void) unsetStars {
  __stars_isset = NO;
}

- (NSString *) comment {
  return [[__comment retain_stub] autorelease_stub];
}

- (void) setComment: (NSString *) comment {
  [comment retain_stub];
  [__comment release_stub];
  __comment = comment;
  __comment_isset = YES;
}

- (BOOL) commentIsSet {
  return __comment_isset;
}

- (void) unsetComment {
  [__comment release_stub];
  __comment = nil;
  __comment_isset = NO;
}

- (NSString *) evalBy {
  return [[__evalBy retain_stub] autorelease_stub];
}

- (void) setEvalBy: (NSString *) evalBy {
  [evalBy retain_stub];
  [__evalBy release_stub];
  __evalBy = evalBy;
  __evalBy_isset = YES;
}

- (BOOL) evalByIsSet {
  return __evalBy_isset;
}

- (void) unsetEvalBy {
  [__evalBy release_stub];
  __evalBy = nil;
  __evalBy_isset = NO;
}

- (NSString *) evalTime {
  return [[__evalTime retain_stub] autorelease_stub];
}

- (void) setEvalTime: (NSString *) evalTime {
  [evalTime retain_stub];
  [__evalTime release_stub];
  __evalTime = evalTime;
  __evalTime_isset = YES;
}

- (BOOL) evalTimeIsSet {
  return __evalTime_isset;
}

- (void) unsetEvalTime {
  [__evalTime release_stub];
  __evalTime = nil;
  __evalTime_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStars: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setComment: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEvalBy: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEvalTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"InsEvalDto"];
  if (__stars_isset) {
    [outProtocol writeFieldBeginWithName: @"stars" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __stars];
    [outProtocol writeFieldEnd];
  }
  if (__comment_isset) {
    if (__comment != nil) {
      [outProtocol writeFieldBeginWithName: @"comment" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __comment];
      [outProtocol writeFieldEnd];
    }
  }
  if (__evalBy_isset) {
    if (__evalBy != nil) {
      [outProtocol writeFieldBeginWithName: @"evalBy" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __evalBy];
      [outProtocol writeFieldEnd];
    }
  }
  if (__evalTime_isset) {
    if (__evalTime != nil) {
      [outProtocol writeFieldBeginWithName: @"evalTime" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __evalTime];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFInsEvalDto("];
  [ms appendString: @"stars:"];
  [ms appendFormat: @"%i", __stars];
  [ms appendString: @",comment:"];
  [ms appendFormat: @"\"%@\"", __comment];
  [ms appendString: @",evalBy:"];
  [ms appendFormat: @"\"%@\"", __evalBy];
  [ms appendString: @",evalTime:"];
  [ms appendFormat: @"\"%@\"", __evalTime];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFInsCompanyDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id name: (NSString *) name desc: (NSString *) desc logoUrl: (NSString *) logoUrl soldCnt: (int64_t) soldCnt eval: (int64_t) eval homeSite: (NSString *) homeSite
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __logoUrl = [logoUrl retain_stub];
  __logoUrl_isset = YES;
  __soldCnt = soldCnt;
  __soldCnt_isset = YES;
  __eval = eval;
  __eval_isset = YES;
  __homeSite = [homeSite retain_stub];
  __homeSite_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"logoUrl"])
  {
    __logoUrl = [[decoder decodeObjectForKey: @"logoUrl"] retain_stub];
    __logoUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"soldCnt"])
  {
    __soldCnt = [decoder decodeInt64ForKey: @"soldCnt"];
    __soldCnt_isset = YES;
  }
  if ([decoder containsValueForKey: @"eval"])
  {
    __eval = [decoder decodeInt64ForKey: @"eval"];
    __eval_isset = YES;
  }
  if ([decoder containsValueForKey: @"homeSite"])
  {
    __homeSite = [[decoder decodeObjectForKey: @"homeSite"] retain_stub];
    __homeSite_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__logoUrl_isset)
  {
    [encoder encodeObject: __logoUrl forKey: @"logoUrl"];
  }
  if (__soldCnt_isset)
  {
    [encoder encodeInt64: __soldCnt forKey: @"soldCnt"];
  }
  if (__eval_isset)
  {
    [encoder encodeInt64: __eval forKey: @"eval"];
  }
  if (__homeSite_isset)
  {
    [encoder encodeObject: __homeSite forKey: @"homeSite"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [@(__id) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __logoUrl_isset ? 2654435761 : 0;
  if (__logoUrl_isset)
  {
    hash = (hash * 31) ^ [__logoUrl hash];
  }
  hash = (hash * 31) ^ __soldCnt_isset ? 2654435761 : 0;
  if (__soldCnt_isset)
  {
    hash = (hash * 31) ^ [@(__soldCnt) hash];
  }
  hash = (hash * 31) ^ __eval_isset ? 2654435761 : 0;
  if (__eval_isset)
  {
    hash = (hash * 31) ^ [@(__eval) hash];
  }
  hash = (hash * 31) ^ __homeSite_isset ? 2654435761 : 0;
  if (__homeSite_isset)
  {
    hash = (hash * 31) ^ [__homeSite hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFInsCompanyDto class]]) {
    return NO;
  }
  NXTFInsCompanyDto *other = (NXTFInsCompanyDto *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && (__id != other->__id))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__logoUrl_isset != other->__logoUrl_isset) ||
      (__logoUrl_isset && ((__logoUrl || other->__logoUrl) && ![__logoUrl isEqual:other->__logoUrl]))) {
    return NO;
  }
  if ((__soldCnt_isset != other->__soldCnt_isset) ||
      (__soldCnt_isset && (__soldCnt != other->__soldCnt))) {
    return NO;
  }
  if ((__eval_isset != other->__eval_isset) ||
      (__eval_isset && (__eval != other->__eval))) {
    return NO;
  }
  if ((__homeSite_isset != other->__homeSite_isset) ||
      (__homeSite_isset && ((__homeSite || other->__homeSite) && ![__homeSite isEqual:other->__homeSite]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [__desc release_stub];
  [__logoUrl release_stub];
  [__homeSite release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) logoUrl {
  return [[__logoUrl retain_stub] autorelease_stub];
}

- (void) setLogoUrl: (NSString *) logoUrl {
  [logoUrl retain_stub];
  [__logoUrl release_stub];
  __logoUrl = logoUrl;
  __logoUrl_isset = YES;
}

- (BOOL) logoUrlIsSet {
  return __logoUrl_isset;
}

- (void) unsetLogoUrl {
  [__logoUrl release_stub];
  __logoUrl = nil;
  __logoUrl_isset = NO;
}

- (int64_t) soldCnt {
  return __soldCnt;
}

- (void) setSoldCnt: (int64_t) soldCnt {
  __soldCnt = soldCnt;
  __soldCnt_isset = YES;
}

- (BOOL) soldCntIsSet {
  return __soldCnt_isset;
}

- (void) unsetSoldCnt {
  __soldCnt_isset = NO;
}

- (int64_t) eval {
  return __eval;
}

- (void) setEval: (int64_t) eval {
  __eval = eval;
  __eval_isset = YES;
}

- (BOOL) evalIsSet {
  return __eval_isset;
}

- (void) unsetEval {
  __eval_isset = NO;
}

- (NSString *) homeSite {
  return [[__homeSite retain_stub] autorelease_stub];
}

- (void) setHomeSite: (NSString *) homeSite {
  [homeSite retain_stub];
  [__homeSite release_stub];
  __homeSite = homeSite;
  __homeSite_isset = YES;
}

- (BOOL) homeSiteIsSet {
  return __homeSite_isset;
}

- (void) unsetHomeSite {
  [__homeSite release_stub];
  __homeSite = nil;
  __homeSite_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLogoUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSoldCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setEval: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHomeSite: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"InsCompanyDto"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__logoUrl_isset) {
    if (__logoUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"logoUrl" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __logoUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__soldCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"soldCnt" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __soldCnt];
    [outProtocol writeFieldEnd];
  }
  if (__eval_isset) {
    [outProtocol writeFieldBeginWithName: @"eval" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __eval];
    [outProtocol writeFieldEnd];
  }
  if (__homeSite_isset) {
    if (__homeSite != nil) {
      [outProtocol writeFieldBeginWithName: @"homeSite" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __homeSite];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFInsCompanyDto("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",logoUrl:"];
  [ms appendFormat: @"\"%@\"", __logoUrl];
  [ms appendString: @",soldCnt:"];
  [ms appendFormat: @"%qi", __soldCnt];
  [ms appendString: @",eval:"];
  [ms appendFormat: @"%qi", __eval];
  [ms appendString: @",homeSite:"];
  [ms appendFormat: @"\"%@\"", __homeSite];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFInsDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithInsId: (int32_t) insId insName: (NSString *) insName compId: (int32_t) compId compName: (NSString *) compName imgUrl: (NSString *) imgUrl price: (NSString *) price priceDuration: (NSString *) priceDuration soldCnt: (int64_t) soldCnt zanCnt: (int64_t) zanCnt favCnt: (int64_t) favCnt
{
  self = [super init];
  __insId = insId;
  __insId_isset = YES;
  __insName = [insName retain_stub];
  __insName_isset = YES;
  __compId = compId;
  __compId_isset = YES;
  __compName = [compName retain_stub];
  __compName_isset = YES;
  __imgUrl = [imgUrl retain_stub];
  __imgUrl_isset = YES;
  __price = [price retain_stub];
  __price_isset = YES;
  __priceDuration = [priceDuration retain_stub];
  __priceDuration_isset = YES;
  __soldCnt = soldCnt;
  __soldCnt_isset = YES;
  __zanCnt = zanCnt;
  __zanCnt_isset = YES;
  __favCnt = favCnt;
  __favCnt_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"insId"])
  {
    __insId = [decoder decodeInt32ForKey: @"insId"];
    __insId_isset = YES;
  }
  if ([decoder containsValueForKey: @"insName"])
  {
    __insName = [[decoder decodeObjectForKey: @"insName"] retain_stub];
    __insName_isset = YES;
  }
  if ([decoder containsValueForKey: @"compId"])
  {
    __compId = [decoder decodeInt32ForKey: @"compId"];
    __compId_isset = YES;
  }
  if ([decoder containsValueForKey: @"compName"])
  {
    __compName = [[decoder decodeObjectForKey: @"compName"] retain_stub];
    __compName_isset = YES;
  }
  if ([decoder containsValueForKey: @"imgUrl"])
  {
    __imgUrl = [[decoder decodeObjectForKey: @"imgUrl"] retain_stub];
    __imgUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"price"])
  {
    __price = [[decoder decodeObjectForKey: @"price"] retain_stub];
    __price_isset = YES;
  }
  if ([decoder containsValueForKey: @"priceDuration"])
  {
    __priceDuration = [[decoder decodeObjectForKey: @"priceDuration"] retain_stub];
    __priceDuration_isset = YES;
  }
  if ([decoder containsValueForKey: @"soldCnt"])
  {
    __soldCnt = [decoder decodeInt64ForKey: @"soldCnt"];
    __soldCnt_isset = YES;
  }
  if ([decoder containsValueForKey: @"zanCnt"])
  {
    __zanCnt = [decoder decodeInt64ForKey: @"zanCnt"];
    __zanCnt_isset = YES;
  }
  if ([decoder containsValueForKey: @"favCnt"])
  {
    __favCnt = [decoder decodeInt64ForKey: @"favCnt"];
    __favCnt_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__insId_isset)
  {
    [encoder encodeInt32: __insId forKey: @"insId"];
  }
  if (__insName_isset)
  {
    [encoder encodeObject: __insName forKey: @"insName"];
  }
  if (__compId_isset)
  {
    [encoder encodeInt32: __compId forKey: @"compId"];
  }
  if (__compName_isset)
  {
    [encoder encodeObject: __compName forKey: @"compName"];
  }
  if (__imgUrl_isset)
  {
    [encoder encodeObject: __imgUrl forKey: @"imgUrl"];
  }
  if (__price_isset)
  {
    [encoder encodeObject: __price forKey: @"price"];
  }
  if (__priceDuration_isset)
  {
    [encoder encodeObject: __priceDuration forKey: @"priceDuration"];
  }
  if (__soldCnt_isset)
  {
    [encoder encodeInt64: __soldCnt forKey: @"soldCnt"];
  }
  if (__zanCnt_isset)
  {
    [encoder encodeInt64: __zanCnt forKey: @"zanCnt"];
  }
  if (__favCnt_isset)
  {
    [encoder encodeInt64: __favCnt forKey: @"favCnt"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __insId_isset ? 2654435761 : 0;
  if (__insId_isset)
  {
    hash = (hash * 31) ^ [@(__insId) hash];
  }
  hash = (hash * 31) ^ __insName_isset ? 2654435761 : 0;
  if (__insName_isset)
  {
    hash = (hash * 31) ^ [__insName hash];
  }
  hash = (hash * 31) ^ __compId_isset ? 2654435761 : 0;
  if (__compId_isset)
  {
    hash = (hash * 31) ^ [@(__compId) hash];
  }
  hash = (hash * 31) ^ __compName_isset ? 2654435761 : 0;
  if (__compName_isset)
  {
    hash = (hash * 31) ^ [__compName hash];
  }
  hash = (hash * 31) ^ __imgUrl_isset ? 2654435761 : 0;
  if (__imgUrl_isset)
  {
    hash = (hash * 31) ^ [__imgUrl hash];
  }
  hash = (hash * 31) ^ __price_isset ? 2654435761 : 0;
  if (__price_isset)
  {
    hash = (hash * 31) ^ [__price hash];
  }
  hash = (hash * 31) ^ __priceDuration_isset ? 2654435761 : 0;
  if (__priceDuration_isset)
  {
    hash = (hash * 31) ^ [__priceDuration hash];
  }
  hash = (hash * 31) ^ __soldCnt_isset ? 2654435761 : 0;
  if (__soldCnt_isset)
  {
    hash = (hash * 31) ^ [@(__soldCnt) hash];
  }
  hash = (hash * 31) ^ __zanCnt_isset ? 2654435761 : 0;
  if (__zanCnt_isset)
  {
    hash = (hash * 31) ^ [@(__zanCnt) hash];
  }
  hash = (hash * 31) ^ __favCnt_isset ? 2654435761 : 0;
  if (__favCnt_isset)
  {
    hash = (hash * 31) ^ [@(__favCnt) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFInsDto class]]) {
    return NO;
  }
  NXTFInsDto *other = (NXTFInsDto *)anObject;
  if ((__insId_isset != other->__insId_isset) ||
      (__insId_isset && (__insId != other->__insId))) {
    return NO;
  }
  if ((__insName_isset != other->__insName_isset) ||
      (__insName_isset && ((__insName || other->__insName) && ![__insName isEqual:other->__insName]))) {
    return NO;
  }
  if ((__compId_isset != other->__compId_isset) ||
      (__compId_isset && (__compId != other->__compId))) {
    return NO;
  }
  if ((__compName_isset != other->__compName_isset) ||
      (__compName_isset && ((__compName || other->__compName) && ![__compName isEqual:other->__compName]))) {
    return NO;
  }
  if ((__imgUrl_isset != other->__imgUrl_isset) ||
      (__imgUrl_isset && ((__imgUrl || other->__imgUrl) && ![__imgUrl isEqual:other->__imgUrl]))) {
    return NO;
  }
  if ((__price_isset != other->__price_isset) ||
      (__price_isset && ((__price || other->__price) && ![__price isEqual:other->__price]))) {
    return NO;
  }
  if ((__priceDuration_isset != other->__priceDuration_isset) ||
      (__priceDuration_isset && ((__priceDuration || other->__priceDuration) && ![__priceDuration isEqual:other->__priceDuration]))) {
    return NO;
  }
  if ((__soldCnt_isset != other->__soldCnt_isset) ||
      (__soldCnt_isset && (__soldCnt != other->__soldCnt))) {
    return NO;
  }
  if ((__zanCnt_isset != other->__zanCnt_isset) ||
      (__zanCnt_isset && (__zanCnt != other->__zanCnt))) {
    return NO;
  }
  if ((__favCnt_isset != other->__favCnt_isset) ||
      (__favCnt_isset && (__favCnt != other->__favCnt))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__insName release_stub];
  [__compName release_stub];
  [__imgUrl release_stub];
  [__price release_stub];
  [__priceDuration release_stub];
  [super dealloc_stub];
}

- (int32_t) insId {
  return __insId;
}

- (void) setInsId: (int32_t) insId {
  __insId = insId;
  __insId_isset = YES;
}

- (BOOL) insIdIsSet {
  return __insId_isset;
}

- (void) unsetInsId {
  __insId_isset = NO;
}

- (NSString *) insName {
  return [[__insName retain_stub] autorelease_stub];
}

- (void) setInsName: (NSString *) insName {
  [insName retain_stub];
  [__insName release_stub];
  __insName = insName;
  __insName_isset = YES;
}

- (BOOL) insNameIsSet {
  return __insName_isset;
}

- (void) unsetInsName {
  [__insName release_stub];
  __insName = nil;
  __insName_isset = NO;
}

- (int32_t) compId {
  return __compId;
}

- (void) setCompId: (int32_t) compId {
  __compId = compId;
  __compId_isset = YES;
}

- (BOOL) compIdIsSet {
  return __compId_isset;
}

- (void) unsetCompId {
  __compId_isset = NO;
}

- (NSString *) compName {
  return [[__compName retain_stub] autorelease_stub];
}

- (void) setCompName: (NSString *) compName {
  [compName retain_stub];
  [__compName release_stub];
  __compName = compName;
  __compName_isset = YES;
}

- (BOOL) compNameIsSet {
  return __compName_isset;
}

- (void) unsetCompName {
  [__compName release_stub];
  __compName = nil;
  __compName_isset = NO;
}

- (NSString *) imgUrl {
  return [[__imgUrl retain_stub] autorelease_stub];
}

- (void) setImgUrl: (NSString *) imgUrl {
  [imgUrl retain_stub];
  [__imgUrl release_stub];
  __imgUrl = imgUrl;
  __imgUrl_isset = YES;
}

- (BOOL) imgUrlIsSet {
  return __imgUrl_isset;
}

- (void) unsetImgUrl {
  [__imgUrl release_stub];
  __imgUrl = nil;
  __imgUrl_isset = NO;
}

- (NSString *) price {
  return [[__price retain_stub] autorelease_stub];
}

- (void) setPrice: (NSString *) price {
  [price retain_stub];
  [__price release_stub];
  __price = price;
  __price_isset = YES;
}

- (BOOL) priceIsSet {
  return __price_isset;
}

- (void) unsetPrice {
  [__price release_stub];
  __price = nil;
  __price_isset = NO;
}

- (NSString *) priceDuration {
  return [[__priceDuration retain_stub] autorelease_stub];
}

- (void) setPriceDuration: (NSString *) priceDuration {
  [priceDuration retain_stub];
  [__priceDuration release_stub];
  __priceDuration = priceDuration;
  __priceDuration_isset = YES;
}

- (BOOL) priceDurationIsSet {
  return __priceDuration_isset;
}

- (void) unsetPriceDuration {
  [__priceDuration release_stub];
  __priceDuration = nil;
  __priceDuration_isset = NO;
}

- (int64_t) soldCnt {
  return __soldCnt;
}

- (void) setSoldCnt: (int64_t) soldCnt {
  __soldCnt = soldCnt;
  __soldCnt_isset = YES;
}

- (BOOL) soldCntIsSet {
  return __soldCnt_isset;
}

- (void) unsetSoldCnt {
  __soldCnt_isset = NO;
}

- (int64_t) zanCnt {
  return __zanCnt;
}

- (void) setZanCnt: (int64_t) zanCnt {
  __zanCnt = zanCnt;
  __zanCnt_isset = YES;
}

- (BOOL) zanCntIsSet {
  return __zanCnt_isset;
}

- (void) unsetZanCnt {
  __zanCnt_isset = NO;
}

- (int64_t) favCnt {
  return __favCnt;
}

- (void) setFavCnt: (int64_t) favCnt {
  __favCnt = favCnt;
  __favCnt_isset = YES;
}

- (BOOL) favCntIsSet {
  return __favCnt_isset;
}

- (void) unsetFavCnt {
  __favCnt_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setInsId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInsName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCompId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCompName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImgUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPriceDuration: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSoldCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setZanCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setFavCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"InsDto"];
  if (__insId_isset) {
    [outProtocol writeFieldBeginWithName: @"insId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __insId];
    [outProtocol writeFieldEnd];
  }
  if (__insName_isset) {
    if (__insName != nil) {
      [outProtocol writeFieldBeginWithName: @"insName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __insName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__compId_isset) {
    [outProtocol writeFieldBeginWithName: @"compId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __compId];
    [outProtocol writeFieldEnd];
  }
  if (__compName_isset) {
    if (__compName != nil) {
      [outProtocol writeFieldBeginWithName: @"compName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __compName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__imgUrl_isset) {
    if (__imgUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"imgUrl" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __imgUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__price_isset) {
    if (__price != nil) {
      [outProtocol writeFieldBeginWithName: @"price" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __price];
      [outProtocol writeFieldEnd];
    }
  }
  if (__priceDuration_isset) {
    if (__priceDuration != nil) {
      [outProtocol writeFieldBeginWithName: @"priceDuration" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __priceDuration];
      [outProtocol writeFieldEnd];
    }
  }
  if (__soldCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"soldCnt" type: TType_I64 fieldID: 8];
    [outProtocol writeI64: __soldCnt];
    [outProtocol writeFieldEnd];
  }
  if (__zanCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"zanCnt" type: TType_I64 fieldID: 9];
    [outProtocol writeI64: __zanCnt];
    [outProtocol writeFieldEnd];
  }
  if (__favCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"favCnt" type: TType_I64 fieldID: 10];
    [outProtocol writeI64: __favCnt];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFInsDto("];
  [ms appendString: @"insId:"];
  [ms appendFormat: @"%i", __insId];
  [ms appendString: @",insName:"];
  [ms appendFormat: @"\"%@\"", __insName];
  [ms appendString: @",compId:"];
  [ms appendFormat: @"%i", __compId];
  [ms appendString: @",compName:"];
  [ms appendFormat: @"\"%@\"", __compName];
  [ms appendString: @",imgUrl:"];
  [ms appendFormat: @"\"%@\"", __imgUrl];
  [ms appendString: @",price:"];
  [ms appendFormat: @"\"%@\"", __price];
  [ms appendString: @",priceDuration:"];
  [ms appendFormat: @"\"%@\"", __priceDuration];
  [ms appendString: @",soldCnt:"];
  [ms appendFormat: @"%qi", __soldCnt];
  [ms appendString: @",zanCnt:"];
  [ms appendFormat: @"%qi", __zanCnt];
  [ms appendString: @",favCnt:"];
  [ms appendFormat: @"%qi", __favCnt];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFInsPkgDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCompanyId: (int32_t) companyId companyName: (NSString *) companyName packageId: (int32_t) packageId packageName: (NSString *) packageName imgUrl: (NSString *) imgUrl price: (NSString *) price priceDuration: (NSString *) priceDuration soldCnt: (int64_t) soldCnt zanCnt: (int64_t) zanCnt hostUrl: (NSString *) hostUrl introduction: (NSString *) introduction evaluations: (NSMutableArray *) evaluations logoUrl: (NSString *) logoUrl suitableAge: (NSString *) suitableAge coverage: (NSString *) coverage duration: (NSString *) duration favCnt: (int64_t) favCnt spWords: (NSString *) spWords
{
  self = [super init];
  __companyId = companyId;
  __companyId_isset = YES;
  __companyName = [companyName retain_stub];
  __companyName_isset = YES;
  __packageId = packageId;
  __packageId_isset = YES;
  __packageName = [packageName retain_stub];
  __packageName_isset = YES;
  __imgUrl = [imgUrl retain_stub];
  __imgUrl_isset = YES;
  __price = [price retain_stub];
  __price_isset = YES;
  __priceDuration = [priceDuration retain_stub];
  __priceDuration_isset = YES;
  __soldCnt = soldCnt;
  __soldCnt_isset = YES;
  __zanCnt = zanCnt;
  __zanCnt_isset = YES;
  __hostUrl = [hostUrl retain_stub];
  __hostUrl_isset = YES;
  __introduction = [introduction retain_stub];
  __introduction_isset = YES;
  __evaluations = [evaluations retain_stub];
  __evaluations_isset = YES;
  __logoUrl = [logoUrl retain_stub];
  __logoUrl_isset = YES;
  __suitableAge = [suitableAge retain_stub];
  __suitableAge_isset = YES;
  __coverage = [coverage retain_stub];
  __coverage_isset = YES;
  __duration = [duration retain_stub];
  __duration_isset = YES;
  __favCnt = favCnt;
  __favCnt_isset = YES;
  __spWords = [spWords retain_stub];
  __spWords_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"companyId"])
  {
    __companyId = [decoder decodeInt32ForKey: @"companyId"];
    __companyId_isset = YES;
  }
  if ([decoder containsValueForKey: @"companyName"])
  {
    __companyName = [[decoder decodeObjectForKey: @"companyName"] retain_stub];
    __companyName_isset = YES;
  }
  if ([decoder containsValueForKey: @"packageId"])
  {
    __packageId = [decoder decodeInt32ForKey: @"packageId"];
    __packageId_isset = YES;
  }
  if ([decoder containsValueForKey: @"packageName"])
  {
    __packageName = [[decoder decodeObjectForKey: @"packageName"] retain_stub];
    __packageName_isset = YES;
  }
  if ([decoder containsValueForKey: @"imgUrl"])
  {
    __imgUrl = [[decoder decodeObjectForKey: @"imgUrl"] retain_stub];
    __imgUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"price"])
  {
    __price = [[decoder decodeObjectForKey: @"price"] retain_stub];
    __price_isset = YES;
  }
  if ([decoder containsValueForKey: @"priceDuration"])
  {
    __priceDuration = [[decoder decodeObjectForKey: @"priceDuration"] retain_stub];
    __priceDuration_isset = YES;
  }
  if ([decoder containsValueForKey: @"soldCnt"])
  {
    __soldCnt = [decoder decodeInt64ForKey: @"soldCnt"];
    __soldCnt_isset = YES;
  }
  if ([decoder containsValueForKey: @"zanCnt"])
  {
    __zanCnt = [decoder decodeInt64ForKey: @"zanCnt"];
    __zanCnt_isset = YES;
  }
  if ([decoder containsValueForKey: @"hostUrl"])
  {
    __hostUrl = [[decoder decodeObjectForKey: @"hostUrl"] retain_stub];
    __hostUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"introduction"])
  {
    __introduction = [[decoder decodeObjectForKey: @"introduction"] retain_stub];
    __introduction_isset = YES;
  }
  if ([decoder containsValueForKey: @"evaluations"])
  {
    __evaluations = [[decoder decodeObjectForKey: @"evaluations"] retain_stub];
    __evaluations_isset = YES;
  }
  if ([decoder containsValueForKey: @"logoUrl"])
  {
    __logoUrl = [[decoder decodeObjectForKey: @"logoUrl"] retain_stub];
    __logoUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"suitableAge"])
  {
    __suitableAge = [[decoder decodeObjectForKey: @"suitableAge"] retain_stub];
    __suitableAge_isset = YES;
  }
  if ([decoder containsValueForKey: @"coverage"])
  {
    __coverage = [[decoder decodeObjectForKey: @"coverage"] retain_stub];
    __coverage_isset = YES;
  }
  if ([decoder containsValueForKey: @"duration"])
  {
    __duration = [[decoder decodeObjectForKey: @"duration"] retain_stub];
    __duration_isset = YES;
  }
  if ([decoder containsValueForKey: @"favCnt"])
  {
    __favCnt = [decoder decodeInt64ForKey: @"favCnt"];
    __favCnt_isset = YES;
  }
  if ([decoder containsValueForKey: @"spWords"])
  {
    __spWords = [[decoder decodeObjectForKey: @"spWords"] retain_stub];
    __spWords_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__companyId_isset)
  {
    [encoder encodeInt32: __companyId forKey: @"companyId"];
  }
  if (__companyName_isset)
  {
    [encoder encodeObject: __companyName forKey: @"companyName"];
  }
  if (__packageId_isset)
  {
    [encoder encodeInt32: __packageId forKey: @"packageId"];
  }
  if (__packageName_isset)
  {
    [encoder encodeObject: __packageName forKey: @"packageName"];
  }
  if (__imgUrl_isset)
  {
    [encoder encodeObject: __imgUrl forKey: @"imgUrl"];
  }
  if (__price_isset)
  {
    [encoder encodeObject: __price forKey: @"price"];
  }
  if (__priceDuration_isset)
  {
    [encoder encodeObject: __priceDuration forKey: @"priceDuration"];
  }
  if (__soldCnt_isset)
  {
    [encoder encodeInt64: __soldCnt forKey: @"soldCnt"];
  }
  if (__zanCnt_isset)
  {
    [encoder encodeInt64: __zanCnt forKey: @"zanCnt"];
  }
  if (__hostUrl_isset)
  {
    [encoder encodeObject: __hostUrl forKey: @"hostUrl"];
  }
  if (__introduction_isset)
  {
    [encoder encodeObject: __introduction forKey: @"introduction"];
  }
  if (__evaluations_isset)
  {
    [encoder encodeObject: __evaluations forKey: @"evaluations"];
  }
  if (__logoUrl_isset)
  {
    [encoder encodeObject: __logoUrl forKey: @"logoUrl"];
  }
  if (__suitableAge_isset)
  {
    [encoder encodeObject: __suitableAge forKey: @"suitableAge"];
  }
  if (__coverage_isset)
  {
    [encoder encodeObject: __coverage forKey: @"coverage"];
  }
  if (__duration_isset)
  {
    [encoder encodeObject: __duration forKey: @"duration"];
  }
  if (__favCnt_isset)
  {
    [encoder encodeInt64: __favCnt forKey: @"favCnt"];
  }
  if (__spWords_isset)
  {
    [encoder encodeObject: __spWords forKey: @"spWords"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __companyId_isset ? 2654435761 : 0;
  if (__companyId_isset)
  {
    hash = (hash * 31) ^ [@(__companyId) hash];
  }
  hash = (hash * 31) ^ __companyName_isset ? 2654435761 : 0;
  if (__companyName_isset)
  {
    hash = (hash * 31) ^ [__companyName hash];
  }
  hash = (hash * 31) ^ __packageId_isset ? 2654435761 : 0;
  if (__packageId_isset)
  {
    hash = (hash * 31) ^ [@(__packageId) hash];
  }
  hash = (hash * 31) ^ __packageName_isset ? 2654435761 : 0;
  if (__packageName_isset)
  {
    hash = (hash * 31) ^ [__packageName hash];
  }
  hash = (hash * 31) ^ __imgUrl_isset ? 2654435761 : 0;
  if (__imgUrl_isset)
  {
    hash = (hash * 31) ^ [__imgUrl hash];
  }
  hash = (hash * 31) ^ __price_isset ? 2654435761 : 0;
  if (__price_isset)
  {
    hash = (hash * 31) ^ [__price hash];
  }
  hash = (hash * 31) ^ __priceDuration_isset ? 2654435761 : 0;
  if (__priceDuration_isset)
  {
    hash = (hash * 31) ^ [__priceDuration hash];
  }
  hash = (hash * 31) ^ __soldCnt_isset ? 2654435761 : 0;
  if (__soldCnt_isset)
  {
    hash = (hash * 31) ^ [@(__soldCnt) hash];
  }
  hash = (hash * 31) ^ __zanCnt_isset ? 2654435761 : 0;
  if (__zanCnt_isset)
  {
    hash = (hash * 31) ^ [@(__zanCnt) hash];
  }
  hash = (hash * 31) ^ __hostUrl_isset ? 2654435761 : 0;
  if (__hostUrl_isset)
  {
    hash = (hash * 31) ^ [__hostUrl hash];
  }
  hash = (hash * 31) ^ __introduction_isset ? 2654435761 : 0;
  if (__introduction_isset)
  {
    hash = (hash * 31) ^ [__introduction hash];
  }
  hash = (hash * 31) ^ __evaluations_isset ? 2654435761 : 0;
  if (__evaluations_isset)
  {
    hash = (hash * 31) ^ [__evaluations hash];
  }
  hash = (hash * 31) ^ __logoUrl_isset ? 2654435761 : 0;
  if (__logoUrl_isset)
  {
    hash = (hash * 31) ^ [__logoUrl hash];
  }
  hash = (hash * 31) ^ __suitableAge_isset ? 2654435761 : 0;
  if (__suitableAge_isset)
  {
    hash = (hash * 31) ^ [__suitableAge hash];
  }
  hash = (hash * 31) ^ __coverage_isset ? 2654435761 : 0;
  if (__coverage_isset)
  {
    hash = (hash * 31) ^ [__coverage hash];
  }
  hash = (hash * 31) ^ __duration_isset ? 2654435761 : 0;
  if (__duration_isset)
  {
    hash = (hash * 31) ^ [__duration hash];
  }
  hash = (hash * 31) ^ __favCnt_isset ? 2654435761 : 0;
  if (__favCnt_isset)
  {
    hash = (hash * 31) ^ [@(__favCnt) hash];
  }
  hash = (hash * 31) ^ __spWords_isset ? 2654435761 : 0;
  if (__spWords_isset)
  {
    hash = (hash * 31) ^ [__spWords hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFInsPkgDto class]]) {
    return NO;
  }
  NXTFInsPkgDto *other = (NXTFInsPkgDto *)anObject;
  if ((__companyId_isset != other->__companyId_isset) ||
      (__companyId_isset && (__companyId != other->__companyId))) {
    return NO;
  }
  if ((__companyName_isset != other->__companyName_isset) ||
      (__companyName_isset && ((__companyName || other->__companyName) && ![__companyName isEqual:other->__companyName]))) {
    return NO;
  }
  if ((__packageId_isset != other->__packageId_isset) ||
      (__packageId_isset && (__packageId != other->__packageId))) {
    return NO;
  }
  if ((__packageName_isset != other->__packageName_isset) ||
      (__packageName_isset && ((__packageName || other->__packageName) && ![__packageName isEqual:other->__packageName]))) {
    return NO;
  }
  if ((__imgUrl_isset != other->__imgUrl_isset) ||
      (__imgUrl_isset && ((__imgUrl || other->__imgUrl) && ![__imgUrl isEqual:other->__imgUrl]))) {
    return NO;
  }
  if ((__price_isset != other->__price_isset) ||
      (__price_isset && ((__price || other->__price) && ![__price isEqual:other->__price]))) {
    return NO;
  }
  if ((__priceDuration_isset != other->__priceDuration_isset) ||
      (__priceDuration_isset && ((__priceDuration || other->__priceDuration) && ![__priceDuration isEqual:other->__priceDuration]))) {
    return NO;
  }
  if ((__soldCnt_isset != other->__soldCnt_isset) ||
      (__soldCnt_isset && (__soldCnt != other->__soldCnt))) {
    return NO;
  }
  if ((__zanCnt_isset != other->__zanCnt_isset) ||
      (__zanCnt_isset && (__zanCnt != other->__zanCnt))) {
    return NO;
  }
  if ((__hostUrl_isset != other->__hostUrl_isset) ||
      (__hostUrl_isset && ((__hostUrl || other->__hostUrl) && ![__hostUrl isEqual:other->__hostUrl]))) {
    return NO;
  }
  if ((__introduction_isset != other->__introduction_isset) ||
      (__introduction_isset && ((__introduction || other->__introduction) && ![__introduction isEqual:other->__introduction]))) {
    return NO;
  }
  if ((__evaluations_isset != other->__evaluations_isset) ||
      (__evaluations_isset && ((__evaluations || other->__evaluations) && ![__evaluations isEqual:other->__evaluations]))) {
    return NO;
  }
  if ((__logoUrl_isset != other->__logoUrl_isset) ||
      (__logoUrl_isset && ((__logoUrl || other->__logoUrl) && ![__logoUrl isEqual:other->__logoUrl]))) {
    return NO;
  }
  if ((__suitableAge_isset != other->__suitableAge_isset) ||
      (__suitableAge_isset && ((__suitableAge || other->__suitableAge) && ![__suitableAge isEqual:other->__suitableAge]))) {
    return NO;
  }
  if ((__coverage_isset != other->__coverage_isset) ||
      (__coverage_isset && ((__coverage || other->__coverage) && ![__coverage isEqual:other->__coverage]))) {
    return NO;
  }
  if ((__duration_isset != other->__duration_isset) ||
      (__duration_isset && ((__duration || other->__duration) && ![__duration isEqual:other->__duration]))) {
    return NO;
  }
  if ((__favCnt_isset != other->__favCnt_isset) ||
      (__favCnt_isset && (__favCnt != other->__favCnt))) {
    return NO;
  }
  if ((__spWords_isset != other->__spWords_isset) ||
      (__spWords_isset && ((__spWords || other->__spWords) && ![__spWords isEqual:other->__spWords]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__companyName release_stub];
  [__packageName release_stub];
  [__imgUrl release_stub];
  [__price release_stub];
  [__priceDuration release_stub];
  [__hostUrl release_stub];
  [__introduction release_stub];
  [__evaluations release_stub];
  [__logoUrl release_stub];
  [__suitableAge release_stub];
  [__coverage release_stub];
  [__duration release_stub];
  [__spWords release_stub];
  [super dealloc_stub];
}

- (int32_t) companyId {
  return __companyId;
}

- (void) setCompanyId: (int32_t) companyId {
  __companyId = companyId;
  __companyId_isset = YES;
}

- (BOOL) companyIdIsSet {
  return __companyId_isset;
}

- (void) unsetCompanyId {
  __companyId_isset = NO;
}

- (NSString *) companyName {
  return [[__companyName retain_stub] autorelease_stub];
}

- (void) setCompanyName: (NSString *) companyName {
  [companyName retain_stub];
  [__companyName release_stub];
  __companyName = companyName;
  __companyName_isset = YES;
}

- (BOOL) companyNameIsSet {
  return __companyName_isset;
}

- (void) unsetCompanyName {
  [__companyName release_stub];
  __companyName = nil;
  __companyName_isset = NO;
}

- (int32_t) packageId {
  return __packageId;
}

- (void) setPackageId: (int32_t) packageId {
  __packageId = packageId;
  __packageId_isset = YES;
}

- (BOOL) packageIdIsSet {
  return __packageId_isset;
}

- (void) unsetPackageId {
  __packageId_isset = NO;
}

- (NSString *) packageName {
  return [[__packageName retain_stub] autorelease_stub];
}

- (void) setPackageName: (NSString *) packageName {
  [packageName retain_stub];
  [__packageName release_stub];
  __packageName = packageName;
  __packageName_isset = YES;
}

- (BOOL) packageNameIsSet {
  return __packageName_isset;
}

- (void) unsetPackageName {
  [__packageName release_stub];
  __packageName = nil;
  __packageName_isset = NO;
}

- (NSString *) imgUrl {
  return [[__imgUrl retain_stub] autorelease_stub];
}

- (void) setImgUrl: (NSString *) imgUrl {
  [imgUrl retain_stub];
  [__imgUrl release_stub];
  __imgUrl = imgUrl;
  __imgUrl_isset = YES;
}

- (BOOL) imgUrlIsSet {
  return __imgUrl_isset;
}

- (void) unsetImgUrl {
  [__imgUrl release_stub];
  __imgUrl = nil;
  __imgUrl_isset = NO;
}

- (NSString *) price {
  return [[__price retain_stub] autorelease_stub];
}

- (void) setPrice: (NSString *) price {
  [price retain_stub];
  [__price release_stub];
  __price = price;
  __price_isset = YES;
}

- (BOOL) priceIsSet {
  return __price_isset;
}

- (void) unsetPrice {
  [__price release_stub];
  __price = nil;
  __price_isset = NO;
}

- (NSString *) priceDuration {
  return [[__priceDuration retain_stub] autorelease_stub];
}

- (void) setPriceDuration: (NSString *) priceDuration {
  [priceDuration retain_stub];
  [__priceDuration release_stub];
  __priceDuration = priceDuration;
  __priceDuration_isset = YES;
}

- (BOOL) priceDurationIsSet {
  return __priceDuration_isset;
}

- (void) unsetPriceDuration {
  [__priceDuration release_stub];
  __priceDuration = nil;
  __priceDuration_isset = NO;
}

- (int64_t) soldCnt {
  return __soldCnt;
}

- (void) setSoldCnt: (int64_t) soldCnt {
  __soldCnt = soldCnt;
  __soldCnt_isset = YES;
}

- (BOOL) soldCntIsSet {
  return __soldCnt_isset;
}

- (void) unsetSoldCnt {
  __soldCnt_isset = NO;
}

- (int64_t) zanCnt {
  return __zanCnt;
}

- (void) setZanCnt: (int64_t) zanCnt {
  __zanCnt = zanCnt;
  __zanCnt_isset = YES;
}

- (BOOL) zanCntIsSet {
  return __zanCnt_isset;
}

- (void) unsetZanCnt {
  __zanCnt_isset = NO;
}

- (NSString *) hostUrl {
  return [[__hostUrl retain_stub] autorelease_stub];
}

- (void) setHostUrl: (NSString *) hostUrl {
  [hostUrl retain_stub];
  [__hostUrl release_stub];
  __hostUrl = hostUrl;
  __hostUrl_isset = YES;
}

- (BOOL) hostUrlIsSet {
  return __hostUrl_isset;
}

- (void) unsetHostUrl {
  [__hostUrl release_stub];
  __hostUrl = nil;
  __hostUrl_isset = NO;
}

- (NSString *) introduction {
  return [[__introduction retain_stub] autorelease_stub];
}

- (void) setIntroduction: (NSString *) introduction {
  [introduction retain_stub];
  [__introduction release_stub];
  __introduction = introduction;
  __introduction_isset = YES;
}

- (BOOL) introductionIsSet {
  return __introduction_isset;
}

- (void) unsetIntroduction {
  [__introduction release_stub];
  __introduction = nil;
  __introduction_isset = NO;
}

- (NSMutableArray *) evaluations {
  return [[__evaluations retain_stub] autorelease_stub];
}

- (void) setEvaluations: (NSMutableArray *) evaluations {
  [evaluations retain_stub];
  [__evaluations release_stub];
  __evaluations = evaluations;
  __evaluations_isset = YES;
}

- (BOOL) evaluationsIsSet {
  return __evaluations_isset;
}

- (void) unsetEvaluations {
  [__evaluations release_stub];
  __evaluations = nil;
  __evaluations_isset = NO;
}

- (NSString *) logoUrl {
  return [[__logoUrl retain_stub] autorelease_stub];
}

- (void) setLogoUrl: (NSString *) logoUrl {
  [logoUrl retain_stub];
  [__logoUrl release_stub];
  __logoUrl = logoUrl;
  __logoUrl_isset = YES;
}

- (BOOL) logoUrlIsSet {
  return __logoUrl_isset;
}

- (void) unsetLogoUrl {
  [__logoUrl release_stub];
  __logoUrl = nil;
  __logoUrl_isset = NO;
}

- (NSString *) suitableAge {
  return [[__suitableAge retain_stub] autorelease_stub];
}

- (void) setSuitableAge: (NSString *) suitableAge {
  [suitableAge retain_stub];
  [__suitableAge release_stub];
  __suitableAge = suitableAge;
  __suitableAge_isset = YES;
}

- (BOOL) suitableAgeIsSet {
  return __suitableAge_isset;
}

- (void) unsetSuitableAge {
  [__suitableAge release_stub];
  __suitableAge = nil;
  __suitableAge_isset = NO;
}

- (NSString *) coverage {
  return [[__coverage retain_stub] autorelease_stub];
}

- (void) setCoverage: (NSString *) coverage {
  [coverage retain_stub];
  [__coverage release_stub];
  __coverage = coverage;
  __coverage_isset = YES;
}

- (BOOL) coverageIsSet {
  return __coverage_isset;
}

- (void) unsetCoverage {
  [__coverage release_stub];
  __coverage = nil;
  __coverage_isset = NO;
}

- (NSString *) duration {
  return [[__duration retain_stub] autorelease_stub];
}

- (void) setDuration: (NSString *) duration {
  [duration retain_stub];
  [__duration release_stub];
  __duration = duration;
  __duration_isset = YES;
}

- (BOOL) durationIsSet {
  return __duration_isset;
}

- (void) unsetDuration {
  [__duration release_stub];
  __duration = nil;
  __duration_isset = NO;
}

- (int64_t) favCnt {
  return __favCnt;
}

- (void) setFavCnt: (int64_t) favCnt {
  __favCnt = favCnt;
  __favCnt_isset = YES;
}

- (BOOL) favCntIsSet {
  return __favCnt_isset;
}

- (void) unsetFavCnt {
  __favCnt_isset = NO;
}

- (NSString *) spWords {
  return [[__spWords retain_stub] autorelease_stub];
}

- (void) setSpWords: (NSString *) spWords {
  [spWords retain_stub];
  [__spWords release_stub];
  __spWords = spWords;
  __spWords_isset = YES;
}

- (BOOL) spWordsIsSet {
  return __spWords_isset;
}

- (void) unsetSpWords {
  [__spWords release_stub];
  __spWords = nil;
  __spWords_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCompanyId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCompanyName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPackageId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPackageName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImgUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPriceDuration: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSoldCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setZanCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHostUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIntroduction: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NXTFInsEvalDto *_elem2 = [[NXTFInsEvalDto alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setEvaluations: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLogoUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuitableAge: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCoverage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDuration: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setFavCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSpWords: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"InsPkgDto"];
  if (__companyId_isset) {
    [outProtocol writeFieldBeginWithName: @"companyId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __companyId];
    [outProtocol writeFieldEnd];
  }
  if (__companyName_isset) {
    if (__companyName != nil) {
      [outProtocol writeFieldBeginWithName: @"companyName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __companyName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__packageId_isset) {
    [outProtocol writeFieldBeginWithName: @"packageId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __packageId];
    [outProtocol writeFieldEnd];
  }
  if (__packageName_isset) {
    if (__packageName != nil) {
      [outProtocol writeFieldBeginWithName: @"packageName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __packageName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__imgUrl_isset) {
    if (__imgUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"imgUrl" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __imgUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__price_isset) {
    if (__price != nil) {
      [outProtocol writeFieldBeginWithName: @"price" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __price];
      [outProtocol writeFieldEnd];
    }
  }
  if (__priceDuration_isset) {
    if (__priceDuration != nil) {
      [outProtocol writeFieldBeginWithName: @"priceDuration" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __priceDuration];
      [outProtocol writeFieldEnd];
    }
  }
  if (__soldCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"soldCnt" type: TType_I64 fieldID: 8];
    [outProtocol writeI64: __soldCnt];
    [outProtocol writeFieldEnd];
  }
  if (__zanCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"zanCnt" type: TType_I64 fieldID: 9];
    [outProtocol writeI64: __zanCnt];
    [outProtocol writeFieldEnd];
  }
  if (__hostUrl_isset) {
    if (__hostUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"hostUrl" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __hostUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__introduction_isset) {
    if (__introduction != nil) {
      [outProtocol writeFieldBeginWithName: @"introduction" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __introduction];
      [outProtocol writeFieldEnd];
    }
  }
  if (__evaluations_isset) {
    if (__evaluations != nil) {
      [outProtocol writeFieldBeginWithName: @"evaluations" type: TType_LIST fieldID: 12];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__evaluations count]];
        int idx4;
        for (idx4 = 0; idx4 < [__evaluations count]; idx4++)
        {
          [[__evaluations objectAtIndex: idx4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__logoUrl_isset) {
    if (__logoUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"logoUrl" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __logoUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__suitableAge_isset) {
    if (__suitableAge != nil) {
      [outProtocol writeFieldBeginWithName: @"suitableAge" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __suitableAge];
      [outProtocol writeFieldEnd];
    }
  }
  if (__coverage_isset) {
    if (__coverage != nil) {
      [outProtocol writeFieldBeginWithName: @"coverage" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __coverage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__duration_isset) {
    if (__duration != nil) {
      [outProtocol writeFieldBeginWithName: @"duration" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __duration];
      [outProtocol writeFieldEnd];
    }
  }
  if (__favCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"favCnt" type: TType_I64 fieldID: 17];
    [outProtocol writeI64: __favCnt];
    [outProtocol writeFieldEnd];
  }
  if (__spWords_isset) {
    if (__spWords != nil) {
      [outProtocol writeFieldBeginWithName: @"spWords" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __spWords];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFInsPkgDto("];
  [ms appendString: @"companyId:"];
  [ms appendFormat: @"%i", __companyId];
  [ms appendString: @",companyName:"];
  [ms appendFormat: @"\"%@\"", __companyName];
  [ms appendString: @",packageId:"];
  [ms appendFormat: @"%i", __packageId];
  [ms appendString: @",packageName:"];
  [ms appendFormat: @"\"%@\"", __packageName];
  [ms appendString: @",imgUrl:"];
  [ms appendFormat: @"\"%@\"", __imgUrl];
  [ms appendString: @",price:"];
  [ms appendFormat: @"\"%@\"", __price];
  [ms appendString: @",priceDuration:"];
  [ms appendFormat: @"\"%@\"", __priceDuration];
  [ms appendString: @",soldCnt:"];
  [ms appendFormat: @"%qi", __soldCnt];
  [ms appendString: @",zanCnt:"];
  [ms appendFormat: @"%qi", __zanCnt];
  [ms appendString: @",hostUrl:"];
  [ms appendFormat: @"\"%@\"", __hostUrl];
  [ms appendString: @",introduction:"];
  [ms appendFormat: @"\"%@\"", __introduction];
  [ms appendString: @",evaluations:"];
  [ms appendFormat: @"%@", __evaluations];
  [ms appendString: @",logoUrl:"];
  [ms appendFormat: @"\"%@\"", __logoUrl];
  [ms appendString: @",suitableAge:"];
  [ms appendFormat: @"\"%@\"", __suitableAge];
  [ms appendString: @",coverage:"];
  [ms appendFormat: @"\"%@\"", __coverage];
  [ms appendString: @",duration:"];
  [ms appendFormat: @"\"%@\"", __duration];
  [ms appendString: @",favCnt:"];
  [ms appendFormat: @"%qi", __favCnt];
  [ms appendString: @",spWords:"];
  [ms appendFormat: @"\"%@\"", __spWords];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFDeptDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.childDepts = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithDeptName: (NSString *) deptName hospId: (int32_t) hospId deptId: (int64_t) deptId isHot: (int32_t) isHot notice: (NSString *) notice hisDeptId: (NSString *) hisDeptId hisParentId: (NSString *) hisParentId gradeCode: (NSString *) gradeCode childDepts: (NSMutableArray *) childDepts
{
  self = [super init];
  __deptName = [deptName retain_stub];
  __deptName_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __deptId = deptId;
  __deptId_isset = YES;
  __isHot = isHot;
  __isHot_isset = YES;
  __notice = [notice retain_stub];
  __notice_isset = YES;
  __hisDeptId = [hisDeptId retain_stub];
  __hisDeptId_isset = YES;
  __hisParentId = [hisParentId retain_stub];
  __hisParentId_isset = YES;
  __gradeCode = [gradeCode retain_stub];
  __gradeCode_isset = YES;
  __childDepts = [childDepts retain_stub];
  __childDepts_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"deptName"])
  {
    __deptName = [[decoder decodeObjectForKey: @"deptName"] retain_stub];
    __deptName_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptId"])
  {
    __deptId = [decoder decodeInt64ForKey: @"deptId"];
    __deptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"isHot"])
  {
    __isHot = [decoder decodeInt32ForKey: @"isHot"];
    __isHot_isset = YES;
  }
  if ([decoder containsValueForKey: @"notice"])
  {
    __notice = [[decoder decodeObjectForKey: @"notice"] retain_stub];
    __notice_isset = YES;
  }
  if ([decoder containsValueForKey: @"hisDeptId"])
  {
    __hisDeptId = [[decoder decodeObjectForKey: @"hisDeptId"] retain_stub];
    __hisDeptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hisParentId"])
  {
    __hisParentId = [[decoder decodeObjectForKey: @"hisParentId"] retain_stub];
    __hisParentId_isset = YES;
  }
  if ([decoder containsValueForKey: @"gradeCode"])
  {
    __gradeCode = [[decoder decodeObjectForKey: @"gradeCode"] retain_stub];
    __gradeCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"childDepts"])
  {
    __childDepts = [[decoder decodeObjectForKey: @"childDepts"] retain_stub];
    __childDepts_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__deptName_isset)
  {
    [encoder encodeObject: __deptName forKey: @"deptName"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__deptId_isset)
  {
    [encoder encodeInt64: __deptId forKey: @"deptId"];
  }
  if (__isHot_isset)
  {
    [encoder encodeInt32: __isHot forKey: @"isHot"];
  }
  if (__notice_isset)
  {
    [encoder encodeObject: __notice forKey: @"notice"];
  }
  if (__hisDeptId_isset)
  {
    [encoder encodeObject: __hisDeptId forKey: @"hisDeptId"];
  }
  if (__hisParentId_isset)
  {
    [encoder encodeObject: __hisParentId forKey: @"hisParentId"];
  }
  if (__gradeCode_isset)
  {
    [encoder encodeObject: __gradeCode forKey: @"gradeCode"];
  }
  if (__childDepts_isset)
  {
    [encoder encodeObject: __childDepts forKey: @"childDepts"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __deptName_isset ? 2654435761 : 0;
  if (__deptName_isset)
  {
    hash = (hash * 31) ^ [__deptName hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __deptId_isset ? 2654435761 : 0;
  if (__deptId_isset)
  {
    hash = (hash * 31) ^ [@(__deptId) hash];
  }
  hash = (hash * 31) ^ __isHot_isset ? 2654435761 : 0;
  if (__isHot_isset)
  {
    hash = (hash * 31) ^ [@(__isHot) hash];
  }
  hash = (hash * 31) ^ __notice_isset ? 2654435761 : 0;
  if (__notice_isset)
  {
    hash = (hash * 31) ^ [__notice hash];
  }
  hash = (hash * 31) ^ __hisDeptId_isset ? 2654435761 : 0;
  if (__hisDeptId_isset)
  {
    hash = (hash * 31) ^ [__hisDeptId hash];
  }
  hash = (hash * 31) ^ __hisParentId_isset ? 2654435761 : 0;
  if (__hisParentId_isset)
  {
    hash = (hash * 31) ^ [__hisParentId hash];
  }
  hash = (hash * 31) ^ __gradeCode_isset ? 2654435761 : 0;
  if (__gradeCode_isset)
  {
    hash = (hash * 31) ^ [__gradeCode hash];
  }
  hash = (hash * 31) ^ __childDepts_isset ? 2654435761 : 0;
  if (__childDepts_isset)
  {
    hash = (hash * 31) ^ [__childDepts hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFDeptDto class]]) {
    return NO;
  }
  NXTFDeptDto *other = (NXTFDeptDto *)anObject;
  if ((__deptName_isset != other->__deptName_isset) ||
      (__deptName_isset && ((__deptName || other->__deptName) && ![__deptName isEqual:other->__deptName]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__deptId_isset != other->__deptId_isset) ||
      (__deptId_isset && (__deptId != other->__deptId))) {
    return NO;
  }
  if ((__isHot_isset != other->__isHot_isset) ||
      (__isHot_isset && (__isHot != other->__isHot))) {
    return NO;
  }
  if ((__notice_isset != other->__notice_isset) ||
      (__notice_isset && ((__notice || other->__notice) && ![__notice isEqual:other->__notice]))) {
    return NO;
  }
  if ((__hisDeptId_isset != other->__hisDeptId_isset) ||
      (__hisDeptId_isset && ((__hisDeptId || other->__hisDeptId) && ![__hisDeptId isEqual:other->__hisDeptId]))) {
    return NO;
  }
  if ((__hisParentId_isset != other->__hisParentId_isset) ||
      (__hisParentId_isset && ((__hisParentId || other->__hisParentId) && ![__hisParentId isEqual:other->__hisParentId]))) {
    return NO;
  }
  if ((__gradeCode_isset != other->__gradeCode_isset) ||
      (__gradeCode_isset && ((__gradeCode || other->__gradeCode) && ![__gradeCode isEqual:other->__gradeCode]))) {
    return NO;
  }
  if ((__childDepts_isset != other->__childDepts_isset) ||
      (__childDepts_isset && ((__childDepts || other->__childDepts) && ![__childDepts isEqual:other->__childDepts]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__deptName release_stub];
  [__notice release_stub];
  [__hisDeptId release_stub];
  [__hisParentId release_stub];
  [__gradeCode release_stub];
  [__childDepts release_stub];
  [super dealloc_stub];
}

- (NSString *) deptName {
  return [[__deptName retain_stub] autorelease_stub];
}

- (void) setDeptName: (NSString *) deptName {
  [deptName retain_stub];
  [__deptName release_stub];
  __deptName = deptName;
  __deptName_isset = YES;
}

- (BOOL) deptNameIsSet {
  return __deptName_isset;
}

- (void) unsetDeptName {
  [__deptName release_stub];
  __deptName = nil;
  __deptName_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (int64_t) deptId {
  return __deptId;
}

- (void) setDeptId: (int64_t) deptId {
  __deptId = deptId;
  __deptId_isset = YES;
}

- (BOOL) deptIdIsSet {
  return __deptId_isset;
}

- (void) unsetDeptId {
  __deptId_isset = NO;
}

- (int32_t) isHot {
  return __isHot;
}

- (void) setIsHot: (int32_t) isHot {
  __isHot = isHot;
  __isHot_isset = YES;
}

- (BOOL) isHotIsSet {
  return __isHot_isset;
}

- (void) unsetIsHot {
  __isHot_isset = NO;
}

- (NSString *) notice {
  return [[__notice retain_stub] autorelease_stub];
}

- (void) setNotice: (NSString *) notice {
  [notice retain_stub];
  [__notice release_stub];
  __notice = notice;
  __notice_isset = YES;
}

- (BOOL) noticeIsSet {
  return __notice_isset;
}

- (void) unsetNotice {
  [__notice release_stub];
  __notice = nil;
  __notice_isset = NO;
}

- (NSString *) hisDeptId {
  return [[__hisDeptId retain_stub] autorelease_stub];
}

- (void) setHisDeptId: (NSString *) hisDeptId {
  [hisDeptId retain_stub];
  [__hisDeptId release_stub];
  __hisDeptId = hisDeptId;
  __hisDeptId_isset = YES;
}

- (BOOL) hisDeptIdIsSet {
  return __hisDeptId_isset;
}

- (void) unsetHisDeptId {
  [__hisDeptId release_stub];
  __hisDeptId = nil;
  __hisDeptId_isset = NO;
}

- (NSString *) hisParentId {
  return [[__hisParentId retain_stub] autorelease_stub];
}

- (void) setHisParentId: (NSString *) hisParentId {
  [hisParentId retain_stub];
  [__hisParentId release_stub];
  __hisParentId = hisParentId;
  __hisParentId_isset = YES;
}

- (BOOL) hisParentIdIsSet {
  return __hisParentId_isset;
}

- (void) unsetHisParentId {
  [__hisParentId release_stub];
  __hisParentId = nil;
  __hisParentId_isset = NO;
}

- (NSString *) gradeCode {
  return [[__gradeCode retain_stub] autorelease_stub];
}

- (void) setGradeCode: (NSString *) gradeCode {
  [gradeCode retain_stub];
  [__gradeCode release_stub];
  __gradeCode = gradeCode;
  __gradeCode_isset = YES;
}

- (BOOL) gradeCodeIsSet {
  return __gradeCode_isset;
}

- (void) unsetGradeCode {
  [__gradeCode release_stub];
  __gradeCode = nil;
  __gradeCode_isset = NO;
}

- (NSMutableArray *) childDepts {
  return [[__childDepts retain_stub] autorelease_stub];
}

- (void) setChildDepts: (NSMutableArray *) childDepts {
  [childDepts retain_stub];
  [__childDepts release_stub];
  __childDepts = childDepts;
  __childDepts_isset = YES;
}

- (BOOL) childDeptsIsSet {
  return __childDepts_isset;
}

- (void) unsetChildDepts {
  [__childDepts release_stub];
  __childDepts = nil;
  __childDepts_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsHot: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNotice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHisDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHisParentId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGradeCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NXTFDeptDto *_elem7 = [[NXTFDeptDto alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setChildDepts: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeptDto"];
  if (__deptName_isset) {
    if (__deptName != nil) {
      [outProtocol writeFieldBeginWithName: @"deptName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __deptName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__deptId_isset) {
    [outProtocol writeFieldBeginWithName: @"deptId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __deptId];
    [outProtocol writeFieldEnd];
  }
  if (__isHot_isset) {
    [outProtocol writeFieldBeginWithName: @"isHot" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __isHot];
    [outProtocol writeFieldEnd];
  }
  if (__notice_isset) {
    if (__notice != nil) {
      [outProtocol writeFieldBeginWithName: @"notice" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __notice];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hisDeptId_isset) {
    if (__hisDeptId != nil) {
      [outProtocol writeFieldBeginWithName: @"hisDeptId" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __hisDeptId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hisParentId_isset) {
    if (__hisParentId != nil) {
      [outProtocol writeFieldBeginWithName: @"hisParentId" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __hisParentId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gradeCode_isset) {
    if (__gradeCode != nil) {
      [outProtocol writeFieldBeginWithName: @"gradeCode" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __gradeCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__childDepts_isset) {
    if (__childDepts != nil) {
      [outProtocol writeFieldBeginWithName: @"childDepts" type: TType_LIST fieldID: 9];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__childDepts count]];
        int idx9;
        for (idx9 = 0; idx9 < [__childDepts count]; idx9++)
        {
          [[__childDepts objectAtIndex: idx9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFDeptDto("];
  [ms appendString: @"deptName:"];
  [ms appendFormat: @"\"%@\"", __deptName];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",deptId:"];
  [ms appendFormat: @"%qi", __deptId];
  [ms appendString: @",isHot:"];
  [ms appendFormat: @"%i", __isHot];
  [ms appendString: @",notice:"];
  [ms appendFormat: @"\"%@\"", __notice];
  [ms appendString: @",hisDeptId:"];
  [ms appendFormat: @"\"%@\"", __hisDeptId];
  [ms appendString: @",hisParentId:"];
  [ms appendFormat: @"\"%@\"", __hisParentId];
  [ms appendString: @",gradeCode:"];
  [ms appendFormat: @"\"%@\"", __gradeCode];
  [ms appendString: @",childDepts:"];
  [ms appendFormat: @"%@", __childDepts];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFLisItemDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithItemName: (NSString *) itemName itemNameEn: (NSString *) itemNameEn itemValue: (NSString *) itemValue refValue: (NSString *) refValue itemUnit: (NSString *) itemUnit resultMark: (NSString *) resultMark
{
  self = [super init];
  __itemName = [itemName retain_stub];
  __itemName_isset = YES;
  __itemNameEn = [itemNameEn retain_stub];
  __itemNameEn_isset = YES;
  __itemValue = [itemValue retain_stub];
  __itemValue_isset = YES;
  __refValue = [refValue retain_stub];
  __refValue_isset = YES;
  __itemUnit = [itemUnit retain_stub];
  __itemUnit_isset = YES;
  __resultMark = [resultMark retain_stub];
  __resultMark_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"itemName"])
  {
    __itemName = [[decoder decodeObjectForKey: @"itemName"] retain_stub];
    __itemName_isset = YES;
  }
  if ([decoder containsValueForKey: @"itemNameEn"])
  {
    __itemNameEn = [[decoder decodeObjectForKey: @"itemNameEn"] retain_stub];
    __itemNameEn_isset = YES;
  }
  if ([decoder containsValueForKey: @"itemValue"])
  {
    __itemValue = [[decoder decodeObjectForKey: @"itemValue"] retain_stub];
    __itemValue_isset = YES;
  }
  if ([decoder containsValueForKey: @"refValue"])
  {
    __refValue = [[decoder decodeObjectForKey: @"refValue"] retain_stub];
    __refValue_isset = YES;
  }
  if ([decoder containsValueForKey: @"itemUnit"])
  {
    __itemUnit = [[decoder decodeObjectForKey: @"itemUnit"] retain_stub];
    __itemUnit_isset = YES;
  }
  if ([decoder containsValueForKey: @"resultMark"])
  {
    __resultMark = [[decoder decodeObjectForKey: @"resultMark"] retain_stub];
    __resultMark_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__itemName_isset)
  {
    [encoder encodeObject: __itemName forKey: @"itemName"];
  }
  if (__itemNameEn_isset)
  {
    [encoder encodeObject: __itemNameEn forKey: @"itemNameEn"];
  }
  if (__itemValue_isset)
  {
    [encoder encodeObject: __itemValue forKey: @"itemValue"];
  }
  if (__refValue_isset)
  {
    [encoder encodeObject: __refValue forKey: @"refValue"];
  }
  if (__itemUnit_isset)
  {
    [encoder encodeObject: __itemUnit forKey: @"itemUnit"];
  }
  if (__resultMark_isset)
  {
    [encoder encodeObject: __resultMark forKey: @"resultMark"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __itemName_isset ? 2654435761 : 0;
  if (__itemName_isset)
  {
    hash = (hash * 31) ^ [__itemName hash];
  }
  hash = (hash * 31) ^ __itemNameEn_isset ? 2654435761 : 0;
  if (__itemNameEn_isset)
  {
    hash = (hash * 31) ^ [__itemNameEn hash];
  }
  hash = (hash * 31) ^ __itemValue_isset ? 2654435761 : 0;
  if (__itemValue_isset)
  {
    hash = (hash * 31) ^ [__itemValue hash];
  }
  hash = (hash * 31) ^ __refValue_isset ? 2654435761 : 0;
  if (__refValue_isset)
  {
    hash = (hash * 31) ^ [__refValue hash];
  }
  hash = (hash * 31) ^ __itemUnit_isset ? 2654435761 : 0;
  if (__itemUnit_isset)
  {
    hash = (hash * 31) ^ [__itemUnit hash];
  }
  hash = (hash * 31) ^ __resultMark_isset ? 2654435761 : 0;
  if (__resultMark_isset)
  {
    hash = (hash * 31) ^ [__resultMark hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFLisItemDto class]]) {
    return NO;
  }
  NXTFLisItemDto *other = (NXTFLisItemDto *)anObject;
  if ((__itemName_isset != other->__itemName_isset) ||
      (__itemName_isset && ((__itemName || other->__itemName) && ![__itemName isEqual:other->__itemName]))) {
    return NO;
  }
  if ((__itemNameEn_isset != other->__itemNameEn_isset) ||
      (__itemNameEn_isset && ((__itemNameEn || other->__itemNameEn) && ![__itemNameEn isEqual:other->__itemNameEn]))) {
    return NO;
  }
  if ((__itemValue_isset != other->__itemValue_isset) ||
      (__itemValue_isset && ((__itemValue || other->__itemValue) && ![__itemValue isEqual:other->__itemValue]))) {
    return NO;
  }
  if ((__refValue_isset != other->__refValue_isset) ||
      (__refValue_isset && ((__refValue || other->__refValue) && ![__refValue isEqual:other->__refValue]))) {
    return NO;
  }
  if ((__itemUnit_isset != other->__itemUnit_isset) ||
      (__itemUnit_isset && ((__itemUnit || other->__itemUnit) && ![__itemUnit isEqual:other->__itemUnit]))) {
    return NO;
  }
  if ((__resultMark_isset != other->__resultMark_isset) ||
      (__resultMark_isset && ((__resultMark || other->__resultMark) && ![__resultMark isEqual:other->__resultMark]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__itemName release_stub];
  [__itemNameEn release_stub];
  [__itemValue release_stub];
  [__refValue release_stub];
  [__itemUnit release_stub];
  [__resultMark release_stub];
  [super dealloc_stub];
}

- (NSString *) itemName {
  return [[__itemName retain_stub] autorelease_stub];
}

- (void) setItemName: (NSString *) itemName {
  [itemName retain_stub];
  [__itemName release_stub];
  __itemName = itemName;
  __itemName_isset = YES;
}

- (BOOL) itemNameIsSet {
  return __itemName_isset;
}

- (void) unsetItemName {
  [__itemName release_stub];
  __itemName = nil;
  __itemName_isset = NO;
}

- (NSString *) itemNameEn {
  return [[__itemNameEn retain_stub] autorelease_stub];
}

- (void) setItemNameEn: (NSString *) itemNameEn {
  [itemNameEn retain_stub];
  [__itemNameEn release_stub];
  __itemNameEn = itemNameEn;
  __itemNameEn_isset = YES;
}

- (BOOL) itemNameEnIsSet {
  return __itemNameEn_isset;
}

- (void) unsetItemNameEn {
  [__itemNameEn release_stub];
  __itemNameEn = nil;
  __itemNameEn_isset = NO;
}

- (NSString *) itemValue {
  return [[__itemValue retain_stub] autorelease_stub];
}

- (void) setItemValue: (NSString *) itemValue {
  [itemValue retain_stub];
  [__itemValue release_stub];
  __itemValue = itemValue;
  __itemValue_isset = YES;
}

- (BOOL) itemValueIsSet {
  return __itemValue_isset;
}

- (void) unsetItemValue {
  [__itemValue release_stub];
  __itemValue = nil;
  __itemValue_isset = NO;
}

- (NSString *) refValue {
  return [[__refValue retain_stub] autorelease_stub];
}

- (void) setRefValue: (NSString *) refValue {
  [refValue retain_stub];
  [__refValue release_stub];
  __refValue = refValue;
  __refValue_isset = YES;
}

- (BOOL) refValueIsSet {
  return __refValue_isset;
}

- (void) unsetRefValue {
  [__refValue release_stub];
  __refValue = nil;
  __refValue_isset = NO;
}

- (NSString *) itemUnit {
  return [[__itemUnit retain_stub] autorelease_stub];
}

- (void) setItemUnit: (NSString *) itemUnit {
  [itemUnit retain_stub];
  [__itemUnit release_stub];
  __itemUnit = itemUnit;
  __itemUnit_isset = YES;
}

- (BOOL) itemUnitIsSet {
  return __itemUnit_isset;
}

- (void) unsetItemUnit {
  [__itemUnit release_stub];
  __itemUnit = nil;
  __itemUnit_isset = NO;
}

- (NSString *) resultMark {
  return [[__resultMark retain_stub] autorelease_stub];
}

- (void) setResultMark: (NSString *) resultMark {
  [resultMark retain_stub];
  [__resultMark release_stub];
  __resultMark = resultMark;
  __resultMark_isset = YES;
}

- (BOOL) resultMarkIsSet {
  return __resultMark_isset;
}

- (void) unsetResultMark {
  [__resultMark release_stub];
  __resultMark = nil;
  __resultMark_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setItemName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setItemNameEn: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setItemValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRefValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setItemUnit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setResultMark: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LisItemDto"];
  if (__itemName_isset) {
    if (__itemName != nil) {
      [outProtocol writeFieldBeginWithName: @"itemName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __itemName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__itemNameEn_isset) {
    if (__itemNameEn != nil) {
      [outProtocol writeFieldBeginWithName: @"itemNameEn" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __itemNameEn];
      [outProtocol writeFieldEnd];
    }
  }
  if (__itemValue_isset) {
    if (__itemValue != nil) {
      [outProtocol writeFieldBeginWithName: @"itemValue" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __itemValue];
      [outProtocol writeFieldEnd];
    }
  }
  if (__refValue_isset) {
    if (__refValue != nil) {
      [outProtocol writeFieldBeginWithName: @"refValue" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __refValue];
      [outProtocol writeFieldEnd];
    }
  }
  if (__itemUnit_isset) {
    if (__itemUnit != nil) {
      [outProtocol writeFieldBeginWithName: @"itemUnit" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __itemUnit];
      [outProtocol writeFieldEnd];
    }
  }
  if (__resultMark_isset) {
    if (__resultMark != nil) {
      [outProtocol writeFieldBeginWithName: @"resultMark" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __resultMark];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFLisItemDto("];
  [ms appendString: @"itemName:"];
  [ms appendFormat: @"\"%@\"", __itemName];
  [ms appendString: @",itemNameEn:"];
  [ms appendFormat: @"\"%@\"", __itemNameEn];
  [ms appendString: @",itemValue:"];
  [ms appendFormat: @"\"%@\"", __itemValue];
  [ms appendString: @",refValue:"];
  [ms appendFormat: @"\"%@\"", __refValue];
  [ms appendString: @",itemUnit:"];
  [ms appendFormat: @"\"%@\"", __itemUnit];
  [ms appendString: @",resultMark:"];
  [ms appendFormat: @"\"%@\"", __resultMark];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFMedInfoDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDistrictName: (NSString *) districtName medDate: (NSString *) medDate orderDate: (NSString *) orderDate fee: (NSString *) fee dr: (NSString *) dr patient: (NSString *) patient hospId: (int32_t) hospId hospName: (NSString *) hospName dept: (NSString *) dept statusId: (int32_t) statusId status: (NSString *) status regId: (int64_t) regId hisRegNo: (NSString *) hisRegNo orderId: (int64_t) orderId flowered: (int32_t) flowered headImg: (NSString *) headImg levelName: (NSString *) levelName cardNo: (NSString *) cardNo evalStatus: (int32_t) evalStatus drId: (int64_t) drId patientId: (int64_t) patientId isSymptomCommit: (int32_t) isSymptomCommit patientHead: (NSString *) patientHead regStatus: (NSString *) regStatus stopExplain: (NSString *) stopExplain deptId: (int64_t) deptId gender: (int32_t) gender relationId: (int32_t) relationId checkInStatus: (NSString *) checkInStatus isEmrOut: (int32_t) isEmrOut regType: (NSString *) regType pointName: (NSString *) pointName isStInsPaid: (int32_t) isStInsPaid bornDate: (NSString *) bornDate isNiox: (int32_t) isNiox
{
  self = [super init];
  __districtName = [districtName retain_stub];
  __districtName_isset = YES;
  __medDate = [medDate retain_stub];
  __medDate_isset = YES;
  __orderDate = [orderDate retain_stub];
  __orderDate_isset = YES;
  __fee = [fee retain_stub];
  __fee_isset = YES;
  __dr = [dr retain_stub];
  __dr_isset = YES;
  __patient = [patient retain_stub];
  __patient_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __hospName = [hospName retain_stub];
  __hospName_isset = YES;
  __dept = [dept retain_stub];
  __dept_isset = YES;
  __statusId = statusId;
  __statusId_isset = YES;
  __status = [status retain_stub];
  __status_isset = YES;
  __regId = regId;
  __regId_isset = YES;
  __hisRegNo = [hisRegNo retain_stub];
  __hisRegNo_isset = YES;
  __orderId = orderId;
  __orderId_isset = YES;
  __flowered = flowered;
  __flowered_isset = YES;
  __headImg = [headImg retain_stub];
  __headImg_isset = YES;
  __levelName = [levelName retain_stub];
  __levelName_isset = YES;
  __cardNo = [cardNo retain_stub];
  __cardNo_isset = YES;
  __evalStatus = evalStatus;
  __evalStatus_isset = YES;
  __drId = drId;
  __drId_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __isSymptomCommit = isSymptomCommit;
  __isSymptomCommit_isset = YES;
  __patientHead = [patientHead retain_stub];
  __patientHead_isset = YES;
  __regStatus = [regStatus retain_stub];
  __regStatus_isset = YES;
  __stopExplain = [stopExplain retain_stub];
  __stopExplain_isset = YES;
  __deptId = deptId;
  __deptId_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __relationId = relationId;
  __relationId_isset = YES;
  __checkInStatus = [checkInStatus retain_stub];
  __checkInStatus_isset = YES;
  __isEmrOut = isEmrOut;
  __isEmrOut_isset = YES;
  __regType = [regType retain_stub];
  __regType_isset = YES;
  __pointName = [pointName retain_stub];
  __pointName_isset = YES;
  __isStInsPaid = isStInsPaid;
  __isStInsPaid_isset = YES;
  __bornDate = [bornDate retain_stub];
  __bornDate_isset = YES;
  __isNiox = isNiox;
  __isNiox_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"districtName"])
  {
    __districtName = [[decoder decodeObjectForKey: @"districtName"] retain_stub];
    __districtName_isset = YES;
  }
  if ([decoder containsValueForKey: @"medDate"])
  {
    __medDate = [[decoder decodeObjectForKey: @"medDate"] retain_stub];
    __medDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderDate"])
  {
    __orderDate = [[decoder decodeObjectForKey: @"orderDate"] retain_stub];
    __orderDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"fee"])
  {
    __fee = [[decoder decodeObjectForKey: @"fee"] retain_stub];
    __fee_isset = YES;
  }
  if ([decoder containsValueForKey: @"dr"])
  {
    __dr = [[decoder decodeObjectForKey: @"dr"] retain_stub];
    __dr_isset = YES;
  }
  if ([decoder containsValueForKey: @"patient"])
  {
    __patient = [[decoder decodeObjectForKey: @"patient"] retain_stub];
    __patient_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospName"])
  {
    __hospName = [[decoder decodeObjectForKey: @"hospName"] retain_stub];
    __hospName_isset = YES;
  }
  if ([decoder containsValueForKey: @"dept"])
  {
    __dept = [[decoder decodeObjectForKey: @"dept"] retain_stub];
    __dept_isset = YES;
  }
  if ([decoder containsValueForKey: @"statusId"])
  {
    __statusId = [decoder decodeInt32ForKey: @"statusId"];
    __statusId_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [[decoder decodeObjectForKey: @"status"] retain_stub];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [decoder decodeInt64ForKey: @"regId"];
    __regId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hisRegNo"])
  {
    __hisRegNo = [[decoder decodeObjectForKey: @"hisRegNo"] retain_stub];
    __hisRegNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [decoder decodeInt64ForKey: @"orderId"];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"flowered"])
  {
    __flowered = [decoder decodeInt32ForKey: @"flowered"];
    __flowered_isset = YES;
  }
  if ([decoder containsValueForKey: @"headImg"])
  {
    __headImg = [[decoder decodeObjectForKey: @"headImg"] retain_stub];
    __headImg_isset = YES;
  }
  if ([decoder containsValueForKey: @"levelName"])
  {
    __levelName = [[decoder decodeObjectForKey: @"levelName"] retain_stub];
    __levelName_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardNo"])
  {
    __cardNo = [[decoder decodeObjectForKey: @"cardNo"] retain_stub];
    __cardNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"evalStatus"])
  {
    __evalStatus = [decoder decodeInt32ForKey: @"evalStatus"];
    __evalStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"drId"])
  {
    __drId = [decoder decodeInt64ForKey: @"drId"];
    __drId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"isSymptomCommit"])
  {
    __isSymptomCommit = [decoder decodeInt32ForKey: @"isSymptomCommit"];
    __isSymptomCommit_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientHead"])
  {
    __patientHead = [[decoder decodeObjectForKey: @"patientHead"] retain_stub];
    __patientHead_isset = YES;
  }
  if ([decoder containsValueForKey: @"regStatus"])
  {
    __regStatus = [[decoder decodeObjectForKey: @"regStatus"] retain_stub];
    __regStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"stopExplain"])
  {
    __stopExplain = [[decoder decodeObjectForKey: @"stopExplain"] retain_stub];
    __stopExplain_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptId"])
  {
    __deptId = [decoder decodeInt64ForKey: @"deptId"];
    __deptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeInt32ForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"relationId"])
  {
    __relationId = [decoder decodeInt32ForKey: @"relationId"];
    __relationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"checkInStatus"])
  {
    __checkInStatus = [[decoder decodeObjectForKey: @"checkInStatus"] retain_stub];
    __checkInStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"isEmrOut"])
  {
    __isEmrOut = [decoder decodeInt32ForKey: @"isEmrOut"];
    __isEmrOut_isset = YES;
  }
  if ([decoder containsValueForKey: @"regType"])
  {
    __regType = [[decoder decodeObjectForKey: @"regType"] retain_stub];
    __regType_isset = YES;
  }
  if ([decoder containsValueForKey: @"pointName"])
  {
    __pointName = [[decoder decodeObjectForKey: @"pointName"] retain_stub];
    __pointName_isset = YES;
  }
  if ([decoder containsValueForKey: @"isStInsPaid"])
  {
    __isStInsPaid = [decoder decodeInt32ForKey: @"isStInsPaid"];
    __isStInsPaid_isset = YES;
  }
  if ([decoder containsValueForKey: @"bornDate"])
  {
    __bornDate = [[decoder decodeObjectForKey: @"bornDate"] retain_stub];
    __bornDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"isNiox"])
  {
    __isNiox = [decoder decodeInt32ForKey: @"isNiox"];
    __isNiox_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__districtName_isset)
  {
    [encoder encodeObject: __districtName forKey: @"districtName"];
  }
  if (__medDate_isset)
  {
    [encoder encodeObject: __medDate forKey: @"medDate"];
  }
  if (__orderDate_isset)
  {
    [encoder encodeObject: __orderDate forKey: @"orderDate"];
  }
  if (__fee_isset)
  {
    [encoder encodeObject: __fee forKey: @"fee"];
  }
  if (__dr_isset)
  {
    [encoder encodeObject: __dr forKey: @"dr"];
  }
  if (__patient_isset)
  {
    [encoder encodeObject: __patient forKey: @"patient"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__hospName_isset)
  {
    [encoder encodeObject: __hospName forKey: @"hospName"];
  }
  if (__dept_isset)
  {
    [encoder encodeObject: __dept forKey: @"dept"];
  }
  if (__statusId_isset)
  {
    [encoder encodeInt32: __statusId forKey: @"statusId"];
  }
  if (__status_isset)
  {
    [encoder encodeObject: __status forKey: @"status"];
  }
  if (__regId_isset)
  {
    [encoder encodeInt64: __regId forKey: @"regId"];
  }
  if (__hisRegNo_isset)
  {
    [encoder encodeObject: __hisRegNo forKey: @"hisRegNo"];
  }
  if (__orderId_isset)
  {
    [encoder encodeInt64: __orderId forKey: @"orderId"];
  }
  if (__flowered_isset)
  {
    [encoder encodeInt32: __flowered forKey: @"flowered"];
  }
  if (__headImg_isset)
  {
    [encoder encodeObject: __headImg forKey: @"headImg"];
  }
  if (__levelName_isset)
  {
    [encoder encodeObject: __levelName forKey: @"levelName"];
  }
  if (__cardNo_isset)
  {
    [encoder encodeObject: __cardNo forKey: @"cardNo"];
  }
  if (__evalStatus_isset)
  {
    [encoder encodeInt32: __evalStatus forKey: @"evalStatus"];
  }
  if (__drId_isset)
  {
    [encoder encodeInt64: __drId forKey: @"drId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__isSymptomCommit_isset)
  {
    [encoder encodeInt32: __isSymptomCommit forKey: @"isSymptomCommit"];
  }
  if (__patientHead_isset)
  {
    [encoder encodeObject: __patientHead forKey: @"patientHead"];
  }
  if (__regStatus_isset)
  {
    [encoder encodeObject: __regStatus forKey: @"regStatus"];
  }
  if (__stopExplain_isset)
  {
    [encoder encodeObject: __stopExplain forKey: @"stopExplain"];
  }
  if (__deptId_isset)
  {
    [encoder encodeInt64: __deptId forKey: @"deptId"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt32: __gender forKey: @"gender"];
  }
  if (__relationId_isset)
  {
    [encoder encodeInt32: __relationId forKey: @"relationId"];
  }
  if (__checkInStatus_isset)
  {
    [encoder encodeObject: __checkInStatus forKey: @"checkInStatus"];
  }
  if (__isEmrOut_isset)
  {
    [encoder encodeInt32: __isEmrOut forKey: @"isEmrOut"];
  }
  if (__regType_isset)
  {
    [encoder encodeObject: __regType forKey: @"regType"];
  }
  if (__pointName_isset)
  {
    [encoder encodeObject: __pointName forKey: @"pointName"];
  }
  if (__isStInsPaid_isset)
  {
    [encoder encodeInt32: __isStInsPaid forKey: @"isStInsPaid"];
  }
  if (__bornDate_isset)
  {
    [encoder encodeObject: __bornDate forKey: @"bornDate"];
  }
  if (__isNiox_isset)
  {
    [encoder encodeInt32: __isNiox forKey: @"isNiox"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __districtName_isset ? 2654435761 : 0;
  if (__districtName_isset)
  {
    hash = (hash * 31) ^ [__districtName hash];
  }
  hash = (hash * 31) ^ __medDate_isset ? 2654435761 : 0;
  if (__medDate_isset)
  {
    hash = (hash * 31) ^ [__medDate hash];
  }
  hash = (hash * 31) ^ __orderDate_isset ? 2654435761 : 0;
  if (__orderDate_isset)
  {
    hash = (hash * 31) ^ [__orderDate hash];
  }
  hash = (hash * 31) ^ __fee_isset ? 2654435761 : 0;
  if (__fee_isset)
  {
    hash = (hash * 31) ^ [__fee hash];
  }
  hash = (hash * 31) ^ __dr_isset ? 2654435761 : 0;
  if (__dr_isset)
  {
    hash = (hash * 31) ^ [__dr hash];
  }
  hash = (hash * 31) ^ __patient_isset ? 2654435761 : 0;
  if (__patient_isset)
  {
    hash = (hash * 31) ^ [__patient hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __hospName_isset ? 2654435761 : 0;
  if (__hospName_isset)
  {
    hash = (hash * 31) ^ [__hospName hash];
  }
  hash = (hash * 31) ^ __dept_isset ? 2654435761 : 0;
  if (__dept_isset)
  {
    hash = (hash * 31) ^ [__dept hash];
  }
  hash = (hash * 31) ^ __statusId_isset ? 2654435761 : 0;
  if (__statusId_isset)
  {
    hash = (hash * 31) ^ [@(__statusId) hash];
  }
  hash = (hash * 31) ^ __status_isset ? 2654435761 : 0;
  if (__status_isset)
  {
    hash = (hash * 31) ^ [__status hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [@(__regId) hash];
  }
  hash = (hash * 31) ^ __hisRegNo_isset ? 2654435761 : 0;
  if (__hisRegNo_isset)
  {
    hash = (hash * 31) ^ [__hisRegNo hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [@(__orderId) hash];
  }
  hash = (hash * 31) ^ __flowered_isset ? 2654435761 : 0;
  if (__flowered_isset)
  {
    hash = (hash * 31) ^ [@(__flowered) hash];
  }
  hash = (hash * 31) ^ __headImg_isset ? 2654435761 : 0;
  if (__headImg_isset)
  {
    hash = (hash * 31) ^ [__headImg hash];
  }
  hash = (hash * 31) ^ __levelName_isset ? 2654435761 : 0;
  if (__levelName_isset)
  {
    hash = (hash * 31) ^ [__levelName hash];
  }
  hash = (hash * 31) ^ __cardNo_isset ? 2654435761 : 0;
  if (__cardNo_isset)
  {
    hash = (hash * 31) ^ [__cardNo hash];
  }
  hash = (hash * 31) ^ __evalStatus_isset ? 2654435761 : 0;
  if (__evalStatus_isset)
  {
    hash = (hash * 31) ^ [@(__evalStatus) hash];
  }
  hash = (hash * 31) ^ __drId_isset ? 2654435761 : 0;
  if (__drId_isset)
  {
    hash = (hash * 31) ^ [@(__drId) hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __isSymptomCommit_isset ? 2654435761 : 0;
  if (__isSymptomCommit_isset)
  {
    hash = (hash * 31) ^ [@(__isSymptomCommit) hash];
  }
  hash = (hash * 31) ^ __patientHead_isset ? 2654435761 : 0;
  if (__patientHead_isset)
  {
    hash = (hash * 31) ^ [__patientHead hash];
  }
  hash = (hash * 31) ^ __regStatus_isset ? 2654435761 : 0;
  if (__regStatus_isset)
  {
    hash = (hash * 31) ^ [__regStatus hash];
  }
  hash = (hash * 31) ^ __stopExplain_isset ? 2654435761 : 0;
  if (__stopExplain_isset)
  {
    hash = (hash * 31) ^ [__stopExplain hash];
  }
  hash = (hash * 31) ^ __deptId_isset ? 2654435761 : 0;
  if (__deptId_isset)
  {
    hash = (hash * 31) ^ [@(__deptId) hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [@(__gender) hash];
  }
  hash = (hash * 31) ^ __relationId_isset ? 2654435761 : 0;
  if (__relationId_isset)
  {
    hash = (hash * 31) ^ [@(__relationId) hash];
  }
  hash = (hash * 31) ^ __checkInStatus_isset ? 2654435761 : 0;
  if (__checkInStatus_isset)
  {
    hash = (hash * 31) ^ [__checkInStatus hash];
  }
  hash = (hash * 31) ^ __isEmrOut_isset ? 2654435761 : 0;
  if (__isEmrOut_isset)
  {
    hash = (hash * 31) ^ [@(__isEmrOut) hash];
  }
  hash = (hash * 31) ^ __regType_isset ? 2654435761 : 0;
  if (__regType_isset)
  {
    hash = (hash * 31) ^ [__regType hash];
  }
  hash = (hash * 31) ^ __pointName_isset ? 2654435761 : 0;
  if (__pointName_isset)
  {
    hash = (hash * 31) ^ [__pointName hash];
  }
  hash = (hash * 31) ^ __isStInsPaid_isset ? 2654435761 : 0;
  if (__isStInsPaid_isset)
  {
    hash = (hash * 31) ^ [@(__isStInsPaid) hash];
  }
  hash = (hash * 31) ^ __bornDate_isset ? 2654435761 : 0;
  if (__bornDate_isset)
  {
    hash = (hash * 31) ^ [__bornDate hash];
  }
  hash = (hash * 31) ^ __isNiox_isset ? 2654435761 : 0;
  if (__isNiox_isset)
  {
    hash = (hash * 31) ^ [@(__isNiox) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFMedInfoDto class]]) {
    return NO;
  }
  NXTFMedInfoDto *other = (NXTFMedInfoDto *)anObject;
  if ((__districtName_isset != other->__districtName_isset) ||
      (__districtName_isset && ((__districtName || other->__districtName) && ![__districtName isEqual:other->__districtName]))) {
    return NO;
  }
  if ((__medDate_isset != other->__medDate_isset) ||
      (__medDate_isset && ((__medDate || other->__medDate) && ![__medDate isEqual:other->__medDate]))) {
    return NO;
  }
  if ((__orderDate_isset != other->__orderDate_isset) ||
      (__orderDate_isset && ((__orderDate || other->__orderDate) && ![__orderDate isEqual:other->__orderDate]))) {
    return NO;
  }
  if ((__fee_isset != other->__fee_isset) ||
      (__fee_isset && ((__fee || other->__fee) && ![__fee isEqual:other->__fee]))) {
    return NO;
  }
  if ((__dr_isset != other->__dr_isset) ||
      (__dr_isset && ((__dr || other->__dr) && ![__dr isEqual:other->__dr]))) {
    return NO;
  }
  if ((__patient_isset != other->__patient_isset) ||
      (__patient_isset && ((__patient || other->__patient) && ![__patient isEqual:other->__patient]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__hospName_isset != other->__hospName_isset) ||
      (__hospName_isset && ((__hospName || other->__hospName) && ![__hospName isEqual:other->__hospName]))) {
    return NO;
  }
  if ((__dept_isset != other->__dept_isset) ||
      (__dept_isset && ((__dept || other->__dept) && ![__dept isEqual:other->__dept]))) {
    return NO;
  }
  if ((__statusId_isset != other->__statusId_isset) ||
      (__statusId_isset && (__statusId != other->__statusId))) {
    return NO;
  }
  if ((__status_isset != other->__status_isset) ||
      (__status_isset && ((__status || other->__status) && ![__status isEqual:other->__status]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && (__regId != other->__regId))) {
    return NO;
  }
  if ((__hisRegNo_isset != other->__hisRegNo_isset) ||
      (__hisRegNo_isset && ((__hisRegNo || other->__hisRegNo) && ![__hisRegNo isEqual:other->__hisRegNo]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && (__orderId != other->__orderId))) {
    return NO;
  }
  if ((__flowered_isset != other->__flowered_isset) ||
      (__flowered_isset && (__flowered != other->__flowered))) {
    return NO;
  }
  if ((__headImg_isset != other->__headImg_isset) ||
      (__headImg_isset && ((__headImg || other->__headImg) && ![__headImg isEqual:other->__headImg]))) {
    return NO;
  }
  if ((__levelName_isset != other->__levelName_isset) ||
      (__levelName_isset && ((__levelName || other->__levelName) && ![__levelName isEqual:other->__levelName]))) {
    return NO;
  }
  if ((__cardNo_isset != other->__cardNo_isset) ||
      (__cardNo_isset && ((__cardNo || other->__cardNo) && ![__cardNo isEqual:other->__cardNo]))) {
    return NO;
  }
  if ((__evalStatus_isset != other->__evalStatus_isset) ||
      (__evalStatus_isset && (__evalStatus != other->__evalStatus))) {
    return NO;
  }
  if ((__drId_isset != other->__drId_isset) ||
      (__drId_isset && (__drId != other->__drId))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__isSymptomCommit_isset != other->__isSymptomCommit_isset) ||
      (__isSymptomCommit_isset && (__isSymptomCommit != other->__isSymptomCommit))) {
    return NO;
  }
  if ((__patientHead_isset != other->__patientHead_isset) ||
      (__patientHead_isset && ((__patientHead || other->__patientHead) && ![__patientHead isEqual:other->__patientHead]))) {
    return NO;
  }
  if ((__regStatus_isset != other->__regStatus_isset) ||
      (__regStatus_isset && ((__regStatus || other->__regStatus) && ![__regStatus isEqual:other->__regStatus]))) {
    return NO;
  }
  if ((__stopExplain_isset != other->__stopExplain_isset) ||
      (__stopExplain_isset && ((__stopExplain || other->__stopExplain) && ![__stopExplain isEqual:other->__stopExplain]))) {
    return NO;
  }
  if ((__deptId_isset != other->__deptId_isset) ||
      (__deptId_isset && (__deptId != other->__deptId))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && (__gender != other->__gender))) {
    return NO;
  }
  if ((__relationId_isset != other->__relationId_isset) ||
      (__relationId_isset && (__relationId != other->__relationId))) {
    return NO;
  }
  if ((__checkInStatus_isset != other->__checkInStatus_isset) ||
      (__checkInStatus_isset && ((__checkInStatus || other->__checkInStatus) && ![__checkInStatus isEqual:other->__checkInStatus]))) {
    return NO;
  }
  if ((__isEmrOut_isset != other->__isEmrOut_isset) ||
      (__isEmrOut_isset && (__isEmrOut != other->__isEmrOut))) {
    return NO;
  }
  if ((__regType_isset != other->__regType_isset) ||
      (__regType_isset && ((__regType || other->__regType) && ![__regType isEqual:other->__regType]))) {
    return NO;
  }
  if ((__pointName_isset != other->__pointName_isset) ||
      (__pointName_isset && ((__pointName || other->__pointName) && ![__pointName isEqual:other->__pointName]))) {
    return NO;
  }
  if ((__isStInsPaid_isset != other->__isStInsPaid_isset) ||
      (__isStInsPaid_isset && (__isStInsPaid != other->__isStInsPaid))) {
    return NO;
  }
  if ((__bornDate_isset != other->__bornDate_isset) ||
      (__bornDate_isset && ((__bornDate || other->__bornDate) && ![__bornDate isEqual:other->__bornDate]))) {
    return NO;
  }
  if ((__isNiox_isset != other->__isNiox_isset) ||
      (__isNiox_isset && (__isNiox != other->__isNiox))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__districtName release_stub];
  [__medDate release_stub];
  [__orderDate release_stub];
  [__fee release_stub];
  [__dr release_stub];
  [__patient release_stub];
  [__hospName release_stub];
  [__dept release_stub];
  [__status release_stub];
  [__hisRegNo release_stub];
  [__headImg release_stub];
  [__levelName release_stub];
  [__cardNo release_stub];
  [__patientHead release_stub];
  [__regStatus release_stub];
  [__stopExplain release_stub];
  [__checkInStatus release_stub];
  [__regType release_stub];
  [__pointName release_stub];
  [__bornDate release_stub];
  [super dealloc_stub];
}

- (NSString *) districtName {
  return [[__districtName retain_stub] autorelease_stub];
}

- (void) setDistrictName: (NSString *) districtName {
  [districtName retain_stub];
  [__districtName release_stub];
  __districtName = districtName;
  __districtName_isset = YES;
}

- (BOOL) districtNameIsSet {
  return __districtName_isset;
}

- (void) unsetDistrictName {
  [__districtName release_stub];
  __districtName = nil;
  __districtName_isset = NO;
}

- (NSString *) medDate {
  return [[__medDate retain_stub] autorelease_stub];
}

- (void) setMedDate: (NSString *) medDate {
  [medDate retain_stub];
  [__medDate release_stub];
  __medDate = medDate;
  __medDate_isset = YES;
}

- (BOOL) medDateIsSet {
  return __medDate_isset;
}

- (void) unsetMedDate {
  [__medDate release_stub];
  __medDate = nil;
  __medDate_isset = NO;
}

- (NSString *) orderDate {
  return [[__orderDate retain_stub] autorelease_stub];
}

- (void) setOrderDate: (NSString *) orderDate {
  [orderDate retain_stub];
  [__orderDate release_stub];
  __orderDate = orderDate;
  __orderDate_isset = YES;
}

- (BOOL) orderDateIsSet {
  return __orderDate_isset;
}

- (void) unsetOrderDate {
  [__orderDate release_stub];
  __orderDate = nil;
  __orderDate_isset = NO;
}

- (NSString *) fee {
  return [[__fee retain_stub] autorelease_stub];
}

- (void) setFee: (NSString *) fee {
  [fee retain_stub];
  [__fee release_stub];
  __fee = fee;
  __fee_isset = YES;
}

- (BOOL) feeIsSet {
  return __fee_isset;
}

- (void) unsetFee {
  [__fee release_stub];
  __fee = nil;
  __fee_isset = NO;
}

- (NSString *) dr {
  return [[__dr retain_stub] autorelease_stub];
}

- (void) setDr: (NSString *) dr {
  [dr retain_stub];
  [__dr release_stub];
  __dr = dr;
  __dr_isset = YES;
}

- (BOOL) drIsSet {
  return __dr_isset;
}

- (void) unsetDr {
  [__dr release_stub];
  __dr = nil;
  __dr_isset = NO;
}

- (NSString *) patient {
  return [[__patient retain_stub] autorelease_stub];
}

- (void) setPatient: (NSString *) patient {
  [patient retain_stub];
  [__patient release_stub];
  __patient = patient;
  __patient_isset = YES;
}

- (BOOL) patientIsSet {
  return __patient_isset;
}

- (void) unsetPatient {
  [__patient release_stub];
  __patient = nil;
  __patient_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (NSString *) hospName {
  return [[__hospName retain_stub] autorelease_stub];
}

- (void) setHospName: (NSString *) hospName {
  [hospName retain_stub];
  [__hospName release_stub];
  __hospName = hospName;
  __hospName_isset = YES;
}

- (BOOL) hospNameIsSet {
  return __hospName_isset;
}

- (void) unsetHospName {
  [__hospName release_stub];
  __hospName = nil;
  __hospName_isset = NO;
}

- (NSString *) dept {
  return [[__dept retain_stub] autorelease_stub];
}

- (void) setDept: (NSString *) dept {
  [dept retain_stub];
  [__dept release_stub];
  __dept = dept;
  __dept_isset = YES;
}

- (BOOL) deptIsSet {
  return __dept_isset;
}

- (void) unsetDept {
  [__dept release_stub];
  __dept = nil;
  __dept_isset = NO;
}

- (int32_t) statusId {
  return __statusId;
}

- (void) setStatusId: (int32_t) statusId {
  __statusId = statusId;
  __statusId_isset = YES;
}

- (BOOL) statusIdIsSet {
  return __statusId_isset;
}

- (void) unsetStatusId {
  __statusId_isset = NO;
}

- (NSString *) status {
  return [[__status retain_stub] autorelease_stub];
}

- (void) setStatus: (NSString *) status {
  [status retain_stub];
  [__status release_stub];
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  [__status release_stub];
  __status = nil;
  __status_isset = NO;
}

- (int64_t) regId {
  return __regId;
}

- (void) setRegId: (int64_t) regId {
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  __regId_isset = NO;
}

- (NSString *) hisRegNo {
  return [[__hisRegNo retain_stub] autorelease_stub];
}

- (void) setHisRegNo: (NSString *) hisRegNo {
  [hisRegNo retain_stub];
  [__hisRegNo release_stub];
  __hisRegNo = hisRegNo;
  __hisRegNo_isset = YES;
}

- (BOOL) hisRegNoIsSet {
  return __hisRegNo_isset;
}

- (void) unsetHisRegNo {
  [__hisRegNo release_stub];
  __hisRegNo = nil;
  __hisRegNo_isset = NO;
}

- (int64_t) orderId {
  return __orderId;
}

- (void) setOrderId: (int64_t) orderId {
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  __orderId_isset = NO;
}

- (int32_t) flowered {
  return __flowered;
}

- (void) setFlowered: (int32_t) flowered {
  __flowered = flowered;
  __flowered_isset = YES;
}

- (BOOL) floweredIsSet {
  return __flowered_isset;
}

- (void) unsetFlowered {
  __flowered_isset = NO;
}

- (NSString *) headImg {
  return [[__headImg retain_stub] autorelease_stub];
}

- (void) setHeadImg: (NSString *) headImg {
  [headImg retain_stub];
  [__headImg release_stub];
  __headImg = headImg;
  __headImg_isset = YES;
}

- (BOOL) headImgIsSet {
  return __headImg_isset;
}

- (void) unsetHeadImg {
  [__headImg release_stub];
  __headImg = nil;
  __headImg_isset = NO;
}

- (NSString *) levelName {
  return [[__levelName retain_stub] autorelease_stub];
}

- (void) setLevelName: (NSString *) levelName {
  [levelName retain_stub];
  [__levelName release_stub];
  __levelName = levelName;
  __levelName_isset = YES;
}

- (BOOL) levelNameIsSet {
  return __levelName_isset;
}

- (void) unsetLevelName {
  [__levelName release_stub];
  __levelName = nil;
  __levelName_isset = NO;
}

- (NSString *) cardNo {
  return [[__cardNo retain_stub] autorelease_stub];
}

- (void) setCardNo: (NSString *) cardNo {
  [cardNo retain_stub];
  [__cardNo release_stub];
  __cardNo = cardNo;
  __cardNo_isset = YES;
}

- (BOOL) cardNoIsSet {
  return __cardNo_isset;
}

- (void) unsetCardNo {
  [__cardNo release_stub];
  __cardNo = nil;
  __cardNo_isset = NO;
}

- (int32_t) evalStatus {
  return __evalStatus;
}

- (void) setEvalStatus: (int32_t) evalStatus {
  __evalStatus = evalStatus;
  __evalStatus_isset = YES;
}

- (BOOL) evalStatusIsSet {
  return __evalStatus_isset;
}

- (void) unsetEvalStatus {
  __evalStatus_isset = NO;
}

- (int64_t) drId {
  return __drId;
}

- (void) setDrId: (int64_t) drId {
  __drId = drId;
  __drId_isset = YES;
}

- (BOOL) drIdIsSet {
  return __drId_isset;
}

- (void) unsetDrId {
  __drId_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (int32_t) isSymptomCommit {
  return __isSymptomCommit;
}

- (void) setIsSymptomCommit: (int32_t) isSymptomCommit {
  __isSymptomCommit = isSymptomCommit;
  __isSymptomCommit_isset = YES;
}

- (BOOL) isSymptomCommitIsSet {
  return __isSymptomCommit_isset;
}

- (void) unsetIsSymptomCommit {
  __isSymptomCommit_isset = NO;
}

- (NSString *) patientHead {
  return [[__patientHead retain_stub] autorelease_stub];
}

- (void) setPatientHead: (NSString *) patientHead {
  [patientHead retain_stub];
  [__patientHead release_stub];
  __patientHead = patientHead;
  __patientHead_isset = YES;
}

- (BOOL) patientHeadIsSet {
  return __patientHead_isset;
}

- (void) unsetPatientHead {
  [__patientHead release_stub];
  __patientHead = nil;
  __patientHead_isset = NO;
}

- (NSString *) regStatus {
  return [[__regStatus retain_stub] autorelease_stub];
}

- (void) setRegStatus: (NSString *) regStatus {
  [regStatus retain_stub];
  [__regStatus release_stub];
  __regStatus = regStatus;
  __regStatus_isset = YES;
}

- (BOOL) regStatusIsSet {
  return __regStatus_isset;
}

- (void) unsetRegStatus {
  [__regStatus release_stub];
  __regStatus = nil;
  __regStatus_isset = NO;
}

- (NSString *) stopExplain {
  return [[__stopExplain retain_stub] autorelease_stub];
}

- (void) setStopExplain: (NSString *) stopExplain {
  [stopExplain retain_stub];
  [__stopExplain release_stub];
  __stopExplain = stopExplain;
  __stopExplain_isset = YES;
}

- (BOOL) stopExplainIsSet {
  return __stopExplain_isset;
}

- (void) unsetStopExplain {
  [__stopExplain release_stub];
  __stopExplain = nil;
  __stopExplain_isset = NO;
}

- (int64_t) deptId {
  return __deptId;
}

- (void) setDeptId: (int64_t) deptId {
  __deptId = deptId;
  __deptId_isset = YES;
}

- (BOOL) deptIdIsSet {
  return __deptId_isset;
}

- (void) unsetDeptId {
  __deptId_isset = NO;
}

- (int32_t) gender {
  return __gender;
}

- (void) setGender: (int32_t) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (int32_t) relationId {
  return __relationId;
}

- (void) setRelationId: (int32_t) relationId {
  __relationId = relationId;
  __relationId_isset = YES;
}

- (BOOL) relationIdIsSet {
  return __relationId_isset;
}

- (void) unsetRelationId {
  __relationId_isset = NO;
}

- (NSString *) checkInStatus {
  return [[__checkInStatus retain_stub] autorelease_stub];
}

- (void) setCheckInStatus: (NSString *) checkInStatus {
  [checkInStatus retain_stub];
  [__checkInStatus release_stub];
  __checkInStatus = checkInStatus;
  __checkInStatus_isset = YES;
}

- (BOOL) checkInStatusIsSet {
  return __checkInStatus_isset;
}

- (void) unsetCheckInStatus {
  [__checkInStatus release_stub];
  __checkInStatus = nil;
  __checkInStatus_isset = NO;
}

- (int32_t) isEmrOut {
  return __isEmrOut;
}

- (void) setIsEmrOut: (int32_t) isEmrOut {
  __isEmrOut = isEmrOut;
  __isEmrOut_isset = YES;
}

- (BOOL) isEmrOutIsSet {
  return __isEmrOut_isset;
}

- (void) unsetIsEmrOut {
  __isEmrOut_isset = NO;
}

- (NSString *) regType {
  return [[__regType retain_stub] autorelease_stub];
}

- (void) setRegType: (NSString *) regType {
  [regType retain_stub];
  [__regType release_stub];
  __regType = regType;
  __regType_isset = YES;
}

- (BOOL) regTypeIsSet {
  return __regType_isset;
}

- (void) unsetRegType {
  [__regType release_stub];
  __regType = nil;
  __regType_isset = NO;
}

- (NSString *) pointName {
  return [[__pointName retain_stub] autorelease_stub];
}

- (void) setPointName: (NSString *) pointName {
  [pointName retain_stub];
  [__pointName release_stub];
  __pointName = pointName;
  __pointName_isset = YES;
}

- (BOOL) pointNameIsSet {
  return __pointName_isset;
}

- (void) unsetPointName {
  [__pointName release_stub];
  __pointName = nil;
  __pointName_isset = NO;
}

- (int32_t) isStInsPaid {
  return __isStInsPaid;
}

- (void) setIsStInsPaid: (int32_t) isStInsPaid {
  __isStInsPaid = isStInsPaid;
  __isStInsPaid_isset = YES;
}

- (BOOL) isStInsPaidIsSet {
  return __isStInsPaid_isset;
}

- (void) unsetIsStInsPaid {
  __isStInsPaid_isset = NO;
}

- (NSString *) bornDate {
  return [[__bornDate retain_stub] autorelease_stub];
}

- (void) setBornDate: (NSString *) bornDate {
  [bornDate retain_stub];
  [__bornDate release_stub];
  __bornDate = bornDate;
  __bornDate_isset = YES;
}

- (BOOL) bornDateIsSet {
  return __bornDate_isset;
}

- (void) unsetBornDate {
  [__bornDate release_stub];
  __bornDate = nil;
  __bornDate_isset = NO;
}

- (int32_t) isNiox {
  return __isNiox;
}

- (void) setIsNiox: (int32_t) isNiox {
  __isNiox = isNiox;
  __isNiox_isset = YES;
}

- (BOOL) isNioxIsSet {
  return __isNiox_isset;
}

- (void) unsetIsNiox {
  __isNiox_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDistrictName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMedDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDr: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatient: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDept: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStatusId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHisRegNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFlowered: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHeadImg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLevelName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCardNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setEvalStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDrId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsSymptomCommit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientHead: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStopExplain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 26:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 27:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 28:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRelationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 29:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCheckInStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 30:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsEmrOut: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 31:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 32:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPointName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 33:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsStInsPaid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 34:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBornDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 35:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsNiox: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MedInfoDto"];
  if (__districtName_isset) {
    if (__districtName != nil) {
      [outProtocol writeFieldBeginWithName: @"districtName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __districtName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__medDate_isset) {
    if (__medDate != nil) {
      [outProtocol writeFieldBeginWithName: @"medDate" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __medDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderDate_isset) {
    if (__orderDate != nil) {
      [outProtocol writeFieldBeginWithName: @"orderDate" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __orderDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fee_isset) {
    if (__fee != nil) {
      [outProtocol writeFieldBeginWithName: @"fee" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __fee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dr_isset) {
    if (__dr != nil) {
      [outProtocol writeFieldBeginWithName: @"dr" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __dr];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patient_isset) {
    if (__patient != nil) {
      [outProtocol writeFieldBeginWithName: @"patient" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __patient];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__hospName_isset) {
    if (__hospName != nil) {
      [outProtocol writeFieldBeginWithName: @"hospName" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __hospName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dept_isset) {
    if (__dept != nil) {
      [outProtocol writeFieldBeginWithName: @"dept" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __dept];
      [outProtocol writeFieldEnd];
    }
  }
  if (__statusId_isset) {
    [outProtocol writeFieldBeginWithName: @"statusId" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __statusId];
    [outProtocol writeFieldEnd];
  }
  if (__status_isset) {
    if (__status != nil) {
      [outProtocol writeFieldBeginWithName: @"status" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __status];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    [outProtocol writeFieldBeginWithName: @"regId" type: TType_I64 fieldID: 12];
    [outProtocol writeI64: __regId];
    [outProtocol writeFieldEnd];
  }
  if (__hisRegNo_isset) {
    if (__hisRegNo != nil) {
      [outProtocol writeFieldBeginWithName: @"hisRegNo" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __hisRegNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    [outProtocol writeFieldBeginWithName: @"orderId" type: TType_I64 fieldID: 14];
    [outProtocol writeI64: __orderId];
    [outProtocol writeFieldEnd];
  }
  if (__flowered_isset) {
    [outProtocol writeFieldBeginWithName: @"flowered" type: TType_I32 fieldID: 15];
    [outProtocol writeI32: __flowered];
    [outProtocol writeFieldEnd];
  }
  if (__headImg_isset) {
    if (__headImg != nil) {
      [outProtocol writeFieldBeginWithName: @"headImg" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __headImg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__levelName_isset) {
    if (__levelName != nil) {
      [outProtocol writeFieldBeginWithName: @"levelName" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __levelName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cardNo_isset) {
    if (__cardNo != nil) {
      [outProtocol writeFieldBeginWithName: @"cardNo" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __cardNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__evalStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"evalStatus" type: TType_I32 fieldID: 19];
    [outProtocol writeI32: __evalStatus];
    [outProtocol writeFieldEnd];
  }
  if (__drId_isset) {
    [outProtocol writeFieldBeginWithName: @"drId" type: TType_I64 fieldID: 20];
    [outProtocol writeI64: __drId];
    [outProtocol writeFieldEnd];
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 21];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__isSymptomCommit_isset) {
    [outProtocol writeFieldBeginWithName: @"isSymptomCommit" type: TType_I32 fieldID: 22];
    [outProtocol writeI32: __isSymptomCommit];
    [outProtocol writeFieldEnd];
  }
  if (__patientHead_isset) {
    if (__patientHead != nil) {
      [outProtocol writeFieldBeginWithName: @"patientHead" type: TType_STRING fieldID: 23];
      [outProtocol writeString: __patientHead];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regStatus_isset) {
    if (__regStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"regStatus" type: TType_STRING fieldID: 24];
      [outProtocol writeString: __regStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stopExplain_isset) {
    if (__stopExplain != nil) {
      [outProtocol writeFieldBeginWithName: @"stopExplain" type: TType_STRING fieldID: 25];
      [outProtocol writeString: __stopExplain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptId_isset) {
    [outProtocol writeFieldBeginWithName: @"deptId" type: TType_I64 fieldID: 26];
    [outProtocol writeI64: __deptId];
    [outProtocol writeFieldEnd];
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 27];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__relationId_isset) {
    [outProtocol writeFieldBeginWithName: @"relationId" type: TType_I32 fieldID: 28];
    [outProtocol writeI32: __relationId];
    [outProtocol writeFieldEnd];
  }
  if (__checkInStatus_isset) {
    if (__checkInStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"checkInStatus" type: TType_STRING fieldID: 29];
      [outProtocol writeString: __checkInStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isEmrOut_isset) {
    [outProtocol writeFieldBeginWithName: @"isEmrOut" type: TType_I32 fieldID: 30];
    [outProtocol writeI32: __isEmrOut];
    [outProtocol writeFieldEnd];
  }
  if (__regType_isset) {
    if (__regType != nil) {
      [outProtocol writeFieldBeginWithName: @"regType" type: TType_STRING fieldID: 31];
      [outProtocol writeString: __regType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pointName_isset) {
    if (__pointName != nil) {
      [outProtocol writeFieldBeginWithName: @"pointName" type: TType_STRING fieldID: 32];
      [outProtocol writeString: __pointName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isStInsPaid_isset) {
    [outProtocol writeFieldBeginWithName: @"isStInsPaid" type: TType_I32 fieldID: 33];
    [outProtocol writeI32: __isStInsPaid];
    [outProtocol writeFieldEnd];
  }
  if (__bornDate_isset) {
    if (__bornDate != nil) {
      [outProtocol writeFieldBeginWithName: @"bornDate" type: TType_STRING fieldID: 34];
      [outProtocol writeString: __bornDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isNiox_isset) {
    [outProtocol writeFieldBeginWithName: @"isNiox" type: TType_I32 fieldID: 35];
    [outProtocol writeI32: __isNiox];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFMedInfoDto("];
  [ms appendString: @"districtName:"];
  [ms appendFormat: @"\"%@\"", __districtName];
  [ms appendString: @",medDate:"];
  [ms appendFormat: @"\"%@\"", __medDate];
  [ms appendString: @",orderDate:"];
  [ms appendFormat: @"\"%@\"", __orderDate];
  [ms appendString: @",fee:"];
  [ms appendFormat: @"\"%@\"", __fee];
  [ms appendString: @",dr:"];
  [ms appendFormat: @"\"%@\"", __dr];
  [ms appendString: @",patient:"];
  [ms appendFormat: @"\"%@\"", __patient];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",hospName:"];
  [ms appendFormat: @"\"%@\"", __hospName];
  [ms appendString: @",dept:"];
  [ms appendFormat: @"\"%@\"", __dept];
  [ms appendString: @",statusId:"];
  [ms appendFormat: @"%i", __statusId];
  [ms appendString: @",status:"];
  [ms appendFormat: @"\"%@\"", __status];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"%qi", __regId];
  [ms appendString: @",hisRegNo:"];
  [ms appendFormat: @"\"%@\"", __hisRegNo];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"%qi", __orderId];
  [ms appendString: @",flowered:"];
  [ms appendFormat: @"%i", __flowered];
  [ms appendString: @",headImg:"];
  [ms appendFormat: @"\"%@\"", __headImg];
  [ms appendString: @",levelName:"];
  [ms appendFormat: @"\"%@\"", __levelName];
  [ms appendString: @",cardNo:"];
  [ms appendFormat: @"\"%@\"", __cardNo];
  [ms appendString: @",evalStatus:"];
  [ms appendFormat: @"%i", __evalStatus];
  [ms appendString: @",drId:"];
  [ms appendFormat: @"%qi", __drId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",isSymptomCommit:"];
  [ms appendFormat: @"%i", __isSymptomCommit];
  [ms appendString: @",patientHead:"];
  [ms appendFormat: @"\"%@\"", __patientHead];
  [ms appendString: @",regStatus:"];
  [ms appendFormat: @"\"%@\"", __regStatus];
  [ms appendString: @",stopExplain:"];
  [ms appendFormat: @"\"%@\"", __stopExplain];
  [ms appendString: @",deptId:"];
  [ms appendFormat: @"%qi", __deptId];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @",relationId:"];
  [ms appendFormat: @"%i", __relationId];
  [ms appendString: @",checkInStatus:"];
  [ms appendFormat: @"\"%@\"", __checkInStatus];
  [ms appendString: @",isEmrOut:"];
  [ms appendFormat: @"%i", __isEmrOut];
  [ms appendString: @",regType:"];
  [ms appendFormat: @"\"%@\"", __regType];
  [ms appendString: @",pointName:"];
  [ms appendFormat: @"\"%@\"", __pointName];
  [ms appendString: @",isStInsPaid:"];
  [ms appendFormat: @"%i", __isStInsPaid];
  [ms appendString: @",bornDate:"];
  [ms appendFormat: @"\"%@\"", __bornDate];
  [ms appendString: @",isNiox:"];
  [ms appendFormat: @"%i", __isNiox];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPayWayDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPayWayTypeId: (NSString *) payWayTypeId
{
  self = [super init];
  __payWayTypeId = [payWayTypeId retain_stub];
  __payWayTypeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"payWayTypeId"])
  {
    __payWayTypeId = [[decoder decodeObjectForKey: @"payWayTypeId"] retain_stub];
    __payWayTypeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__payWayTypeId_isset)
  {
    [encoder encodeObject: __payWayTypeId forKey: @"payWayTypeId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __payWayTypeId_isset ? 2654435761 : 0;
  if (__payWayTypeId_isset)
  {
    hash = (hash * 31) ^ [__payWayTypeId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPayWayDto class]]) {
    return NO;
  }
  NXTFPayWayDto *other = (NXTFPayWayDto *)anObject;
  if ((__payWayTypeId_isset != other->__payWayTypeId_isset) ||
      (__payWayTypeId_isset && ((__payWayTypeId || other->__payWayTypeId) && ![__payWayTypeId isEqual:other->__payWayTypeId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__payWayTypeId release_stub];
  [super dealloc_stub];
}

- (NSString *) payWayTypeId {
  return [[__payWayTypeId retain_stub] autorelease_stub];
}

- (void) setPayWayTypeId: (NSString *) payWayTypeId {
  [payWayTypeId retain_stub];
  [__payWayTypeId release_stub];
  __payWayTypeId = payWayTypeId;
  __payWayTypeId_isset = YES;
}

- (BOOL) payWayTypeIdIsSet {
  return __payWayTypeId_isset;
}

- (void) unsetPayWayTypeId {
  [__payWayTypeId release_stub];
  __payWayTypeId = nil;
  __payWayTypeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPayWayTypeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PayWayDto"];
  if (__payWayTypeId_isset) {
    if (__payWayTypeId != nil) {
      [outProtocol writeFieldBeginWithName: @"payWayTypeId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __payWayTypeId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPayWayDto("];
  [ms appendString: @"payWayTypeId:"];
  [ms appendFormat: @"\"%@\"", __payWayTypeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFHospMapDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTitle: (NSString *) title mapUrl: (NSString *) mapUrl mapId: (NSString *) mapId hospId: (int32_t) hospId
{
  self = [super init];
  __title = [title retain_stub];
  __title_isset = YES;
  __mapUrl = [mapUrl retain_stub];
  __mapUrl_isset = YES;
  __mapId = [mapId retain_stub];
  __mapId_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"mapUrl"])
  {
    __mapUrl = [[decoder decodeObjectForKey: @"mapUrl"] retain_stub];
    __mapUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"mapId"])
  {
    __mapId = [[decoder decodeObjectForKey: @"mapId"] retain_stub];
    __mapId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__mapUrl_isset)
  {
    [encoder encodeObject: __mapUrl forKey: @"mapUrl"];
  }
  if (__mapId_isset)
  {
    [encoder encodeObject: __mapId forKey: @"mapId"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __title_isset ? 2654435761 : 0;
  if (__title_isset)
  {
    hash = (hash * 31) ^ [__title hash];
  }
  hash = (hash * 31) ^ __mapUrl_isset ? 2654435761 : 0;
  if (__mapUrl_isset)
  {
    hash = (hash * 31) ^ [__mapUrl hash];
  }
  hash = (hash * 31) ^ __mapId_isset ? 2654435761 : 0;
  if (__mapId_isset)
  {
    hash = (hash * 31) ^ [__mapId hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFHospMapDto class]]) {
    return NO;
  }
  NXTFHospMapDto *other = (NXTFHospMapDto *)anObject;
  if ((__title_isset != other->__title_isset) ||
      (__title_isset && ((__title || other->__title) && ![__title isEqual:other->__title]))) {
    return NO;
  }
  if ((__mapUrl_isset != other->__mapUrl_isset) ||
      (__mapUrl_isset && ((__mapUrl || other->__mapUrl) && ![__mapUrl isEqual:other->__mapUrl]))) {
    return NO;
  }
  if ((__mapId_isset != other->__mapId_isset) ||
      (__mapId_isset && ((__mapId || other->__mapId) && ![__mapId isEqual:other->__mapId]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__title release_stub];
  [__mapUrl release_stub];
  [__mapId release_stub];
  [super dealloc_stub];
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) mapUrl {
  return [[__mapUrl retain_stub] autorelease_stub];
}

- (void) setMapUrl: (NSString *) mapUrl {
  [mapUrl retain_stub];
  [__mapUrl release_stub];
  __mapUrl = mapUrl;
  __mapUrl_isset = YES;
}

- (BOOL) mapUrlIsSet {
  return __mapUrl_isset;
}

- (void) unsetMapUrl {
  [__mapUrl release_stub];
  __mapUrl = nil;
  __mapUrl_isset = NO;
}

- (NSString *) mapId {
  return [[__mapId retain_stub] autorelease_stub];
}

- (void) setMapId: (NSString *) mapId {
  [mapId retain_stub];
  [__mapId release_stub];
  __mapId = mapId;
  __mapId_isset = YES;
}

- (BOOL) mapIdIsSet {
  return __mapId_isset;
}

- (void) unsetMapId {
  [__mapId release_stub];
  __mapId = nil;
  __mapId_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMapUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMapId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HospMapDto"];
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mapUrl_isset) {
    if (__mapUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"mapUrl" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __mapUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mapId_isset) {
    if (__mapId != nil) {
      [outProtocol writeFieldBeginWithName: @"mapId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __mapId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFHospMapDto("];
  [ms appendString: @"title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",mapUrl:"];
  [ms appendFormat: @"\"%@\"", __mapUrl];
  [ms appendString: @",mapId:"];
  [ms appendFormat: @"\"%@\"", __mapId];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFDoctorDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.services = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithDrId: (int64_t) drId drName: (NSString *) drName hospId: (int32_t) hospId hospName: (NSString *) hospName deptId: (int64_t) deptId deptName: (NSString *) deptName levelName: (NSString *) levelName bornDate: (NSString *) bornDate gender: (NSString *) gender flowerCount: (int32_t) flowerCount specialty: (NSString *) specialty headImg: (NSString *) headImg evaluation: (NSString *) evaluation remark: (NSString *) remark totalVisits: (NSString *) totalVisits isRegisted: (NSString *) isRegisted isConsulted: (NSString *) isConsulted titleStatus: (NSString *) titleStatus qualStatus: (NSString *) qualStatus services: (NSMutableArray *) services desc: (NSString *) desc consultVisits: (NSString *) consultVisits
{
  self = [super init];
  __drId = drId;
  __drId_isset = YES;
  __drName = [drName retain_stub];
  __drName_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __hospName = [hospName retain_stub];
  __hospName_isset = YES;
  __deptId = deptId;
  __deptId_isset = YES;
  __deptName = [deptName retain_stub];
  __deptName_isset = YES;
  __levelName = [levelName retain_stub];
  __levelName_isset = YES;
  __bornDate = [bornDate retain_stub];
  __bornDate_isset = YES;
  __gender = [gender retain_stub];
  __gender_isset = YES;
  __flowerCount = flowerCount;
  __flowerCount_isset = YES;
  __specialty = [specialty retain_stub];
  __specialty_isset = YES;
  __headImg = [headImg retain_stub];
  __headImg_isset = YES;
  __evaluation = [evaluation retain_stub];
  __evaluation_isset = YES;
  __remark = [remark retain_stub];
  __remark_isset = YES;
  __totalVisits = [totalVisits retain_stub];
  __totalVisits_isset = YES;
  __isRegisted = [isRegisted retain_stub];
  __isRegisted_isset = YES;
  __isConsulted = [isConsulted retain_stub];
  __isConsulted_isset = YES;
  __titleStatus = [titleStatus retain_stub];
  __titleStatus_isset = YES;
  __qualStatus = [qualStatus retain_stub];
  __qualStatus_isset = YES;
  __services = [services retain_stub];
  __services_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __consultVisits = [consultVisits retain_stub];
  __consultVisits_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"drId"])
  {
    __drId = [decoder decodeInt64ForKey: @"drId"];
    __drId_isset = YES;
  }
  if ([decoder containsValueForKey: @"drName"])
  {
    __drName = [[decoder decodeObjectForKey: @"drName"] retain_stub];
    __drName_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospName"])
  {
    __hospName = [[decoder decodeObjectForKey: @"hospName"] retain_stub];
    __hospName_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptId"])
  {
    __deptId = [decoder decodeInt64ForKey: @"deptId"];
    __deptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptName"])
  {
    __deptName = [[decoder decodeObjectForKey: @"deptName"] retain_stub];
    __deptName_isset = YES;
  }
  if ([decoder containsValueForKey: @"levelName"])
  {
    __levelName = [[decoder decodeObjectForKey: @"levelName"] retain_stub];
    __levelName_isset = YES;
  }
  if ([decoder containsValueForKey: @"bornDate"])
  {
    __bornDate = [[decoder decodeObjectForKey: @"bornDate"] retain_stub];
    __bornDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [[decoder decodeObjectForKey: @"gender"] retain_stub];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"flowerCount"])
  {
    __flowerCount = [decoder decodeInt32ForKey: @"flowerCount"];
    __flowerCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"specialty"])
  {
    __specialty = [[decoder decodeObjectForKey: @"specialty"] retain_stub];
    __specialty_isset = YES;
  }
  if ([decoder containsValueForKey: @"headImg"])
  {
    __headImg = [[decoder decodeObjectForKey: @"headImg"] retain_stub];
    __headImg_isset = YES;
  }
  if ([decoder containsValueForKey: @"evaluation"])
  {
    __evaluation = [[decoder decodeObjectForKey: @"evaluation"] retain_stub];
    __evaluation_isset = YES;
  }
  if ([decoder containsValueForKey: @"remark"])
  {
    __remark = [[decoder decodeObjectForKey: @"remark"] retain_stub];
    __remark_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalVisits"])
  {
    __totalVisits = [[decoder decodeObjectForKey: @"totalVisits"] retain_stub];
    __totalVisits_isset = YES;
  }
  if ([decoder containsValueForKey: @"isRegisted"])
  {
    __isRegisted = [[decoder decodeObjectForKey: @"isRegisted"] retain_stub];
    __isRegisted_isset = YES;
  }
  if ([decoder containsValueForKey: @"isConsulted"])
  {
    __isConsulted = [[decoder decodeObjectForKey: @"isConsulted"] retain_stub];
    __isConsulted_isset = YES;
  }
  if ([decoder containsValueForKey: @"titleStatus"])
  {
    __titleStatus = [[decoder decodeObjectForKey: @"titleStatus"] retain_stub];
    __titleStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"qualStatus"])
  {
    __qualStatus = [[decoder decodeObjectForKey: @"qualStatus"] retain_stub];
    __qualStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"services"])
  {
    __services = [[decoder decodeObjectForKey: @"services"] retain_stub];
    __services_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"consultVisits"])
  {
    __consultVisits = [[decoder decodeObjectForKey: @"consultVisits"] retain_stub];
    __consultVisits_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__drId_isset)
  {
    [encoder encodeInt64: __drId forKey: @"drId"];
  }
  if (__drName_isset)
  {
    [encoder encodeObject: __drName forKey: @"drName"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__hospName_isset)
  {
    [encoder encodeObject: __hospName forKey: @"hospName"];
  }
  if (__deptId_isset)
  {
    [encoder encodeInt64: __deptId forKey: @"deptId"];
  }
  if (__deptName_isset)
  {
    [encoder encodeObject: __deptName forKey: @"deptName"];
  }
  if (__levelName_isset)
  {
    [encoder encodeObject: __levelName forKey: @"levelName"];
  }
  if (__bornDate_isset)
  {
    [encoder encodeObject: __bornDate forKey: @"bornDate"];
  }
  if (__gender_isset)
  {
    [encoder encodeObject: __gender forKey: @"gender"];
  }
  if (__flowerCount_isset)
  {
    [encoder encodeInt32: __flowerCount forKey: @"flowerCount"];
  }
  if (__specialty_isset)
  {
    [encoder encodeObject: __specialty forKey: @"specialty"];
  }
  if (__headImg_isset)
  {
    [encoder encodeObject: __headImg forKey: @"headImg"];
  }
  if (__evaluation_isset)
  {
    [encoder encodeObject: __evaluation forKey: @"evaluation"];
  }
  if (__remark_isset)
  {
    [encoder encodeObject: __remark forKey: @"remark"];
  }
  if (__totalVisits_isset)
  {
    [encoder encodeObject: __totalVisits forKey: @"totalVisits"];
  }
  if (__isRegisted_isset)
  {
    [encoder encodeObject: __isRegisted forKey: @"isRegisted"];
  }
  if (__isConsulted_isset)
  {
    [encoder encodeObject: __isConsulted forKey: @"isConsulted"];
  }
  if (__titleStatus_isset)
  {
    [encoder encodeObject: __titleStatus forKey: @"titleStatus"];
  }
  if (__qualStatus_isset)
  {
    [encoder encodeObject: __qualStatus forKey: @"qualStatus"];
  }
  if (__services_isset)
  {
    [encoder encodeObject: __services forKey: @"services"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__consultVisits_isset)
  {
    [encoder encodeObject: __consultVisits forKey: @"consultVisits"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __drId_isset ? 2654435761 : 0;
  if (__drId_isset)
  {
    hash = (hash * 31) ^ [@(__drId) hash];
  }
  hash = (hash * 31) ^ __drName_isset ? 2654435761 : 0;
  if (__drName_isset)
  {
    hash = (hash * 31) ^ [__drName hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __hospName_isset ? 2654435761 : 0;
  if (__hospName_isset)
  {
    hash = (hash * 31) ^ [__hospName hash];
  }
  hash = (hash * 31) ^ __deptId_isset ? 2654435761 : 0;
  if (__deptId_isset)
  {
    hash = (hash * 31) ^ [@(__deptId) hash];
  }
  hash = (hash * 31) ^ __deptName_isset ? 2654435761 : 0;
  if (__deptName_isset)
  {
    hash = (hash * 31) ^ [__deptName hash];
  }
  hash = (hash * 31) ^ __levelName_isset ? 2654435761 : 0;
  if (__levelName_isset)
  {
    hash = (hash * 31) ^ [__levelName hash];
  }
  hash = (hash * 31) ^ __bornDate_isset ? 2654435761 : 0;
  if (__bornDate_isset)
  {
    hash = (hash * 31) ^ [__bornDate hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [__gender hash];
  }
  hash = (hash * 31) ^ __flowerCount_isset ? 2654435761 : 0;
  if (__flowerCount_isset)
  {
    hash = (hash * 31) ^ [@(__flowerCount) hash];
  }
  hash = (hash * 31) ^ __specialty_isset ? 2654435761 : 0;
  if (__specialty_isset)
  {
    hash = (hash * 31) ^ [__specialty hash];
  }
  hash = (hash * 31) ^ __headImg_isset ? 2654435761 : 0;
  if (__headImg_isset)
  {
    hash = (hash * 31) ^ [__headImg hash];
  }
  hash = (hash * 31) ^ __evaluation_isset ? 2654435761 : 0;
  if (__evaluation_isset)
  {
    hash = (hash * 31) ^ [__evaluation hash];
  }
  hash = (hash * 31) ^ __remark_isset ? 2654435761 : 0;
  if (__remark_isset)
  {
    hash = (hash * 31) ^ [__remark hash];
  }
  hash = (hash * 31) ^ __totalVisits_isset ? 2654435761 : 0;
  if (__totalVisits_isset)
  {
    hash = (hash * 31) ^ [__totalVisits hash];
  }
  hash = (hash * 31) ^ __isRegisted_isset ? 2654435761 : 0;
  if (__isRegisted_isset)
  {
    hash = (hash * 31) ^ [__isRegisted hash];
  }
  hash = (hash * 31) ^ __isConsulted_isset ? 2654435761 : 0;
  if (__isConsulted_isset)
  {
    hash = (hash * 31) ^ [__isConsulted hash];
  }
  hash = (hash * 31) ^ __titleStatus_isset ? 2654435761 : 0;
  if (__titleStatus_isset)
  {
    hash = (hash * 31) ^ [__titleStatus hash];
  }
  hash = (hash * 31) ^ __qualStatus_isset ? 2654435761 : 0;
  if (__qualStatus_isset)
  {
    hash = (hash * 31) ^ [__qualStatus hash];
  }
  hash = (hash * 31) ^ __services_isset ? 2654435761 : 0;
  if (__services_isset)
  {
    hash = (hash * 31) ^ [__services hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __consultVisits_isset ? 2654435761 : 0;
  if (__consultVisits_isset)
  {
    hash = (hash * 31) ^ [__consultVisits hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFDoctorDto class]]) {
    return NO;
  }
  NXTFDoctorDto *other = (NXTFDoctorDto *)anObject;
  if ((__drId_isset != other->__drId_isset) ||
      (__drId_isset && (__drId != other->__drId))) {
    return NO;
  }
  if ((__drName_isset != other->__drName_isset) ||
      (__drName_isset && ((__drName || other->__drName) && ![__drName isEqual:other->__drName]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__hospName_isset != other->__hospName_isset) ||
      (__hospName_isset && ((__hospName || other->__hospName) && ![__hospName isEqual:other->__hospName]))) {
    return NO;
  }
  if ((__deptId_isset != other->__deptId_isset) ||
      (__deptId_isset && (__deptId != other->__deptId))) {
    return NO;
  }
  if ((__deptName_isset != other->__deptName_isset) ||
      (__deptName_isset && ((__deptName || other->__deptName) && ![__deptName isEqual:other->__deptName]))) {
    return NO;
  }
  if ((__levelName_isset != other->__levelName_isset) ||
      (__levelName_isset && ((__levelName || other->__levelName) && ![__levelName isEqual:other->__levelName]))) {
    return NO;
  }
  if ((__bornDate_isset != other->__bornDate_isset) ||
      (__bornDate_isset && ((__bornDate || other->__bornDate) && ![__bornDate isEqual:other->__bornDate]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && ((__gender || other->__gender) && ![__gender isEqual:other->__gender]))) {
    return NO;
  }
  if ((__flowerCount_isset != other->__flowerCount_isset) ||
      (__flowerCount_isset && (__flowerCount != other->__flowerCount))) {
    return NO;
  }
  if ((__specialty_isset != other->__specialty_isset) ||
      (__specialty_isset && ((__specialty || other->__specialty) && ![__specialty isEqual:other->__specialty]))) {
    return NO;
  }
  if ((__headImg_isset != other->__headImg_isset) ||
      (__headImg_isset && ((__headImg || other->__headImg) && ![__headImg isEqual:other->__headImg]))) {
    return NO;
  }
  if ((__evaluation_isset != other->__evaluation_isset) ||
      (__evaluation_isset && ((__evaluation || other->__evaluation) && ![__evaluation isEqual:other->__evaluation]))) {
    return NO;
  }
  if ((__remark_isset != other->__remark_isset) ||
      (__remark_isset && ((__remark || other->__remark) && ![__remark isEqual:other->__remark]))) {
    return NO;
  }
  if ((__totalVisits_isset != other->__totalVisits_isset) ||
      (__totalVisits_isset && ((__totalVisits || other->__totalVisits) && ![__totalVisits isEqual:other->__totalVisits]))) {
    return NO;
  }
  if ((__isRegisted_isset != other->__isRegisted_isset) ||
      (__isRegisted_isset && ((__isRegisted || other->__isRegisted) && ![__isRegisted isEqual:other->__isRegisted]))) {
    return NO;
  }
  if ((__isConsulted_isset != other->__isConsulted_isset) ||
      (__isConsulted_isset && ((__isConsulted || other->__isConsulted) && ![__isConsulted isEqual:other->__isConsulted]))) {
    return NO;
  }
  if ((__titleStatus_isset != other->__titleStatus_isset) ||
      (__titleStatus_isset && ((__titleStatus || other->__titleStatus) && ![__titleStatus isEqual:other->__titleStatus]))) {
    return NO;
  }
  if ((__qualStatus_isset != other->__qualStatus_isset) ||
      (__qualStatus_isset && ((__qualStatus || other->__qualStatus) && ![__qualStatus isEqual:other->__qualStatus]))) {
    return NO;
  }
  if ((__services_isset != other->__services_isset) ||
      (__services_isset && ((__services || other->__services) && ![__services isEqual:other->__services]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__consultVisits_isset != other->__consultVisits_isset) ||
      (__consultVisits_isset && ((__consultVisits || other->__consultVisits) && ![__consultVisits isEqual:other->__consultVisits]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__drName release_stub];
  [__hospName release_stub];
  [__deptName release_stub];
  [__levelName release_stub];
  [__bornDate release_stub];
  [__gender release_stub];
  [__specialty release_stub];
  [__headImg release_stub];
  [__evaluation release_stub];
  [__remark release_stub];
  [__totalVisits release_stub];
  [__isRegisted release_stub];
  [__isConsulted release_stub];
  [__titleStatus release_stub];
  [__qualStatus release_stub];
  [__services release_stub];
  [__desc release_stub];
  [__consultVisits release_stub];
  [super dealloc_stub];
}

- (int64_t) drId {
  return __drId;
}

- (void) setDrId: (int64_t) drId {
  __drId = drId;
  __drId_isset = YES;
}

- (BOOL) drIdIsSet {
  return __drId_isset;
}

- (void) unsetDrId {
  __drId_isset = NO;
}

- (NSString *) drName {
  return [[__drName retain_stub] autorelease_stub];
}

- (void) setDrName: (NSString *) drName {
  [drName retain_stub];
  [__drName release_stub];
  __drName = drName;
  __drName_isset = YES;
}

- (BOOL) drNameIsSet {
  return __drName_isset;
}

- (void) unsetDrName {
  [__drName release_stub];
  __drName = nil;
  __drName_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (NSString *) hospName {
  return [[__hospName retain_stub] autorelease_stub];
}

- (void) setHospName: (NSString *) hospName {
  [hospName retain_stub];
  [__hospName release_stub];
  __hospName = hospName;
  __hospName_isset = YES;
}

- (BOOL) hospNameIsSet {
  return __hospName_isset;
}

- (void) unsetHospName {
  [__hospName release_stub];
  __hospName = nil;
  __hospName_isset = NO;
}

- (int64_t) deptId {
  return __deptId;
}

- (void) setDeptId: (int64_t) deptId {
  __deptId = deptId;
  __deptId_isset = YES;
}

- (BOOL) deptIdIsSet {
  return __deptId_isset;
}

- (void) unsetDeptId {
  __deptId_isset = NO;
}

- (NSString *) deptName {
  return [[__deptName retain_stub] autorelease_stub];
}

- (void) setDeptName: (NSString *) deptName {
  [deptName retain_stub];
  [__deptName release_stub];
  __deptName = deptName;
  __deptName_isset = YES;
}

- (BOOL) deptNameIsSet {
  return __deptName_isset;
}

- (void) unsetDeptName {
  [__deptName release_stub];
  __deptName = nil;
  __deptName_isset = NO;
}

- (NSString *) levelName {
  return [[__levelName retain_stub] autorelease_stub];
}

- (void) setLevelName: (NSString *) levelName {
  [levelName retain_stub];
  [__levelName release_stub];
  __levelName = levelName;
  __levelName_isset = YES;
}

- (BOOL) levelNameIsSet {
  return __levelName_isset;
}

- (void) unsetLevelName {
  [__levelName release_stub];
  __levelName = nil;
  __levelName_isset = NO;
}

- (NSString *) bornDate {
  return [[__bornDate retain_stub] autorelease_stub];
}

- (void) setBornDate: (NSString *) bornDate {
  [bornDate retain_stub];
  [__bornDate release_stub];
  __bornDate = bornDate;
  __bornDate_isset = YES;
}

- (BOOL) bornDateIsSet {
  return __bornDate_isset;
}

- (void) unsetBornDate {
  [__bornDate release_stub];
  __bornDate = nil;
  __bornDate_isset = NO;
}

- (NSString *) gender {
  return [[__gender retain_stub] autorelease_stub];
}

- (void) setGender: (NSString *) gender {
  [gender retain_stub];
  [__gender release_stub];
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  [__gender release_stub];
  __gender = nil;
  __gender_isset = NO;
}

- (int32_t) flowerCount {
  return __flowerCount;
}

- (void) setFlowerCount: (int32_t) flowerCount {
  __flowerCount = flowerCount;
  __flowerCount_isset = YES;
}

- (BOOL) flowerCountIsSet {
  return __flowerCount_isset;
}

- (void) unsetFlowerCount {
  __flowerCount_isset = NO;
}

- (NSString *) specialty {
  return [[__specialty retain_stub] autorelease_stub];
}

- (void) setSpecialty: (NSString *) specialty {
  [specialty retain_stub];
  [__specialty release_stub];
  __specialty = specialty;
  __specialty_isset = YES;
}

- (BOOL) specialtyIsSet {
  return __specialty_isset;
}

- (void) unsetSpecialty {
  [__specialty release_stub];
  __specialty = nil;
  __specialty_isset = NO;
}

- (NSString *) headImg {
  return [[__headImg retain_stub] autorelease_stub];
}

- (void) setHeadImg: (NSString *) headImg {
  [headImg retain_stub];
  [__headImg release_stub];
  __headImg = headImg;
  __headImg_isset = YES;
}

- (BOOL) headImgIsSet {
  return __headImg_isset;
}

- (void) unsetHeadImg {
  [__headImg release_stub];
  __headImg = nil;
  __headImg_isset = NO;
}

- (NSString *) evaluation {
  return [[__evaluation retain_stub] autorelease_stub];
}

- (void) setEvaluation: (NSString *) evaluation {
  [evaluation retain_stub];
  [__evaluation release_stub];
  __evaluation = evaluation;
  __evaluation_isset = YES;
}

- (BOOL) evaluationIsSet {
  return __evaluation_isset;
}

- (void) unsetEvaluation {
  [__evaluation release_stub];
  __evaluation = nil;
  __evaluation_isset = NO;
}

- (NSString *) remark {
  return [[__remark retain_stub] autorelease_stub];
}

- (void) setRemark: (NSString *) remark {
  [remark retain_stub];
  [__remark release_stub];
  __remark = remark;
  __remark_isset = YES;
}

- (BOOL) remarkIsSet {
  return __remark_isset;
}

- (void) unsetRemark {
  [__remark release_stub];
  __remark = nil;
  __remark_isset = NO;
}

- (NSString *) totalVisits {
  return [[__totalVisits retain_stub] autorelease_stub];
}

- (void) setTotalVisits: (NSString *) totalVisits {
  [totalVisits retain_stub];
  [__totalVisits release_stub];
  __totalVisits = totalVisits;
  __totalVisits_isset = YES;
}

- (BOOL) totalVisitsIsSet {
  return __totalVisits_isset;
}

- (void) unsetTotalVisits {
  [__totalVisits release_stub];
  __totalVisits = nil;
  __totalVisits_isset = NO;
}

- (NSString *) isRegisted {
  return [[__isRegisted retain_stub] autorelease_stub];
}

- (void) setIsRegisted: (NSString *) isRegisted {
  [isRegisted retain_stub];
  [__isRegisted release_stub];
  __isRegisted = isRegisted;
  __isRegisted_isset = YES;
}

- (BOOL) isRegistedIsSet {
  return __isRegisted_isset;
}

- (void) unsetIsRegisted {
  [__isRegisted release_stub];
  __isRegisted = nil;
  __isRegisted_isset = NO;
}

- (NSString *) isConsulted {
  return [[__isConsulted retain_stub] autorelease_stub];
}

- (void) setIsConsulted: (NSString *) isConsulted {
  [isConsulted retain_stub];
  [__isConsulted release_stub];
  __isConsulted = isConsulted;
  __isConsulted_isset = YES;
}

- (BOOL) isConsultedIsSet {
  return __isConsulted_isset;
}

- (void) unsetIsConsulted {
  [__isConsulted release_stub];
  __isConsulted = nil;
  __isConsulted_isset = NO;
}

- (NSString *) titleStatus {
  return [[__titleStatus retain_stub] autorelease_stub];
}

- (void) setTitleStatus: (NSString *) titleStatus {
  [titleStatus retain_stub];
  [__titleStatus release_stub];
  __titleStatus = titleStatus;
  __titleStatus_isset = YES;
}

- (BOOL) titleStatusIsSet {
  return __titleStatus_isset;
}

- (void) unsetTitleStatus {
  [__titleStatus release_stub];
  __titleStatus = nil;
  __titleStatus_isset = NO;
}

- (NSString *) qualStatus {
  return [[__qualStatus retain_stub] autorelease_stub];
}

- (void) setQualStatus: (NSString *) qualStatus {
  [qualStatus retain_stub];
  [__qualStatus release_stub];
  __qualStatus = qualStatus;
  __qualStatus_isset = YES;
}

- (BOOL) qualStatusIsSet {
  return __qualStatus_isset;
}

- (void) unsetQualStatus {
  [__qualStatus release_stub];
  __qualStatus = nil;
  __qualStatus_isset = NO;
}

- (NSMutableArray *) services {
  return [[__services retain_stub] autorelease_stub];
}

- (void) setServices: (NSMutableArray *) services {
  [services retain_stub];
  [__services release_stub];
  __services = services;
  __services_isset = YES;
}

- (BOOL) servicesIsSet {
  return __services_isset;
}

- (void) unsetServices {
  [__services release_stub];
  __services = nil;
  __services_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) consultVisits {
  return [[__consultVisits retain_stub] autorelease_stub];
}

- (void) setConsultVisits: (NSString *) consultVisits {
  [consultVisits retain_stub];
  [__consultVisits release_stub];
  __consultVisits = consultVisits;
  __consultVisits_isset = YES;
}

- (BOOL) consultVisitsIsSet {
  return __consultVisits_isset;
}

- (void) unsetConsultVisits {
  [__consultVisits release_stub];
  __consultVisits = nil;
  __consultVisits_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDrId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLevelName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBornDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFlowerCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSpecialty: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHeadImg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEvaluation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemark: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTotalVisits: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsRegisted: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsConsulted: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitleStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setQualStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            NXTFServiceDto *_elem12 = [[NXTFServiceDto alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release_stub];
          }
          [inProtocol readListEnd];
          [self setServices: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConsultVisits: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DoctorDto"];
  if (__drId_isset) {
    [outProtocol writeFieldBeginWithName: @"drId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __drId];
    [outProtocol writeFieldEnd];
  }
  if (__drName_isset) {
    if (__drName != nil) {
      [outProtocol writeFieldBeginWithName: @"drName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __drName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__hospName_isset) {
    if (__hospName != nil) {
      [outProtocol writeFieldBeginWithName: @"hospName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __hospName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptId_isset) {
    [outProtocol writeFieldBeginWithName: @"deptId" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __deptId];
    [outProtocol writeFieldEnd];
  }
  if (__deptName_isset) {
    if (__deptName != nil) {
      [outProtocol writeFieldBeginWithName: @"deptName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __deptName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__levelName_isset) {
    if (__levelName != nil) {
      [outProtocol writeFieldBeginWithName: @"levelName" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __levelName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bornDate_isset) {
    if (__bornDate != nil) {
      [outProtocol writeFieldBeginWithName: @"bornDate" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __bornDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    if (__gender != nil) {
      [outProtocol writeFieldBeginWithName: @"gender" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __gender];
      [outProtocol writeFieldEnd];
    }
  }
  if (__flowerCount_isset) {
    [outProtocol writeFieldBeginWithName: @"flowerCount" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __flowerCount];
    [outProtocol writeFieldEnd];
  }
  if (__specialty_isset) {
    if (__specialty != nil) {
      [outProtocol writeFieldBeginWithName: @"specialty" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __specialty];
      [outProtocol writeFieldEnd];
    }
  }
  if (__headImg_isset) {
    if (__headImg != nil) {
      [outProtocol writeFieldBeginWithName: @"headImg" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __headImg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__evaluation_isset) {
    if (__evaluation != nil) {
      [outProtocol writeFieldBeginWithName: @"evaluation" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __evaluation];
      [outProtocol writeFieldEnd];
    }
  }
  if (__remark_isset) {
    if (__remark != nil) {
      [outProtocol writeFieldBeginWithName: @"remark" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __remark];
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalVisits_isset) {
    if (__totalVisits != nil) {
      [outProtocol writeFieldBeginWithName: @"totalVisits" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __totalVisits];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isRegisted_isset) {
    if (__isRegisted != nil) {
      [outProtocol writeFieldBeginWithName: @"isRegisted" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __isRegisted];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isConsulted_isset) {
    if (__isConsulted != nil) {
      [outProtocol writeFieldBeginWithName: @"isConsulted" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __isConsulted];
      [outProtocol writeFieldEnd];
    }
  }
  if (__titleStatus_isset) {
    if (__titleStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"titleStatus" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __titleStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__qualStatus_isset) {
    if (__qualStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"qualStatus" type: TType_STRING fieldID: 19];
      [outProtocol writeString: __qualStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__services_isset) {
    if (__services != nil) {
      [outProtocol writeFieldBeginWithName: @"services" type: TType_LIST fieldID: 20];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__services count]];
        int idx14;
        for (idx14 = 0; idx14 < [__services count]; idx14++)
        {
          [[__services objectAtIndex: idx14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 21];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__consultVisits_isset) {
    if (__consultVisits != nil) {
      [outProtocol writeFieldBeginWithName: @"consultVisits" type: TType_STRING fieldID: 22];
      [outProtocol writeString: __consultVisits];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFDoctorDto("];
  [ms appendString: @"drId:"];
  [ms appendFormat: @"%qi", __drId];
  [ms appendString: @",drName:"];
  [ms appendFormat: @"\"%@\"", __drName];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",hospName:"];
  [ms appendFormat: @"\"%@\"", __hospName];
  [ms appendString: @",deptId:"];
  [ms appendFormat: @"%qi", __deptId];
  [ms appendString: @",deptName:"];
  [ms appendFormat: @"\"%@\"", __deptName];
  [ms appendString: @",levelName:"];
  [ms appendFormat: @"\"%@\"", __levelName];
  [ms appendString: @",bornDate:"];
  [ms appendFormat: @"\"%@\"", __bornDate];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"\"%@\"", __gender];
  [ms appendString: @",flowerCount:"];
  [ms appendFormat: @"%i", __flowerCount];
  [ms appendString: @",specialty:"];
  [ms appendFormat: @"\"%@\"", __specialty];
  [ms appendString: @",headImg:"];
  [ms appendFormat: @"\"%@\"", __headImg];
  [ms appendString: @",evaluation:"];
  [ms appendFormat: @"\"%@\"", __evaluation];
  [ms appendString: @",remark:"];
  [ms appendFormat: @"\"%@\"", __remark];
  [ms appendString: @",totalVisits:"];
  [ms appendFormat: @"\"%@\"", __totalVisits];
  [ms appendString: @",isRegisted:"];
  [ms appendFormat: @"\"%@\"", __isRegisted];
  [ms appendString: @",isConsulted:"];
  [ms appendFormat: @"\"%@\"", __isConsulted];
  [ms appendString: @",titleStatus:"];
  [ms appendFormat: @"\"%@\"", __titleStatus];
  [ms appendString: @",qualStatus:"];
  [ms appendFormat: @"\"%@\"", __qualStatus];
  [ms appendString: @",services:"];
  [ms appendFormat: @"%@", __services];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",consultVisits:"];
  [ms appendFormat: @"\"%@\"", __consultVisits];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFMedCardDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHospId: (NSString *) hospId hospName: (NSString *) hospName patientId: (NSString *) patientId markTypeId: (NSString *) markTypeId markTypeName: (NSString *) markTypeName markNo: (NSString *) markNo cardNo: (NSString *) cardNo hospLogo: (NSString *) hospLogo isDefault: (int32_t) isDefault cardId: (int64_t) cardId patientName: (NSString *) patientName markSubType: (int32_t) markSubType balance: (NSString *) balance limits: (NSString *) limits createTime: (NSString *) createTime barCode: (NSString *) barCode canCharge: (int32_t) canCharge needPwd: (int32_t) needPwd
{
  self = [super init];
  __hospId = [hospId retain_stub];
  __hospId_isset = YES;
  __hospName = [hospName retain_stub];
  __hospName_isset = YES;
  __patientId = [patientId retain_stub];
  __patientId_isset = YES;
  __markTypeId = [markTypeId retain_stub];
  __markTypeId_isset = YES;
  __markTypeName = [markTypeName retain_stub];
  __markTypeName_isset = YES;
  __markNo = [markNo retain_stub];
  __markNo_isset = YES;
  __cardNo = [cardNo retain_stub];
  __cardNo_isset = YES;
  __hospLogo = [hospLogo retain_stub];
  __hospLogo_isset = YES;
  __isDefault = isDefault;
  __isDefault_isset = YES;
  __cardId = cardId;
  __cardId_isset = YES;
  __patientName = [patientName retain_stub];
  __patientName_isset = YES;
  __markSubType = markSubType;
  __markSubType_isset = YES;
  __balance = [balance retain_stub];
  __balance_isset = YES;
  __limits = [limits retain_stub];
  __limits_isset = YES;
  __createTime = [createTime retain_stub];
  __createTime_isset = YES;
  __barCode = [barCode retain_stub];
  __barCode_isset = YES;
  __canCharge = canCharge;
  __canCharge_isset = YES;
  __needPwd = needPwd;
  __needPwd_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [[decoder decodeObjectForKey: @"hospId"] retain_stub];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospName"])
  {
    __hospName = [[decoder decodeObjectForKey: @"hospName"] retain_stub];
    __hospName_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [[decoder decodeObjectForKey: @"patientId"] retain_stub];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"markTypeId"])
  {
    __markTypeId = [[decoder decodeObjectForKey: @"markTypeId"] retain_stub];
    __markTypeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"markTypeName"])
  {
    __markTypeName = [[decoder decodeObjectForKey: @"markTypeName"] retain_stub];
    __markTypeName_isset = YES;
  }
  if ([decoder containsValueForKey: @"markNo"])
  {
    __markNo = [[decoder decodeObjectForKey: @"markNo"] retain_stub];
    __markNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardNo"])
  {
    __cardNo = [[decoder decodeObjectForKey: @"cardNo"] retain_stub];
    __cardNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospLogo"])
  {
    __hospLogo = [[decoder decodeObjectForKey: @"hospLogo"] retain_stub];
    __hospLogo_isset = YES;
  }
  if ([decoder containsValueForKey: @"isDefault"])
  {
    __isDefault = [decoder decodeInt32ForKey: @"isDefault"];
    __isDefault_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardId"])
  {
    __cardId = [decoder decodeInt64ForKey: @"cardId"];
    __cardId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientName"])
  {
    __patientName = [[decoder decodeObjectForKey: @"patientName"] retain_stub];
    __patientName_isset = YES;
  }
  if ([decoder containsValueForKey: @"markSubType"])
  {
    __markSubType = [decoder decodeInt32ForKey: @"markSubType"];
    __markSubType_isset = YES;
  }
  if ([decoder containsValueForKey: @"balance"])
  {
    __balance = [[decoder decodeObjectForKey: @"balance"] retain_stub];
    __balance_isset = YES;
  }
  if ([decoder containsValueForKey: @"limits"])
  {
    __limits = [[decoder decodeObjectForKey: @"limits"] retain_stub];
    __limits_isset = YES;
  }
  if ([decoder containsValueForKey: @"createTime"])
  {
    __createTime = [[decoder decodeObjectForKey: @"createTime"] retain_stub];
    __createTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"barCode"])
  {
    __barCode = [[decoder decodeObjectForKey: @"barCode"] retain_stub];
    __barCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"canCharge"])
  {
    __canCharge = [decoder decodeInt32ForKey: @"canCharge"];
    __canCharge_isset = YES;
  }
  if ([decoder containsValueForKey: @"needPwd"])
  {
    __needPwd = [decoder decodeInt32ForKey: @"needPwd"];
    __needPwd_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__hospId_isset)
  {
    [encoder encodeObject: __hospId forKey: @"hospId"];
  }
  if (__hospName_isset)
  {
    [encoder encodeObject: __hospName forKey: @"hospName"];
  }
  if (__patientId_isset)
  {
    [encoder encodeObject: __patientId forKey: @"patientId"];
  }
  if (__markTypeId_isset)
  {
    [encoder encodeObject: __markTypeId forKey: @"markTypeId"];
  }
  if (__markTypeName_isset)
  {
    [encoder encodeObject: __markTypeName forKey: @"markTypeName"];
  }
  if (__markNo_isset)
  {
    [encoder encodeObject: __markNo forKey: @"markNo"];
  }
  if (__cardNo_isset)
  {
    [encoder encodeObject: __cardNo forKey: @"cardNo"];
  }
  if (__hospLogo_isset)
  {
    [encoder encodeObject: __hospLogo forKey: @"hospLogo"];
  }
  if (__isDefault_isset)
  {
    [encoder encodeInt32: __isDefault forKey: @"isDefault"];
  }
  if (__cardId_isset)
  {
    [encoder encodeInt64: __cardId forKey: @"cardId"];
  }
  if (__patientName_isset)
  {
    [encoder encodeObject: __patientName forKey: @"patientName"];
  }
  if (__markSubType_isset)
  {
    [encoder encodeInt32: __markSubType forKey: @"markSubType"];
  }
  if (__balance_isset)
  {
    [encoder encodeObject: __balance forKey: @"balance"];
  }
  if (__limits_isset)
  {
    [encoder encodeObject: __limits forKey: @"limits"];
  }
  if (__createTime_isset)
  {
    [encoder encodeObject: __createTime forKey: @"createTime"];
  }
  if (__barCode_isset)
  {
    [encoder encodeObject: __barCode forKey: @"barCode"];
  }
  if (__canCharge_isset)
  {
    [encoder encodeInt32: __canCharge forKey: @"canCharge"];
  }
  if (__needPwd_isset)
  {
    [encoder encodeInt32: __needPwd forKey: @"needPwd"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [__hospId hash];
  }
  hash = (hash * 31) ^ __hospName_isset ? 2654435761 : 0;
  if (__hospName_isset)
  {
    hash = (hash * 31) ^ [__hospName hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [__patientId hash];
  }
  hash = (hash * 31) ^ __markTypeId_isset ? 2654435761 : 0;
  if (__markTypeId_isset)
  {
    hash = (hash * 31) ^ [__markTypeId hash];
  }
  hash = (hash * 31) ^ __markTypeName_isset ? 2654435761 : 0;
  if (__markTypeName_isset)
  {
    hash = (hash * 31) ^ [__markTypeName hash];
  }
  hash = (hash * 31) ^ __markNo_isset ? 2654435761 : 0;
  if (__markNo_isset)
  {
    hash = (hash * 31) ^ [__markNo hash];
  }
  hash = (hash * 31) ^ __cardNo_isset ? 2654435761 : 0;
  if (__cardNo_isset)
  {
    hash = (hash * 31) ^ [__cardNo hash];
  }
  hash = (hash * 31) ^ __hospLogo_isset ? 2654435761 : 0;
  if (__hospLogo_isset)
  {
    hash = (hash * 31) ^ [__hospLogo hash];
  }
  hash = (hash * 31) ^ __isDefault_isset ? 2654435761 : 0;
  if (__isDefault_isset)
  {
    hash = (hash * 31) ^ [@(__isDefault) hash];
  }
  hash = (hash * 31) ^ __cardId_isset ? 2654435761 : 0;
  if (__cardId_isset)
  {
    hash = (hash * 31) ^ [@(__cardId) hash];
  }
  hash = (hash * 31) ^ __patientName_isset ? 2654435761 : 0;
  if (__patientName_isset)
  {
    hash = (hash * 31) ^ [__patientName hash];
  }
  hash = (hash * 31) ^ __markSubType_isset ? 2654435761 : 0;
  if (__markSubType_isset)
  {
    hash = (hash * 31) ^ [@(__markSubType) hash];
  }
  hash = (hash * 31) ^ __balance_isset ? 2654435761 : 0;
  if (__balance_isset)
  {
    hash = (hash * 31) ^ [__balance hash];
  }
  hash = (hash * 31) ^ __limits_isset ? 2654435761 : 0;
  if (__limits_isset)
  {
    hash = (hash * 31) ^ [__limits hash];
  }
  hash = (hash * 31) ^ __createTime_isset ? 2654435761 : 0;
  if (__createTime_isset)
  {
    hash = (hash * 31) ^ [__createTime hash];
  }
  hash = (hash * 31) ^ __barCode_isset ? 2654435761 : 0;
  if (__barCode_isset)
  {
    hash = (hash * 31) ^ [__barCode hash];
  }
  hash = (hash * 31) ^ __canCharge_isset ? 2654435761 : 0;
  if (__canCharge_isset)
  {
    hash = (hash * 31) ^ [@(__canCharge) hash];
  }
  hash = (hash * 31) ^ __needPwd_isset ? 2654435761 : 0;
  if (__needPwd_isset)
  {
    hash = (hash * 31) ^ [@(__needPwd) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFMedCardDto class]]) {
    return NO;
  }
  NXTFMedCardDto *other = (NXTFMedCardDto *)anObject;
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && ((__hospId || other->__hospId) && ![__hospId isEqual:other->__hospId]))) {
    return NO;
  }
  if ((__hospName_isset != other->__hospName_isset) ||
      (__hospName_isset && ((__hospName || other->__hospName) && ![__hospName isEqual:other->__hospName]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && ((__patientId || other->__patientId) && ![__patientId isEqual:other->__patientId]))) {
    return NO;
  }
  if ((__markTypeId_isset != other->__markTypeId_isset) ||
      (__markTypeId_isset && ((__markTypeId || other->__markTypeId) && ![__markTypeId isEqual:other->__markTypeId]))) {
    return NO;
  }
  if ((__markTypeName_isset != other->__markTypeName_isset) ||
      (__markTypeName_isset && ((__markTypeName || other->__markTypeName) && ![__markTypeName isEqual:other->__markTypeName]))) {
    return NO;
  }
  if ((__markNo_isset != other->__markNo_isset) ||
      (__markNo_isset && ((__markNo || other->__markNo) && ![__markNo isEqual:other->__markNo]))) {
    return NO;
  }
  if ((__cardNo_isset != other->__cardNo_isset) ||
      (__cardNo_isset && ((__cardNo || other->__cardNo) && ![__cardNo isEqual:other->__cardNo]))) {
    return NO;
  }
  if ((__hospLogo_isset != other->__hospLogo_isset) ||
      (__hospLogo_isset && ((__hospLogo || other->__hospLogo) && ![__hospLogo isEqual:other->__hospLogo]))) {
    return NO;
  }
  if ((__isDefault_isset != other->__isDefault_isset) ||
      (__isDefault_isset && (__isDefault != other->__isDefault))) {
    return NO;
  }
  if ((__cardId_isset != other->__cardId_isset) ||
      (__cardId_isset && (__cardId != other->__cardId))) {
    return NO;
  }
  if ((__patientName_isset != other->__patientName_isset) ||
      (__patientName_isset && ((__patientName || other->__patientName) && ![__patientName isEqual:other->__patientName]))) {
    return NO;
  }
  if ((__markSubType_isset != other->__markSubType_isset) ||
      (__markSubType_isset && (__markSubType != other->__markSubType))) {
    return NO;
  }
  if ((__balance_isset != other->__balance_isset) ||
      (__balance_isset && ((__balance || other->__balance) && ![__balance isEqual:other->__balance]))) {
    return NO;
  }
  if ((__limits_isset != other->__limits_isset) ||
      (__limits_isset && ((__limits || other->__limits) && ![__limits isEqual:other->__limits]))) {
    return NO;
  }
  if ((__createTime_isset != other->__createTime_isset) ||
      (__createTime_isset && ((__createTime || other->__createTime) && ![__createTime isEqual:other->__createTime]))) {
    return NO;
  }
  if ((__barCode_isset != other->__barCode_isset) ||
      (__barCode_isset && ((__barCode || other->__barCode) && ![__barCode isEqual:other->__barCode]))) {
    return NO;
  }
  if ((__canCharge_isset != other->__canCharge_isset) ||
      (__canCharge_isset && (__canCharge != other->__canCharge))) {
    return NO;
  }
  if ((__needPwd_isset != other->__needPwd_isset) ||
      (__needPwd_isset && (__needPwd != other->__needPwd))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__hospId release_stub];
  [__hospName release_stub];
  [__patientId release_stub];
  [__markTypeId release_stub];
  [__markTypeName release_stub];
  [__markNo release_stub];
  [__cardNo release_stub];
  [__hospLogo release_stub];
  [__patientName release_stub];
  [__balance release_stub];
  [__limits release_stub];
  [__createTime release_stub];
  [__barCode release_stub];
  [super dealloc_stub];
}

- (NSString *) hospId {
  return [[__hospId retain_stub] autorelease_stub];
}

- (void) setHospId: (NSString *) hospId {
  [hospId retain_stub];
  [__hospId release_stub];
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  [__hospId release_stub];
  __hospId = nil;
  __hospId_isset = NO;
}

- (NSString *) hospName {
  return [[__hospName retain_stub] autorelease_stub];
}

- (void) setHospName: (NSString *) hospName {
  [hospName retain_stub];
  [__hospName release_stub];
  __hospName = hospName;
  __hospName_isset = YES;
}

- (BOOL) hospNameIsSet {
  return __hospName_isset;
}

- (void) unsetHospName {
  [__hospName release_stub];
  __hospName = nil;
  __hospName_isset = NO;
}

- (NSString *) patientId {
  return [[__patientId retain_stub] autorelease_stub];
}

- (void) setPatientId: (NSString *) patientId {
  [patientId retain_stub];
  [__patientId release_stub];
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  [__patientId release_stub];
  __patientId = nil;
  __patientId_isset = NO;
}

- (NSString *) markTypeId {
  return [[__markTypeId retain_stub] autorelease_stub];
}

- (void) setMarkTypeId: (NSString *) markTypeId {
  [markTypeId retain_stub];
  [__markTypeId release_stub];
  __markTypeId = markTypeId;
  __markTypeId_isset = YES;
}

- (BOOL) markTypeIdIsSet {
  return __markTypeId_isset;
}

- (void) unsetMarkTypeId {
  [__markTypeId release_stub];
  __markTypeId = nil;
  __markTypeId_isset = NO;
}

- (NSString *) markTypeName {
  return [[__markTypeName retain_stub] autorelease_stub];
}

- (void) setMarkTypeName: (NSString *) markTypeName {
  [markTypeName retain_stub];
  [__markTypeName release_stub];
  __markTypeName = markTypeName;
  __markTypeName_isset = YES;
}

- (BOOL) markTypeNameIsSet {
  return __markTypeName_isset;
}

- (void) unsetMarkTypeName {
  [__markTypeName release_stub];
  __markTypeName = nil;
  __markTypeName_isset = NO;
}

- (NSString *) markNo {
  return [[__markNo retain_stub] autorelease_stub];
}

- (void) setMarkNo: (NSString *) markNo {
  [markNo retain_stub];
  [__markNo release_stub];
  __markNo = markNo;
  __markNo_isset = YES;
}

- (BOOL) markNoIsSet {
  return __markNo_isset;
}

- (void) unsetMarkNo {
  [__markNo release_stub];
  __markNo = nil;
  __markNo_isset = NO;
}

- (NSString *) cardNo {
  return [[__cardNo retain_stub] autorelease_stub];
}

- (void) setCardNo: (NSString *) cardNo {
  [cardNo retain_stub];
  [__cardNo release_stub];
  __cardNo = cardNo;
  __cardNo_isset = YES;
}

- (BOOL) cardNoIsSet {
  return __cardNo_isset;
}

- (void) unsetCardNo {
  [__cardNo release_stub];
  __cardNo = nil;
  __cardNo_isset = NO;
}

- (NSString *) hospLogo {
  return [[__hospLogo retain_stub] autorelease_stub];
}

- (void) setHospLogo: (NSString *) hospLogo {
  [hospLogo retain_stub];
  [__hospLogo release_stub];
  __hospLogo = hospLogo;
  __hospLogo_isset = YES;
}

- (BOOL) hospLogoIsSet {
  return __hospLogo_isset;
}

- (void) unsetHospLogo {
  [__hospLogo release_stub];
  __hospLogo = nil;
  __hospLogo_isset = NO;
}

- (int32_t) isDefault {
  return __isDefault;
}

- (void) setIsDefault: (int32_t) isDefault {
  __isDefault = isDefault;
  __isDefault_isset = YES;
}

- (BOOL) isDefaultIsSet {
  return __isDefault_isset;
}

- (void) unsetIsDefault {
  __isDefault_isset = NO;
}

- (int64_t) cardId {
  return __cardId;
}

- (void) setCardId: (int64_t) cardId {
  __cardId = cardId;
  __cardId_isset = YES;
}

- (BOOL) cardIdIsSet {
  return __cardId_isset;
}

- (void) unsetCardId {
  __cardId_isset = NO;
}

- (NSString *) patientName {
  return [[__patientName retain_stub] autorelease_stub];
}

- (void) setPatientName: (NSString *) patientName {
  [patientName retain_stub];
  [__patientName release_stub];
  __patientName = patientName;
  __patientName_isset = YES;
}

- (BOOL) patientNameIsSet {
  return __patientName_isset;
}

- (void) unsetPatientName {
  [__patientName release_stub];
  __patientName = nil;
  __patientName_isset = NO;
}

- (int32_t) markSubType {
  return __markSubType;
}

- (void) setMarkSubType: (int32_t) markSubType {
  __markSubType = markSubType;
  __markSubType_isset = YES;
}

- (BOOL) markSubTypeIsSet {
  return __markSubType_isset;
}

- (void) unsetMarkSubType {
  __markSubType_isset = NO;
}

- (NSString *) balance {
  return [[__balance retain_stub] autorelease_stub];
}

- (void) setBalance: (NSString *) balance {
  [balance retain_stub];
  [__balance release_stub];
  __balance = balance;
  __balance_isset = YES;
}

- (BOOL) balanceIsSet {
  return __balance_isset;
}

- (void) unsetBalance {
  [__balance release_stub];
  __balance = nil;
  __balance_isset = NO;
}

- (NSString *) limits {
  return [[__limits retain_stub] autorelease_stub];
}

- (void) setLimits: (NSString *) limits {
  [limits retain_stub];
  [__limits release_stub];
  __limits = limits;
  __limits_isset = YES;
}

- (BOOL) limitsIsSet {
  return __limits_isset;
}

- (void) unsetLimits {
  [__limits release_stub];
  __limits = nil;
  __limits_isset = NO;
}

- (NSString *) createTime {
  return [[__createTime retain_stub] autorelease_stub];
}

- (void) setCreateTime: (NSString *) createTime {
  [createTime retain_stub];
  [__createTime release_stub];
  __createTime = createTime;
  __createTime_isset = YES;
}

- (BOOL) createTimeIsSet {
  return __createTime_isset;
}

- (void) unsetCreateTime {
  [__createTime release_stub];
  __createTime = nil;
  __createTime_isset = NO;
}

- (NSString *) barCode {
  return [[__barCode retain_stub] autorelease_stub];
}

- (void) setBarCode: (NSString *) barCode {
  [barCode retain_stub];
  [__barCode release_stub];
  __barCode = barCode;
  __barCode_isset = YES;
}

- (BOOL) barCodeIsSet {
  return __barCode_isset;
}

- (void) unsetBarCode {
  [__barCode release_stub];
  __barCode = nil;
  __barCode_isset = NO;
}

- (int32_t) canCharge {
  return __canCharge;
}

- (void) setCanCharge: (int32_t) canCharge {
  __canCharge = canCharge;
  __canCharge_isset = YES;
}

- (BOOL) canChargeIsSet {
  return __canCharge_isset;
}

- (void) unsetCanCharge {
  __canCharge_isset = NO;
}

- (int32_t) needPwd {
  return __needPwd;
}

- (void) setNeedPwd: (int32_t) needPwd {
  __needPwd = needPwd;
  __needPwd_isset = YES;
}

- (BOOL) needPwdIsSet {
  return __needPwd_isset;
}

- (void) unsetNeedPwd {
  __needPwd_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMarkTypeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMarkTypeName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMarkNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCardNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospLogo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsDefault: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCardId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMarkSubType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBalance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLimits: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreateTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBarCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCanCharge: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNeedPwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MedCardDto"];
  if (__hospId_isset) {
    if (__hospId != nil) {
      [outProtocol writeFieldBeginWithName: @"hospId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __hospId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospName_isset) {
    if (__hospName != nil) {
      [outProtocol writeFieldBeginWithName: @"hospName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __hospName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    if (__patientId != nil) {
      [outProtocol writeFieldBeginWithName: @"patientId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __patientId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__markTypeId_isset) {
    if (__markTypeId != nil) {
      [outProtocol writeFieldBeginWithName: @"markTypeId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __markTypeId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__markTypeName_isset) {
    if (__markTypeName != nil) {
      [outProtocol writeFieldBeginWithName: @"markTypeName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __markTypeName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__markNo_isset) {
    if (__markNo != nil) {
      [outProtocol writeFieldBeginWithName: @"markNo" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __markNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cardNo_isset) {
    if (__cardNo != nil) {
      [outProtocol writeFieldBeginWithName: @"cardNo" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __cardNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospLogo_isset) {
    if (__hospLogo != nil) {
      [outProtocol writeFieldBeginWithName: @"hospLogo" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __hospLogo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isDefault_isset) {
    [outProtocol writeFieldBeginWithName: @"isDefault" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __isDefault];
    [outProtocol writeFieldEnd];
  }
  if (__cardId_isset) {
    [outProtocol writeFieldBeginWithName: @"cardId" type: TType_I64 fieldID: 10];
    [outProtocol writeI64: __cardId];
    [outProtocol writeFieldEnd];
  }
  if (__patientName_isset) {
    if (__patientName != nil) {
      [outProtocol writeFieldBeginWithName: @"patientName" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __patientName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__markSubType_isset) {
    [outProtocol writeFieldBeginWithName: @"markSubType" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __markSubType];
    [outProtocol writeFieldEnd];
  }
  if (__balance_isset) {
    if (__balance != nil) {
      [outProtocol writeFieldBeginWithName: @"balance" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __balance];
      [outProtocol writeFieldEnd];
    }
  }
  if (__limits_isset) {
    if (__limits != nil) {
      [outProtocol writeFieldBeginWithName: @"limits" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __limits];
      [outProtocol writeFieldEnd];
    }
  }
  if (__createTime_isset) {
    if (__createTime != nil) {
      [outProtocol writeFieldBeginWithName: @"createTime" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __createTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__barCode_isset) {
    if (__barCode != nil) {
      [outProtocol writeFieldBeginWithName: @"barCode" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __barCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__canCharge_isset) {
    [outProtocol writeFieldBeginWithName: @"canCharge" type: TType_I32 fieldID: 17];
    [outProtocol writeI32: __canCharge];
    [outProtocol writeFieldEnd];
  }
  if (__needPwd_isset) {
    [outProtocol writeFieldBeginWithName: @"needPwd" type: TType_I32 fieldID: 18];
    [outProtocol writeI32: __needPwd];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFMedCardDto("];
  [ms appendString: @"hospId:"];
  [ms appendFormat: @"\"%@\"", __hospId];
  [ms appendString: @",hospName:"];
  [ms appendFormat: @"\"%@\"", __hospName];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"\"%@\"", __patientId];
  [ms appendString: @",markTypeId:"];
  [ms appendFormat: @"\"%@\"", __markTypeId];
  [ms appendString: @",markTypeName:"];
  [ms appendFormat: @"\"%@\"", __markTypeName];
  [ms appendString: @",markNo:"];
  [ms appendFormat: @"\"%@\"", __markNo];
  [ms appendString: @",cardNo:"];
  [ms appendFormat: @"\"%@\"", __cardNo];
  [ms appendString: @",hospLogo:"];
  [ms appendFormat: @"\"%@\"", __hospLogo];
  [ms appendString: @",isDefault:"];
  [ms appendFormat: @"%i", __isDefault];
  [ms appendString: @",cardId:"];
  [ms appendFormat: @"%qi", __cardId];
  [ms appendString: @",patientName:"];
  [ms appendFormat: @"\"%@\"", __patientName];
  [ms appendString: @",markSubType:"];
  [ms appendFormat: @"%i", __markSubType];
  [ms appendString: @",balance:"];
  [ms appendFormat: @"\"%@\"", __balance];
  [ms appendString: @",limits:"];
  [ms appendFormat: @"\"%@\"", __limits];
  [ms appendString: @",createTime:"];
  [ms appendFormat: @"\"%@\"", __createTime];
  [ms appendString: @",barCode:"];
  [ms appendFormat: @"\"%@\"", __barCode];
  [ms appendString: @",canCharge:"];
  [ms appendFormat: @"%i", __canCharge];
  [ms appendString: @",needPwd:"];
  [ms appendFormat: @"%i", __needPwd];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFDictData

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDictId: (NSString *) dictId name: (NSString *) name sample: (int32_t) sample medCardImage: (NSString *) medCardImage canCharge: (int32_t) canCharge needPwd: (int32_t) needPwd
{
  self = [super init];
  __dictId = [dictId retain_stub];
  __dictId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __sample = sample;
  __sample_isset = YES;
  __medCardImage = [medCardImage retain_stub];
  __medCardImage_isset = YES;
  __canCharge = canCharge;
  __canCharge_isset = YES;
  __needPwd = needPwd;
  __needPwd_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dictId"])
  {
    __dictId = [[decoder decodeObjectForKey: @"dictId"] retain_stub];
    __dictId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"sample"])
  {
    __sample = [decoder decodeInt32ForKey: @"sample"];
    __sample_isset = YES;
  }
  if ([decoder containsValueForKey: @"medCardImage"])
  {
    __medCardImage = [[decoder decodeObjectForKey: @"medCardImage"] retain_stub];
    __medCardImage_isset = YES;
  }
  if ([decoder containsValueForKey: @"canCharge"])
  {
    __canCharge = [decoder decodeInt32ForKey: @"canCharge"];
    __canCharge_isset = YES;
  }
  if ([decoder containsValueForKey: @"needPwd"])
  {
    __needPwd = [decoder decodeInt32ForKey: @"needPwd"];
    __needPwd_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dictId_isset)
  {
    [encoder encodeObject: __dictId forKey: @"dictId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__sample_isset)
  {
    [encoder encodeInt32: __sample forKey: @"sample"];
  }
  if (__medCardImage_isset)
  {
    [encoder encodeObject: __medCardImage forKey: @"medCardImage"];
  }
  if (__canCharge_isset)
  {
    [encoder encodeInt32: __canCharge forKey: @"canCharge"];
  }
  if (__needPwd_isset)
  {
    [encoder encodeInt32: __needPwd forKey: @"needPwd"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __dictId_isset ? 2654435761 : 0;
  if (__dictId_isset)
  {
    hash = (hash * 31) ^ [__dictId hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __sample_isset ? 2654435761 : 0;
  if (__sample_isset)
  {
    hash = (hash * 31) ^ [@(__sample) hash];
  }
  hash = (hash * 31) ^ __medCardImage_isset ? 2654435761 : 0;
  if (__medCardImage_isset)
  {
    hash = (hash * 31) ^ [__medCardImage hash];
  }
  hash = (hash * 31) ^ __canCharge_isset ? 2654435761 : 0;
  if (__canCharge_isset)
  {
    hash = (hash * 31) ^ [@(__canCharge) hash];
  }
  hash = (hash * 31) ^ __needPwd_isset ? 2654435761 : 0;
  if (__needPwd_isset)
  {
    hash = (hash * 31) ^ [@(__needPwd) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFDictData class]]) {
    return NO;
  }
  NXTFDictData *other = (NXTFDictData *)anObject;
  if ((__dictId_isset != other->__dictId_isset) ||
      (__dictId_isset && ((__dictId || other->__dictId) && ![__dictId isEqual:other->__dictId]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__sample_isset != other->__sample_isset) ||
      (__sample_isset && (__sample != other->__sample))) {
    return NO;
  }
  if ((__medCardImage_isset != other->__medCardImage_isset) ||
      (__medCardImage_isset && ((__medCardImage || other->__medCardImage) && ![__medCardImage isEqual:other->__medCardImage]))) {
    return NO;
  }
  if ((__canCharge_isset != other->__canCharge_isset) ||
      (__canCharge_isset && (__canCharge != other->__canCharge))) {
    return NO;
  }
  if ((__needPwd_isset != other->__needPwd_isset) ||
      (__needPwd_isset && (__needPwd != other->__needPwd))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__dictId release_stub];
  [__name release_stub];
  [__medCardImage release_stub];
  [super dealloc_stub];
}

- (NSString *) dictId {
  return [[__dictId retain_stub] autorelease_stub];
}

- (void) setDictId: (NSString *) dictId {
  [dictId retain_stub];
  [__dictId release_stub];
  __dictId = dictId;
  __dictId_isset = YES;
}

- (BOOL) dictIdIsSet {
  return __dictId_isset;
}

- (void) unsetDictId {
  [__dictId release_stub];
  __dictId = nil;
  __dictId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (int32_t) sample {
  return __sample;
}

- (void) setSample: (int32_t) sample {
  __sample = sample;
  __sample_isset = YES;
}

- (BOOL) sampleIsSet {
  return __sample_isset;
}

- (void) unsetSample {
  __sample_isset = NO;
}

- (NSString *) medCardImage {
  return [[__medCardImage retain_stub] autorelease_stub];
}

- (void) setMedCardImage: (NSString *) medCardImage {
  [medCardImage retain_stub];
  [__medCardImage release_stub];
  __medCardImage = medCardImage;
  __medCardImage_isset = YES;
}

- (BOOL) medCardImageIsSet {
  return __medCardImage_isset;
}

- (void) unsetMedCardImage {
  [__medCardImage release_stub];
  __medCardImage = nil;
  __medCardImage_isset = NO;
}

- (int32_t) canCharge {
  return __canCharge;
}

- (void) setCanCharge: (int32_t) canCharge {
  __canCharge = canCharge;
  __canCharge_isset = YES;
}

- (BOOL) canChargeIsSet {
  return __canCharge_isset;
}

- (void) unsetCanCharge {
  __canCharge_isset = NO;
}

- (int32_t) needPwd {
  return __needPwd;
}

- (void) setNeedPwd: (int32_t) needPwd {
  __needPwd = needPwd;
  __needPwd_isset = YES;
}

- (BOOL) needPwdIsSet {
  return __needPwd_isset;
}

- (void) unsetNeedPwd {
  __needPwd_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDictId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSample: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMedCardImage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCanCharge: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNeedPwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DictData"];
  if (__dictId_isset) {
    if (__dictId != nil) {
      [outProtocol writeFieldBeginWithName: @"dictId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dictId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sample_isset) {
    [outProtocol writeFieldBeginWithName: @"sample" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __sample];
    [outProtocol writeFieldEnd];
  }
  if (__medCardImage_isset) {
    if (__medCardImage != nil) {
      [outProtocol writeFieldBeginWithName: @"medCardImage" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __medCardImage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__canCharge_isset) {
    [outProtocol writeFieldBeginWithName: @"canCharge" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __canCharge];
    [outProtocol writeFieldEnd];
  }
  if (__needPwd_isset) {
    [outProtocol writeFieldBeginWithName: @"needPwd" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __needPwd];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFDictData("];
  [ms appendString: @"dictId:"];
  [ms appendFormat: @"\"%@\"", __dictId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",sample:"];
  [ms appendFormat: @"%i", __sample];
  [ms appendString: @",medCardImage:"];
  [ms appendFormat: @"\"%@\"", __medCardImage];
  [ms appendString: @",canCharge:"];
  [ms appendFormat: @"%i", __canCharge];
  [ms appendString: @",needPwd:"];
  [ms appendFormat: @"%i", __needPwd];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPatientDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.crowd = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithUserId: (NSString *) userId patientId: (NSString *) patientId headImg: (NSString *) headImg name: (NSString *) name gender: (NSString *) gender phoneNo: (NSString *) phoneNo papersNo: (NSString *) papersNo papersTypeId: (NSString *) papersTypeId medInsureance: (NSString *) medInsureance stature: (NSString *) stature weight: (NSString *) weight bornDate: (NSString *) bornDate address: (NSString *) address relationId: (NSString *) relationId criticalIllness: (NSString *) criticalIllness allergicHistory: (NSString *) allergicHistory familyHistory: (NSString *) familyHistory bloodType: (NSString *) bloodType cardNo: (NSString *) cardNo inpatientNo: (NSString *) inpatientNo cardCount: (NSString *) cardCount inpatientCount: (NSString *) inpatientCount patientHead: (NSString *) patientHead barCode: (NSString *) barCode authStatus: (NSString *) authStatus isChild: (NSString *) isChild papersPics: (NSMutableArray *) papersPics province: (NSString *) province city: (NSString *) city area: (NSString *) area addressDetail: (NSString *) addressDetail crowd: (NSMutableArray *) crowd
{
  self = [super init];
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __patientId = [patientId retain_stub];
  __patientId_isset = YES;
  __headImg = [headImg retain_stub];
  __headImg_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __gender = [gender retain_stub];
  __gender_isset = YES;
  __phoneNo = [phoneNo retain_stub];
  __phoneNo_isset = YES;
  __papersNo = [papersNo retain_stub];
  __papersNo_isset = YES;
  __papersTypeId = [papersTypeId retain_stub];
  __papersTypeId_isset = YES;
  __medInsureance = [medInsureance retain_stub];
  __medInsureance_isset = YES;
  __stature = [stature retain_stub];
  __stature_isset = YES;
  __weight = [weight retain_stub];
  __weight_isset = YES;
  __bornDate = [bornDate retain_stub];
  __bornDate_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __relationId = [relationId retain_stub];
  __relationId_isset = YES;
  __criticalIllness = [criticalIllness retain_stub];
  __criticalIllness_isset = YES;
  __allergicHistory = [allergicHistory retain_stub];
  __allergicHistory_isset = YES;
  __familyHistory = [familyHistory retain_stub];
  __familyHistory_isset = YES;
  __bloodType = [bloodType retain_stub];
  __bloodType_isset = YES;
  __cardNo = [cardNo retain_stub];
  __cardNo_isset = YES;
  __inpatientNo = [inpatientNo retain_stub];
  __inpatientNo_isset = YES;
  __cardCount = [cardCount retain_stub];
  __cardCount_isset = YES;
  __inpatientCount = [inpatientCount retain_stub];
  __inpatientCount_isset = YES;
  __patientHead = [patientHead retain_stub];
  __patientHead_isset = YES;
  __barCode = [barCode retain_stub];
  __barCode_isset = YES;
  __authStatus = [authStatus retain_stub];
  __authStatus_isset = YES;
  __isChild = [isChild retain_stub];
  __isChild_isset = YES;
  __papersPics = [papersPics retain_stub];
  __papersPics_isset = YES;
  __province = [province retain_stub];
  __province_isset = YES;
  __city = [city retain_stub];
  __city_isset = YES;
  __area = [area retain_stub];
  __area_isset = YES;
  __addressDetail = [addressDetail retain_stub];
  __addressDetail_isset = YES;
  __crowd = [crowd retain_stub];
  __crowd_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [[decoder decodeObjectForKey: @"patientId"] retain_stub];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"headImg"])
  {
    __headImg = [[decoder decodeObjectForKey: @"headImg"] retain_stub];
    __headImg_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [[decoder decodeObjectForKey: @"gender"] retain_stub];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneNo"])
  {
    __phoneNo = [[decoder decodeObjectForKey: @"phoneNo"] retain_stub];
    __phoneNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersNo"])
  {
    __papersNo = [[decoder decodeObjectForKey: @"papersNo"] retain_stub];
    __papersNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersTypeId"])
  {
    __papersTypeId = [[decoder decodeObjectForKey: @"papersTypeId"] retain_stub];
    __papersTypeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"medInsureance"])
  {
    __medInsureance = [[decoder decodeObjectForKey: @"medInsureance"] retain_stub];
    __medInsureance_isset = YES;
  }
  if ([decoder containsValueForKey: @"stature"])
  {
    __stature = [[decoder decodeObjectForKey: @"stature"] retain_stub];
    __stature_isset = YES;
  }
  if ([decoder containsValueForKey: @"weight"])
  {
    __weight = [[decoder decodeObjectForKey: @"weight"] retain_stub];
    __weight_isset = YES;
  }
  if ([decoder containsValueForKey: @"bornDate"])
  {
    __bornDate = [[decoder decodeObjectForKey: @"bornDate"] retain_stub];
    __bornDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"relationId"])
  {
    __relationId = [[decoder decodeObjectForKey: @"relationId"] retain_stub];
    __relationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"criticalIllness"])
  {
    __criticalIllness = [[decoder decodeObjectForKey: @"criticalIllness"] retain_stub];
    __criticalIllness_isset = YES;
  }
  if ([decoder containsValueForKey: @"allergicHistory"])
  {
    __allergicHistory = [[decoder decodeObjectForKey: @"allergicHistory"] retain_stub];
    __allergicHistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"familyHistory"])
  {
    __familyHistory = [[decoder decodeObjectForKey: @"familyHistory"] retain_stub];
    __familyHistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"bloodType"])
  {
    __bloodType = [[decoder decodeObjectForKey: @"bloodType"] retain_stub];
    __bloodType_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardNo"])
  {
    __cardNo = [[decoder decodeObjectForKey: @"cardNo"] retain_stub];
    __cardNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"inpatientNo"])
  {
    __inpatientNo = [[decoder decodeObjectForKey: @"inpatientNo"] retain_stub];
    __inpatientNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardCount"])
  {
    __cardCount = [[decoder decodeObjectForKey: @"cardCount"] retain_stub];
    __cardCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"inpatientCount"])
  {
    __inpatientCount = [[decoder decodeObjectForKey: @"inpatientCount"] retain_stub];
    __inpatientCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientHead"])
  {
    __patientHead = [[decoder decodeObjectForKey: @"patientHead"] retain_stub];
    __patientHead_isset = YES;
  }
  if ([decoder containsValueForKey: @"barCode"])
  {
    __barCode = [[decoder decodeObjectForKey: @"barCode"] retain_stub];
    __barCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"authStatus"])
  {
    __authStatus = [[decoder decodeObjectForKey: @"authStatus"] retain_stub];
    __authStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"isChild"])
  {
    __isChild = [[decoder decodeObjectForKey: @"isChild"] retain_stub];
    __isChild_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersPics"])
  {
    __papersPics = [[decoder decodeObjectForKey: @"papersPics"] retain_stub];
    __papersPics_isset = YES;
  }
  if ([decoder containsValueForKey: @"province"])
  {
    __province = [[decoder decodeObjectForKey: @"province"] retain_stub];
    __province_isset = YES;
  }
  if ([decoder containsValueForKey: @"city"])
  {
    __city = [[decoder decodeObjectForKey: @"city"] retain_stub];
    __city_isset = YES;
  }
  if ([decoder containsValueForKey: @"area"])
  {
    __area = [[decoder decodeObjectForKey: @"area"] retain_stub];
    __area_isset = YES;
  }
  if ([decoder containsValueForKey: @"addressDetail"])
  {
    __addressDetail = [[decoder decodeObjectForKey: @"addressDetail"] retain_stub];
    __addressDetail_isset = YES;
  }
  if ([decoder containsValueForKey: @"crowd"])
  {
    __crowd = [[decoder decodeObjectForKey: @"crowd"] retain_stub];
    __crowd_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeObject: __patientId forKey: @"patientId"];
  }
  if (__headImg_isset)
  {
    [encoder encodeObject: __headImg forKey: @"headImg"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__gender_isset)
  {
    [encoder encodeObject: __gender forKey: @"gender"];
  }
  if (__phoneNo_isset)
  {
    [encoder encodeObject: __phoneNo forKey: @"phoneNo"];
  }
  if (__papersNo_isset)
  {
    [encoder encodeObject: __papersNo forKey: @"papersNo"];
  }
  if (__papersTypeId_isset)
  {
    [encoder encodeObject: __papersTypeId forKey: @"papersTypeId"];
  }
  if (__medInsureance_isset)
  {
    [encoder encodeObject: __medInsureance forKey: @"medInsureance"];
  }
  if (__stature_isset)
  {
    [encoder encodeObject: __stature forKey: @"stature"];
  }
  if (__weight_isset)
  {
    [encoder encodeObject: __weight forKey: @"weight"];
  }
  if (__bornDate_isset)
  {
    [encoder encodeObject: __bornDate forKey: @"bornDate"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__relationId_isset)
  {
    [encoder encodeObject: __relationId forKey: @"relationId"];
  }
  if (__criticalIllness_isset)
  {
    [encoder encodeObject: __criticalIllness forKey: @"criticalIllness"];
  }
  if (__allergicHistory_isset)
  {
    [encoder encodeObject: __allergicHistory forKey: @"allergicHistory"];
  }
  if (__familyHistory_isset)
  {
    [encoder encodeObject: __familyHistory forKey: @"familyHistory"];
  }
  if (__bloodType_isset)
  {
    [encoder encodeObject: __bloodType forKey: @"bloodType"];
  }
  if (__cardNo_isset)
  {
    [encoder encodeObject: __cardNo forKey: @"cardNo"];
  }
  if (__inpatientNo_isset)
  {
    [encoder encodeObject: __inpatientNo forKey: @"inpatientNo"];
  }
  if (__cardCount_isset)
  {
    [encoder encodeObject: __cardCount forKey: @"cardCount"];
  }
  if (__inpatientCount_isset)
  {
    [encoder encodeObject: __inpatientCount forKey: @"inpatientCount"];
  }
  if (__patientHead_isset)
  {
    [encoder encodeObject: __patientHead forKey: @"patientHead"];
  }
  if (__barCode_isset)
  {
    [encoder encodeObject: __barCode forKey: @"barCode"];
  }
  if (__authStatus_isset)
  {
    [encoder encodeObject: __authStatus forKey: @"authStatus"];
  }
  if (__isChild_isset)
  {
    [encoder encodeObject: __isChild forKey: @"isChild"];
  }
  if (__papersPics_isset)
  {
    [encoder encodeObject: __papersPics forKey: @"papersPics"];
  }
  if (__province_isset)
  {
    [encoder encodeObject: __province forKey: @"province"];
  }
  if (__city_isset)
  {
    [encoder encodeObject: __city forKey: @"city"];
  }
  if (__area_isset)
  {
    [encoder encodeObject: __area forKey: @"area"];
  }
  if (__addressDetail_isset)
  {
    [encoder encodeObject: __addressDetail forKey: @"addressDetail"];
  }
  if (__crowd_isset)
  {
    [encoder encodeObject: __crowd forKey: @"crowd"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __userId_isset ? 2654435761 : 0;
  if (__userId_isset)
  {
    hash = (hash * 31) ^ [__userId hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [__patientId hash];
  }
  hash = (hash * 31) ^ __headImg_isset ? 2654435761 : 0;
  if (__headImg_isset)
  {
    hash = (hash * 31) ^ [__headImg hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [__gender hash];
  }
  hash = (hash * 31) ^ __phoneNo_isset ? 2654435761 : 0;
  if (__phoneNo_isset)
  {
    hash = (hash * 31) ^ [__phoneNo hash];
  }
  hash = (hash * 31) ^ __papersNo_isset ? 2654435761 : 0;
  if (__papersNo_isset)
  {
    hash = (hash * 31) ^ [__papersNo hash];
  }
  hash = (hash * 31) ^ __papersTypeId_isset ? 2654435761 : 0;
  if (__papersTypeId_isset)
  {
    hash = (hash * 31) ^ [__papersTypeId hash];
  }
  hash = (hash * 31) ^ __medInsureance_isset ? 2654435761 : 0;
  if (__medInsureance_isset)
  {
    hash = (hash * 31) ^ [__medInsureance hash];
  }
  hash = (hash * 31) ^ __stature_isset ? 2654435761 : 0;
  if (__stature_isset)
  {
    hash = (hash * 31) ^ [__stature hash];
  }
  hash = (hash * 31) ^ __weight_isset ? 2654435761 : 0;
  if (__weight_isset)
  {
    hash = (hash * 31) ^ [__weight hash];
  }
  hash = (hash * 31) ^ __bornDate_isset ? 2654435761 : 0;
  if (__bornDate_isset)
  {
    hash = (hash * 31) ^ [__bornDate hash];
  }
  hash = (hash * 31) ^ __address_isset ? 2654435761 : 0;
  if (__address_isset)
  {
    hash = (hash * 31) ^ [__address hash];
  }
  hash = (hash * 31) ^ __relationId_isset ? 2654435761 : 0;
  if (__relationId_isset)
  {
    hash = (hash * 31) ^ [__relationId hash];
  }
  hash = (hash * 31) ^ __criticalIllness_isset ? 2654435761 : 0;
  if (__criticalIllness_isset)
  {
    hash = (hash * 31) ^ [__criticalIllness hash];
  }
  hash = (hash * 31) ^ __allergicHistory_isset ? 2654435761 : 0;
  if (__allergicHistory_isset)
  {
    hash = (hash * 31) ^ [__allergicHistory hash];
  }
  hash = (hash * 31) ^ __familyHistory_isset ? 2654435761 : 0;
  if (__familyHistory_isset)
  {
    hash = (hash * 31) ^ [__familyHistory hash];
  }
  hash = (hash * 31) ^ __bloodType_isset ? 2654435761 : 0;
  if (__bloodType_isset)
  {
    hash = (hash * 31) ^ [__bloodType hash];
  }
  hash = (hash * 31) ^ __cardNo_isset ? 2654435761 : 0;
  if (__cardNo_isset)
  {
    hash = (hash * 31) ^ [__cardNo hash];
  }
  hash = (hash * 31) ^ __inpatientNo_isset ? 2654435761 : 0;
  if (__inpatientNo_isset)
  {
    hash = (hash * 31) ^ [__inpatientNo hash];
  }
  hash = (hash * 31) ^ __cardCount_isset ? 2654435761 : 0;
  if (__cardCount_isset)
  {
    hash = (hash * 31) ^ [__cardCount hash];
  }
  hash = (hash * 31) ^ __inpatientCount_isset ? 2654435761 : 0;
  if (__inpatientCount_isset)
  {
    hash = (hash * 31) ^ [__inpatientCount hash];
  }
  hash = (hash * 31) ^ __patientHead_isset ? 2654435761 : 0;
  if (__patientHead_isset)
  {
    hash = (hash * 31) ^ [__patientHead hash];
  }
  hash = (hash * 31) ^ __barCode_isset ? 2654435761 : 0;
  if (__barCode_isset)
  {
    hash = (hash * 31) ^ [__barCode hash];
  }
  hash = (hash * 31) ^ __authStatus_isset ? 2654435761 : 0;
  if (__authStatus_isset)
  {
    hash = (hash * 31) ^ [__authStatus hash];
  }
  hash = (hash * 31) ^ __isChild_isset ? 2654435761 : 0;
  if (__isChild_isset)
  {
    hash = (hash * 31) ^ [__isChild hash];
  }
  hash = (hash * 31) ^ __papersPics_isset ? 2654435761 : 0;
  if (__papersPics_isset)
  {
    hash = (hash * 31) ^ [__papersPics hash];
  }
  hash = (hash * 31) ^ __province_isset ? 2654435761 : 0;
  if (__province_isset)
  {
    hash = (hash * 31) ^ [__province hash];
  }
  hash = (hash * 31) ^ __city_isset ? 2654435761 : 0;
  if (__city_isset)
  {
    hash = (hash * 31) ^ [__city hash];
  }
  hash = (hash * 31) ^ __area_isset ? 2654435761 : 0;
  if (__area_isset)
  {
    hash = (hash * 31) ^ [__area hash];
  }
  hash = (hash * 31) ^ __addressDetail_isset ? 2654435761 : 0;
  if (__addressDetail_isset)
  {
    hash = (hash * 31) ^ [__addressDetail hash];
  }
  hash = (hash * 31) ^ __crowd_isset ? 2654435761 : 0;
  if (__crowd_isset)
  {
    hash = (hash * 31) ^ [__crowd hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPatientDto class]]) {
    return NO;
  }
  NXTFPatientDto *other = (NXTFPatientDto *)anObject;
  if ((__userId_isset != other->__userId_isset) ||
      (__userId_isset && ((__userId || other->__userId) && ![__userId isEqual:other->__userId]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && ((__patientId || other->__patientId) && ![__patientId isEqual:other->__patientId]))) {
    return NO;
  }
  if ((__headImg_isset != other->__headImg_isset) ||
      (__headImg_isset && ((__headImg || other->__headImg) && ![__headImg isEqual:other->__headImg]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && ((__gender || other->__gender) && ![__gender isEqual:other->__gender]))) {
    return NO;
  }
  if ((__phoneNo_isset != other->__phoneNo_isset) ||
      (__phoneNo_isset && ((__phoneNo || other->__phoneNo) && ![__phoneNo isEqual:other->__phoneNo]))) {
    return NO;
  }
  if ((__papersNo_isset != other->__papersNo_isset) ||
      (__papersNo_isset && ((__papersNo || other->__papersNo) && ![__papersNo isEqual:other->__papersNo]))) {
    return NO;
  }
  if ((__papersTypeId_isset != other->__papersTypeId_isset) ||
      (__papersTypeId_isset && ((__papersTypeId || other->__papersTypeId) && ![__papersTypeId isEqual:other->__papersTypeId]))) {
    return NO;
  }
  if ((__medInsureance_isset != other->__medInsureance_isset) ||
      (__medInsureance_isset && ((__medInsureance || other->__medInsureance) && ![__medInsureance isEqual:other->__medInsureance]))) {
    return NO;
  }
  if ((__stature_isset != other->__stature_isset) ||
      (__stature_isset && ((__stature || other->__stature) && ![__stature isEqual:other->__stature]))) {
    return NO;
  }
  if ((__weight_isset != other->__weight_isset) ||
      (__weight_isset && ((__weight || other->__weight) && ![__weight isEqual:other->__weight]))) {
    return NO;
  }
  if ((__bornDate_isset != other->__bornDate_isset) ||
      (__bornDate_isset && ((__bornDate || other->__bornDate) && ![__bornDate isEqual:other->__bornDate]))) {
    return NO;
  }
  if ((__address_isset != other->__address_isset) ||
      (__address_isset && ((__address || other->__address) && ![__address isEqual:other->__address]))) {
    return NO;
  }
  if ((__relationId_isset != other->__relationId_isset) ||
      (__relationId_isset && ((__relationId || other->__relationId) && ![__relationId isEqual:other->__relationId]))) {
    return NO;
  }
  if ((__criticalIllness_isset != other->__criticalIllness_isset) ||
      (__criticalIllness_isset && ((__criticalIllness || other->__criticalIllness) && ![__criticalIllness isEqual:other->__criticalIllness]))) {
    return NO;
  }
  if ((__allergicHistory_isset != other->__allergicHistory_isset) ||
      (__allergicHistory_isset && ((__allergicHistory || other->__allergicHistory) && ![__allergicHistory isEqual:other->__allergicHistory]))) {
    return NO;
  }
  if ((__familyHistory_isset != other->__familyHistory_isset) ||
      (__familyHistory_isset && ((__familyHistory || other->__familyHistory) && ![__familyHistory isEqual:other->__familyHistory]))) {
    return NO;
  }
  if ((__bloodType_isset != other->__bloodType_isset) ||
      (__bloodType_isset && ((__bloodType || other->__bloodType) && ![__bloodType isEqual:other->__bloodType]))) {
    return NO;
  }
  if ((__cardNo_isset != other->__cardNo_isset) ||
      (__cardNo_isset && ((__cardNo || other->__cardNo) && ![__cardNo isEqual:other->__cardNo]))) {
    return NO;
  }
  if ((__inpatientNo_isset != other->__inpatientNo_isset) ||
      (__inpatientNo_isset && ((__inpatientNo || other->__inpatientNo) && ![__inpatientNo isEqual:other->__inpatientNo]))) {
    return NO;
  }
  if ((__cardCount_isset != other->__cardCount_isset) ||
      (__cardCount_isset && ((__cardCount || other->__cardCount) && ![__cardCount isEqual:other->__cardCount]))) {
    return NO;
  }
  if ((__inpatientCount_isset != other->__inpatientCount_isset) ||
      (__inpatientCount_isset && ((__inpatientCount || other->__inpatientCount) && ![__inpatientCount isEqual:other->__inpatientCount]))) {
    return NO;
  }
  if ((__patientHead_isset != other->__patientHead_isset) ||
      (__patientHead_isset && ((__patientHead || other->__patientHead) && ![__patientHead isEqual:other->__patientHead]))) {
    return NO;
  }
  if ((__barCode_isset != other->__barCode_isset) ||
      (__barCode_isset && ((__barCode || other->__barCode) && ![__barCode isEqual:other->__barCode]))) {
    return NO;
  }
  if ((__authStatus_isset != other->__authStatus_isset) ||
      (__authStatus_isset && ((__authStatus || other->__authStatus) && ![__authStatus isEqual:other->__authStatus]))) {
    return NO;
  }
  if ((__isChild_isset != other->__isChild_isset) ||
      (__isChild_isset && ((__isChild || other->__isChild) && ![__isChild isEqual:other->__isChild]))) {
    return NO;
  }
  if ((__papersPics_isset != other->__papersPics_isset) ||
      (__papersPics_isset && ((__papersPics || other->__papersPics) && ![__papersPics isEqual:other->__papersPics]))) {
    return NO;
  }
  if ((__province_isset != other->__province_isset) ||
      (__province_isset && ((__province || other->__province) && ![__province isEqual:other->__province]))) {
    return NO;
  }
  if ((__city_isset != other->__city_isset) ||
      (__city_isset && ((__city || other->__city) && ![__city isEqual:other->__city]))) {
    return NO;
  }
  if ((__area_isset != other->__area_isset) ||
      (__area_isset && ((__area || other->__area) && ![__area isEqual:other->__area]))) {
    return NO;
  }
  if ((__addressDetail_isset != other->__addressDetail_isset) ||
      (__addressDetail_isset && ((__addressDetail || other->__addressDetail) && ![__addressDetail isEqual:other->__addressDetail]))) {
    return NO;
  }
  if ((__crowd_isset != other->__crowd_isset) ||
      (__crowd_isset && ((__crowd || other->__crowd) && ![__crowd isEqual:other->__crowd]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__userId release_stub];
  [__patientId release_stub];
  [__headImg release_stub];
  [__name release_stub];
  [__gender release_stub];
  [__phoneNo release_stub];
  [__papersNo release_stub];
  [__papersTypeId release_stub];
  [__medInsureance release_stub];
  [__stature release_stub];
  [__weight release_stub];
  [__bornDate release_stub];
  [__address release_stub];
  [__relationId release_stub];
  [__criticalIllness release_stub];
  [__allergicHistory release_stub];
  [__familyHistory release_stub];
  [__bloodType release_stub];
  [__cardNo release_stub];
  [__inpatientNo release_stub];
  [__cardCount release_stub];
  [__inpatientCount release_stub];
  [__patientHead release_stub];
  [__barCode release_stub];
  [__authStatus release_stub];
  [__isChild release_stub];
  [__papersPics release_stub];
  [__province release_stub];
  [__city release_stub];
  [__area release_stub];
  [__addressDetail release_stub];
  [__crowd release_stub];
  [super dealloc_stub];
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSString *) patientId {
  return [[__patientId retain_stub] autorelease_stub];
}

- (void) setPatientId: (NSString *) patientId {
  [patientId retain_stub];
  [__patientId release_stub];
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  [__patientId release_stub];
  __patientId = nil;
  __patientId_isset = NO;
}

- (NSString *) headImg {
  return [[__headImg retain_stub] autorelease_stub];
}

- (void) setHeadImg: (NSString *) headImg {
  [headImg retain_stub];
  [__headImg release_stub];
  __headImg = headImg;
  __headImg_isset = YES;
}

- (BOOL) headImgIsSet {
  return __headImg_isset;
}

- (void) unsetHeadImg {
  [__headImg release_stub];
  __headImg = nil;
  __headImg_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) gender {
  return [[__gender retain_stub] autorelease_stub];
}

- (void) setGender: (NSString *) gender {
  [gender retain_stub];
  [__gender release_stub];
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  [__gender release_stub];
  __gender = nil;
  __gender_isset = NO;
}

- (NSString *) phoneNo {
  return [[__phoneNo retain_stub] autorelease_stub];
}

- (void) setPhoneNo: (NSString *) phoneNo {
  [phoneNo retain_stub];
  [__phoneNo release_stub];
  __phoneNo = phoneNo;
  __phoneNo_isset = YES;
}

- (BOOL) phoneNoIsSet {
  return __phoneNo_isset;
}

- (void) unsetPhoneNo {
  [__phoneNo release_stub];
  __phoneNo = nil;
  __phoneNo_isset = NO;
}

- (NSString *) papersNo {
  return [[__papersNo retain_stub] autorelease_stub];
}

- (void) setPapersNo: (NSString *) papersNo {
  [papersNo retain_stub];
  [__papersNo release_stub];
  __papersNo = papersNo;
  __papersNo_isset = YES;
}

- (BOOL) papersNoIsSet {
  return __papersNo_isset;
}

- (void) unsetPapersNo {
  [__papersNo release_stub];
  __papersNo = nil;
  __papersNo_isset = NO;
}

- (NSString *) papersTypeId {
  return [[__papersTypeId retain_stub] autorelease_stub];
}

- (void) setPapersTypeId: (NSString *) papersTypeId {
  [papersTypeId retain_stub];
  [__papersTypeId release_stub];
  __papersTypeId = papersTypeId;
  __papersTypeId_isset = YES;
}

- (BOOL) papersTypeIdIsSet {
  return __papersTypeId_isset;
}

- (void) unsetPapersTypeId {
  [__papersTypeId release_stub];
  __papersTypeId = nil;
  __papersTypeId_isset = NO;
}

- (NSString *) medInsureance {
  return [[__medInsureance retain_stub] autorelease_stub];
}

- (void) setMedInsureance: (NSString *) medInsureance {
  [medInsureance retain_stub];
  [__medInsureance release_stub];
  __medInsureance = medInsureance;
  __medInsureance_isset = YES;
}

- (BOOL) medInsureanceIsSet {
  return __medInsureance_isset;
}

- (void) unsetMedInsureance {
  [__medInsureance release_stub];
  __medInsureance = nil;
  __medInsureance_isset = NO;
}

- (NSString *) stature {
  return [[__stature retain_stub] autorelease_stub];
}

- (void) setStature: (NSString *) stature {
  [stature retain_stub];
  [__stature release_stub];
  __stature = stature;
  __stature_isset = YES;
}

- (BOOL) statureIsSet {
  return __stature_isset;
}

- (void) unsetStature {
  [__stature release_stub];
  __stature = nil;
  __stature_isset = NO;
}

- (NSString *) weight {
  return [[__weight retain_stub] autorelease_stub];
}

- (void) setWeight: (NSString *) weight {
  [weight retain_stub];
  [__weight release_stub];
  __weight = weight;
  __weight_isset = YES;
}

- (BOOL) weightIsSet {
  return __weight_isset;
}

- (void) unsetWeight {
  [__weight release_stub];
  __weight = nil;
  __weight_isset = NO;
}

- (NSString *) bornDate {
  return [[__bornDate retain_stub] autorelease_stub];
}

- (void) setBornDate: (NSString *) bornDate {
  [bornDate retain_stub];
  [__bornDate release_stub];
  __bornDate = bornDate;
  __bornDate_isset = YES;
}

- (BOOL) bornDateIsSet {
  return __bornDate_isset;
}

- (void) unsetBornDate {
  [__bornDate release_stub];
  __bornDate = nil;
  __bornDate_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (NSString *) relationId {
  return [[__relationId retain_stub] autorelease_stub];
}

- (void) setRelationId: (NSString *) relationId {
  [relationId retain_stub];
  [__relationId release_stub];
  __relationId = relationId;
  __relationId_isset = YES;
}

- (BOOL) relationIdIsSet {
  return __relationId_isset;
}

- (void) unsetRelationId {
  [__relationId release_stub];
  __relationId = nil;
  __relationId_isset = NO;
}

- (NSString *) criticalIllness {
  return [[__criticalIllness retain_stub] autorelease_stub];
}

- (void) setCriticalIllness: (NSString *) criticalIllness {
  [criticalIllness retain_stub];
  [__criticalIllness release_stub];
  __criticalIllness = criticalIllness;
  __criticalIllness_isset = YES;
}

- (BOOL) criticalIllnessIsSet {
  return __criticalIllness_isset;
}

- (void) unsetCriticalIllness {
  [__criticalIllness release_stub];
  __criticalIllness = nil;
  __criticalIllness_isset = NO;
}

- (NSString *) allergicHistory {
  return [[__allergicHistory retain_stub] autorelease_stub];
}

- (void) setAllergicHistory: (NSString *) allergicHistory {
  [allergicHistory retain_stub];
  [__allergicHistory release_stub];
  __allergicHistory = allergicHistory;
  __allergicHistory_isset = YES;
}

- (BOOL) allergicHistoryIsSet {
  return __allergicHistory_isset;
}

- (void) unsetAllergicHistory {
  [__allergicHistory release_stub];
  __allergicHistory = nil;
  __allergicHistory_isset = NO;
}

- (NSString *) familyHistory {
  return [[__familyHistory retain_stub] autorelease_stub];
}

- (void) setFamilyHistory: (NSString *) familyHistory {
  [familyHistory retain_stub];
  [__familyHistory release_stub];
  __familyHistory = familyHistory;
  __familyHistory_isset = YES;
}

- (BOOL) familyHistoryIsSet {
  return __familyHistory_isset;
}

- (void) unsetFamilyHistory {
  [__familyHistory release_stub];
  __familyHistory = nil;
  __familyHistory_isset = NO;
}

- (NSString *) bloodType {
  return [[__bloodType retain_stub] autorelease_stub];
}

- (void) setBloodType: (NSString *) bloodType {
  [bloodType retain_stub];
  [__bloodType release_stub];
  __bloodType = bloodType;
  __bloodType_isset = YES;
}

- (BOOL) bloodTypeIsSet {
  return __bloodType_isset;
}

- (void) unsetBloodType {
  [__bloodType release_stub];
  __bloodType = nil;
  __bloodType_isset = NO;
}

- (NSString *) cardNo {
  return [[__cardNo retain_stub] autorelease_stub];
}

- (void) setCardNo: (NSString *) cardNo {
  [cardNo retain_stub];
  [__cardNo release_stub];
  __cardNo = cardNo;
  __cardNo_isset = YES;
}

- (BOOL) cardNoIsSet {
  return __cardNo_isset;
}

- (void) unsetCardNo {
  [__cardNo release_stub];
  __cardNo = nil;
  __cardNo_isset = NO;
}

- (NSString *) inpatientNo {
  return [[__inpatientNo retain_stub] autorelease_stub];
}

- (void) setInpatientNo: (NSString *) inpatientNo {
  [inpatientNo retain_stub];
  [__inpatientNo release_stub];
  __inpatientNo = inpatientNo;
  __inpatientNo_isset = YES;
}

- (BOOL) inpatientNoIsSet {
  return __inpatientNo_isset;
}

- (void) unsetInpatientNo {
  [__inpatientNo release_stub];
  __inpatientNo = nil;
  __inpatientNo_isset = NO;
}

- (NSString *) cardCount {
  return [[__cardCount retain_stub] autorelease_stub];
}

- (void) setCardCount: (NSString *) cardCount {
  [cardCount retain_stub];
  [__cardCount release_stub];
  __cardCount = cardCount;
  __cardCount_isset = YES;
}

- (BOOL) cardCountIsSet {
  return __cardCount_isset;
}

- (void) unsetCardCount {
  [__cardCount release_stub];
  __cardCount = nil;
  __cardCount_isset = NO;
}

- (NSString *) inpatientCount {
  return [[__inpatientCount retain_stub] autorelease_stub];
}

- (void) setInpatientCount: (NSString *) inpatientCount {
  [inpatientCount retain_stub];
  [__inpatientCount release_stub];
  __inpatientCount = inpatientCount;
  __inpatientCount_isset = YES;
}

- (BOOL) inpatientCountIsSet {
  return __inpatientCount_isset;
}

- (void) unsetInpatientCount {
  [__inpatientCount release_stub];
  __inpatientCount = nil;
  __inpatientCount_isset = NO;
}

- (NSString *) patientHead {
  return [[__patientHead retain_stub] autorelease_stub];
}

- (void) setPatientHead: (NSString *) patientHead {
  [patientHead retain_stub];
  [__patientHead release_stub];
  __patientHead = patientHead;
  __patientHead_isset = YES;
}

- (BOOL) patientHeadIsSet {
  return __patientHead_isset;
}

- (void) unsetPatientHead {
  [__patientHead release_stub];
  __patientHead = nil;
  __patientHead_isset = NO;
}

- (NSString *) barCode {
  return [[__barCode retain_stub] autorelease_stub];
}

- (void) setBarCode: (NSString *) barCode {
  [barCode retain_stub];
  [__barCode release_stub];
  __barCode = barCode;
  __barCode_isset = YES;
}

- (BOOL) barCodeIsSet {
  return __barCode_isset;
}

- (void) unsetBarCode {
  [__barCode release_stub];
  __barCode = nil;
  __barCode_isset = NO;
}

- (NSString *) authStatus {
  return [[__authStatus retain_stub] autorelease_stub];
}

- (void) setAuthStatus: (NSString *) authStatus {
  [authStatus retain_stub];
  [__authStatus release_stub];
  __authStatus = authStatus;
  __authStatus_isset = YES;
}

- (BOOL) authStatusIsSet {
  return __authStatus_isset;
}

- (void) unsetAuthStatus {
  [__authStatus release_stub];
  __authStatus = nil;
  __authStatus_isset = NO;
}

- (NSString *) isChild {
  return [[__isChild retain_stub] autorelease_stub];
}

- (void) setIsChild: (NSString *) isChild {
  [isChild retain_stub];
  [__isChild release_stub];
  __isChild = isChild;
  __isChild_isset = YES;
}

- (BOOL) isChildIsSet {
  return __isChild_isset;
}

- (void) unsetIsChild {
  [__isChild release_stub];
  __isChild = nil;
  __isChild_isset = NO;
}

- (NSMutableArray *) papersPics {
  return [[__papersPics retain_stub] autorelease_stub];
}

- (void) setPapersPics: (NSMutableArray *) papersPics {
  [papersPics retain_stub];
  [__papersPics release_stub];
  __papersPics = papersPics;
  __papersPics_isset = YES;
}

- (BOOL) papersPicsIsSet {
  return __papersPics_isset;
}

- (void) unsetPapersPics {
  [__papersPics release_stub];
  __papersPics = nil;
  __papersPics_isset = NO;
}

- (NSString *) province {
  return [[__province retain_stub] autorelease_stub];
}

- (void) setProvince: (NSString *) province {
  [province retain_stub];
  [__province release_stub];
  __province = province;
  __province_isset = YES;
}

- (BOOL) provinceIsSet {
  return __province_isset;
}

- (void) unsetProvince {
  [__province release_stub];
  __province = nil;
  __province_isset = NO;
}

- (NSString *) city {
  return [[__city retain_stub] autorelease_stub];
}

- (void) setCity: (NSString *) city {
  [city retain_stub];
  [__city release_stub];
  __city = city;
  __city_isset = YES;
}

- (BOOL) cityIsSet {
  return __city_isset;
}

- (void) unsetCity {
  [__city release_stub];
  __city = nil;
  __city_isset = NO;
}

- (NSString *) area {
  return [[__area retain_stub] autorelease_stub];
}

- (void) setArea: (NSString *) area {
  [area retain_stub];
  [__area release_stub];
  __area = area;
  __area_isset = YES;
}

- (BOOL) areaIsSet {
  return __area_isset;
}

- (void) unsetArea {
  [__area release_stub];
  __area = nil;
  __area_isset = NO;
}

- (NSString *) addressDetail {
  return [[__addressDetail retain_stub] autorelease_stub];
}

- (void) setAddressDetail: (NSString *) addressDetail {
  [addressDetail retain_stub];
  [__addressDetail release_stub];
  __addressDetail = addressDetail;
  __addressDetail_isset = YES;
}

- (BOOL) addressDetailIsSet {
  return __addressDetail_isset;
}

- (void) unsetAddressDetail {
  [__addressDetail release_stub];
  __addressDetail = nil;
  __addressDetail_isset = NO;
}

- (NSMutableArray *) crowd {
  return [[__crowd retain_stub] autorelease_stub];
}

- (void) setCrowd: (NSMutableArray *) crowd {
  [crowd retain_stub];
  [__crowd release_stub];
  __crowd = crowd;
  __crowd_isset = YES;
}

- (BOOL) crowdIsSet {
  return __crowd_isset;
}

- (void) unsetCrowd {
  [__crowd release_stub];
  __crowd = nil;
  __crowd_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHeadImg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoneNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPapersNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPapersTypeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMedInsureance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStature: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWeight: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBornDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRelationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCriticalIllness: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAllergicHistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFamilyHistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBloodType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCardNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInpatientNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCardCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInpatientCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientHead: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBarCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 26:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsChild: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 27:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            NSString * _elem17 = [inProtocol readString];
            [fieldValue addObject: _elem17];
          }
          [inProtocol readListEnd];
          [self setPapersPics: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 28:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProvince: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 29:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 30:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setArea: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 31:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddressDetail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 32:
        if (fieldType == TType_LIST) {
          int _size18;
          [inProtocol readListBeginReturningElementType: NULL size: &_size18];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size18];
          int _i19;
          for (_i19 = 0; _i19 < _size18; ++_i19)
          {
            NSString * _elem20 = [inProtocol readString];
            [fieldValue addObject: _elem20];
          }
          [inProtocol readListEnd];
          [self setCrowd: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PatientDto"];
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    if (__patientId != nil) {
      [outProtocol writeFieldBeginWithName: @"patientId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __patientId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__headImg_isset) {
    if (__headImg != nil) {
      [outProtocol writeFieldBeginWithName: @"headImg" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __headImg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    if (__gender != nil) {
      [outProtocol writeFieldBeginWithName: @"gender" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __gender];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phoneNo_isset) {
    if (__phoneNo != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneNo" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __phoneNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__papersNo_isset) {
    if (__papersNo != nil) {
      [outProtocol writeFieldBeginWithName: @"papersNo" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __papersNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__papersTypeId_isset) {
    if (__papersTypeId != nil) {
      [outProtocol writeFieldBeginWithName: @"papersTypeId" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __papersTypeId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__medInsureance_isset) {
    if (__medInsureance != nil) {
      [outProtocol writeFieldBeginWithName: @"medInsureance" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __medInsureance];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stature_isset) {
    if (__stature != nil) {
      [outProtocol writeFieldBeginWithName: @"stature" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __stature];
      [outProtocol writeFieldEnd];
    }
  }
  if (__weight_isset) {
    if (__weight != nil) {
      [outProtocol writeFieldBeginWithName: @"weight" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __weight];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bornDate_isset) {
    if (__bornDate != nil) {
      [outProtocol writeFieldBeginWithName: @"bornDate" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __bornDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__relationId_isset) {
    if (__relationId != nil) {
      [outProtocol writeFieldBeginWithName: @"relationId" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __relationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__criticalIllness_isset) {
    if (__criticalIllness != nil) {
      [outProtocol writeFieldBeginWithName: @"criticalIllness" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __criticalIllness];
      [outProtocol writeFieldEnd];
    }
  }
  if (__allergicHistory_isset) {
    if (__allergicHistory != nil) {
      [outProtocol writeFieldBeginWithName: @"allergicHistory" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __allergicHistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__familyHistory_isset) {
    if (__familyHistory != nil) {
      [outProtocol writeFieldBeginWithName: @"familyHistory" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __familyHistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bloodType_isset) {
    if (__bloodType != nil) {
      [outProtocol writeFieldBeginWithName: @"bloodType" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __bloodType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cardNo_isset) {
    if (__cardNo != nil) {
      [outProtocol writeFieldBeginWithName: @"cardNo" type: TType_STRING fieldID: 19];
      [outProtocol writeString: __cardNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__inpatientNo_isset) {
    if (__inpatientNo != nil) {
      [outProtocol writeFieldBeginWithName: @"inpatientNo" type: TType_STRING fieldID: 20];
      [outProtocol writeString: __inpatientNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cardCount_isset) {
    if (__cardCount != nil) {
      [outProtocol writeFieldBeginWithName: @"cardCount" type: TType_STRING fieldID: 21];
      [outProtocol writeString: __cardCount];
      [outProtocol writeFieldEnd];
    }
  }
  if (__inpatientCount_isset) {
    if (__inpatientCount != nil) {
      [outProtocol writeFieldBeginWithName: @"inpatientCount" type: TType_STRING fieldID: 22];
      [outProtocol writeString: __inpatientCount];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientHead_isset) {
    if (__patientHead != nil) {
      [outProtocol writeFieldBeginWithName: @"patientHead" type: TType_STRING fieldID: 23];
      [outProtocol writeString: __patientHead];
      [outProtocol writeFieldEnd];
    }
  }
  if (__barCode_isset) {
    if (__barCode != nil) {
      [outProtocol writeFieldBeginWithName: @"barCode" type: TType_STRING fieldID: 24];
      [outProtocol writeString: __barCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__authStatus_isset) {
    if (__authStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"authStatus" type: TType_STRING fieldID: 25];
      [outProtocol writeString: __authStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isChild_isset) {
    if (__isChild != nil) {
      [outProtocol writeFieldBeginWithName: @"isChild" type: TType_STRING fieldID: 26];
      [outProtocol writeString: __isChild];
      [outProtocol writeFieldEnd];
    }
  }
  if (__papersPics_isset) {
    if (__papersPics != nil) {
      [outProtocol writeFieldBeginWithName: @"papersPics" type: TType_LIST fieldID: 27];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__papersPics count]];
        int idx22;
        for (idx22 = 0; idx22 < [__papersPics count]; idx22++)
        {
          [outProtocol writeString: [__papersPics objectAtIndex: idx22]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__province_isset) {
    if (__province != nil) {
      [outProtocol writeFieldBeginWithName: @"province" type: TType_STRING fieldID: 28];
      [outProtocol writeString: __province];
      [outProtocol writeFieldEnd];
    }
  }
  if (__city_isset) {
    if (__city != nil) {
      [outProtocol writeFieldBeginWithName: @"city" type: TType_STRING fieldID: 29];
      [outProtocol writeString: __city];
      [outProtocol writeFieldEnd];
    }
  }
  if (__area_isset) {
    if (__area != nil) {
      [outProtocol writeFieldBeginWithName: @"area" type: TType_STRING fieldID: 30];
      [outProtocol writeString: __area];
      [outProtocol writeFieldEnd];
    }
  }
  if (__addressDetail_isset) {
    if (__addressDetail != nil) {
      [outProtocol writeFieldBeginWithName: @"addressDetail" type: TType_STRING fieldID: 31];
      [outProtocol writeString: __addressDetail];
      [outProtocol writeFieldEnd];
    }
  }
  if (__crowd_isset) {
    if (__crowd != nil) {
      [outProtocol writeFieldBeginWithName: @"crowd" type: TType_LIST fieldID: 32];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__crowd count]];
        int idx24;
        for (idx24 = 0; idx24 < [__crowd count]; idx24++)
        {
          [outProtocol writeString: [__crowd objectAtIndex: idx24]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPatientDto("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"\"%@\"", __patientId];
  [ms appendString: @",headImg:"];
  [ms appendFormat: @"\"%@\"", __headImg];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"\"%@\"", __gender];
  [ms appendString: @",phoneNo:"];
  [ms appendFormat: @"\"%@\"", __phoneNo];
  [ms appendString: @",papersNo:"];
  [ms appendFormat: @"\"%@\"", __papersNo];
  [ms appendString: @",papersTypeId:"];
  [ms appendFormat: @"\"%@\"", __papersTypeId];
  [ms appendString: @",medInsureance:"];
  [ms appendFormat: @"\"%@\"", __medInsureance];
  [ms appendString: @",stature:"];
  [ms appendFormat: @"\"%@\"", __stature];
  [ms appendString: @",weight:"];
  [ms appendFormat: @"\"%@\"", __weight];
  [ms appendString: @",bornDate:"];
  [ms appendFormat: @"\"%@\"", __bornDate];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",relationId:"];
  [ms appendFormat: @"\"%@\"", __relationId];
  [ms appendString: @",criticalIllness:"];
  [ms appendFormat: @"\"%@\"", __criticalIllness];
  [ms appendString: @",allergicHistory:"];
  [ms appendFormat: @"\"%@\"", __allergicHistory];
  [ms appendString: @",familyHistory:"];
  [ms appendFormat: @"\"%@\"", __familyHistory];
  [ms appendString: @",bloodType:"];
  [ms appendFormat: @"\"%@\"", __bloodType];
  [ms appendString: @",cardNo:"];
  [ms appendFormat: @"\"%@\"", __cardNo];
  [ms appendString: @",inpatientNo:"];
  [ms appendFormat: @"\"%@\"", __inpatientNo];
  [ms appendString: @",cardCount:"];
  [ms appendFormat: @"\"%@\"", __cardCount];
  [ms appendString: @",inpatientCount:"];
  [ms appendFormat: @"\"%@\"", __inpatientCount];
  [ms appendString: @",patientHead:"];
  [ms appendFormat: @"\"%@\"", __patientHead];
  [ms appendString: @",barCode:"];
  [ms appendFormat: @"\"%@\"", __barCode];
  [ms appendString: @",authStatus:"];
  [ms appendFormat: @"\"%@\"", __authStatus];
  [ms appendString: @",isChild:"];
  [ms appendFormat: @"\"%@\"", __isChild];
  [ms appendString: @",papersPics:"];
  [ms appendFormat: @"%@", __papersPics];
  [ms appendString: @",province:"];
  [ms appendFormat: @"\"%@\"", __province];
  [ms appendString: @",city:"];
  [ms appendFormat: @"\"%@\"", __city];
  [ms appendString: @",area:"];
  [ms appendFormat: @"\"%@\"", __area];
  [ms appendString: @",addressDetail:"];
  [ms appendFormat: @"\"%@\"", __addressDetail];
  [ms appendString: @",crowd:"];
  [ms appendFormat: @"%@", __crowd];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRegTargetDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTargetId: (NSString *) targetId name: (NSString *) name targetType: (NSString *) targetType fee: (NSString *) fee regLevelId: (NSString *) regLevelId regLevelName: (NSString *) regLevelName headerUrl: (NSString *) headerUrl gender: (NSString *) gender levelName: (NSString *) levelName flowers: (NSString *) flowers desc: (NSString *) desc remark: (NSString *) remark evaluation: (NSString *) evaluation isConsulted: (BOOL) isConsulted totalVisited: (int32_t) totalVisited rmngNum: (int32_t) rmngNum titleStatus: (NSString *) titleStatus qualStatus: (NSString *) qualStatus drStatus: (int32_t) drStatus
{
  self = [super init];
  __targetId = [targetId retain_stub];
  __targetId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __targetType = [targetType retain_stub];
  __targetType_isset = YES;
  __fee = [fee retain_stub];
  __fee_isset = YES;
  __regLevelId = [regLevelId retain_stub];
  __regLevelId_isset = YES;
  __regLevelName = [regLevelName retain_stub];
  __regLevelName_isset = YES;
  __headerUrl = [headerUrl retain_stub];
  __headerUrl_isset = YES;
  __gender = [gender retain_stub];
  __gender_isset = YES;
  __levelName = [levelName retain_stub];
  __levelName_isset = YES;
  __flowers = [flowers retain_stub];
  __flowers_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __remark = [remark retain_stub];
  __remark_isset = YES;
  __evaluation = [evaluation retain_stub];
  __evaluation_isset = YES;
  __isConsulted = isConsulted;
  __isConsulted_isset = YES;
  __totalVisited = totalVisited;
  __totalVisited_isset = YES;
  __rmngNum = rmngNum;
  __rmngNum_isset = YES;
  __titleStatus = [titleStatus retain_stub];
  __titleStatus_isset = YES;
  __qualStatus = [qualStatus retain_stub];
  __qualStatus_isset = YES;
  __drStatus = drStatus;
  __drStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"targetId"])
  {
    __targetId = [[decoder decodeObjectForKey: @"targetId"] retain_stub];
    __targetId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"targetType"])
  {
    __targetType = [[decoder decodeObjectForKey: @"targetType"] retain_stub];
    __targetType_isset = YES;
  }
  if ([decoder containsValueForKey: @"fee"])
  {
    __fee = [[decoder decodeObjectForKey: @"fee"] retain_stub];
    __fee_isset = YES;
  }
  if ([decoder containsValueForKey: @"regLevelId"])
  {
    __regLevelId = [[decoder decodeObjectForKey: @"regLevelId"] retain_stub];
    __regLevelId_isset = YES;
  }
  if ([decoder containsValueForKey: @"regLevelName"])
  {
    __regLevelName = [[decoder decodeObjectForKey: @"regLevelName"] retain_stub];
    __regLevelName_isset = YES;
  }
  if ([decoder containsValueForKey: @"headerUrl"])
  {
    __headerUrl = [[decoder decodeObjectForKey: @"headerUrl"] retain_stub];
    __headerUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [[decoder decodeObjectForKey: @"gender"] retain_stub];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"levelName"])
  {
    __levelName = [[decoder decodeObjectForKey: @"levelName"] retain_stub];
    __levelName_isset = YES;
  }
  if ([decoder containsValueForKey: @"flowers"])
  {
    __flowers = [[decoder decodeObjectForKey: @"flowers"] retain_stub];
    __flowers_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"remark"])
  {
    __remark = [[decoder decodeObjectForKey: @"remark"] retain_stub];
    __remark_isset = YES;
  }
  if ([decoder containsValueForKey: @"evaluation"])
  {
    __evaluation = [[decoder decodeObjectForKey: @"evaluation"] retain_stub];
    __evaluation_isset = YES;
  }
  if ([decoder containsValueForKey: @"isConsulted"])
  {
    __isConsulted = [decoder decodeBoolForKey: @"isConsulted"];
    __isConsulted_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalVisited"])
  {
    __totalVisited = [decoder decodeInt32ForKey: @"totalVisited"];
    __totalVisited_isset = YES;
  }
  if ([decoder containsValueForKey: @"rmngNum"])
  {
    __rmngNum = [decoder decodeInt32ForKey: @"rmngNum"];
    __rmngNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"titleStatus"])
  {
    __titleStatus = [[decoder decodeObjectForKey: @"titleStatus"] retain_stub];
    __titleStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"qualStatus"])
  {
    __qualStatus = [[decoder decodeObjectForKey: @"qualStatus"] retain_stub];
    __qualStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"drStatus"])
  {
    __drStatus = [decoder decodeInt32ForKey: @"drStatus"];
    __drStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__targetId_isset)
  {
    [encoder encodeObject: __targetId forKey: @"targetId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__targetType_isset)
  {
    [encoder encodeObject: __targetType forKey: @"targetType"];
  }
  if (__fee_isset)
  {
    [encoder encodeObject: __fee forKey: @"fee"];
  }
  if (__regLevelId_isset)
  {
    [encoder encodeObject: __regLevelId forKey: @"regLevelId"];
  }
  if (__regLevelName_isset)
  {
    [encoder encodeObject: __regLevelName forKey: @"regLevelName"];
  }
  if (__headerUrl_isset)
  {
    [encoder encodeObject: __headerUrl forKey: @"headerUrl"];
  }
  if (__gender_isset)
  {
    [encoder encodeObject: __gender forKey: @"gender"];
  }
  if (__levelName_isset)
  {
    [encoder encodeObject: __levelName forKey: @"levelName"];
  }
  if (__flowers_isset)
  {
    [encoder encodeObject: __flowers forKey: @"flowers"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__remark_isset)
  {
    [encoder encodeObject: __remark forKey: @"remark"];
  }
  if (__evaluation_isset)
  {
    [encoder encodeObject: __evaluation forKey: @"evaluation"];
  }
  if (__isConsulted_isset)
  {
    [encoder encodeBool: __isConsulted forKey: @"isConsulted"];
  }
  if (__totalVisited_isset)
  {
    [encoder encodeInt32: __totalVisited forKey: @"totalVisited"];
  }
  if (__rmngNum_isset)
  {
    [encoder encodeInt32: __rmngNum forKey: @"rmngNum"];
  }
  if (__titleStatus_isset)
  {
    [encoder encodeObject: __titleStatus forKey: @"titleStatus"];
  }
  if (__qualStatus_isset)
  {
    [encoder encodeObject: __qualStatus forKey: @"qualStatus"];
  }
  if (__drStatus_isset)
  {
    [encoder encodeInt32: __drStatus forKey: @"drStatus"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __targetId_isset ? 2654435761 : 0;
  if (__targetId_isset)
  {
    hash = (hash * 31) ^ [__targetId hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __targetType_isset ? 2654435761 : 0;
  if (__targetType_isset)
  {
    hash = (hash * 31) ^ [__targetType hash];
  }
  hash = (hash * 31) ^ __fee_isset ? 2654435761 : 0;
  if (__fee_isset)
  {
    hash = (hash * 31) ^ [__fee hash];
  }
  hash = (hash * 31) ^ __regLevelId_isset ? 2654435761 : 0;
  if (__regLevelId_isset)
  {
    hash = (hash * 31) ^ [__regLevelId hash];
  }
  hash = (hash * 31) ^ __regLevelName_isset ? 2654435761 : 0;
  if (__regLevelName_isset)
  {
    hash = (hash * 31) ^ [__regLevelName hash];
  }
  hash = (hash * 31) ^ __headerUrl_isset ? 2654435761 : 0;
  if (__headerUrl_isset)
  {
    hash = (hash * 31) ^ [__headerUrl hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [__gender hash];
  }
  hash = (hash * 31) ^ __levelName_isset ? 2654435761 : 0;
  if (__levelName_isset)
  {
    hash = (hash * 31) ^ [__levelName hash];
  }
  hash = (hash * 31) ^ __flowers_isset ? 2654435761 : 0;
  if (__flowers_isset)
  {
    hash = (hash * 31) ^ [__flowers hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __remark_isset ? 2654435761 : 0;
  if (__remark_isset)
  {
    hash = (hash * 31) ^ [__remark hash];
  }
  hash = (hash * 31) ^ __evaluation_isset ? 2654435761 : 0;
  if (__evaluation_isset)
  {
    hash = (hash * 31) ^ [__evaluation hash];
  }
  hash = (hash * 31) ^ __isConsulted_isset ? 2654435761 : 0;
  if (__isConsulted_isset)
  {
    hash = (hash * 31) ^ [@(__isConsulted) hash];
  }
  hash = (hash * 31) ^ __totalVisited_isset ? 2654435761 : 0;
  if (__totalVisited_isset)
  {
    hash = (hash * 31) ^ [@(__totalVisited) hash];
  }
  hash = (hash * 31) ^ __rmngNum_isset ? 2654435761 : 0;
  if (__rmngNum_isset)
  {
    hash = (hash * 31) ^ [@(__rmngNum) hash];
  }
  hash = (hash * 31) ^ __titleStatus_isset ? 2654435761 : 0;
  if (__titleStatus_isset)
  {
    hash = (hash * 31) ^ [__titleStatus hash];
  }
  hash = (hash * 31) ^ __qualStatus_isset ? 2654435761 : 0;
  if (__qualStatus_isset)
  {
    hash = (hash * 31) ^ [__qualStatus hash];
  }
  hash = (hash * 31) ^ __drStatus_isset ? 2654435761 : 0;
  if (__drStatus_isset)
  {
    hash = (hash * 31) ^ [@(__drStatus) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRegTargetDto class]]) {
    return NO;
  }
  NXTFRegTargetDto *other = (NXTFRegTargetDto *)anObject;
  if ((__targetId_isset != other->__targetId_isset) ||
      (__targetId_isset && ((__targetId || other->__targetId) && ![__targetId isEqual:other->__targetId]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__targetType_isset != other->__targetType_isset) ||
      (__targetType_isset && ((__targetType || other->__targetType) && ![__targetType isEqual:other->__targetType]))) {
    return NO;
  }
  if ((__fee_isset != other->__fee_isset) ||
      (__fee_isset && ((__fee || other->__fee) && ![__fee isEqual:other->__fee]))) {
    return NO;
  }
  if ((__regLevelId_isset != other->__regLevelId_isset) ||
      (__regLevelId_isset && ((__regLevelId || other->__regLevelId) && ![__regLevelId isEqual:other->__regLevelId]))) {
    return NO;
  }
  if ((__regLevelName_isset != other->__regLevelName_isset) ||
      (__regLevelName_isset && ((__regLevelName || other->__regLevelName) && ![__regLevelName isEqual:other->__regLevelName]))) {
    return NO;
  }
  if ((__headerUrl_isset != other->__headerUrl_isset) ||
      (__headerUrl_isset && ((__headerUrl || other->__headerUrl) && ![__headerUrl isEqual:other->__headerUrl]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && ((__gender || other->__gender) && ![__gender isEqual:other->__gender]))) {
    return NO;
  }
  if ((__levelName_isset != other->__levelName_isset) ||
      (__levelName_isset && ((__levelName || other->__levelName) && ![__levelName isEqual:other->__levelName]))) {
    return NO;
  }
  if ((__flowers_isset != other->__flowers_isset) ||
      (__flowers_isset && ((__flowers || other->__flowers) && ![__flowers isEqual:other->__flowers]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__remark_isset != other->__remark_isset) ||
      (__remark_isset && ((__remark || other->__remark) && ![__remark isEqual:other->__remark]))) {
    return NO;
  }
  if ((__evaluation_isset != other->__evaluation_isset) ||
      (__evaluation_isset && ((__evaluation || other->__evaluation) && ![__evaluation isEqual:other->__evaluation]))) {
    return NO;
  }
  if ((__isConsulted_isset != other->__isConsulted_isset) ||
      (__isConsulted_isset && (__isConsulted != other->__isConsulted))) {
    return NO;
  }
  if ((__totalVisited_isset != other->__totalVisited_isset) ||
      (__totalVisited_isset && (__totalVisited != other->__totalVisited))) {
    return NO;
  }
  if ((__rmngNum_isset != other->__rmngNum_isset) ||
      (__rmngNum_isset && (__rmngNum != other->__rmngNum))) {
    return NO;
  }
  if ((__titleStatus_isset != other->__titleStatus_isset) ||
      (__titleStatus_isset && ((__titleStatus || other->__titleStatus) && ![__titleStatus isEqual:other->__titleStatus]))) {
    return NO;
  }
  if ((__qualStatus_isset != other->__qualStatus_isset) ||
      (__qualStatus_isset && ((__qualStatus || other->__qualStatus) && ![__qualStatus isEqual:other->__qualStatus]))) {
    return NO;
  }
  if ((__drStatus_isset != other->__drStatus_isset) ||
      (__drStatus_isset && (__drStatus != other->__drStatus))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__targetId release_stub];
  [__name release_stub];
  [__targetType release_stub];
  [__fee release_stub];
  [__regLevelId release_stub];
  [__regLevelName release_stub];
  [__headerUrl release_stub];
  [__gender release_stub];
  [__levelName release_stub];
  [__flowers release_stub];
  [__desc release_stub];
  [__remark release_stub];
  [__evaluation release_stub];
  [__titleStatus release_stub];
  [__qualStatus release_stub];
  [super dealloc_stub];
}

- (NSString *) targetId {
  return [[__targetId retain_stub] autorelease_stub];
}

- (void) setTargetId: (NSString *) targetId {
  [targetId retain_stub];
  [__targetId release_stub];
  __targetId = targetId;
  __targetId_isset = YES;
}

- (BOOL) targetIdIsSet {
  return __targetId_isset;
}

- (void) unsetTargetId {
  [__targetId release_stub];
  __targetId = nil;
  __targetId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) targetType {
  return [[__targetType retain_stub] autorelease_stub];
}

- (void) setTargetType: (NSString *) targetType {
  [targetType retain_stub];
  [__targetType release_stub];
  __targetType = targetType;
  __targetType_isset = YES;
}

- (BOOL) targetTypeIsSet {
  return __targetType_isset;
}

- (void) unsetTargetType {
  [__targetType release_stub];
  __targetType = nil;
  __targetType_isset = NO;
}

- (NSString *) fee {
  return [[__fee retain_stub] autorelease_stub];
}

- (void) setFee: (NSString *) fee {
  [fee retain_stub];
  [__fee release_stub];
  __fee = fee;
  __fee_isset = YES;
}

- (BOOL) feeIsSet {
  return __fee_isset;
}

- (void) unsetFee {
  [__fee release_stub];
  __fee = nil;
  __fee_isset = NO;
}

- (NSString *) regLevelId {
  return [[__regLevelId retain_stub] autorelease_stub];
}

- (void) setRegLevelId: (NSString *) regLevelId {
  [regLevelId retain_stub];
  [__regLevelId release_stub];
  __regLevelId = regLevelId;
  __regLevelId_isset = YES;
}

- (BOOL) regLevelIdIsSet {
  return __regLevelId_isset;
}

- (void) unsetRegLevelId {
  [__regLevelId release_stub];
  __regLevelId = nil;
  __regLevelId_isset = NO;
}

- (NSString *) regLevelName {
  return [[__regLevelName retain_stub] autorelease_stub];
}

- (void) setRegLevelName: (NSString *) regLevelName {
  [regLevelName retain_stub];
  [__regLevelName release_stub];
  __regLevelName = regLevelName;
  __regLevelName_isset = YES;
}

- (BOOL) regLevelNameIsSet {
  return __regLevelName_isset;
}

- (void) unsetRegLevelName {
  [__regLevelName release_stub];
  __regLevelName = nil;
  __regLevelName_isset = NO;
}

- (NSString *) headerUrl {
  return [[__headerUrl retain_stub] autorelease_stub];
}

- (void) setHeaderUrl: (NSString *) headerUrl {
  [headerUrl retain_stub];
  [__headerUrl release_stub];
  __headerUrl = headerUrl;
  __headerUrl_isset = YES;
}

- (BOOL) headerUrlIsSet {
  return __headerUrl_isset;
}

- (void) unsetHeaderUrl {
  [__headerUrl release_stub];
  __headerUrl = nil;
  __headerUrl_isset = NO;
}

- (NSString *) gender {
  return [[__gender retain_stub] autorelease_stub];
}

- (void) setGender: (NSString *) gender {
  [gender retain_stub];
  [__gender release_stub];
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  [__gender release_stub];
  __gender = nil;
  __gender_isset = NO;
}

- (NSString *) levelName {
  return [[__levelName retain_stub] autorelease_stub];
}

- (void) setLevelName: (NSString *) levelName {
  [levelName retain_stub];
  [__levelName release_stub];
  __levelName = levelName;
  __levelName_isset = YES;
}

- (BOOL) levelNameIsSet {
  return __levelName_isset;
}

- (void) unsetLevelName {
  [__levelName release_stub];
  __levelName = nil;
  __levelName_isset = NO;
}

- (NSString *) flowers {
  return [[__flowers retain_stub] autorelease_stub];
}

- (void) setFlowers: (NSString *) flowers {
  [flowers retain_stub];
  [__flowers release_stub];
  __flowers = flowers;
  __flowers_isset = YES;
}

- (BOOL) flowersIsSet {
  return __flowers_isset;
}

- (void) unsetFlowers {
  [__flowers release_stub];
  __flowers = nil;
  __flowers_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) remark {
  return [[__remark retain_stub] autorelease_stub];
}

- (void) setRemark: (NSString *) remark {
  [remark retain_stub];
  [__remark release_stub];
  __remark = remark;
  __remark_isset = YES;
}

- (BOOL) remarkIsSet {
  return __remark_isset;
}

- (void) unsetRemark {
  [__remark release_stub];
  __remark = nil;
  __remark_isset = NO;
}

- (NSString *) evaluation {
  return [[__evaluation retain_stub] autorelease_stub];
}

- (void) setEvaluation: (NSString *) evaluation {
  [evaluation retain_stub];
  [__evaluation release_stub];
  __evaluation = evaluation;
  __evaluation_isset = YES;
}

- (BOOL) evaluationIsSet {
  return __evaluation_isset;
}

- (void) unsetEvaluation {
  [__evaluation release_stub];
  __evaluation = nil;
  __evaluation_isset = NO;
}

- (BOOL) isConsulted {
  return __isConsulted;
}

- (void) setIsConsulted: (BOOL) isConsulted {
  __isConsulted = isConsulted;
  __isConsulted_isset = YES;
}

- (BOOL) isConsultedIsSet {
  return __isConsulted_isset;
}

- (void) unsetIsConsulted {
  __isConsulted_isset = NO;
}

- (int32_t) totalVisited {
  return __totalVisited;
}

- (void) setTotalVisited: (int32_t) totalVisited {
  __totalVisited = totalVisited;
  __totalVisited_isset = YES;
}

- (BOOL) totalVisitedIsSet {
  return __totalVisited_isset;
}

- (void) unsetTotalVisited {
  __totalVisited_isset = NO;
}

- (int32_t) rmngNum {
  return __rmngNum;
}

- (void) setRmngNum: (int32_t) rmngNum {
  __rmngNum = rmngNum;
  __rmngNum_isset = YES;
}

- (BOOL) rmngNumIsSet {
  return __rmngNum_isset;
}

- (void) unsetRmngNum {
  __rmngNum_isset = NO;
}

- (NSString *) titleStatus {
  return [[__titleStatus retain_stub] autorelease_stub];
}

- (void) setTitleStatus: (NSString *) titleStatus {
  [titleStatus retain_stub];
  [__titleStatus release_stub];
  __titleStatus = titleStatus;
  __titleStatus_isset = YES;
}

- (BOOL) titleStatusIsSet {
  return __titleStatus_isset;
}

- (void) unsetTitleStatus {
  [__titleStatus release_stub];
  __titleStatus = nil;
  __titleStatus_isset = NO;
}

- (NSString *) qualStatus {
  return [[__qualStatus retain_stub] autorelease_stub];
}

- (void) setQualStatus: (NSString *) qualStatus {
  [qualStatus retain_stub];
  [__qualStatus release_stub];
  __qualStatus = qualStatus;
  __qualStatus_isset = YES;
}

- (BOOL) qualStatusIsSet {
  return __qualStatus_isset;
}

- (void) unsetQualStatus {
  [__qualStatus release_stub];
  __qualStatus = nil;
  __qualStatus_isset = NO;
}

- (int32_t) drStatus {
  return __drStatus;
}

- (void) setDrStatus: (int32_t) drStatus {
  __drStatus = drStatus;
  __drStatus_isset = YES;
}

- (BOOL) drStatusIsSet {
  return __drStatus_isset;
}

- (void) unsetDrStatus {
  __drStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTargetId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTargetType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegLevelId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegLevelName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHeaderUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLevelName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFlowers: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemark: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEvaluation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsConsulted: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTotalVisited: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRmngNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitleStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setQualStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDrStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegTargetDto"];
  if (__targetId_isset) {
    if (__targetId != nil) {
      [outProtocol writeFieldBeginWithName: @"targetId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __targetId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__targetType_isset) {
    if (__targetType != nil) {
      [outProtocol writeFieldBeginWithName: @"targetType" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __targetType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fee_isset) {
    if (__fee != nil) {
      [outProtocol writeFieldBeginWithName: @"fee" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __fee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regLevelId_isset) {
    if (__regLevelId != nil) {
      [outProtocol writeFieldBeginWithName: @"regLevelId" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __regLevelId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regLevelName_isset) {
    if (__regLevelName != nil) {
      [outProtocol writeFieldBeginWithName: @"regLevelName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __regLevelName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__headerUrl_isset) {
    if (__headerUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"headerUrl" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __headerUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    if (__gender != nil) {
      [outProtocol writeFieldBeginWithName: @"gender" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __gender];
      [outProtocol writeFieldEnd];
    }
  }
  if (__levelName_isset) {
    if (__levelName != nil) {
      [outProtocol writeFieldBeginWithName: @"levelName" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __levelName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__flowers_isset) {
    if (__flowers != nil) {
      [outProtocol writeFieldBeginWithName: @"flowers" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __flowers];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__remark_isset) {
    if (__remark != nil) {
      [outProtocol writeFieldBeginWithName: @"remark" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __remark];
      [outProtocol writeFieldEnd];
    }
  }
  if (__evaluation_isset) {
    if (__evaluation != nil) {
      [outProtocol writeFieldBeginWithName: @"evaluation" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __evaluation];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isConsulted_isset) {
    [outProtocol writeFieldBeginWithName: @"isConsulted" type: TType_BOOL fieldID: 14];
    [outProtocol writeBool: __isConsulted];
    [outProtocol writeFieldEnd];
  }
  if (__totalVisited_isset) {
    [outProtocol writeFieldBeginWithName: @"totalVisited" type: TType_I32 fieldID: 15];
    [outProtocol writeI32: __totalVisited];
    [outProtocol writeFieldEnd];
  }
  if (__rmngNum_isset) {
    [outProtocol writeFieldBeginWithName: @"rmngNum" type: TType_I32 fieldID: 16];
    [outProtocol writeI32: __rmngNum];
    [outProtocol writeFieldEnd];
  }
  if (__titleStatus_isset) {
    if (__titleStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"titleStatus" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __titleStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__qualStatus_isset) {
    if (__qualStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"qualStatus" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __qualStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"drStatus" type: TType_I32 fieldID: 19];
    [outProtocol writeI32: __drStatus];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRegTargetDto("];
  [ms appendString: @"targetId:"];
  [ms appendFormat: @"\"%@\"", __targetId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",targetType:"];
  [ms appendFormat: @"\"%@\"", __targetType];
  [ms appendString: @",fee:"];
  [ms appendFormat: @"\"%@\"", __fee];
  [ms appendString: @",regLevelId:"];
  [ms appendFormat: @"\"%@\"", __regLevelId];
  [ms appendString: @",regLevelName:"];
  [ms appendFormat: @"\"%@\"", __regLevelName];
  [ms appendString: @",headerUrl:"];
  [ms appendFormat: @"\"%@\"", __headerUrl];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"\"%@\"", __gender];
  [ms appendString: @",levelName:"];
  [ms appendFormat: @"\"%@\"", __levelName];
  [ms appendString: @",flowers:"];
  [ms appendFormat: @"\"%@\"", __flowers];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",remark:"];
  [ms appendFormat: @"\"%@\"", __remark];
  [ms appendString: @",evaluation:"];
  [ms appendFormat: @"\"%@\"", __evaluation];
  [ms appendString: @",isConsulted:"];
  [ms appendFormat: @"%i", __isConsulted];
  [ms appendString: @",totalVisited:"];
  [ms appendFormat: @"%i", __totalVisited];
  [ms appendString: @",rmngNum:"];
  [ms appendFormat: @"%i", __rmngNum];
  [ms appendString: @",titleStatus:"];
  [ms appendFormat: @"\"%@\"", __titleStatus];
  [ms appendString: @",qualStatus:"];
  [ms appendFormat: @"\"%@\"", __qualStatus];
  [ms appendString: @",drStatus:"];
  [ms appendFormat: @"%i", __drStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRegPointDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPointId: (NSString *) pointId pointName: (NSString *) pointName pointType: (NSString *) pointType pointDate: (NSString *) pointDate startTime: (NSString *) startTime endTime: (NSString *) endTime rmngNum: (NSString *) rmngNum deptId: (NSString *) deptId regLevelName: (NSString *) regLevelName totalFee: (NSString *) totalFee deptName: (NSString *) deptName regLevelId: (NSString *) regLevelId targetType: (int32_t) targetType
{
  self = [super init];
  __pointId = [pointId retain_stub];
  __pointId_isset = YES;
  __pointName = [pointName retain_stub];
  __pointName_isset = YES;
  __pointType = [pointType retain_stub];
  __pointType_isset = YES;
  __pointDate = [pointDate retain_stub];
  __pointDate_isset = YES;
  __startTime = [startTime retain_stub];
  __startTime_isset = YES;
  __endTime = [endTime retain_stub];
  __endTime_isset = YES;
  __rmngNum = [rmngNum retain_stub];
  __rmngNum_isset = YES;
  __deptId = [deptId retain_stub];
  __deptId_isset = YES;
  __regLevelName = [regLevelName retain_stub];
  __regLevelName_isset = YES;
  __totalFee = [totalFee retain_stub];
  __totalFee_isset = YES;
  __deptName = [deptName retain_stub];
  __deptName_isset = YES;
  __regLevelId = [regLevelId retain_stub];
  __regLevelId_isset = YES;
  __targetType = targetType;
  __targetType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"pointId"])
  {
    __pointId = [[decoder decodeObjectForKey: @"pointId"] retain_stub];
    __pointId_isset = YES;
  }
  if ([decoder containsValueForKey: @"pointName"])
  {
    __pointName = [[decoder decodeObjectForKey: @"pointName"] retain_stub];
    __pointName_isset = YES;
  }
  if ([decoder containsValueForKey: @"pointType"])
  {
    __pointType = [[decoder decodeObjectForKey: @"pointType"] retain_stub];
    __pointType_isset = YES;
  }
  if ([decoder containsValueForKey: @"pointDate"])
  {
    __pointDate = [[decoder decodeObjectForKey: @"pointDate"] retain_stub];
    __pointDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"startTime"])
  {
    __startTime = [[decoder decodeObjectForKey: @"startTime"] retain_stub];
    __startTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"endTime"])
  {
    __endTime = [[decoder decodeObjectForKey: @"endTime"] retain_stub];
    __endTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"rmngNum"])
  {
    __rmngNum = [[decoder decodeObjectForKey: @"rmngNum"] retain_stub];
    __rmngNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptId"])
  {
    __deptId = [[decoder decodeObjectForKey: @"deptId"] retain_stub];
    __deptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"regLevelName"])
  {
    __regLevelName = [[decoder decodeObjectForKey: @"regLevelName"] retain_stub];
    __regLevelName_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalFee"])
  {
    __totalFee = [[decoder decodeObjectForKey: @"totalFee"] retain_stub];
    __totalFee_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptName"])
  {
    __deptName = [[decoder decodeObjectForKey: @"deptName"] retain_stub];
    __deptName_isset = YES;
  }
  if ([decoder containsValueForKey: @"regLevelId"])
  {
    __regLevelId = [[decoder decodeObjectForKey: @"regLevelId"] retain_stub];
    __regLevelId_isset = YES;
  }
  if ([decoder containsValueForKey: @"targetType"])
  {
    __targetType = [decoder decodeInt32ForKey: @"targetType"];
    __targetType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__pointId_isset)
  {
    [encoder encodeObject: __pointId forKey: @"pointId"];
  }
  if (__pointName_isset)
  {
    [encoder encodeObject: __pointName forKey: @"pointName"];
  }
  if (__pointType_isset)
  {
    [encoder encodeObject: __pointType forKey: @"pointType"];
  }
  if (__pointDate_isset)
  {
    [encoder encodeObject: __pointDate forKey: @"pointDate"];
  }
  if (__startTime_isset)
  {
    [encoder encodeObject: __startTime forKey: @"startTime"];
  }
  if (__endTime_isset)
  {
    [encoder encodeObject: __endTime forKey: @"endTime"];
  }
  if (__rmngNum_isset)
  {
    [encoder encodeObject: __rmngNum forKey: @"rmngNum"];
  }
  if (__deptId_isset)
  {
    [encoder encodeObject: __deptId forKey: @"deptId"];
  }
  if (__regLevelName_isset)
  {
    [encoder encodeObject: __regLevelName forKey: @"regLevelName"];
  }
  if (__totalFee_isset)
  {
    [encoder encodeObject: __totalFee forKey: @"totalFee"];
  }
  if (__deptName_isset)
  {
    [encoder encodeObject: __deptName forKey: @"deptName"];
  }
  if (__regLevelId_isset)
  {
    [encoder encodeObject: __regLevelId forKey: @"regLevelId"];
  }
  if (__targetType_isset)
  {
    [encoder encodeInt32: __targetType forKey: @"targetType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __pointId_isset ? 2654435761 : 0;
  if (__pointId_isset)
  {
    hash = (hash * 31) ^ [__pointId hash];
  }
  hash = (hash * 31) ^ __pointName_isset ? 2654435761 : 0;
  if (__pointName_isset)
  {
    hash = (hash * 31) ^ [__pointName hash];
  }
  hash = (hash * 31) ^ __pointType_isset ? 2654435761 : 0;
  if (__pointType_isset)
  {
    hash = (hash * 31) ^ [__pointType hash];
  }
  hash = (hash * 31) ^ __pointDate_isset ? 2654435761 : 0;
  if (__pointDate_isset)
  {
    hash = (hash * 31) ^ [__pointDate hash];
  }
  hash = (hash * 31) ^ __startTime_isset ? 2654435761 : 0;
  if (__startTime_isset)
  {
    hash = (hash * 31) ^ [__startTime hash];
  }
  hash = (hash * 31) ^ __endTime_isset ? 2654435761 : 0;
  if (__endTime_isset)
  {
    hash = (hash * 31) ^ [__endTime hash];
  }
  hash = (hash * 31) ^ __rmngNum_isset ? 2654435761 : 0;
  if (__rmngNum_isset)
  {
    hash = (hash * 31) ^ [__rmngNum hash];
  }
  hash = (hash * 31) ^ __deptId_isset ? 2654435761 : 0;
  if (__deptId_isset)
  {
    hash = (hash * 31) ^ [__deptId hash];
  }
  hash = (hash * 31) ^ __regLevelName_isset ? 2654435761 : 0;
  if (__regLevelName_isset)
  {
    hash = (hash * 31) ^ [__regLevelName hash];
  }
  hash = (hash * 31) ^ __totalFee_isset ? 2654435761 : 0;
  if (__totalFee_isset)
  {
    hash = (hash * 31) ^ [__totalFee hash];
  }
  hash = (hash * 31) ^ __deptName_isset ? 2654435761 : 0;
  if (__deptName_isset)
  {
    hash = (hash * 31) ^ [__deptName hash];
  }
  hash = (hash * 31) ^ __regLevelId_isset ? 2654435761 : 0;
  if (__regLevelId_isset)
  {
    hash = (hash * 31) ^ [__regLevelId hash];
  }
  hash = (hash * 31) ^ __targetType_isset ? 2654435761 : 0;
  if (__targetType_isset)
  {
    hash = (hash * 31) ^ [@(__targetType) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRegPointDto class]]) {
    return NO;
  }
  NXTFRegPointDto *other = (NXTFRegPointDto *)anObject;
  if ((__pointId_isset != other->__pointId_isset) ||
      (__pointId_isset && ((__pointId || other->__pointId) && ![__pointId isEqual:other->__pointId]))) {
    return NO;
  }
  if ((__pointName_isset != other->__pointName_isset) ||
      (__pointName_isset && ((__pointName || other->__pointName) && ![__pointName isEqual:other->__pointName]))) {
    return NO;
  }
  if ((__pointType_isset != other->__pointType_isset) ||
      (__pointType_isset && ((__pointType || other->__pointType) && ![__pointType isEqual:other->__pointType]))) {
    return NO;
  }
  if ((__pointDate_isset != other->__pointDate_isset) ||
      (__pointDate_isset && ((__pointDate || other->__pointDate) && ![__pointDate isEqual:other->__pointDate]))) {
    return NO;
  }
  if ((__startTime_isset != other->__startTime_isset) ||
      (__startTime_isset && ((__startTime || other->__startTime) && ![__startTime isEqual:other->__startTime]))) {
    return NO;
  }
  if ((__endTime_isset != other->__endTime_isset) ||
      (__endTime_isset && ((__endTime || other->__endTime) && ![__endTime isEqual:other->__endTime]))) {
    return NO;
  }
  if ((__rmngNum_isset != other->__rmngNum_isset) ||
      (__rmngNum_isset && ((__rmngNum || other->__rmngNum) && ![__rmngNum isEqual:other->__rmngNum]))) {
    return NO;
  }
  if ((__deptId_isset != other->__deptId_isset) ||
      (__deptId_isset && ((__deptId || other->__deptId) && ![__deptId isEqual:other->__deptId]))) {
    return NO;
  }
  if ((__regLevelName_isset != other->__regLevelName_isset) ||
      (__regLevelName_isset && ((__regLevelName || other->__regLevelName) && ![__regLevelName isEqual:other->__regLevelName]))) {
    return NO;
  }
  if ((__totalFee_isset != other->__totalFee_isset) ||
      (__totalFee_isset && ((__totalFee || other->__totalFee) && ![__totalFee isEqual:other->__totalFee]))) {
    return NO;
  }
  if ((__deptName_isset != other->__deptName_isset) ||
      (__deptName_isset && ((__deptName || other->__deptName) && ![__deptName isEqual:other->__deptName]))) {
    return NO;
  }
  if ((__regLevelId_isset != other->__regLevelId_isset) ||
      (__regLevelId_isset && ((__regLevelId || other->__regLevelId) && ![__regLevelId isEqual:other->__regLevelId]))) {
    return NO;
  }
  if ((__targetType_isset != other->__targetType_isset) ||
      (__targetType_isset && (__targetType != other->__targetType))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__pointId release_stub];
  [__pointName release_stub];
  [__pointType release_stub];
  [__pointDate release_stub];
  [__startTime release_stub];
  [__endTime release_stub];
  [__rmngNum release_stub];
  [__deptId release_stub];
  [__regLevelName release_stub];
  [__totalFee release_stub];
  [__deptName release_stub];
  [__regLevelId release_stub];
  [super dealloc_stub];
}

- (NSString *) pointId {
  return [[__pointId retain_stub] autorelease_stub];
}

- (void) setPointId: (NSString *) pointId {
  [pointId retain_stub];
  [__pointId release_stub];
  __pointId = pointId;
  __pointId_isset = YES;
}

- (BOOL) pointIdIsSet {
  return __pointId_isset;
}

- (void) unsetPointId {
  [__pointId release_stub];
  __pointId = nil;
  __pointId_isset = NO;
}

- (NSString *) pointName {
  return [[__pointName retain_stub] autorelease_stub];
}

- (void) setPointName: (NSString *) pointName {
  [pointName retain_stub];
  [__pointName release_stub];
  __pointName = pointName;
  __pointName_isset = YES;
}

- (BOOL) pointNameIsSet {
  return __pointName_isset;
}

- (void) unsetPointName {
  [__pointName release_stub];
  __pointName = nil;
  __pointName_isset = NO;
}

- (NSString *) pointType {
  return [[__pointType retain_stub] autorelease_stub];
}

- (void) setPointType: (NSString *) pointType {
  [pointType retain_stub];
  [__pointType release_stub];
  __pointType = pointType;
  __pointType_isset = YES;
}

- (BOOL) pointTypeIsSet {
  return __pointType_isset;
}

- (void) unsetPointType {
  [__pointType release_stub];
  __pointType = nil;
  __pointType_isset = NO;
}

- (NSString *) pointDate {
  return [[__pointDate retain_stub] autorelease_stub];
}

- (void) setPointDate: (NSString *) pointDate {
  [pointDate retain_stub];
  [__pointDate release_stub];
  __pointDate = pointDate;
  __pointDate_isset = YES;
}

- (BOOL) pointDateIsSet {
  return __pointDate_isset;
}

- (void) unsetPointDate {
  [__pointDate release_stub];
  __pointDate = nil;
  __pointDate_isset = NO;
}

- (NSString *) startTime {
  return [[__startTime retain_stub] autorelease_stub];
}

- (void) setStartTime: (NSString *) startTime {
  [startTime retain_stub];
  [__startTime release_stub];
  __startTime = startTime;
  __startTime_isset = YES;
}

- (BOOL) startTimeIsSet {
  return __startTime_isset;
}

- (void) unsetStartTime {
  [__startTime release_stub];
  __startTime = nil;
  __startTime_isset = NO;
}

- (NSString *) endTime {
  return [[__endTime retain_stub] autorelease_stub];
}

- (void) setEndTime: (NSString *) endTime {
  [endTime retain_stub];
  [__endTime release_stub];
  __endTime = endTime;
  __endTime_isset = YES;
}

- (BOOL) endTimeIsSet {
  return __endTime_isset;
}

- (void) unsetEndTime {
  [__endTime release_stub];
  __endTime = nil;
  __endTime_isset = NO;
}

- (NSString *) rmngNum {
  return [[__rmngNum retain_stub] autorelease_stub];
}

- (void) setRmngNum: (NSString *) rmngNum {
  [rmngNum retain_stub];
  [__rmngNum release_stub];
  __rmngNum = rmngNum;
  __rmngNum_isset = YES;
}

- (BOOL) rmngNumIsSet {
  return __rmngNum_isset;
}

- (void) unsetRmngNum {
  [__rmngNum release_stub];
  __rmngNum = nil;
  __rmngNum_isset = NO;
}

- (NSString *) deptId {
  return [[__deptId retain_stub] autorelease_stub];
}

- (void) setDeptId: (NSString *) deptId {
  [deptId retain_stub];
  [__deptId release_stub];
  __deptId = deptId;
  __deptId_isset = YES;
}

- (BOOL) deptIdIsSet {
  return __deptId_isset;
}

- (void) unsetDeptId {
  [__deptId release_stub];
  __deptId = nil;
  __deptId_isset = NO;
}

- (NSString *) regLevelName {
  return [[__regLevelName retain_stub] autorelease_stub];
}

- (void) setRegLevelName: (NSString *) regLevelName {
  [regLevelName retain_stub];
  [__regLevelName release_stub];
  __regLevelName = regLevelName;
  __regLevelName_isset = YES;
}

- (BOOL) regLevelNameIsSet {
  return __regLevelName_isset;
}

- (void) unsetRegLevelName {
  [__regLevelName release_stub];
  __regLevelName = nil;
  __regLevelName_isset = NO;
}

- (NSString *) totalFee {
  return [[__totalFee retain_stub] autorelease_stub];
}

- (void) setTotalFee: (NSString *) totalFee {
  [totalFee retain_stub];
  [__totalFee release_stub];
  __totalFee = totalFee;
  __totalFee_isset = YES;
}

- (BOOL) totalFeeIsSet {
  return __totalFee_isset;
}

- (void) unsetTotalFee {
  [__totalFee release_stub];
  __totalFee = nil;
  __totalFee_isset = NO;
}

- (NSString *) deptName {
  return [[__deptName retain_stub] autorelease_stub];
}

- (void) setDeptName: (NSString *) deptName {
  [deptName retain_stub];
  [__deptName release_stub];
  __deptName = deptName;
  __deptName_isset = YES;
}

- (BOOL) deptNameIsSet {
  return __deptName_isset;
}

- (void) unsetDeptName {
  [__deptName release_stub];
  __deptName = nil;
  __deptName_isset = NO;
}

- (NSString *) regLevelId {
  return [[__regLevelId retain_stub] autorelease_stub];
}

- (void) setRegLevelId: (NSString *) regLevelId {
  [regLevelId retain_stub];
  [__regLevelId release_stub];
  __regLevelId = regLevelId;
  __regLevelId_isset = YES;
}

- (BOOL) regLevelIdIsSet {
  return __regLevelId_isset;
}

- (void) unsetRegLevelId {
  [__regLevelId release_stub];
  __regLevelId = nil;
  __regLevelId_isset = NO;
}

- (int32_t) targetType {
  return __targetType;
}

- (void) setTargetType: (int32_t) targetType {
  __targetType = targetType;
  __targetType_isset = YES;
}

- (BOOL) targetTypeIsSet {
  return __targetType_isset;
}

- (void) unsetTargetType {
  __targetType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPointId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPointName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPointType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPointDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStartTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEndTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRmngNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegLevelName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTotalFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegLevelId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTargetType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegPointDto"];
  if (__pointId_isset) {
    if (__pointId != nil) {
      [outProtocol writeFieldBeginWithName: @"pointId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __pointId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pointName_isset) {
    if (__pointName != nil) {
      [outProtocol writeFieldBeginWithName: @"pointName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __pointName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pointType_isset) {
    if (__pointType != nil) {
      [outProtocol writeFieldBeginWithName: @"pointType" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __pointType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pointDate_isset) {
    if (__pointDate != nil) {
      [outProtocol writeFieldBeginWithName: @"pointDate" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __pointDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__startTime_isset) {
    if (__startTime != nil) {
      [outProtocol writeFieldBeginWithName: @"startTime" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __startTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__endTime_isset) {
    if (__endTime != nil) {
      [outProtocol writeFieldBeginWithName: @"endTime" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __endTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__rmngNum_isset) {
    if (__rmngNum != nil) {
      [outProtocol writeFieldBeginWithName: @"rmngNum" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __rmngNum];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptId_isset) {
    if (__deptId != nil) {
      [outProtocol writeFieldBeginWithName: @"deptId" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __deptId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regLevelName_isset) {
    if (__regLevelName != nil) {
      [outProtocol writeFieldBeginWithName: @"regLevelName" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __regLevelName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalFee_isset) {
    if (__totalFee != nil) {
      [outProtocol writeFieldBeginWithName: @"totalFee" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __totalFee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptName_isset) {
    if (__deptName != nil) {
      [outProtocol writeFieldBeginWithName: @"deptName" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __deptName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regLevelId_isset) {
    if (__regLevelId != nil) {
      [outProtocol writeFieldBeginWithName: @"regLevelId" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __regLevelId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__targetType_isset) {
    [outProtocol writeFieldBeginWithName: @"targetType" type: TType_I32 fieldID: 13];
    [outProtocol writeI32: __targetType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRegPointDto("];
  [ms appendString: @"pointId:"];
  [ms appendFormat: @"\"%@\"", __pointId];
  [ms appendString: @",pointName:"];
  [ms appendFormat: @"\"%@\"", __pointName];
  [ms appendString: @",pointType:"];
  [ms appendFormat: @"\"%@\"", __pointType];
  [ms appendString: @",pointDate:"];
  [ms appendFormat: @"\"%@\"", __pointDate];
  [ms appendString: @",startTime:"];
  [ms appendFormat: @"\"%@\"", __startTime];
  [ms appendString: @",endTime:"];
  [ms appendFormat: @"\"%@\"", __endTime];
  [ms appendString: @",rmngNum:"];
  [ms appendFormat: @"\"%@\"", __rmngNum];
  [ms appendString: @",deptId:"];
  [ms appendFormat: @"\"%@\"", __deptId];
  [ms appendString: @",regLevelName:"];
  [ms appendFormat: @"\"%@\"", __regLevelName];
  [ms appendString: @",totalFee:"];
  [ms appendFormat: @"\"%@\"", __totalFee];
  [ms appendString: @",deptName:"];
  [ms appendFormat: @"\"%@\"", __deptName];
  [ms appendString: @",regLevelId:"];
  [ms appendFormat: @"\"%@\"", __regLevelId];
  [ms appendString: @",targetType:"];
  [ms appendFormat: @"%i", __targetType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFCityDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithProvinceId: (NSString *) provinceId province: (NSString *) province cityId: (NSString *) cityId city: (NSString *) city cityEn: (NSString *) cityEn opened: (int32_t) opened online: (int32_t) online hotCity: (int32_t) hotCity
{
  self = [super init];
  __provinceId = [provinceId retain_stub];
  __provinceId_isset = YES;
  __province = [province retain_stub];
  __province_isset = YES;
  __cityId = [cityId retain_stub];
  __cityId_isset = YES;
  __city = [city retain_stub];
  __city_isset = YES;
  __cityEn = [cityEn retain_stub];
  __cityEn_isset = YES;
  __opened = opened;
  __opened_isset = YES;
  __online = online;
  __online_isset = YES;
  __hotCity = hotCity;
  __hotCity_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"provinceId"])
  {
    __provinceId = [[decoder decodeObjectForKey: @"provinceId"] retain_stub];
    __provinceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"province"])
  {
    __province = [[decoder decodeObjectForKey: @"province"] retain_stub];
    __province_isset = YES;
  }
  if ([decoder containsValueForKey: @"cityId"])
  {
    __cityId = [[decoder decodeObjectForKey: @"cityId"] retain_stub];
    __cityId_isset = YES;
  }
  if ([decoder containsValueForKey: @"city"])
  {
    __city = [[decoder decodeObjectForKey: @"city"] retain_stub];
    __city_isset = YES;
  }
  if ([decoder containsValueForKey: @"cityEn"])
  {
    __cityEn = [[decoder decodeObjectForKey: @"cityEn"] retain_stub];
    __cityEn_isset = YES;
  }
  if ([decoder containsValueForKey: @"opened"])
  {
    __opened = [decoder decodeInt32ForKey: @"opened"];
    __opened_isset = YES;
  }
  if ([decoder containsValueForKey: @"online"])
  {
    __online = [decoder decodeInt32ForKey: @"online"];
    __online_isset = YES;
  }
  if ([decoder containsValueForKey: @"hotCity"])
  {
    __hotCity = [decoder decodeInt32ForKey: @"hotCity"];
    __hotCity_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__provinceId_isset)
  {
    [encoder encodeObject: __provinceId forKey: @"provinceId"];
  }
  if (__province_isset)
  {
    [encoder encodeObject: __province forKey: @"province"];
  }
  if (__cityId_isset)
  {
    [encoder encodeObject: __cityId forKey: @"cityId"];
  }
  if (__city_isset)
  {
    [encoder encodeObject: __city forKey: @"city"];
  }
  if (__cityEn_isset)
  {
    [encoder encodeObject: __cityEn forKey: @"cityEn"];
  }
  if (__opened_isset)
  {
    [encoder encodeInt32: __opened forKey: @"opened"];
  }
  if (__online_isset)
  {
    [encoder encodeInt32: __online forKey: @"online"];
  }
  if (__hotCity_isset)
  {
    [encoder encodeInt32: __hotCity forKey: @"hotCity"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __provinceId_isset ? 2654435761 : 0;
  if (__provinceId_isset)
  {
    hash = (hash * 31) ^ [__provinceId hash];
  }
  hash = (hash * 31) ^ __province_isset ? 2654435761 : 0;
  if (__province_isset)
  {
    hash = (hash * 31) ^ [__province hash];
  }
  hash = (hash * 31) ^ __cityId_isset ? 2654435761 : 0;
  if (__cityId_isset)
  {
    hash = (hash * 31) ^ [__cityId hash];
  }
  hash = (hash * 31) ^ __city_isset ? 2654435761 : 0;
  if (__city_isset)
  {
    hash = (hash * 31) ^ [__city hash];
  }
  hash = (hash * 31) ^ __cityEn_isset ? 2654435761 : 0;
  if (__cityEn_isset)
  {
    hash = (hash * 31) ^ [__cityEn hash];
  }
  hash = (hash * 31) ^ __opened_isset ? 2654435761 : 0;
  if (__opened_isset)
  {
    hash = (hash * 31) ^ [@(__opened) hash];
  }
  hash = (hash * 31) ^ __online_isset ? 2654435761 : 0;
  if (__online_isset)
  {
    hash = (hash * 31) ^ [@(__online) hash];
  }
  hash = (hash * 31) ^ __hotCity_isset ? 2654435761 : 0;
  if (__hotCity_isset)
  {
    hash = (hash * 31) ^ [@(__hotCity) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFCityDto class]]) {
    return NO;
  }
  NXTFCityDto *other = (NXTFCityDto *)anObject;
  if ((__provinceId_isset != other->__provinceId_isset) ||
      (__provinceId_isset && ((__provinceId || other->__provinceId) && ![__provinceId isEqual:other->__provinceId]))) {
    return NO;
  }
  if ((__province_isset != other->__province_isset) ||
      (__province_isset && ((__province || other->__province) && ![__province isEqual:other->__province]))) {
    return NO;
  }
  if ((__cityId_isset != other->__cityId_isset) ||
      (__cityId_isset && ((__cityId || other->__cityId) && ![__cityId isEqual:other->__cityId]))) {
    return NO;
  }
  if ((__city_isset != other->__city_isset) ||
      (__city_isset && ((__city || other->__city) && ![__city isEqual:other->__city]))) {
    return NO;
  }
  if ((__cityEn_isset != other->__cityEn_isset) ||
      (__cityEn_isset && ((__cityEn || other->__cityEn) && ![__cityEn isEqual:other->__cityEn]))) {
    return NO;
  }
  if ((__opened_isset != other->__opened_isset) ||
      (__opened_isset && (__opened != other->__opened))) {
    return NO;
  }
  if ((__online_isset != other->__online_isset) ||
      (__online_isset && (__online != other->__online))) {
    return NO;
  }
  if ((__hotCity_isset != other->__hotCity_isset) ||
      (__hotCity_isset && (__hotCity != other->__hotCity))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__provinceId release_stub];
  [__province release_stub];
  [__cityId release_stub];
  [__city release_stub];
  [__cityEn release_stub];
  [super dealloc_stub];
}

- (NSString *) provinceId {
  return [[__provinceId retain_stub] autorelease_stub];
}

- (void) setProvinceId: (NSString *) provinceId {
  [provinceId retain_stub];
  [__provinceId release_stub];
  __provinceId = provinceId;
  __provinceId_isset = YES;
}

- (BOOL) provinceIdIsSet {
  return __provinceId_isset;
}

- (void) unsetProvinceId {
  [__provinceId release_stub];
  __provinceId = nil;
  __provinceId_isset = NO;
}

- (NSString *) province {
  return [[__province retain_stub] autorelease_stub];
}

- (void) setProvince: (NSString *) province {
  [province retain_stub];
  [__province release_stub];
  __province = province;
  __province_isset = YES;
}

- (BOOL) provinceIsSet {
  return __province_isset;
}

- (void) unsetProvince {
  [__province release_stub];
  __province = nil;
  __province_isset = NO;
}

- (NSString *) cityId {
  return [[__cityId retain_stub] autorelease_stub];
}

- (void) setCityId: (NSString *) cityId {
  [cityId retain_stub];
  [__cityId release_stub];
  __cityId = cityId;
  __cityId_isset = YES;
}

- (BOOL) cityIdIsSet {
  return __cityId_isset;
}

- (void) unsetCityId {
  [__cityId release_stub];
  __cityId = nil;
  __cityId_isset = NO;
}

- (NSString *) city {
  return [[__city retain_stub] autorelease_stub];
}

- (void) setCity: (NSString *) city {
  [city retain_stub];
  [__city release_stub];
  __city = city;
  __city_isset = YES;
}

- (BOOL) cityIsSet {
  return __city_isset;
}

- (void) unsetCity {
  [__city release_stub];
  __city = nil;
  __city_isset = NO;
}

- (NSString *) cityEn {
  return [[__cityEn retain_stub] autorelease_stub];
}

- (void) setCityEn: (NSString *) cityEn {
  [cityEn retain_stub];
  [__cityEn release_stub];
  __cityEn = cityEn;
  __cityEn_isset = YES;
}

- (BOOL) cityEnIsSet {
  return __cityEn_isset;
}

- (void) unsetCityEn {
  [__cityEn release_stub];
  __cityEn = nil;
  __cityEn_isset = NO;
}

- (int32_t) opened {
  return __opened;
}

- (void) setOpened: (int32_t) opened {
  __opened = opened;
  __opened_isset = YES;
}

- (BOOL) openedIsSet {
  return __opened_isset;
}

- (void) unsetOpened {
  __opened_isset = NO;
}

- (int32_t) online {
  return __online;
}

- (void) setOnline: (int32_t) online {
  __online = online;
  __online_isset = YES;
}

- (BOOL) onlineIsSet {
  return __online_isset;
}

- (void) unsetOnline {
  __online_isset = NO;
}

- (int32_t) hotCity {
  return __hotCity;
}

- (void) setHotCity: (int32_t) hotCity {
  __hotCity = hotCity;
  __hotCity_isset = YES;
}

- (BOOL) hotCityIsSet {
  return __hotCity_isset;
}

- (void) unsetHotCity {
  __hotCity_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProvinceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProvince: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCityId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCityEn: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOpened: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOnline: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHotCity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CityDto"];
  if (__provinceId_isset) {
    if (__provinceId != nil) {
      [outProtocol writeFieldBeginWithName: @"provinceId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __provinceId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__province_isset) {
    if (__province != nil) {
      [outProtocol writeFieldBeginWithName: @"province" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __province];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cityId_isset) {
    if (__cityId != nil) {
      [outProtocol writeFieldBeginWithName: @"cityId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __cityId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__city_isset) {
    if (__city != nil) {
      [outProtocol writeFieldBeginWithName: @"city" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __city];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cityEn_isset) {
    if (__cityEn != nil) {
      [outProtocol writeFieldBeginWithName: @"cityEn" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __cityEn];
      [outProtocol writeFieldEnd];
    }
  }
  if (__opened_isset) {
    [outProtocol writeFieldBeginWithName: @"opened" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __opened];
    [outProtocol writeFieldEnd];
  }
  if (__online_isset) {
    [outProtocol writeFieldBeginWithName: @"online" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __online];
    [outProtocol writeFieldEnd];
  }
  if (__hotCity_isset) {
    [outProtocol writeFieldBeginWithName: @"hotCity" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __hotCity];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFCityDto("];
  [ms appendString: @"provinceId:"];
  [ms appendFormat: @"\"%@\"", __provinceId];
  [ms appendString: @",province:"];
  [ms appendFormat: @"\"%@\"", __province];
  [ms appendString: @",cityId:"];
  [ms appendFormat: @"\"%@\"", __cityId];
  [ms appendString: @",city:"];
  [ms appendFormat: @"\"%@\"", __city];
  [ms appendString: @",cityEn:"];
  [ms appendFormat: @"\"%@\"", __cityEn];
  [ms appendString: @",opened:"];
  [ms appendFormat: @"%i", __opened];
  [ms appendString: @",online:"];
  [ms appendFormat: @"%i", __online];
  [ms appendString: @",hotCity:"];
  [ms appendFormat: @"%i", __hotCity];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFInpatientInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRecordId: (NSString *) recordId inpatientSeriNo: (NSString *) inpatientSeriNo status: (NSString *) status deptName: (NSString *) deptName nurName: (NSString *) nurName wardNo: (NSString *) wardNo bedNo: (NSString *) bedNo drName: (NSString *) drName startTime: (NSString *) startTime endTime: (NSString *) endTime prePayment: (NSString *) prePayment balance: (NSString *) balance totalCost: (NSString *) totalCost ownCost: (NSString *) ownCost payCost: (NSString *) payCost pubCost: (NSString *) pubCost othCost: (NSString *) othCost inDiagnose: (NSString *) inDiagnose outDiagnose: (NSString *) outDiagnose summary: (NSString *) summary
{
  self = [super init];
  __recordId = [recordId retain_stub];
  __recordId_isset = YES;
  __inpatientSeriNo = [inpatientSeriNo retain_stub];
  __inpatientSeriNo_isset = YES;
  __status = [status retain_stub];
  __status_isset = YES;
  __deptName = [deptName retain_stub];
  __deptName_isset = YES;
  __nurName = [nurName retain_stub];
  __nurName_isset = YES;
  __wardNo = [wardNo retain_stub];
  __wardNo_isset = YES;
  __bedNo = [bedNo retain_stub];
  __bedNo_isset = YES;
  __drName = [drName retain_stub];
  __drName_isset = YES;
  __startTime = [startTime retain_stub];
  __startTime_isset = YES;
  __endTime = [endTime retain_stub];
  __endTime_isset = YES;
  __prePayment = [prePayment retain_stub];
  __prePayment_isset = YES;
  __balance = [balance retain_stub];
  __balance_isset = YES;
  __totalCost = [totalCost retain_stub];
  __totalCost_isset = YES;
  __ownCost = [ownCost retain_stub];
  __ownCost_isset = YES;
  __payCost = [payCost retain_stub];
  __payCost_isset = YES;
  __pubCost = [pubCost retain_stub];
  __pubCost_isset = YES;
  __othCost = [othCost retain_stub];
  __othCost_isset = YES;
  __inDiagnose = [inDiagnose retain_stub];
  __inDiagnose_isset = YES;
  __outDiagnose = [outDiagnose retain_stub];
  __outDiagnose_isset = YES;
  __summary = [summary retain_stub];
  __summary_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"recordId"])
  {
    __recordId = [[decoder decodeObjectForKey: @"recordId"] retain_stub];
    __recordId_isset = YES;
  }
  if ([decoder containsValueForKey: @"inpatientSeriNo"])
  {
    __inpatientSeriNo = [[decoder decodeObjectForKey: @"inpatientSeriNo"] retain_stub];
    __inpatientSeriNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [[decoder decodeObjectForKey: @"status"] retain_stub];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptName"])
  {
    __deptName = [[decoder decodeObjectForKey: @"deptName"] retain_stub];
    __deptName_isset = YES;
  }
  if ([decoder containsValueForKey: @"nurName"])
  {
    __nurName = [[decoder decodeObjectForKey: @"nurName"] retain_stub];
    __nurName_isset = YES;
  }
  if ([decoder containsValueForKey: @"wardNo"])
  {
    __wardNo = [[decoder decodeObjectForKey: @"wardNo"] retain_stub];
    __wardNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"bedNo"])
  {
    __bedNo = [[decoder decodeObjectForKey: @"bedNo"] retain_stub];
    __bedNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"drName"])
  {
    __drName = [[decoder decodeObjectForKey: @"drName"] retain_stub];
    __drName_isset = YES;
  }
  if ([decoder containsValueForKey: @"startTime"])
  {
    __startTime = [[decoder decodeObjectForKey: @"startTime"] retain_stub];
    __startTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"endTime"])
  {
    __endTime = [[decoder decodeObjectForKey: @"endTime"] retain_stub];
    __endTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"prePayment"])
  {
    __prePayment = [[decoder decodeObjectForKey: @"prePayment"] retain_stub];
    __prePayment_isset = YES;
  }
  if ([decoder containsValueForKey: @"balance"])
  {
    __balance = [[decoder decodeObjectForKey: @"balance"] retain_stub];
    __balance_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalCost"])
  {
    __totalCost = [[decoder decodeObjectForKey: @"totalCost"] retain_stub];
    __totalCost_isset = YES;
  }
  if ([decoder containsValueForKey: @"ownCost"])
  {
    __ownCost = [[decoder decodeObjectForKey: @"ownCost"] retain_stub];
    __ownCost_isset = YES;
  }
  if ([decoder containsValueForKey: @"payCost"])
  {
    __payCost = [[decoder decodeObjectForKey: @"payCost"] retain_stub];
    __payCost_isset = YES;
  }
  if ([decoder containsValueForKey: @"pubCost"])
  {
    __pubCost = [[decoder decodeObjectForKey: @"pubCost"] retain_stub];
    __pubCost_isset = YES;
  }
  if ([decoder containsValueForKey: @"othCost"])
  {
    __othCost = [[decoder decodeObjectForKey: @"othCost"] retain_stub];
    __othCost_isset = YES;
  }
  if ([decoder containsValueForKey: @"inDiagnose"])
  {
    __inDiagnose = [[decoder decodeObjectForKey: @"inDiagnose"] retain_stub];
    __inDiagnose_isset = YES;
  }
  if ([decoder containsValueForKey: @"outDiagnose"])
  {
    __outDiagnose = [[decoder decodeObjectForKey: @"outDiagnose"] retain_stub];
    __outDiagnose_isset = YES;
  }
  if ([decoder containsValueForKey: @"summary"])
  {
    __summary = [[decoder decodeObjectForKey: @"summary"] retain_stub];
    __summary_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__recordId_isset)
  {
    [encoder encodeObject: __recordId forKey: @"recordId"];
  }
  if (__inpatientSeriNo_isset)
  {
    [encoder encodeObject: __inpatientSeriNo forKey: @"inpatientSeriNo"];
  }
  if (__status_isset)
  {
    [encoder encodeObject: __status forKey: @"status"];
  }
  if (__deptName_isset)
  {
    [encoder encodeObject: __deptName forKey: @"deptName"];
  }
  if (__nurName_isset)
  {
    [encoder encodeObject: __nurName forKey: @"nurName"];
  }
  if (__wardNo_isset)
  {
    [encoder encodeObject: __wardNo forKey: @"wardNo"];
  }
  if (__bedNo_isset)
  {
    [encoder encodeObject: __bedNo forKey: @"bedNo"];
  }
  if (__drName_isset)
  {
    [encoder encodeObject: __drName forKey: @"drName"];
  }
  if (__startTime_isset)
  {
    [encoder encodeObject: __startTime forKey: @"startTime"];
  }
  if (__endTime_isset)
  {
    [encoder encodeObject: __endTime forKey: @"endTime"];
  }
  if (__prePayment_isset)
  {
    [encoder encodeObject: __prePayment forKey: @"prePayment"];
  }
  if (__balance_isset)
  {
    [encoder encodeObject: __balance forKey: @"balance"];
  }
  if (__totalCost_isset)
  {
    [encoder encodeObject: __totalCost forKey: @"totalCost"];
  }
  if (__ownCost_isset)
  {
    [encoder encodeObject: __ownCost forKey: @"ownCost"];
  }
  if (__payCost_isset)
  {
    [encoder encodeObject: __payCost forKey: @"payCost"];
  }
  if (__pubCost_isset)
  {
    [encoder encodeObject: __pubCost forKey: @"pubCost"];
  }
  if (__othCost_isset)
  {
    [encoder encodeObject: __othCost forKey: @"othCost"];
  }
  if (__inDiagnose_isset)
  {
    [encoder encodeObject: __inDiagnose forKey: @"inDiagnose"];
  }
  if (__outDiagnose_isset)
  {
    [encoder encodeObject: __outDiagnose forKey: @"outDiagnose"];
  }
  if (__summary_isset)
  {
    [encoder encodeObject: __summary forKey: @"summary"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __recordId_isset ? 2654435761 : 0;
  if (__recordId_isset)
  {
    hash = (hash * 31) ^ [__recordId hash];
  }
  hash = (hash * 31) ^ __inpatientSeriNo_isset ? 2654435761 : 0;
  if (__inpatientSeriNo_isset)
  {
    hash = (hash * 31) ^ [__inpatientSeriNo hash];
  }
  hash = (hash * 31) ^ __status_isset ? 2654435761 : 0;
  if (__status_isset)
  {
    hash = (hash * 31) ^ [__status hash];
  }
  hash = (hash * 31) ^ __deptName_isset ? 2654435761 : 0;
  if (__deptName_isset)
  {
    hash = (hash * 31) ^ [__deptName hash];
  }
  hash = (hash * 31) ^ __nurName_isset ? 2654435761 : 0;
  if (__nurName_isset)
  {
    hash = (hash * 31) ^ [__nurName hash];
  }
  hash = (hash * 31) ^ __wardNo_isset ? 2654435761 : 0;
  if (__wardNo_isset)
  {
    hash = (hash * 31) ^ [__wardNo hash];
  }
  hash = (hash * 31) ^ __bedNo_isset ? 2654435761 : 0;
  if (__bedNo_isset)
  {
    hash = (hash * 31) ^ [__bedNo hash];
  }
  hash = (hash * 31) ^ __drName_isset ? 2654435761 : 0;
  if (__drName_isset)
  {
    hash = (hash * 31) ^ [__drName hash];
  }
  hash = (hash * 31) ^ __startTime_isset ? 2654435761 : 0;
  if (__startTime_isset)
  {
    hash = (hash * 31) ^ [__startTime hash];
  }
  hash = (hash * 31) ^ __endTime_isset ? 2654435761 : 0;
  if (__endTime_isset)
  {
    hash = (hash * 31) ^ [__endTime hash];
  }
  hash = (hash * 31) ^ __prePayment_isset ? 2654435761 : 0;
  if (__prePayment_isset)
  {
    hash = (hash * 31) ^ [__prePayment hash];
  }
  hash = (hash * 31) ^ __balance_isset ? 2654435761 : 0;
  if (__balance_isset)
  {
    hash = (hash * 31) ^ [__balance hash];
  }
  hash = (hash * 31) ^ __totalCost_isset ? 2654435761 : 0;
  if (__totalCost_isset)
  {
    hash = (hash * 31) ^ [__totalCost hash];
  }
  hash = (hash * 31) ^ __ownCost_isset ? 2654435761 : 0;
  if (__ownCost_isset)
  {
    hash = (hash * 31) ^ [__ownCost hash];
  }
  hash = (hash * 31) ^ __payCost_isset ? 2654435761 : 0;
  if (__payCost_isset)
  {
    hash = (hash * 31) ^ [__payCost hash];
  }
  hash = (hash * 31) ^ __pubCost_isset ? 2654435761 : 0;
  if (__pubCost_isset)
  {
    hash = (hash * 31) ^ [__pubCost hash];
  }
  hash = (hash * 31) ^ __othCost_isset ? 2654435761 : 0;
  if (__othCost_isset)
  {
    hash = (hash * 31) ^ [__othCost hash];
  }
  hash = (hash * 31) ^ __inDiagnose_isset ? 2654435761 : 0;
  if (__inDiagnose_isset)
  {
    hash = (hash * 31) ^ [__inDiagnose hash];
  }
  hash = (hash * 31) ^ __outDiagnose_isset ? 2654435761 : 0;
  if (__outDiagnose_isset)
  {
    hash = (hash * 31) ^ [__outDiagnose hash];
  }
  hash = (hash * 31) ^ __summary_isset ? 2654435761 : 0;
  if (__summary_isset)
  {
    hash = (hash * 31) ^ [__summary hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFInpatientInfo class]]) {
    return NO;
  }
  NXTFInpatientInfo *other = (NXTFInpatientInfo *)anObject;
  if ((__recordId_isset != other->__recordId_isset) ||
      (__recordId_isset && ((__recordId || other->__recordId) && ![__recordId isEqual:other->__recordId]))) {
    return NO;
  }
  if ((__inpatientSeriNo_isset != other->__inpatientSeriNo_isset) ||
      (__inpatientSeriNo_isset && ((__inpatientSeriNo || other->__inpatientSeriNo) && ![__inpatientSeriNo isEqual:other->__inpatientSeriNo]))) {
    return NO;
  }
  if ((__status_isset != other->__status_isset) ||
      (__status_isset && ((__status || other->__status) && ![__status isEqual:other->__status]))) {
    return NO;
  }
  if ((__deptName_isset != other->__deptName_isset) ||
      (__deptName_isset && ((__deptName || other->__deptName) && ![__deptName isEqual:other->__deptName]))) {
    return NO;
  }
  if ((__nurName_isset != other->__nurName_isset) ||
      (__nurName_isset && ((__nurName || other->__nurName) && ![__nurName isEqual:other->__nurName]))) {
    return NO;
  }
  if ((__wardNo_isset != other->__wardNo_isset) ||
      (__wardNo_isset && ((__wardNo || other->__wardNo) && ![__wardNo isEqual:other->__wardNo]))) {
    return NO;
  }
  if ((__bedNo_isset != other->__bedNo_isset) ||
      (__bedNo_isset && ((__bedNo || other->__bedNo) && ![__bedNo isEqual:other->__bedNo]))) {
    return NO;
  }
  if ((__drName_isset != other->__drName_isset) ||
      (__drName_isset && ((__drName || other->__drName) && ![__drName isEqual:other->__drName]))) {
    return NO;
  }
  if ((__startTime_isset != other->__startTime_isset) ||
      (__startTime_isset && ((__startTime || other->__startTime) && ![__startTime isEqual:other->__startTime]))) {
    return NO;
  }
  if ((__endTime_isset != other->__endTime_isset) ||
      (__endTime_isset && ((__endTime || other->__endTime) && ![__endTime isEqual:other->__endTime]))) {
    return NO;
  }
  if ((__prePayment_isset != other->__prePayment_isset) ||
      (__prePayment_isset && ((__prePayment || other->__prePayment) && ![__prePayment isEqual:other->__prePayment]))) {
    return NO;
  }
  if ((__balance_isset != other->__balance_isset) ||
      (__balance_isset && ((__balance || other->__balance) && ![__balance isEqual:other->__balance]))) {
    return NO;
  }
  if ((__totalCost_isset != other->__totalCost_isset) ||
      (__totalCost_isset && ((__totalCost || other->__totalCost) && ![__totalCost isEqual:other->__totalCost]))) {
    return NO;
  }
  if ((__ownCost_isset != other->__ownCost_isset) ||
      (__ownCost_isset && ((__ownCost || other->__ownCost) && ![__ownCost isEqual:other->__ownCost]))) {
    return NO;
  }
  if ((__payCost_isset != other->__payCost_isset) ||
      (__payCost_isset && ((__payCost || other->__payCost) && ![__payCost isEqual:other->__payCost]))) {
    return NO;
  }
  if ((__pubCost_isset != other->__pubCost_isset) ||
      (__pubCost_isset && ((__pubCost || other->__pubCost) && ![__pubCost isEqual:other->__pubCost]))) {
    return NO;
  }
  if ((__othCost_isset != other->__othCost_isset) ||
      (__othCost_isset && ((__othCost || other->__othCost) && ![__othCost isEqual:other->__othCost]))) {
    return NO;
  }
  if ((__inDiagnose_isset != other->__inDiagnose_isset) ||
      (__inDiagnose_isset && ((__inDiagnose || other->__inDiagnose) && ![__inDiagnose isEqual:other->__inDiagnose]))) {
    return NO;
  }
  if ((__outDiagnose_isset != other->__outDiagnose_isset) ||
      (__outDiagnose_isset && ((__outDiagnose || other->__outDiagnose) && ![__outDiagnose isEqual:other->__outDiagnose]))) {
    return NO;
  }
  if ((__summary_isset != other->__summary_isset) ||
      (__summary_isset && ((__summary || other->__summary) && ![__summary isEqual:other->__summary]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__recordId release_stub];
  [__inpatientSeriNo release_stub];
  [__status release_stub];
  [__deptName release_stub];
  [__nurName release_stub];
  [__wardNo release_stub];
  [__bedNo release_stub];
  [__drName release_stub];
  [__startTime release_stub];
  [__endTime release_stub];
  [__prePayment release_stub];
  [__balance release_stub];
  [__totalCost release_stub];
  [__ownCost release_stub];
  [__payCost release_stub];
  [__pubCost release_stub];
  [__othCost release_stub];
  [__inDiagnose release_stub];
  [__outDiagnose release_stub];
  [__summary release_stub];
  [super dealloc_stub];
}

- (NSString *) recordId {
  return [[__recordId retain_stub] autorelease_stub];
}

- (void) setRecordId: (NSString *) recordId {
  [recordId retain_stub];
  [__recordId release_stub];
  __recordId = recordId;
  __recordId_isset = YES;
}

- (BOOL) recordIdIsSet {
  return __recordId_isset;
}

- (void) unsetRecordId {
  [__recordId release_stub];
  __recordId = nil;
  __recordId_isset = NO;
}

- (NSString *) inpatientSeriNo {
  return [[__inpatientSeriNo retain_stub] autorelease_stub];
}

- (void) setInpatientSeriNo: (NSString *) inpatientSeriNo {
  [inpatientSeriNo retain_stub];
  [__inpatientSeriNo release_stub];
  __inpatientSeriNo = inpatientSeriNo;
  __inpatientSeriNo_isset = YES;
}

- (BOOL) inpatientSeriNoIsSet {
  return __inpatientSeriNo_isset;
}

- (void) unsetInpatientSeriNo {
  [__inpatientSeriNo release_stub];
  __inpatientSeriNo = nil;
  __inpatientSeriNo_isset = NO;
}

- (NSString *) status {
  return [[__status retain_stub] autorelease_stub];
}

- (void) setStatus: (NSString *) status {
  [status retain_stub];
  [__status release_stub];
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  [__status release_stub];
  __status = nil;
  __status_isset = NO;
}

- (NSString *) deptName {
  return [[__deptName retain_stub] autorelease_stub];
}

- (void) setDeptName: (NSString *) deptName {
  [deptName retain_stub];
  [__deptName release_stub];
  __deptName = deptName;
  __deptName_isset = YES;
}

- (BOOL) deptNameIsSet {
  return __deptName_isset;
}

- (void) unsetDeptName {
  [__deptName release_stub];
  __deptName = nil;
  __deptName_isset = NO;
}

- (NSString *) nurName {
  return [[__nurName retain_stub] autorelease_stub];
}

- (void) setNurName: (NSString *) nurName {
  [nurName retain_stub];
  [__nurName release_stub];
  __nurName = nurName;
  __nurName_isset = YES;
}

- (BOOL) nurNameIsSet {
  return __nurName_isset;
}

- (void) unsetNurName {
  [__nurName release_stub];
  __nurName = nil;
  __nurName_isset = NO;
}

- (NSString *) wardNo {
  return [[__wardNo retain_stub] autorelease_stub];
}

- (void) setWardNo: (NSString *) wardNo {
  [wardNo retain_stub];
  [__wardNo release_stub];
  __wardNo = wardNo;
  __wardNo_isset = YES;
}

- (BOOL) wardNoIsSet {
  return __wardNo_isset;
}

- (void) unsetWardNo {
  [__wardNo release_stub];
  __wardNo = nil;
  __wardNo_isset = NO;
}

- (NSString *) bedNo {
  return [[__bedNo retain_stub] autorelease_stub];
}

- (void) setBedNo: (NSString *) bedNo {
  [bedNo retain_stub];
  [__bedNo release_stub];
  __bedNo = bedNo;
  __bedNo_isset = YES;
}

- (BOOL) bedNoIsSet {
  return __bedNo_isset;
}

- (void) unsetBedNo {
  [__bedNo release_stub];
  __bedNo = nil;
  __bedNo_isset = NO;
}

- (NSString *) drName {
  return [[__drName retain_stub] autorelease_stub];
}

- (void) setDrName: (NSString *) drName {
  [drName retain_stub];
  [__drName release_stub];
  __drName = drName;
  __drName_isset = YES;
}

- (BOOL) drNameIsSet {
  return __drName_isset;
}

- (void) unsetDrName {
  [__drName release_stub];
  __drName = nil;
  __drName_isset = NO;
}

- (NSString *) startTime {
  return [[__startTime retain_stub] autorelease_stub];
}

- (void) setStartTime: (NSString *) startTime {
  [startTime retain_stub];
  [__startTime release_stub];
  __startTime = startTime;
  __startTime_isset = YES;
}

- (BOOL) startTimeIsSet {
  return __startTime_isset;
}

- (void) unsetStartTime {
  [__startTime release_stub];
  __startTime = nil;
  __startTime_isset = NO;
}

- (NSString *) endTime {
  return [[__endTime retain_stub] autorelease_stub];
}

- (void) setEndTime: (NSString *) endTime {
  [endTime retain_stub];
  [__endTime release_stub];
  __endTime = endTime;
  __endTime_isset = YES;
}

- (BOOL) endTimeIsSet {
  return __endTime_isset;
}

- (void) unsetEndTime {
  [__endTime release_stub];
  __endTime = nil;
  __endTime_isset = NO;
}

- (NSString *) prePayment {
  return [[__prePayment retain_stub] autorelease_stub];
}

- (void) setPrePayment: (NSString *) prePayment {
  [prePayment retain_stub];
  [__prePayment release_stub];
  __prePayment = prePayment;
  __prePayment_isset = YES;
}

- (BOOL) prePaymentIsSet {
  return __prePayment_isset;
}

- (void) unsetPrePayment {
  [__prePayment release_stub];
  __prePayment = nil;
  __prePayment_isset = NO;
}

- (NSString *) balance {
  return [[__balance retain_stub] autorelease_stub];
}

- (void) setBalance: (NSString *) balance {
  [balance retain_stub];
  [__balance release_stub];
  __balance = balance;
  __balance_isset = YES;
}

- (BOOL) balanceIsSet {
  return __balance_isset;
}

- (void) unsetBalance {
  [__balance release_stub];
  __balance = nil;
  __balance_isset = NO;
}

- (NSString *) totalCost {
  return [[__totalCost retain_stub] autorelease_stub];
}

- (void) setTotalCost: (NSString *) totalCost {
  [totalCost retain_stub];
  [__totalCost release_stub];
  __totalCost = totalCost;
  __totalCost_isset = YES;
}

- (BOOL) totalCostIsSet {
  return __totalCost_isset;
}

- (void) unsetTotalCost {
  [__totalCost release_stub];
  __totalCost = nil;
  __totalCost_isset = NO;
}

- (NSString *) ownCost {
  return [[__ownCost retain_stub] autorelease_stub];
}

- (void) setOwnCost: (NSString *) ownCost {
  [ownCost retain_stub];
  [__ownCost release_stub];
  __ownCost = ownCost;
  __ownCost_isset = YES;
}

- (BOOL) ownCostIsSet {
  return __ownCost_isset;
}

- (void) unsetOwnCost {
  [__ownCost release_stub];
  __ownCost = nil;
  __ownCost_isset = NO;
}

- (NSString *) payCost {
  return [[__payCost retain_stub] autorelease_stub];
}

- (void) setPayCost: (NSString *) payCost {
  [payCost retain_stub];
  [__payCost release_stub];
  __payCost = payCost;
  __payCost_isset = YES;
}

- (BOOL) payCostIsSet {
  return __payCost_isset;
}

- (void) unsetPayCost {
  [__payCost release_stub];
  __payCost = nil;
  __payCost_isset = NO;
}

- (NSString *) pubCost {
  return [[__pubCost retain_stub] autorelease_stub];
}

- (void) setPubCost: (NSString *) pubCost {
  [pubCost retain_stub];
  [__pubCost release_stub];
  __pubCost = pubCost;
  __pubCost_isset = YES;
}

- (BOOL) pubCostIsSet {
  return __pubCost_isset;
}

- (void) unsetPubCost {
  [__pubCost release_stub];
  __pubCost = nil;
  __pubCost_isset = NO;
}

- (NSString *) othCost {
  return [[__othCost retain_stub] autorelease_stub];
}

- (void) setOthCost: (NSString *) othCost {
  [othCost retain_stub];
  [__othCost release_stub];
  __othCost = othCost;
  __othCost_isset = YES;
}

- (BOOL) othCostIsSet {
  return __othCost_isset;
}

- (void) unsetOthCost {
  [__othCost release_stub];
  __othCost = nil;
  __othCost_isset = NO;
}

- (NSString *) inDiagnose {
  return [[__inDiagnose retain_stub] autorelease_stub];
}

- (void) setInDiagnose: (NSString *) inDiagnose {
  [inDiagnose retain_stub];
  [__inDiagnose release_stub];
  __inDiagnose = inDiagnose;
  __inDiagnose_isset = YES;
}

- (BOOL) inDiagnoseIsSet {
  return __inDiagnose_isset;
}

- (void) unsetInDiagnose {
  [__inDiagnose release_stub];
  __inDiagnose = nil;
  __inDiagnose_isset = NO;
}

- (NSString *) outDiagnose {
  return [[__outDiagnose retain_stub] autorelease_stub];
}

- (void) setOutDiagnose: (NSString *) outDiagnose {
  [outDiagnose retain_stub];
  [__outDiagnose release_stub];
  __outDiagnose = outDiagnose;
  __outDiagnose_isset = YES;
}

- (BOOL) outDiagnoseIsSet {
  return __outDiagnose_isset;
}

- (void) unsetOutDiagnose {
  [__outDiagnose release_stub];
  __outDiagnose = nil;
  __outDiagnose_isset = NO;
}

- (NSString *) summary {
  return [[__summary retain_stub] autorelease_stub];
}

- (void) setSummary: (NSString *) summary {
  [summary retain_stub];
  [__summary release_stub];
  __summary = summary;
  __summary_isset = YES;
}

- (BOOL) summaryIsSet {
  return __summary_isset;
}

- (void) unsetSummary {
  [__summary release_stub];
  __summary = nil;
  __summary_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRecordId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInpatientSeriNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNurName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWardNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBedNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStartTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEndTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPrePayment: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBalance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTotalCost: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOwnCost: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPayCost: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPubCost: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOthCost: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInDiagnose: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOutDiagnose: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSummary: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"InpatientInfo"];
  if (__recordId_isset) {
    if (__recordId != nil) {
      [outProtocol writeFieldBeginWithName: @"recordId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __recordId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__inpatientSeriNo_isset) {
    if (__inpatientSeriNo != nil) {
      [outProtocol writeFieldBeginWithName: @"inpatientSeriNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __inpatientSeriNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__status_isset) {
    if (__status != nil) {
      [outProtocol writeFieldBeginWithName: @"status" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __status];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptName_isset) {
    if (__deptName != nil) {
      [outProtocol writeFieldBeginWithName: @"deptName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __deptName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__nurName_isset) {
    if (__nurName != nil) {
      [outProtocol writeFieldBeginWithName: @"nurName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __nurName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__wardNo_isset) {
    if (__wardNo != nil) {
      [outProtocol writeFieldBeginWithName: @"wardNo" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __wardNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bedNo_isset) {
    if (__bedNo != nil) {
      [outProtocol writeFieldBeginWithName: @"bedNo" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __bedNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drName_isset) {
    if (__drName != nil) {
      [outProtocol writeFieldBeginWithName: @"drName" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __drName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__startTime_isset) {
    if (__startTime != nil) {
      [outProtocol writeFieldBeginWithName: @"startTime" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __startTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__endTime_isset) {
    if (__endTime != nil) {
      [outProtocol writeFieldBeginWithName: @"endTime" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __endTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__prePayment_isset) {
    if (__prePayment != nil) {
      [outProtocol writeFieldBeginWithName: @"prePayment" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __prePayment];
      [outProtocol writeFieldEnd];
    }
  }
  if (__balance_isset) {
    if (__balance != nil) {
      [outProtocol writeFieldBeginWithName: @"balance" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __balance];
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalCost_isset) {
    if (__totalCost != nil) {
      [outProtocol writeFieldBeginWithName: @"totalCost" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __totalCost];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ownCost_isset) {
    if (__ownCost != nil) {
      [outProtocol writeFieldBeginWithName: @"ownCost" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __ownCost];
      [outProtocol writeFieldEnd];
    }
  }
  if (__payCost_isset) {
    if (__payCost != nil) {
      [outProtocol writeFieldBeginWithName: @"payCost" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __payCost];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pubCost_isset) {
    if (__pubCost != nil) {
      [outProtocol writeFieldBeginWithName: @"pubCost" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __pubCost];
      [outProtocol writeFieldEnd];
    }
  }
  if (__othCost_isset) {
    if (__othCost != nil) {
      [outProtocol writeFieldBeginWithName: @"othCost" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __othCost];
      [outProtocol writeFieldEnd];
    }
  }
  if (__inDiagnose_isset) {
    if (__inDiagnose != nil) {
      [outProtocol writeFieldBeginWithName: @"inDiagnose" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __inDiagnose];
      [outProtocol writeFieldEnd];
    }
  }
  if (__outDiagnose_isset) {
    if (__outDiagnose != nil) {
      [outProtocol writeFieldBeginWithName: @"outDiagnose" type: TType_STRING fieldID: 19];
      [outProtocol writeString: __outDiagnose];
      [outProtocol writeFieldEnd];
    }
  }
  if (__summary_isset) {
    if (__summary != nil) {
      [outProtocol writeFieldBeginWithName: @"summary" type: TType_STRING fieldID: 20];
      [outProtocol writeString: __summary];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFInpatientInfo("];
  [ms appendString: @"recordId:"];
  [ms appendFormat: @"\"%@\"", __recordId];
  [ms appendString: @",inpatientSeriNo:"];
  [ms appendFormat: @"\"%@\"", __inpatientSeriNo];
  [ms appendString: @",status:"];
  [ms appendFormat: @"\"%@\"", __status];
  [ms appendString: @",deptName:"];
  [ms appendFormat: @"\"%@\"", __deptName];
  [ms appendString: @",nurName:"];
  [ms appendFormat: @"\"%@\"", __nurName];
  [ms appendString: @",wardNo:"];
  [ms appendFormat: @"\"%@\"", __wardNo];
  [ms appendString: @",bedNo:"];
  [ms appendFormat: @"\"%@\"", __bedNo];
  [ms appendString: @",drName:"];
  [ms appendFormat: @"\"%@\"", __drName];
  [ms appendString: @",startTime:"];
  [ms appendFormat: @"\"%@\"", __startTime];
  [ms appendString: @",endTime:"];
  [ms appendFormat: @"\"%@\"", __endTime];
  [ms appendString: @",prePayment:"];
  [ms appendFormat: @"\"%@\"", __prePayment];
  [ms appendString: @",balance:"];
  [ms appendFormat: @"\"%@\"", __balance];
  [ms appendString: @",totalCost:"];
  [ms appendFormat: @"\"%@\"", __totalCost];
  [ms appendString: @",ownCost:"];
  [ms appendFormat: @"\"%@\"", __ownCost];
  [ms appendString: @",payCost:"];
  [ms appendFormat: @"\"%@\"", __payCost];
  [ms appendString: @",pubCost:"];
  [ms appendFormat: @"\"%@\"", __pubCost];
  [ms appendString: @",othCost:"];
  [ms appendFormat: @"\"%@\"", __othCost];
  [ms appendString: @",inDiagnose:"];
  [ms appendFormat: @"\"%@\"", __inDiagnose];
  [ms appendString: @",outDiagnose:"];
  [ms appendFormat: @"\"%@\"", __outDiagnose];
  [ms appendString: @",summary:"];
  [ms appendFormat: @"\"%@\"", __summary];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFInpatientItemFee

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTransType: (NSString *) transType itemName: (NSString *) itemName unitPrice: (NSString *) unitPrice itemCount: (NSString *) itemCount totalPrice: (NSString *) totalPrice
{
  self = [super init];
  __transType = [transType retain_stub];
  __transType_isset = YES;
  __itemName = [itemName retain_stub];
  __itemName_isset = YES;
  __unitPrice = [unitPrice retain_stub];
  __unitPrice_isset = YES;
  __itemCount = [itemCount retain_stub];
  __itemCount_isset = YES;
  __totalPrice = [totalPrice retain_stub];
  __totalPrice_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"transType"])
  {
    __transType = [[decoder decodeObjectForKey: @"transType"] retain_stub];
    __transType_isset = YES;
  }
  if ([decoder containsValueForKey: @"itemName"])
  {
    __itemName = [[decoder decodeObjectForKey: @"itemName"] retain_stub];
    __itemName_isset = YES;
  }
  if ([decoder containsValueForKey: @"unitPrice"])
  {
    __unitPrice = [[decoder decodeObjectForKey: @"unitPrice"] retain_stub];
    __unitPrice_isset = YES;
  }
  if ([decoder containsValueForKey: @"itemCount"])
  {
    __itemCount = [[decoder decodeObjectForKey: @"itemCount"] retain_stub];
    __itemCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalPrice"])
  {
    __totalPrice = [[decoder decodeObjectForKey: @"totalPrice"] retain_stub];
    __totalPrice_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__transType_isset)
  {
    [encoder encodeObject: __transType forKey: @"transType"];
  }
  if (__itemName_isset)
  {
    [encoder encodeObject: __itemName forKey: @"itemName"];
  }
  if (__unitPrice_isset)
  {
    [encoder encodeObject: __unitPrice forKey: @"unitPrice"];
  }
  if (__itemCount_isset)
  {
    [encoder encodeObject: __itemCount forKey: @"itemCount"];
  }
  if (__totalPrice_isset)
  {
    [encoder encodeObject: __totalPrice forKey: @"totalPrice"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __transType_isset ? 2654435761 : 0;
  if (__transType_isset)
  {
    hash = (hash * 31) ^ [__transType hash];
  }
  hash = (hash * 31) ^ __itemName_isset ? 2654435761 : 0;
  if (__itemName_isset)
  {
    hash = (hash * 31) ^ [__itemName hash];
  }
  hash = (hash * 31) ^ __unitPrice_isset ? 2654435761 : 0;
  if (__unitPrice_isset)
  {
    hash = (hash * 31) ^ [__unitPrice hash];
  }
  hash = (hash * 31) ^ __itemCount_isset ? 2654435761 : 0;
  if (__itemCount_isset)
  {
    hash = (hash * 31) ^ [__itemCount hash];
  }
  hash = (hash * 31) ^ __totalPrice_isset ? 2654435761 : 0;
  if (__totalPrice_isset)
  {
    hash = (hash * 31) ^ [__totalPrice hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFInpatientItemFee class]]) {
    return NO;
  }
  NXTFInpatientItemFee *other = (NXTFInpatientItemFee *)anObject;
  if ((__transType_isset != other->__transType_isset) ||
      (__transType_isset && ((__transType || other->__transType) && ![__transType isEqual:other->__transType]))) {
    return NO;
  }
  if ((__itemName_isset != other->__itemName_isset) ||
      (__itemName_isset && ((__itemName || other->__itemName) && ![__itemName isEqual:other->__itemName]))) {
    return NO;
  }
  if ((__unitPrice_isset != other->__unitPrice_isset) ||
      (__unitPrice_isset && ((__unitPrice || other->__unitPrice) && ![__unitPrice isEqual:other->__unitPrice]))) {
    return NO;
  }
  if ((__itemCount_isset != other->__itemCount_isset) ||
      (__itemCount_isset && ((__itemCount || other->__itemCount) && ![__itemCount isEqual:other->__itemCount]))) {
    return NO;
  }
  if ((__totalPrice_isset != other->__totalPrice_isset) ||
      (__totalPrice_isset && ((__totalPrice || other->__totalPrice) && ![__totalPrice isEqual:other->__totalPrice]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__transType release_stub];
  [__itemName release_stub];
  [__unitPrice release_stub];
  [__itemCount release_stub];
  [__totalPrice release_stub];
  [super dealloc_stub];
}

- (NSString *) transType {
  return [[__transType retain_stub] autorelease_stub];
}

- (void) setTransType: (NSString *) transType {
  [transType retain_stub];
  [__transType release_stub];
  __transType = transType;
  __transType_isset = YES;
}

- (BOOL) transTypeIsSet {
  return __transType_isset;
}

- (void) unsetTransType {
  [__transType release_stub];
  __transType = nil;
  __transType_isset = NO;
}

- (NSString *) itemName {
  return [[__itemName retain_stub] autorelease_stub];
}

- (void) setItemName: (NSString *) itemName {
  [itemName retain_stub];
  [__itemName release_stub];
  __itemName = itemName;
  __itemName_isset = YES;
}

- (BOOL) itemNameIsSet {
  return __itemName_isset;
}

- (void) unsetItemName {
  [__itemName release_stub];
  __itemName = nil;
  __itemName_isset = NO;
}

- (NSString *) unitPrice {
  return [[__unitPrice retain_stub] autorelease_stub];
}

- (void) setUnitPrice: (NSString *) unitPrice {
  [unitPrice retain_stub];
  [__unitPrice release_stub];
  __unitPrice = unitPrice;
  __unitPrice_isset = YES;
}

- (BOOL) unitPriceIsSet {
  return __unitPrice_isset;
}

- (void) unsetUnitPrice {
  [__unitPrice release_stub];
  __unitPrice = nil;
  __unitPrice_isset = NO;
}

- (NSString *) itemCount {
  return [[__itemCount retain_stub] autorelease_stub];
}

- (void) setItemCount: (NSString *) itemCount {
  [itemCount retain_stub];
  [__itemCount release_stub];
  __itemCount = itemCount;
  __itemCount_isset = YES;
}

- (BOOL) itemCountIsSet {
  return __itemCount_isset;
}

- (void) unsetItemCount {
  [__itemCount release_stub];
  __itemCount = nil;
  __itemCount_isset = NO;
}

- (NSString *) totalPrice {
  return [[__totalPrice retain_stub] autorelease_stub];
}

- (void) setTotalPrice: (NSString *) totalPrice {
  [totalPrice retain_stub];
  [__totalPrice release_stub];
  __totalPrice = totalPrice;
  __totalPrice_isset = YES;
}

- (BOOL) totalPriceIsSet {
  return __totalPrice_isset;
}

- (void) unsetTotalPrice {
  [__totalPrice release_stub];
  __totalPrice = nil;
  __totalPrice_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTransType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setItemName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUnitPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setItemCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTotalPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"InpatientItemFee"];
  if (__transType_isset) {
    if (__transType != nil) {
      [outProtocol writeFieldBeginWithName: @"transType" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __transType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__itemName_isset) {
    if (__itemName != nil) {
      [outProtocol writeFieldBeginWithName: @"itemName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __itemName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__unitPrice_isset) {
    if (__unitPrice != nil) {
      [outProtocol writeFieldBeginWithName: @"unitPrice" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __unitPrice];
      [outProtocol writeFieldEnd];
    }
  }
  if (__itemCount_isset) {
    if (__itemCount != nil) {
      [outProtocol writeFieldBeginWithName: @"itemCount" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __itemCount];
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalPrice_isset) {
    if (__totalPrice != nil) {
      [outProtocol writeFieldBeginWithName: @"totalPrice" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __totalPrice];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFInpatientItemFee("];
  [ms appendString: @"transType:"];
  [ms appendFormat: @"\"%@\"", __transType];
  [ms appendString: @",itemName:"];
  [ms appendFormat: @"\"%@\"", __itemName];
  [ms appendString: @",unitPrice:"];
  [ms appendFormat: @"\"%@\"", __unitPrice];
  [ms appendString: @",itemCount:"];
  [ms appendFormat: @"\"%@\"", __itemCount];
  [ms appendString: @",totalPrice:"];
  [ms appendFormat: @"\"%@\"", __totalPrice];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFInpatientDailyFee

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFeeDate: (NSString *) feeDate totalPrice: (NSString *) totalPrice
{
  self = [super init];
  __feeDate = [feeDate retain_stub];
  __feeDate_isset = YES;
  __totalPrice = [totalPrice retain_stub];
  __totalPrice_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"feeDate"])
  {
    __feeDate = [[decoder decodeObjectForKey: @"feeDate"] retain_stub];
    __feeDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalPrice"])
  {
    __totalPrice = [[decoder decodeObjectForKey: @"totalPrice"] retain_stub];
    __totalPrice_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__feeDate_isset)
  {
    [encoder encodeObject: __feeDate forKey: @"feeDate"];
  }
  if (__totalPrice_isset)
  {
    [encoder encodeObject: __totalPrice forKey: @"totalPrice"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __feeDate_isset ? 2654435761 : 0;
  if (__feeDate_isset)
  {
    hash = (hash * 31) ^ [__feeDate hash];
  }
  hash = (hash * 31) ^ __totalPrice_isset ? 2654435761 : 0;
  if (__totalPrice_isset)
  {
    hash = (hash * 31) ^ [__totalPrice hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFInpatientDailyFee class]]) {
    return NO;
  }
  NXTFInpatientDailyFee *other = (NXTFInpatientDailyFee *)anObject;
  if ((__feeDate_isset != other->__feeDate_isset) ||
      (__feeDate_isset && ((__feeDate || other->__feeDate) && ![__feeDate isEqual:other->__feeDate]))) {
    return NO;
  }
  if ((__totalPrice_isset != other->__totalPrice_isset) ||
      (__totalPrice_isset && ((__totalPrice || other->__totalPrice) && ![__totalPrice isEqual:other->__totalPrice]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__feeDate release_stub];
  [__totalPrice release_stub];
  [super dealloc_stub];
}

- (NSString *) feeDate {
  return [[__feeDate retain_stub] autorelease_stub];
}

- (void) setFeeDate: (NSString *) feeDate {
  [feeDate retain_stub];
  [__feeDate release_stub];
  __feeDate = feeDate;
  __feeDate_isset = YES;
}

- (BOOL) feeDateIsSet {
  return __feeDate_isset;
}

- (void) unsetFeeDate {
  [__feeDate release_stub];
  __feeDate = nil;
  __feeDate_isset = NO;
}

- (NSString *) totalPrice {
  return [[__totalPrice retain_stub] autorelease_stub];
}

- (void) setTotalPrice: (NSString *) totalPrice {
  [totalPrice retain_stub];
  [__totalPrice release_stub];
  __totalPrice = totalPrice;
  __totalPrice_isset = YES;
}

- (BOOL) totalPriceIsSet {
  return __totalPrice_isset;
}

- (void) unsetTotalPrice {
  [__totalPrice release_stub];
  __totalPrice = nil;
  __totalPrice_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFeeDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTotalPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"InpatientDailyFee"];
  if (__feeDate_isset) {
    if (__feeDate != nil) {
      [outProtocol writeFieldBeginWithName: @"feeDate" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __feeDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalPrice_isset) {
    if (__totalPrice != nil) {
      [outProtocol writeFieldBeginWithName: @"totalPrice" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __totalPrice];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFInpatientDailyFee("];
  [ms appendString: @"feeDate:"];
  [ms appendFormat: @"\"%@\"", __feeDate];
  [ms appendString: @",totalPrice:"];
  [ms appendFormat: @"\"%@\"", __totalPrice];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFInpatientDetailFee

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.typeFees = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithFeeDate: (NSString *) feeDate totalPrice: (NSString *) totalPrice typeFees: (NSMutableArray *) typeFees
{
  self = [super init];
  __feeDate = [feeDate retain_stub];
  __feeDate_isset = YES;
  __totalPrice = [totalPrice retain_stub];
  __totalPrice_isset = YES;
  __typeFees = [typeFees retain_stub];
  __typeFees_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"feeDate"])
  {
    __feeDate = [[decoder decodeObjectForKey: @"feeDate"] retain_stub];
    __feeDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalPrice"])
  {
    __totalPrice = [[decoder decodeObjectForKey: @"totalPrice"] retain_stub];
    __totalPrice_isset = YES;
  }
  if ([decoder containsValueForKey: @"typeFees"])
  {
    __typeFees = [[decoder decodeObjectForKey: @"typeFees"] retain_stub];
    __typeFees_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__feeDate_isset)
  {
    [encoder encodeObject: __feeDate forKey: @"feeDate"];
  }
  if (__totalPrice_isset)
  {
    [encoder encodeObject: __totalPrice forKey: @"totalPrice"];
  }
  if (__typeFees_isset)
  {
    [encoder encodeObject: __typeFees forKey: @"typeFees"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __feeDate_isset ? 2654435761 : 0;
  if (__feeDate_isset)
  {
    hash = (hash * 31) ^ [__feeDate hash];
  }
  hash = (hash * 31) ^ __totalPrice_isset ? 2654435761 : 0;
  if (__totalPrice_isset)
  {
    hash = (hash * 31) ^ [__totalPrice hash];
  }
  hash = (hash * 31) ^ __typeFees_isset ? 2654435761 : 0;
  if (__typeFees_isset)
  {
    hash = (hash * 31) ^ [__typeFees hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFInpatientDetailFee class]]) {
    return NO;
  }
  NXTFInpatientDetailFee *other = (NXTFInpatientDetailFee *)anObject;
  if ((__feeDate_isset != other->__feeDate_isset) ||
      (__feeDate_isset && ((__feeDate || other->__feeDate) && ![__feeDate isEqual:other->__feeDate]))) {
    return NO;
  }
  if ((__totalPrice_isset != other->__totalPrice_isset) ||
      (__totalPrice_isset && ((__totalPrice || other->__totalPrice) && ![__totalPrice isEqual:other->__totalPrice]))) {
    return NO;
  }
  if ((__typeFees_isset != other->__typeFees_isset) ||
      (__typeFees_isset && ((__typeFees || other->__typeFees) && ![__typeFees isEqual:other->__typeFees]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__feeDate release_stub];
  [__totalPrice release_stub];
  [__typeFees release_stub];
  [super dealloc_stub];
}

- (NSString *) feeDate {
  return [[__feeDate retain_stub] autorelease_stub];
}

- (void) setFeeDate: (NSString *) feeDate {
  [feeDate retain_stub];
  [__feeDate release_stub];
  __feeDate = feeDate;
  __feeDate_isset = YES;
}

- (BOOL) feeDateIsSet {
  return __feeDate_isset;
}

- (void) unsetFeeDate {
  [__feeDate release_stub];
  __feeDate = nil;
  __feeDate_isset = NO;
}

- (NSString *) totalPrice {
  return [[__totalPrice retain_stub] autorelease_stub];
}

- (void) setTotalPrice: (NSString *) totalPrice {
  [totalPrice retain_stub];
  [__totalPrice release_stub];
  __totalPrice = totalPrice;
  __totalPrice_isset = YES;
}

- (BOOL) totalPriceIsSet {
  return __totalPrice_isset;
}

- (void) unsetTotalPrice {
  [__totalPrice release_stub];
  __totalPrice = nil;
  __totalPrice_isset = NO;
}

- (NSMutableArray *) typeFees {
  return [[__typeFees retain_stub] autorelease_stub];
}

- (void) setTypeFees: (NSMutableArray *) typeFees {
  [typeFees retain_stub];
  [__typeFees release_stub];
  __typeFees = typeFees;
  __typeFees_isset = YES;
}

- (BOOL) typeFeesIsSet {
  return __typeFees_isset;
}

- (void) unsetTypeFees {
  [__typeFees release_stub];
  __typeFees = nil;
  __typeFees_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFeeDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTotalPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size25;
          [inProtocol readListBeginReturningElementType: NULL size: &_size25];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            NXTFInpatientTypeFee *_elem27 = [[NXTFInpatientTypeFee alloc] init];
            [_elem27 read: inProtocol];
            [fieldValue addObject: _elem27];
            [_elem27 release_stub];
          }
          [inProtocol readListEnd];
          [self setTypeFees: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"InpatientDetailFee"];
  if (__feeDate_isset) {
    if (__feeDate != nil) {
      [outProtocol writeFieldBeginWithName: @"feeDate" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __feeDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalPrice_isset) {
    if (__totalPrice != nil) {
      [outProtocol writeFieldBeginWithName: @"totalPrice" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __totalPrice];
      [outProtocol writeFieldEnd];
    }
  }
  if (__typeFees_isset) {
    if (__typeFees != nil) {
      [outProtocol writeFieldBeginWithName: @"typeFees" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__typeFees count]];
        int idx29;
        for (idx29 = 0; idx29 < [__typeFees count]; idx29++)
        {
          [[__typeFees objectAtIndex: idx29] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFInpatientDetailFee("];
  [ms appendString: @"feeDate:"];
  [ms appendFormat: @"\"%@\"", __feeDate];
  [ms appendString: @",totalPrice:"];
  [ms appendFormat: @"\"%@\"", __totalPrice];
  [ms appendString: @",typeFees:"];
  [ms appendFormat: @"%@", __typeFees];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFInpatientTypeFee

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.itemFees = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithFeeType: (NSString *) feeType totalPrice: (NSString *) totalPrice itemFees: (NSMutableArray *) itemFees
{
  self = [super init];
  __feeType = [feeType retain_stub];
  __feeType_isset = YES;
  __totalPrice = [totalPrice retain_stub];
  __totalPrice_isset = YES;
  __itemFees = [itemFees retain_stub];
  __itemFees_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"feeType"])
  {
    __feeType = [[decoder decodeObjectForKey: @"feeType"] retain_stub];
    __feeType_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalPrice"])
  {
    __totalPrice = [[decoder decodeObjectForKey: @"totalPrice"] retain_stub];
    __totalPrice_isset = YES;
  }
  if ([decoder containsValueForKey: @"itemFees"])
  {
    __itemFees = [[decoder decodeObjectForKey: @"itemFees"] retain_stub];
    __itemFees_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__feeType_isset)
  {
    [encoder encodeObject: __feeType forKey: @"feeType"];
  }
  if (__totalPrice_isset)
  {
    [encoder encodeObject: __totalPrice forKey: @"totalPrice"];
  }
  if (__itemFees_isset)
  {
    [encoder encodeObject: __itemFees forKey: @"itemFees"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __feeType_isset ? 2654435761 : 0;
  if (__feeType_isset)
  {
    hash = (hash * 31) ^ [__feeType hash];
  }
  hash = (hash * 31) ^ __totalPrice_isset ? 2654435761 : 0;
  if (__totalPrice_isset)
  {
    hash = (hash * 31) ^ [__totalPrice hash];
  }
  hash = (hash * 31) ^ __itemFees_isset ? 2654435761 : 0;
  if (__itemFees_isset)
  {
    hash = (hash * 31) ^ [__itemFees hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFInpatientTypeFee class]]) {
    return NO;
  }
  NXTFInpatientTypeFee *other = (NXTFInpatientTypeFee *)anObject;
  if ((__feeType_isset != other->__feeType_isset) ||
      (__feeType_isset && ((__feeType || other->__feeType) && ![__feeType isEqual:other->__feeType]))) {
    return NO;
  }
  if ((__totalPrice_isset != other->__totalPrice_isset) ||
      (__totalPrice_isset && ((__totalPrice || other->__totalPrice) && ![__totalPrice isEqual:other->__totalPrice]))) {
    return NO;
  }
  if ((__itemFees_isset != other->__itemFees_isset) ||
      (__itemFees_isset && ((__itemFees || other->__itemFees) && ![__itemFees isEqual:other->__itemFees]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__feeType release_stub];
  [__totalPrice release_stub];
  [__itemFees release_stub];
  [super dealloc_stub];
}

- (NSString *) feeType {
  return [[__feeType retain_stub] autorelease_stub];
}

- (void) setFeeType: (NSString *) feeType {
  [feeType retain_stub];
  [__feeType release_stub];
  __feeType = feeType;
  __feeType_isset = YES;
}

- (BOOL) feeTypeIsSet {
  return __feeType_isset;
}

- (void) unsetFeeType {
  [__feeType release_stub];
  __feeType = nil;
  __feeType_isset = NO;
}

- (NSString *) totalPrice {
  return [[__totalPrice retain_stub] autorelease_stub];
}

- (void) setTotalPrice: (NSString *) totalPrice {
  [totalPrice retain_stub];
  [__totalPrice release_stub];
  __totalPrice = totalPrice;
  __totalPrice_isset = YES;
}

- (BOOL) totalPriceIsSet {
  return __totalPrice_isset;
}

- (void) unsetTotalPrice {
  [__totalPrice release_stub];
  __totalPrice = nil;
  __totalPrice_isset = NO;
}

- (NSMutableArray *) itemFees {
  return [[__itemFees retain_stub] autorelease_stub];
}

- (void) setItemFees: (NSMutableArray *) itemFees {
  [itemFees retain_stub];
  [__itemFees release_stub];
  __itemFees = itemFees;
  __itemFees_isset = YES;
}

- (BOOL) itemFeesIsSet {
  return __itemFees_isset;
}

- (void) unsetItemFees {
  [__itemFees release_stub];
  __itemFees = nil;
  __itemFees_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFeeType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTotalPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size30;
          [inProtocol readListBeginReturningElementType: NULL size: &_size30];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size30];
          int _i31;
          for (_i31 = 0; _i31 < _size30; ++_i31)
          {
            NXTFInpatientItemFee *_elem32 = [[NXTFInpatientItemFee alloc] init];
            [_elem32 read: inProtocol];
            [fieldValue addObject: _elem32];
            [_elem32 release_stub];
          }
          [inProtocol readListEnd];
          [self setItemFees: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"InpatientTypeFee"];
  if (__feeType_isset) {
    if (__feeType != nil) {
      [outProtocol writeFieldBeginWithName: @"feeType" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __feeType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalPrice_isset) {
    if (__totalPrice != nil) {
      [outProtocol writeFieldBeginWithName: @"totalPrice" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __totalPrice];
      [outProtocol writeFieldEnd];
    }
  }
  if (__itemFees_isset) {
    if (__itemFees != nil) {
      [outProtocol writeFieldBeginWithName: @"itemFees" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__itemFees count]];
        int idx34;
        for (idx34 = 0; idx34 < [__itemFees count]; idx34++)
        {
          [[__itemFees objectAtIndex: idx34] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFInpatientTypeFee("];
  [ms appendString: @"feeType:"];
  [ms appendFormat: @"\"%@\"", __feeType];
  [ms appendString: @",totalPrice:"];
  [ms appendFormat: @"\"%@\"", __totalPrice];
  [ms appendString: @",itemFees:"];
  [ms appendFormat: @"%@", __itemFees];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFInpatientPrePayment

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOrderId: (NSString *) orderId orderNo: (NSString *) orderNo patientId: (NSString *) patientId hospitalId: (NSString *) hospitalId generateTime: (NSString *) generateTime fee: (NSString *) fee billStatus: (NSString *) billStatus
{
  self = [super init];
  __orderId = [orderId retain_stub];
  __orderId_isset = YES;
  __orderNo = [orderNo retain_stub];
  __orderNo_isset = YES;
  __patientId = [patientId retain_stub];
  __patientId_isset = YES;
  __hospitalId = [hospitalId retain_stub];
  __hospitalId_isset = YES;
  __generateTime = [generateTime retain_stub];
  __generateTime_isset = YES;
  __fee = [fee retain_stub];
  __fee_isset = YES;
  __billStatus = [billStatus retain_stub];
  __billStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [[decoder decodeObjectForKey: @"orderId"] retain_stub];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderNo"])
  {
    __orderNo = [[decoder decodeObjectForKey: @"orderNo"] retain_stub];
    __orderNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [[decoder decodeObjectForKey: @"patientId"] retain_stub];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospitalId"])
  {
    __hospitalId = [[decoder decodeObjectForKey: @"hospitalId"] retain_stub];
    __hospitalId_isset = YES;
  }
  if ([decoder containsValueForKey: @"generateTime"])
  {
    __generateTime = [[decoder decodeObjectForKey: @"generateTime"] retain_stub];
    __generateTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"fee"])
  {
    __fee = [[decoder decodeObjectForKey: @"fee"] retain_stub];
    __fee_isset = YES;
  }
  if ([decoder containsValueForKey: @"billStatus"])
  {
    __billStatus = [[decoder decodeObjectForKey: @"billStatus"] retain_stub];
    __billStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__orderId_isset)
  {
    [encoder encodeObject: __orderId forKey: @"orderId"];
  }
  if (__orderNo_isset)
  {
    [encoder encodeObject: __orderNo forKey: @"orderNo"];
  }
  if (__patientId_isset)
  {
    [encoder encodeObject: __patientId forKey: @"patientId"];
  }
  if (__hospitalId_isset)
  {
    [encoder encodeObject: __hospitalId forKey: @"hospitalId"];
  }
  if (__generateTime_isset)
  {
    [encoder encodeObject: __generateTime forKey: @"generateTime"];
  }
  if (__fee_isset)
  {
    [encoder encodeObject: __fee forKey: @"fee"];
  }
  if (__billStatus_isset)
  {
    [encoder encodeObject: __billStatus forKey: @"billStatus"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [__orderId hash];
  }
  hash = (hash * 31) ^ __orderNo_isset ? 2654435761 : 0;
  if (__orderNo_isset)
  {
    hash = (hash * 31) ^ [__orderNo hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [__patientId hash];
  }
  hash = (hash * 31) ^ __hospitalId_isset ? 2654435761 : 0;
  if (__hospitalId_isset)
  {
    hash = (hash * 31) ^ [__hospitalId hash];
  }
  hash = (hash * 31) ^ __generateTime_isset ? 2654435761 : 0;
  if (__generateTime_isset)
  {
    hash = (hash * 31) ^ [__generateTime hash];
  }
  hash = (hash * 31) ^ __fee_isset ? 2654435761 : 0;
  if (__fee_isset)
  {
    hash = (hash * 31) ^ [__fee hash];
  }
  hash = (hash * 31) ^ __billStatus_isset ? 2654435761 : 0;
  if (__billStatus_isset)
  {
    hash = (hash * 31) ^ [__billStatus hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFInpatientPrePayment class]]) {
    return NO;
  }
  NXTFInpatientPrePayment *other = (NXTFInpatientPrePayment *)anObject;
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && ((__orderId || other->__orderId) && ![__orderId isEqual:other->__orderId]))) {
    return NO;
  }
  if ((__orderNo_isset != other->__orderNo_isset) ||
      (__orderNo_isset && ((__orderNo || other->__orderNo) && ![__orderNo isEqual:other->__orderNo]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && ((__patientId || other->__patientId) && ![__patientId isEqual:other->__patientId]))) {
    return NO;
  }
  if ((__hospitalId_isset != other->__hospitalId_isset) ||
      (__hospitalId_isset && ((__hospitalId || other->__hospitalId) && ![__hospitalId isEqual:other->__hospitalId]))) {
    return NO;
  }
  if ((__generateTime_isset != other->__generateTime_isset) ||
      (__generateTime_isset && ((__generateTime || other->__generateTime) && ![__generateTime isEqual:other->__generateTime]))) {
    return NO;
  }
  if ((__fee_isset != other->__fee_isset) ||
      (__fee_isset && ((__fee || other->__fee) && ![__fee isEqual:other->__fee]))) {
    return NO;
  }
  if ((__billStatus_isset != other->__billStatus_isset) ||
      (__billStatus_isset && ((__billStatus || other->__billStatus) && ![__billStatus isEqual:other->__billStatus]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__orderId release_stub];
  [__orderNo release_stub];
  [__patientId release_stub];
  [__hospitalId release_stub];
  [__generateTime release_stub];
  [__fee release_stub];
  [__billStatus release_stub];
  [super dealloc_stub];
}

- (NSString *) orderId {
  return [[__orderId retain_stub] autorelease_stub];
}

- (void) setOrderId: (NSString *) orderId {
  [orderId retain_stub];
  [__orderId release_stub];
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  [__orderId release_stub];
  __orderId = nil;
  __orderId_isset = NO;
}

- (NSString *) orderNo {
  return [[__orderNo retain_stub] autorelease_stub];
}

- (void) setOrderNo: (NSString *) orderNo {
  [orderNo retain_stub];
  [__orderNo release_stub];
  __orderNo = orderNo;
  __orderNo_isset = YES;
}

- (BOOL) orderNoIsSet {
  return __orderNo_isset;
}

- (void) unsetOrderNo {
  [__orderNo release_stub];
  __orderNo = nil;
  __orderNo_isset = NO;
}

- (NSString *) patientId {
  return [[__patientId retain_stub] autorelease_stub];
}

- (void) setPatientId: (NSString *) patientId {
  [patientId retain_stub];
  [__patientId release_stub];
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  [__patientId release_stub];
  __patientId = nil;
  __patientId_isset = NO;
}

- (NSString *) hospitalId {
  return [[__hospitalId retain_stub] autorelease_stub];
}

- (void) setHospitalId: (NSString *) hospitalId {
  [hospitalId retain_stub];
  [__hospitalId release_stub];
  __hospitalId = hospitalId;
  __hospitalId_isset = YES;
}

- (BOOL) hospitalIdIsSet {
  return __hospitalId_isset;
}

- (void) unsetHospitalId {
  [__hospitalId release_stub];
  __hospitalId = nil;
  __hospitalId_isset = NO;
}

- (NSString *) generateTime {
  return [[__generateTime retain_stub] autorelease_stub];
}

- (void) setGenerateTime: (NSString *) generateTime {
  [generateTime retain_stub];
  [__generateTime release_stub];
  __generateTime = generateTime;
  __generateTime_isset = YES;
}

- (BOOL) generateTimeIsSet {
  return __generateTime_isset;
}

- (void) unsetGenerateTime {
  [__generateTime release_stub];
  __generateTime = nil;
  __generateTime_isset = NO;
}

- (NSString *) fee {
  return [[__fee retain_stub] autorelease_stub];
}

- (void) setFee: (NSString *) fee {
  [fee retain_stub];
  [__fee release_stub];
  __fee = fee;
  __fee_isset = YES;
}

- (BOOL) feeIsSet {
  return __fee_isset;
}

- (void) unsetFee {
  [__fee release_stub];
  __fee = nil;
  __fee_isset = NO;
}

- (NSString *) billStatus {
  return [[__billStatus retain_stub] autorelease_stub];
}

- (void) setBillStatus: (NSString *) billStatus {
  [billStatus retain_stub];
  [__billStatus release_stub];
  __billStatus = billStatus;
  __billStatus_isset = YES;
}

- (BOOL) billStatusIsSet {
  return __billStatus_isset;
}

- (void) unsetBillStatus {
  [__billStatus release_stub];
  __billStatus = nil;
  __billStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospitalId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGenerateTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBillStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"InpatientPrePayment"];
  if (__orderId_isset) {
    if (__orderId != nil) {
      [outProtocol writeFieldBeginWithName: @"orderId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __orderId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderNo_isset) {
    if (__orderNo != nil) {
      [outProtocol writeFieldBeginWithName: @"orderNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __orderNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    if (__patientId != nil) {
      [outProtocol writeFieldBeginWithName: @"patientId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __patientId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospitalId_isset) {
    if (__hospitalId != nil) {
      [outProtocol writeFieldBeginWithName: @"hospitalId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __hospitalId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__generateTime_isset) {
    if (__generateTime != nil) {
      [outProtocol writeFieldBeginWithName: @"generateTime" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __generateTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fee_isset) {
    if (__fee != nil) {
      [outProtocol writeFieldBeginWithName: @"fee" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __fee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__billStatus_isset) {
    if (__billStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"billStatus" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __billStatus];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFInpatientPrePayment("];
  [ms appendString: @"orderId:"];
  [ms appendFormat: @"\"%@\"", __orderId];
  [ms appendString: @",orderNo:"];
  [ms appendFormat: @"\"%@\"", __orderNo];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"\"%@\"", __patientId];
  [ms appendString: @",hospitalId:"];
  [ms appendFormat: @"\"%@\"", __hospitalId];
  [ms appendString: @",generateTime:"];
  [ms appendFormat: @"\"%@\"", __generateTime];
  [ms appendString: @",fee:"];
  [ms appendFormat: @"\"%@\"", __fee];
  [ms appendString: @",billStatus:"];
  [ms appendFormat: @"\"%@\"", __billStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPrePaymentInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOrderNo: (NSString *) orderNo tradeSerialNo: (NSString *) tradeSerialNo tradeDate: (NSString *) tradeDate amount: (NSString *) amount payWay: (NSString *) payWay billStatus: (NSString *) billStatus genetateTime: (NSString *) genetateTime
{
  self = [super init];
  __orderNo = [orderNo retain_stub];
  __orderNo_isset = YES;
  __tradeSerialNo = [tradeSerialNo retain_stub];
  __tradeSerialNo_isset = YES;
  __tradeDate = [tradeDate retain_stub];
  __tradeDate_isset = YES;
  __amount = [amount retain_stub];
  __amount_isset = YES;
  __payWay = [payWay retain_stub];
  __payWay_isset = YES;
  __billStatus = [billStatus retain_stub];
  __billStatus_isset = YES;
  __genetateTime = [genetateTime retain_stub];
  __genetateTime_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"orderNo"])
  {
    __orderNo = [[decoder decodeObjectForKey: @"orderNo"] retain_stub];
    __orderNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"tradeSerialNo"])
  {
    __tradeSerialNo = [[decoder decodeObjectForKey: @"tradeSerialNo"] retain_stub];
    __tradeSerialNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"tradeDate"])
  {
    __tradeDate = [[decoder decodeObjectForKey: @"tradeDate"] retain_stub];
    __tradeDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"amount"])
  {
    __amount = [[decoder decodeObjectForKey: @"amount"] retain_stub];
    __amount_isset = YES;
  }
  if ([decoder containsValueForKey: @"payWay"])
  {
    __payWay = [[decoder decodeObjectForKey: @"payWay"] retain_stub];
    __payWay_isset = YES;
  }
  if ([decoder containsValueForKey: @"billStatus"])
  {
    __billStatus = [[decoder decodeObjectForKey: @"billStatus"] retain_stub];
    __billStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"genetateTime"])
  {
    __genetateTime = [[decoder decodeObjectForKey: @"genetateTime"] retain_stub];
    __genetateTime_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__orderNo_isset)
  {
    [encoder encodeObject: __orderNo forKey: @"orderNo"];
  }
  if (__tradeSerialNo_isset)
  {
    [encoder encodeObject: __tradeSerialNo forKey: @"tradeSerialNo"];
  }
  if (__tradeDate_isset)
  {
    [encoder encodeObject: __tradeDate forKey: @"tradeDate"];
  }
  if (__amount_isset)
  {
    [encoder encodeObject: __amount forKey: @"amount"];
  }
  if (__payWay_isset)
  {
    [encoder encodeObject: __payWay forKey: @"payWay"];
  }
  if (__billStatus_isset)
  {
    [encoder encodeObject: __billStatus forKey: @"billStatus"];
  }
  if (__genetateTime_isset)
  {
    [encoder encodeObject: __genetateTime forKey: @"genetateTime"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __orderNo_isset ? 2654435761 : 0;
  if (__orderNo_isset)
  {
    hash = (hash * 31) ^ [__orderNo hash];
  }
  hash = (hash * 31) ^ __tradeSerialNo_isset ? 2654435761 : 0;
  if (__tradeSerialNo_isset)
  {
    hash = (hash * 31) ^ [__tradeSerialNo hash];
  }
  hash = (hash * 31) ^ __tradeDate_isset ? 2654435761 : 0;
  if (__tradeDate_isset)
  {
    hash = (hash * 31) ^ [__tradeDate hash];
  }
  hash = (hash * 31) ^ __amount_isset ? 2654435761 : 0;
  if (__amount_isset)
  {
    hash = (hash * 31) ^ [__amount hash];
  }
  hash = (hash * 31) ^ __payWay_isset ? 2654435761 : 0;
  if (__payWay_isset)
  {
    hash = (hash * 31) ^ [__payWay hash];
  }
  hash = (hash * 31) ^ __billStatus_isset ? 2654435761 : 0;
  if (__billStatus_isset)
  {
    hash = (hash * 31) ^ [__billStatus hash];
  }
  hash = (hash * 31) ^ __genetateTime_isset ? 2654435761 : 0;
  if (__genetateTime_isset)
  {
    hash = (hash * 31) ^ [__genetateTime hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPrePaymentInfo class]]) {
    return NO;
  }
  NXTFPrePaymentInfo *other = (NXTFPrePaymentInfo *)anObject;
  if ((__orderNo_isset != other->__orderNo_isset) ||
      (__orderNo_isset && ((__orderNo || other->__orderNo) && ![__orderNo isEqual:other->__orderNo]))) {
    return NO;
  }
  if ((__tradeSerialNo_isset != other->__tradeSerialNo_isset) ||
      (__tradeSerialNo_isset && ((__tradeSerialNo || other->__tradeSerialNo) && ![__tradeSerialNo isEqual:other->__tradeSerialNo]))) {
    return NO;
  }
  if ((__tradeDate_isset != other->__tradeDate_isset) ||
      (__tradeDate_isset && ((__tradeDate || other->__tradeDate) && ![__tradeDate isEqual:other->__tradeDate]))) {
    return NO;
  }
  if ((__amount_isset != other->__amount_isset) ||
      (__amount_isset && ((__amount || other->__amount) && ![__amount isEqual:other->__amount]))) {
    return NO;
  }
  if ((__payWay_isset != other->__payWay_isset) ||
      (__payWay_isset && ((__payWay || other->__payWay) && ![__payWay isEqual:other->__payWay]))) {
    return NO;
  }
  if ((__billStatus_isset != other->__billStatus_isset) ||
      (__billStatus_isset && ((__billStatus || other->__billStatus) && ![__billStatus isEqual:other->__billStatus]))) {
    return NO;
  }
  if ((__genetateTime_isset != other->__genetateTime_isset) ||
      (__genetateTime_isset && ((__genetateTime || other->__genetateTime) && ![__genetateTime isEqual:other->__genetateTime]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__orderNo release_stub];
  [__tradeSerialNo release_stub];
  [__tradeDate release_stub];
  [__amount release_stub];
  [__payWay release_stub];
  [__billStatus release_stub];
  [__genetateTime release_stub];
  [super dealloc_stub];
}

- (NSString *) orderNo {
  return [[__orderNo retain_stub] autorelease_stub];
}

- (void) setOrderNo: (NSString *) orderNo {
  [orderNo retain_stub];
  [__orderNo release_stub];
  __orderNo = orderNo;
  __orderNo_isset = YES;
}

- (BOOL) orderNoIsSet {
  return __orderNo_isset;
}

- (void) unsetOrderNo {
  [__orderNo release_stub];
  __orderNo = nil;
  __orderNo_isset = NO;
}

- (NSString *) tradeSerialNo {
  return [[__tradeSerialNo retain_stub] autorelease_stub];
}

- (void) setTradeSerialNo: (NSString *) tradeSerialNo {
  [tradeSerialNo retain_stub];
  [__tradeSerialNo release_stub];
  __tradeSerialNo = tradeSerialNo;
  __tradeSerialNo_isset = YES;
}

- (BOOL) tradeSerialNoIsSet {
  return __tradeSerialNo_isset;
}

- (void) unsetTradeSerialNo {
  [__tradeSerialNo release_stub];
  __tradeSerialNo = nil;
  __tradeSerialNo_isset = NO;
}

- (NSString *) tradeDate {
  return [[__tradeDate retain_stub] autorelease_stub];
}

- (void) setTradeDate: (NSString *) tradeDate {
  [tradeDate retain_stub];
  [__tradeDate release_stub];
  __tradeDate = tradeDate;
  __tradeDate_isset = YES;
}

- (BOOL) tradeDateIsSet {
  return __tradeDate_isset;
}

- (void) unsetTradeDate {
  [__tradeDate release_stub];
  __tradeDate = nil;
  __tradeDate_isset = NO;
}

- (NSString *) amount {
  return [[__amount retain_stub] autorelease_stub];
}

- (void) setAmount: (NSString *) amount {
  [amount retain_stub];
  [__amount release_stub];
  __amount = amount;
  __amount_isset = YES;
}

- (BOOL) amountIsSet {
  return __amount_isset;
}

- (void) unsetAmount {
  [__amount release_stub];
  __amount = nil;
  __amount_isset = NO;
}

- (NSString *) payWay {
  return [[__payWay retain_stub] autorelease_stub];
}

- (void) setPayWay: (NSString *) payWay {
  [payWay retain_stub];
  [__payWay release_stub];
  __payWay = payWay;
  __payWay_isset = YES;
}

- (BOOL) payWayIsSet {
  return __payWay_isset;
}

- (void) unsetPayWay {
  [__payWay release_stub];
  __payWay = nil;
  __payWay_isset = NO;
}

- (NSString *) billStatus {
  return [[__billStatus retain_stub] autorelease_stub];
}

- (void) setBillStatus: (NSString *) billStatus {
  [billStatus retain_stub];
  [__billStatus release_stub];
  __billStatus = billStatus;
  __billStatus_isset = YES;
}

- (BOOL) billStatusIsSet {
  return __billStatus_isset;
}

- (void) unsetBillStatus {
  [__billStatus release_stub];
  __billStatus = nil;
  __billStatus_isset = NO;
}

- (NSString *) genetateTime {
  return [[__genetateTime retain_stub] autorelease_stub];
}

- (void) setGenetateTime: (NSString *) genetateTime {
  [genetateTime retain_stub];
  [__genetateTime release_stub];
  __genetateTime = genetateTime;
  __genetateTime_isset = YES;
}

- (BOOL) genetateTimeIsSet {
  return __genetateTime_isset;
}

- (void) unsetGenetateTime {
  [__genetateTime release_stub];
  __genetateTime = nil;
  __genetateTime_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTradeSerialNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTradeDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAmount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPayWay: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBillStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGenetateTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PrePaymentInfo"];
  if (__orderNo_isset) {
    if (__orderNo != nil) {
      [outProtocol writeFieldBeginWithName: @"orderNo" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __orderNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tradeSerialNo_isset) {
    if (__tradeSerialNo != nil) {
      [outProtocol writeFieldBeginWithName: @"tradeSerialNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __tradeSerialNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tradeDate_isset) {
    if (__tradeDate != nil) {
      [outProtocol writeFieldBeginWithName: @"tradeDate" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __tradeDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__amount_isset) {
    if (__amount != nil) {
      [outProtocol writeFieldBeginWithName: @"amount" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __amount];
      [outProtocol writeFieldEnd];
    }
  }
  if (__payWay_isset) {
    if (__payWay != nil) {
      [outProtocol writeFieldBeginWithName: @"payWay" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __payWay];
      [outProtocol writeFieldEnd];
    }
  }
  if (__billStatus_isset) {
    if (__billStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"billStatus" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __billStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__genetateTime_isset) {
    if (__genetateTime != nil) {
      [outProtocol writeFieldBeginWithName: @"genetateTime" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __genetateTime];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPrePaymentInfo("];
  [ms appendString: @"orderNo:"];
  [ms appendFormat: @"\"%@\"", __orderNo];
  [ms appendString: @",tradeSerialNo:"];
  [ms appendFormat: @"\"%@\"", __tradeSerialNo];
  [ms appendString: @",tradeDate:"];
  [ms appendFormat: @"\"%@\"", __tradeDate];
  [ms appendString: @",amount:"];
  [ms appendFormat: @"\"%@\"", __amount];
  [ms appendString: @",payWay:"];
  [ms appendFormat: @"\"%@\"", __payWay];
  [ms appendString: @",billStatus:"];
  [ms appendFormat: @"\"%@\"", __billStatus];
  [ms appendString: @",genetateTime:"];
  [ms appendFormat: @"\"%@\"", __genetateTime];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFHospDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name hospId: (NSString *) hospId imgUrl: (NSString *) imgUrl hospLogo: (NSString *) hospLogo remark: (NSString *) remark level: (NSString *) level serviceCode: (NSString *) serviceCode opened: (NSString *) opened hospType: (NSString *) hospType patientCount: (NSString *) patientCount isInsurAssigned: (NSString *) isInsurAssigned hospLevel: (int32_t) hospLevel dailyVisitCount: (NSString *) dailyVisitCount openness: (int32_t) openness evaluation: (NSString *) evaluation diamonds: (NSString *) diamonds featureDepts: (NSMutableArray *) featureDepts
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __hospId = [hospId retain_stub];
  __hospId_isset = YES;
  __imgUrl = [imgUrl retain_stub];
  __imgUrl_isset = YES;
  __hospLogo = [hospLogo retain_stub];
  __hospLogo_isset = YES;
  __remark = [remark retain_stub];
  __remark_isset = YES;
  __level = [level retain_stub];
  __level_isset = YES;
  __serviceCode = [serviceCode retain_stub];
  __serviceCode_isset = YES;
  __opened = [opened retain_stub];
  __opened_isset = YES;
  __hospType = [hospType retain_stub];
  __hospType_isset = YES;
  __patientCount = [patientCount retain_stub];
  __patientCount_isset = YES;
  __isInsurAssigned = [isInsurAssigned retain_stub];
  __isInsurAssigned_isset = YES;
  __hospLevel = hospLevel;
  __hospLevel_isset = YES;
  __dailyVisitCount = [dailyVisitCount retain_stub];
  __dailyVisitCount_isset = YES;
  __openness = openness;
  __openness_isset = YES;
  __evaluation = [evaluation retain_stub];
  __evaluation_isset = YES;
  __diamonds = [diamonds retain_stub];
  __diamonds_isset = YES;
  __featureDepts = [featureDepts retain_stub];
  __featureDepts_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [[decoder decodeObjectForKey: @"hospId"] retain_stub];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"imgUrl"])
  {
    __imgUrl = [[decoder decodeObjectForKey: @"imgUrl"] retain_stub];
    __imgUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospLogo"])
  {
    __hospLogo = [[decoder decodeObjectForKey: @"hospLogo"] retain_stub];
    __hospLogo_isset = YES;
  }
  if ([decoder containsValueForKey: @"remark"])
  {
    __remark = [[decoder decodeObjectForKey: @"remark"] retain_stub];
    __remark_isset = YES;
  }
  if ([decoder containsValueForKey: @"level"])
  {
    __level = [[decoder decodeObjectForKey: @"level"] retain_stub];
    __level_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceCode"])
  {
    __serviceCode = [[decoder decodeObjectForKey: @"serviceCode"] retain_stub];
    __serviceCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"opened"])
  {
    __opened = [[decoder decodeObjectForKey: @"opened"] retain_stub];
    __opened_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospType"])
  {
    __hospType = [[decoder decodeObjectForKey: @"hospType"] retain_stub];
    __hospType_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientCount"])
  {
    __patientCount = [[decoder decodeObjectForKey: @"patientCount"] retain_stub];
    __patientCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"isInsurAssigned"])
  {
    __isInsurAssigned = [[decoder decodeObjectForKey: @"isInsurAssigned"] retain_stub];
    __isInsurAssigned_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospLevel"])
  {
    __hospLevel = [decoder decodeInt32ForKey: @"hospLevel"];
    __hospLevel_isset = YES;
  }
  if ([decoder containsValueForKey: @"dailyVisitCount"])
  {
    __dailyVisitCount = [[decoder decodeObjectForKey: @"dailyVisitCount"] retain_stub];
    __dailyVisitCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"openness"])
  {
    __openness = [decoder decodeInt32ForKey: @"openness"];
    __openness_isset = YES;
  }
  if ([decoder containsValueForKey: @"evaluation"])
  {
    __evaluation = [[decoder decodeObjectForKey: @"evaluation"] retain_stub];
    __evaluation_isset = YES;
  }
  if ([decoder containsValueForKey: @"diamonds"])
  {
    __diamonds = [[decoder decodeObjectForKey: @"diamonds"] retain_stub];
    __diamonds_isset = YES;
  }
  if ([decoder containsValueForKey: @"featureDepts"])
  {
    __featureDepts = [[decoder decodeObjectForKey: @"featureDepts"] retain_stub];
    __featureDepts_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__hospId_isset)
  {
    [encoder encodeObject: __hospId forKey: @"hospId"];
  }
  if (__imgUrl_isset)
  {
    [encoder encodeObject: __imgUrl forKey: @"imgUrl"];
  }
  if (__hospLogo_isset)
  {
    [encoder encodeObject: __hospLogo forKey: @"hospLogo"];
  }
  if (__remark_isset)
  {
    [encoder encodeObject: __remark forKey: @"remark"];
  }
  if (__level_isset)
  {
    [encoder encodeObject: __level forKey: @"level"];
  }
  if (__serviceCode_isset)
  {
    [encoder encodeObject: __serviceCode forKey: @"serviceCode"];
  }
  if (__opened_isset)
  {
    [encoder encodeObject: __opened forKey: @"opened"];
  }
  if (__hospType_isset)
  {
    [encoder encodeObject: __hospType forKey: @"hospType"];
  }
  if (__patientCount_isset)
  {
    [encoder encodeObject: __patientCount forKey: @"patientCount"];
  }
  if (__isInsurAssigned_isset)
  {
    [encoder encodeObject: __isInsurAssigned forKey: @"isInsurAssigned"];
  }
  if (__hospLevel_isset)
  {
    [encoder encodeInt32: __hospLevel forKey: @"hospLevel"];
  }
  if (__dailyVisitCount_isset)
  {
    [encoder encodeObject: __dailyVisitCount forKey: @"dailyVisitCount"];
  }
  if (__openness_isset)
  {
    [encoder encodeInt32: __openness forKey: @"openness"];
  }
  if (__evaluation_isset)
  {
    [encoder encodeObject: __evaluation forKey: @"evaluation"];
  }
  if (__diamonds_isset)
  {
    [encoder encodeObject: __diamonds forKey: @"diamonds"];
  }
  if (__featureDepts_isset)
  {
    [encoder encodeObject: __featureDepts forKey: @"featureDepts"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [__hospId hash];
  }
  hash = (hash * 31) ^ __imgUrl_isset ? 2654435761 : 0;
  if (__imgUrl_isset)
  {
    hash = (hash * 31) ^ [__imgUrl hash];
  }
  hash = (hash * 31) ^ __hospLogo_isset ? 2654435761 : 0;
  if (__hospLogo_isset)
  {
    hash = (hash * 31) ^ [__hospLogo hash];
  }
  hash = (hash * 31) ^ __remark_isset ? 2654435761 : 0;
  if (__remark_isset)
  {
    hash = (hash * 31) ^ [__remark hash];
  }
  hash = (hash * 31) ^ __level_isset ? 2654435761 : 0;
  if (__level_isset)
  {
    hash = (hash * 31) ^ [__level hash];
  }
  hash = (hash * 31) ^ __serviceCode_isset ? 2654435761 : 0;
  if (__serviceCode_isset)
  {
    hash = (hash * 31) ^ [__serviceCode hash];
  }
  hash = (hash * 31) ^ __opened_isset ? 2654435761 : 0;
  if (__opened_isset)
  {
    hash = (hash * 31) ^ [__opened hash];
  }
  hash = (hash * 31) ^ __hospType_isset ? 2654435761 : 0;
  if (__hospType_isset)
  {
    hash = (hash * 31) ^ [__hospType hash];
  }
  hash = (hash * 31) ^ __patientCount_isset ? 2654435761 : 0;
  if (__patientCount_isset)
  {
    hash = (hash * 31) ^ [__patientCount hash];
  }
  hash = (hash * 31) ^ __isInsurAssigned_isset ? 2654435761 : 0;
  if (__isInsurAssigned_isset)
  {
    hash = (hash * 31) ^ [__isInsurAssigned hash];
  }
  hash = (hash * 31) ^ __hospLevel_isset ? 2654435761 : 0;
  if (__hospLevel_isset)
  {
    hash = (hash * 31) ^ [@(__hospLevel) hash];
  }
  hash = (hash * 31) ^ __dailyVisitCount_isset ? 2654435761 : 0;
  if (__dailyVisitCount_isset)
  {
    hash = (hash * 31) ^ [__dailyVisitCount hash];
  }
  hash = (hash * 31) ^ __openness_isset ? 2654435761 : 0;
  if (__openness_isset)
  {
    hash = (hash * 31) ^ [@(__openness) hash];
  }
  hash = (hash * 31) ^ __evaluation_isset ? 2654435761 : 0;
  if (__evaluation_isset)
  {
    hash = (hash * 31) ^ [__evaluation hash];
  }
  hash = (hash * 31) ^ __diamonds_isset ? 2654435761 : 0;
  if (__diamonds_isset)
  {
    hash = (hash * 31) ^ [__diamonds hash];
  }
  hash = (hash * 31) ^ __featureDepts_isset ? 2654435761 : 0;
  if (__featureDepts_isset)
  {
    hash = (hash * 31) ^ [__featureDepts hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFHospDto class]]) {
    return NO;
  }
  NXTFHospDto *other = (NXTFHospDto *)anObject;
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && ((__hospId || other->__hospId) && ![__hospId isEqual:other->__hospId]))) {
    return NO;
  }
  if ((__imgUrl_isset != other->__imgUrl_isset) ||
      (__imgUrl_isset && ((__imgUrl || other->__imgUrl) && ![__imgUrl isEqual:other->__imgUrl]))) {
    return NO;
  }
  if ((__hospLogo_isset != other->__hospLogo_isset) ||
      (__hospLogo_isset && ((__hospLogo || other->__hospLogo) && ![__hospLogo isEqual:other->__hospLogo]))) {
    return NO;
  }
  if ((__remark_isset != other->__remark_isset) ||
      (__remark_isset && ((__remark || other->__remark) && ![__remark isEqual:other->__remark]))) {
    return NO;
  }
  if ((__level_isset != other->__level_isset) ||
      (__level_isset && ((__level || other->__level) && ![__level isEqual:other->__level]))) {
    return NO;
  }
  if ((__serviceCode_isset != other->__serviceCode_isset) ||
      (__serviceCode_isset && ((__serviceCode || other->__serviceCode) && ![__serviceCode isEqual:other->__serviceCode]))) {
    return NO;
  }
  if ((__opened_isset != other->__opened_isset) ||
      (__opened_isset && ((__opened || other->__opened) && ![__opened isEqual:other->__opened]))) {
    return NO;
  }
  if ((__hospType_isset != other->__hospType_isset) ||
      (__hospType_isset && ((__hospType || other->__hospType) && ![__hospType isEqual:other->__hospType]))) {
    return NO;
  }
  if ((__patientCount_isset != other->__patientCount_isset) ||
      (__patientCount_isset && ((__patientCount || other->__patientCount) && ![__patientCount isEqual:other->__patientCount]))) {
    return NO;
  }
  if ((__isInsurAssigned_isset != other->__isInsurAssigned_isset) ||
      (__isInsurAssigned_isset && ((__isInsurAssigned || other->__isInsurAssigned) && ![__isInsurAssigned isEqual:other->__isInsurAssigned]))) {
    return NO;
  }
  if ((__hospLevel_isset != other->__hospLevel_isset) ||
      (__hospLevel_isset && (__hospLevel != other->__hospLevel))) {
    return NO;
  }
  if ((__dailyVisitCount_isset != other->__dailyVisitCount_isset) ||
      (__dailyVisitCount_isset && ((__dailyVisitCount || other->__dailyVisitCount) && ![__dailyVisitCount isEqual:other->__dailyVisitCount]))) {
    return NO;
  }
  if ((__openness_isset != other->__openness_isset) ||
      (__openness_isset && (__openness != other->__openness))) {
    return NO;
  }
  if ((__evaluation_isset != other->__evaluation_isset) ||
      (__evaluation_isset && ((__evaluation || other->__evaluation) && ![__evaluation isEqual:other->__evaluation]))) {
    return NO;
  }
  if ((__diamonds_isset != other->__diamonds_isset) ||
      (__diamonds_isset && ((__diamonds || other->__diamonds) && ![__diamonds isEqual:other->__diamonds]))) {
    return NO;
  }
  if ((__featureDepts_isset != other->__featureDepts_isset) ||
      (__featureDepts_isset && ((__featureDepts || other->__featureDepts) && ![__featureDepts isEqual:other->__featureDepts]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [__hospId release_stub];
  [__imgUrl release_stub];
  [__hospLogo release_stub];
  [__remark release_stub];
  [__level release_stub];
  [__serviceCode release_stub];
  [__opened release_stub];
  [__hospType release_stub];
  [__patientCount release_stub];
  [__isInsurAssigned release_stub];
  [__dailyVisitCount release_stub];
  [__evaluation release_stub];
  [__diamonds release_stub];
  [__featureDepts release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) hospId {
  return [[__hospId retain_stub] autorelease_stub];
}

- (void) setHospId: (NSString *) hospId {
  [hospId retain_stub];
  [__hospId release_stub];
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  [__hospId release_stub];
  __hospId = nil;
  __hospId_isset = NO;
}

- (NSString *) imgUrl {
  return [[__imgUrl retain_stub] autorelease_stub];
}

- (void) setImgUrl: (NSString *) imgUrl {
  [imgUrl retain_stub];
  [__imgUrl release_stub];
  __imgUrl = imgUrl;
  __imgUrl_isset = YES;
}

- (BOOL) imgUrlIsSet {
  return __imgUrl_isset;
}

- (void) unsetImgUrl {
  [__imgUrl release_stub];
  __imgUrl = nil;
  __imgUrl_isset = NO;
}

- (NSString *) hospLogo {
  return [[__hospLogo retain_stub] autorelease_stub];
}

- (void) setHospLogo: (NSString *) hospLogo {
  [hospLogo retain_stub];
  [__hospLogo release_stub];
  __hospLogo = hospLogo;
  __hospLogo_isset = YES;
}

- (BOOL) hospLogoIsSet {
  return __hospLogo_isset;
}

- (void) unsetHospLogo {
  [__hospLogo release_stub];
  __hospLogo = nil;
  __hospLogo_isset = NO;
}

- (NSString *) remark {
  return [[__remark retain_stub] autorelease_stub];
}

- (void) setRemark: (NSString *) remark {
  [remark retain_stub];
  [__remark release_stub];
  __remark = remark;
  __remark_isset = YES;
}

- (BOOL) remarkIsSet {
  return __remark_isset;
}

- (void) unsetRemark {
  [__remark release_stub];
  __remark = nil;
  __remark_isset = NO;
}

- (NSString *) level {
  return [[__level retain_stub] autorelease_stub];
}

- (void) setLevel: (NSString *) level {
  [level retain_stub];
  [__level release_stub];
  __level = level;
  __level_isset = YES;
}

- (BOOL) levelIsSet {
  return __level_isset;
}

- (void) unsetLevel {
  [__level release_stub];
  __level = nil;
  __level_isset = NO;
}

- (NSString *) serviceCode {
  return [[__serviceCode retain_stub] autorelease_stub];
}

- (void) setServiceCode: (NSString *) serviceCode {
  [serviceCode retain_stub];
  [__serviceCode release_stub];
  __serviceCode = serviceCode;
  __serviceCode_isset = YES;
}

- (BOOL) serviceCodeIsSet {
  return __serviceCode_isset;
}

- (void) unsetServiceCode {
  [__serviceCode release_stub];
  __serviceCode = nil;
  __serviceCode_isset = NO;
}

- (NSString *) opened {
  return [[__opened retain_stub] autorelease_stub];
}

- (void) setOpened: (NSString *) opened {
  [opened retain_stub];
  [__opened release_stub];
  __opened = opened;
  __opened_isset = YES;
}

- (BOOL) openedIsSet {
  return __opened_isset;
}

- (void) unsetOpened {
  [__opened release_stub];
  __opened = nil;
  __opened_isset = NO;
}

- (NSString *) hospType {
  return [[__hospType retain_stub] autorelease_stub];
}

- (void) setHospType: (NSString *) hospType {
  [hospType retain_stub];
  [__hospType release_stub];
  __hospType = hospType;
  __hospType_isset = YES;
}

- (BOOL) hospTypeIsSet {
  return __hospType_isset;
}

- (void) unsetHospType {
  [__hospType release_stub];
  __hospType = nil;
  __hospType_isset = NO;
}

- (NSString *) patientCount {
  return [[__patientCount retain_stub] autorelease_stub];
}

- (void) setPatientCount: (NSString *) patientCount {
  [patientCount retain_stub];
  [__patientCount release_stub];
  __patientCount = patientCount;
  __patientCount_isset = YES;
}

- (BOOL) patientCountIsSet {
  return __patientCount_isset;
}

- (void) unsetPatientCount {
  [__patientCount release_stub];
  __patientCount = nil;
  __patientCount_isset = NO;
}

- (NSString *) isInsurAssigned {
  return [[__isInsurAssigned retain_stub] autorelease_stub];
}

- (void) setIsInsurAssigned: (NSString *) isInsurAssigned {
  [isInsurAssigned retain_stub];
  [__isInsurAssigned release_stub];
  __isInsurAssigned = isInsurAssigned;
  __isInsurAssigned_isset = YES;
}

- (BOOL) isInsurAssignedIsSet {
  return __isInsurAssigned_isset;
}

- (void) unsetIsInsurAssigned {
  [__isInsurAssigned release_stub];
  __isInsurAssigned = nil;
  __isInsurAssigned_isset = NO;
}

- (int32_t) hospLevel {
  return __hospLevel;
}

- (void) setHospLevel: (int32_t) hospLevel {
  __hospLevel = hospLevel;
  __hospLevel_isset = YES;
}

- (BOOL) hospLevelIsSet {
  return __hospLevel_isset;
}

- (void) unsetHospLevel {
  __hospLevel_isset = NO;
}

- (NSString *) dailyVisitCount {
  return [[__dailyVisitCount retain_stub] autorelease_stub];
}

- (void) setDailyVisitCount: (NSString *) dailyVisitCount {
  [dailyVisitCount retain_stub];
  [__dailyVisitCount release_stub];
  __dailyVisitCount = dailyVisitCount;
  __dailyVisitCount_isset = YES;
}

- (BOOL) dailyVisitCountIsSet {
  return __dailyVisitCount_isset;
}

- (void) unsetDailyVisitCount {
  [__dailyVisitCount release_stub];
  __dailyVisitCount = nil;
  __dailyVisitCount_isset = NO;
}

- (int32_t) openness {
  return __openness;
}

- (void) setOpenness: (int32_t) openness {
  __openness = openness;
  __openness_isset = YES;
}

- (BOOL) opennessIsSet {
  return __openness_isset;
}

- (void) unsetOpenness {
  __openness_isset = NO;
}

- (NSString *) evaluation {
  return [[__evaluation retain_stub] autorelease_stub];
}

- (void) setEvaluation: (NSString *) evaluation {
  [evaluation retain_stub];
  [__evaluation release_stub];
  __evaluation = evaluation;
  __evaluation_isset = YES;
}

- (BOOL) evaluationIsSet {
  return __evaluation_isset;
}

- (void) unsetEvaluation {
  [__evaluation release_stub];
  __evaluation = nil;
  __evaluation_isset = NO;
}

- (NSString *) diamonds {
  return [[__diamonds retain_stub] autorelease_stub];
}

- (void) setDiamonds: (NSString *) diamonds {
  [diamonds retain_stub];
  [__diamonds release_stub];
  __diamonds = diamonds;
  __diamonds_isset = YES;
}

- (BOOL) diamondsIsSet {
  return __diamonds_isset;
}

- (void) unsetDiamonds {
  [__diamonds release_stub];
  __diamonds = nil;
  __diamonds_isset = NO;
}

- (NSMutableArray *) featureDepts {
  return [[__featureDepts retain_stub] autorelease_stub];
}

- (void) setFeatureDepts: (NSMutableArray *) featureDepts {
  [featureDepts retain_stub];
  [__featureDepts release_stub];
  __featureDepts = featureDepts;
  __featureDepts_isset = YES;
}

- (BOOL) featureDeptsIsSet {
  return __featureDepts_isset;
}

- (void) unsetFeatureDepts {
  [__featureDepts release_stub];
  __featureDepts = nil;
  __featureDepts_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImgUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospLogo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemark: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLevel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOpened: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsInsurAssigned: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospLevel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDailyVisitCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOpenness: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEvaluation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDiamonds: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_LIST) {
          int _size35;
          [inProtocol readListBeginReturningElementType: NULL size: &_size35];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size35];
          int _i36;
          for (_i36 = 0; _i36 < _size35; ++_i36)
          {
            NXTFFeatureDeptDto *_elem37 = [[NXTFFeatureDeptDto alloc] init];
            [_elem37 read: inProtocol];
            [fieldValue addObject: _elem37];
            [_elem37 release_stub];
          }
          [inProtocol readListEnd];
          [self setFeatureDepts: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HospDto"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    if (__hospId != nil) {
      [outProtocol writeFieldBeginWithName: @"hospId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __hospId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__imgUrl_isset) {
    if (__imgUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"imgUrl" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __imgUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospLogo_isset) {
    if (__hospLogo != nil) {
      [outProtocol writeFieldBeginWithName: @"hospLogo" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __hospLogo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__remark_isset) {
    if (__remark != nil) {
      [outProtocol writeFieldBeginWithName: @"remark" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __remark];
      [outProtocol writeFieldEnd];
    }
  }
  if (__level_isset) {
    if (__level != nil) {
      [outProtocol writeFieldBeginWithName: @"level" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __level];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceCode_isset) {
    if (__serviceCode != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceCode" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __serviceCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__opened_isset) {
    if (__opened != nil) {
      [outProtocol writeFieldBeginWithName: @"opened" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __opened];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospType_isset) {
    if (__hospType != nil) {
      [outProtocol writeFieldBeginWithName: @"hospType" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __hospType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientCount_isset) {
    if (__patientCount != nil) {
      [outProtocol writeFieldBeginWithName: @"patientCount" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __patientCount];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isInsurAssigned_isset) {
    if (__isInsurAssigned != nil) {
      [outProtocol writeFieldBeginWithName: @"isInsurAssigned" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __isInsurAssigned];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospLevel_isset) {
    [outProtocol writeFieldBeginWithName: @"hospLevel" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __hospLevel];
    [outProtocol writeFieldEnd];
  }
  if (__dailyVisitCount_isset) {
    if (__dailyVisitCount != nil) {
      [outProtocol writeFieldBeginWithName: @"dailyVisitCount" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __dailyVisitCount];
      [outProtocol writeFieldEnd];
    }
  }
  if (__openness_isset) {
    [outProtocol writeFieldBeginWithName: @"openness" type: TType_I32 fieldID: 14];
    [outProtocol writeI32: __openness];
    [outProtocol writeFieldEnd];
  }
  if (__evaluation_isset) {
    if (__evaluation != nil) {
      [outProtocol writeFieldBeginWithName: @"evaluation" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __evaluation];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diamonds_isset) {
    if (__diamonds != nil) {
      [outProtocol writeFieldBeginWithName: @"diamonds" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __diamonds];
      [outProtocol writeFieldEnd];
    }
  }
  if (__featureDepts_isset) {
    if (__featureDepts != nil) {
      [outProtocol writeFieldBeginWithName: @"featureDepts" type: TType_LIST fieldID: 17];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__featureDepts count]];
        int idx39;
        for (idx39 = 0; idx39 < [__featureDepts count]; idx39++)
        {
          [[__featureDepts objectAtIndex: idx39] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFHospDto("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"\"%@\"", __hospId];
  [ms appendString: @",imgUrl:"];
  [ms appendFormat: @"\"%@\"", __imgUrl];
  [ms appendString: @",hospLogo:"];
  [ms appendFormat: @"\"%@\"", __hospLogo];
  [ms appendString: @",remark:"];
  [ms appendFormat: @"\"%@\"", __remark];
  [ms appendString: @",level:"];
  [ms appendFormat: @"\"%@\"", __level];
  [ms appendString: @",serviceCode:"];
  [ms appendFormat: @"\"%@\"", __serviceCode];
  [ms appendString: @",opened:"];
  [ms appendFormat: @"\"%@\"", __opened];
  [ms appendString: @",hospType:"];
  [ms appendFormat: @"\"%@\"", __hospType];
  [ms appendString: @",patientCount:"];
  [ms appendFormat: @"\"%@\"", __patientCount];
  [ms appendString: @",isInsurAssigned:"];
  [ms appendFormat: @"\"%@\"", __isInsurAssigned];
  [ms appendString: @",hospLevel:"];
  [ms appendFormat: @"%i", __hospLevel];
  [ms appendString: @",dailyVisitCount:"];
  [ms appendFormat: @"\"%@\"", __dailyVisitCount];
  [ms appendString: @",openness:"];
  [ms appendFormat: @"%i", __openness];
  [ms appendString: @",evaluation:"];
  [ms appendFormat: @"\"%@\"", __evaluation];
  [ms appendString: @",diamonds:"];
  [ms appendFormat: @"\"%@\"", __diamonds];
  [ms appendString: @",featureDepts:"];
  [ms appendFormat: @"%@", __featureDepts];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFeatureDeptDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithComDeptId: (int32_t) comDeptId comDeptName: (NSString *) comDeptName
{
  self = [super init];
  __comDeptId = comDeptId;
  __comDeptId_isset = YES;
  __comDeptName = [comDeptName retain_stub];
  __comDeptName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"comDeptId"])
  {
    __comDeptId = [decoder decodeInt32ForKey: @"comDeptId"];
    __comDeptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"comDeptName"])
  {
    __comDeptName = [[decoder decodeObjectForKey: @"comDeptName"] retain_stub];
    __comDeptName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__comDeptId_isset)
  {
    [encoder encodeInt32: __comDeptId forKey: @"comDeptId"];
  }
  if (__comDeptName_isset)
  {
    [encoder encodeObject: __comDeptName forKey: @"comDeptName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __comDeptId_isset ? 2654435761 : 0;
  if (__comDeptId_isset)
  {
    hash = (hash * 31) ^ [@(__comDeptId) hash];
  }
  hash = (hash * 31) ^ __comDeptName_isset ? 2654435761 : 0;
  if (__comDeptName_isset)
  {
    hash = (hash * 31) ^ [__comDeptName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFeatureDeptDto class]]) {
    return NO;
  }
  NXTFFeatureDeptDto *other = (NXTFFeatureDeptDto *)anObject;
  if ((__comDeptId_isset != other->__comDeptId_isset) ||
      (__comDeptId_isset && (__comDeptId != other->__comDeptId))) {
    return NO;
  }
  if ((__comDeptName_isset != other->__comDeptName_isset) ||
      (__comDeptName_isset && ((__comDeptName || other->__comDeptName) && ![__comDeptName isEqual:other->__comDeptName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__comDeptName release_stub];
  [super dealloc_stub];
}

- (int32_t) comDeptId {
  return __comDeptId;
}

- (void) setComDeptId: (int32_t) comDeptId {
  __comDeptId = comDeptId;
  __comDeptId_isset = YES;
}

- (BOOL) comDeptIdIsSet {
  return __comDeptId_isset;
}

- (void) unsetComDeptId {
  __comDeptId_isset = NO;
}

- (NSString *) comDeptName {
  return [[__comDeptName retain_stub] autorelease_stub];
}

- (void) setComDeptName: (NSString *) comDeptName {
  [comDeptName retain_stub];
  [__comDeptName release_stub];
  __comDeptName = comDeptName;
  __comDeptName_isset = YES;
}

- (BOOL) comDeptNameIsSet {
  return __comDeptName_isset;
}

- (void) unsetComDeptName {
  [__comDeptName release_stub];
  __comDeptName = nil;
  __comDeptName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setComDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setComDeptName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FeatureDeptDto"];
  if (__comDeptId_isset) {
    [outProtocol writeFieldBeginWithName: @"comDeptId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __comDeptId];
    [outProtocol writeFieldEnd];
  }
  if (__comDeptName_isset) {
    if (__comDeptName != nil) {
      [outProtocol writeFieldBeginWithName: @"comDeptName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __comDeptName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFeatureDeptDto("];
  [ms appendString: @"comDeptId:"];
  [ms appendFormat: @"%i", __comDeptId];
  [ms appendString: @",comDeptName:"];
  [ms appendFormat: @"\"%@\"", __comDeptName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFindHospOutput

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHospId: (NSString *) hospId name: (NSString *) name desc: (NSString *) desc remark: (NSString *) remark hospLogoUrl: (NSString *) hospLogoUrl imageUrl: (NSString *) imageUrl hospType: (NSString *) hospType hospLevel: (NSString *) hospLevel patientCount: (NSString *) patientCount dailyVisitCount: (NSString *) dailyVisitCount address: (NSString *) address contactNo: (NSString *) contactNo depts: (NSMutableArray *) depts deptDtos: (NSMutableArray *) deptDtos isSupportReg: (NSString *) isSupportReg isOpened: (NSString *) isOpened serviceCode: (NSString *) serviceCode isInsurAssigned: (NSString *) isInsurAssigned lng: (NSString *) lng lat: (NSString *) lat distance: (NSString *) distance openness: (int32_t) openness evaluation: (NSString *) evaluation diamonds: (NSString *) diamonds estimateTime: (NSString *) estimateTime isOpenNet: (int32_t) isOpenNet featureDepts: (NSMutableArray *) featureDepts
{
  self = [super init];
  __hospId = [hospId retain_stub];
  __hospId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __remark = [remark retain_stub];
  __remark_isset = YES;
  __hospLogoUrl = [hospLogoUrl retain_stub];
  __hospLogoUrl_isset = YES;
  __imageUrl = [imageUrl retain_stub];
  __imageUrl_isset = YES;
  __hospType = [hospType retain_stub];
  __hospType_isset = YES;
  __hospLevel = [hospLevel retain_stub];
  __hospLevel_isset = YES;
  __patientCount = [patientCount retain_stub];
  __patientCount_isset = YES;
  __dailyVisitCount = [dailyVisitCount retain_stub];
  __dailyVisitCount_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __contactNo = [contactNo retain_stub];
  __contactNo_isset = YES;
  __depts = [depts retain_stub];
  __depts_isset = YES;
  __deptDtos = [deptDtos retain_stub];
  __deptDtos_isset = YES;
  __isSupportReg = [isSupportReg retain_stub];
  __isSupportReg_isset = YES;
  __isOpened = [isOpened retain_stub];
  __isOpened_isset = YES;
  __serviceCode = [serviceCode retain_stub];
  __serviceCode_isset = YES;
  __isInsurAssigned = [isInsurAssigned retain_stub];
  __isInsurAssigned_isset = YES;
  __lng = [lng retain_stub];
  __lng_isset = YES;
  __lat = [lat retain_stub];
  __lat_isset = YES;
  __distance = [distance retain_stub];
  __distance_isset = YES;
  __openness = openness;
  __openness_isset = YES;
  __evaluation = [evaluation retain_stub];
  __evaluation_isset = YES;
  __diamonds = [diamonds retain_stub];
  __diamonds_isset = YES;
  __estimateTime = [estimateTime retain_stub];
  __estimateTime_isset = YES;
  __isOpenNet = isOpenNet;
  __isOpenNet_isset = YES;
  __featureDepts = [featureDepts retain_stub];
  __featureDepts_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [[decoder decodeObjectForKey: @"hospId"] retain_stub];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"remark"])
  {
    __remark = [[decoder decodeObjectForKey: @"remark"] retain_stub];
    __remark_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospLogoUrl"])
  {
    __hospLogoUrl = [[decoder decodeObjectForKey: @"hospLogoUrl"] retain_stub];
    __hospLogoUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"imageUrl"])
  {
    __imageUrl = [[decoder decodeObjectForKey: @"imageUrl"] retain_stub];
    __imageUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospType"])
  {
    __hospType = [[decoder decodeObjectForKey: @"hospType"] retain_stub];
    __hospType_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospLevel"])
  {
    __hospLevel = [[decoder decodeObjectForKey: @"hospLevel"] retain_stub];
    __hospLevel_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientCount"])
  {
    __patientCount = [[decoder decodeObjectForKey: @"patientCount"] retain_stub];
    __patientCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"dailyVisitCount"])
  {
    __dailyVisitCount = [[decoder decodeObjectForKey: @"dailyVisitCount"] retain_stub];
    __dailyVisitCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"contactNo"])
  {
    __contactNo = [[decoder decodeObjectForKey: @"contactNo"] retain_stub];
    __contactNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"depts"])
  {
    __depts = [[decoder decodeObjectForKey: @"depts"] retain_stub];
    __depts_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptDtos"])
  {
    __deptDtos = [[decoder decodeObjectForKey: @"deptDtos"] retain_stub];
    __deptDtos_isset = YES;
  }
  if ([decoder containsValueForKey: @"isSupportReg"])
  {
    __isSupportReg = [[decoder decodeObjectForKey: @"isSupportReg"] retain_stub];
    __isSupportReg_isset = YES;
  }
  if ([decoder containsValueForKey: @"isOpened"])
  {
    __isOpened = [[decoder decodeObjectForKey: @"isOpened"] retain_stub];
    __isOpened_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceCode"])
  {
    __serviceCode = [[decoder decodeObjectForKey: @"serviceCode"] retain_stub];
    __serviceCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"isInsurAssigned"])
  {
    __isInsurAssigned = [[decoder decodeObjectForKey: @"isInsurAssigned"] retain_stub];
    __isInsurAssigned_isset = YES;
  }
  if ([decoder containsValueForKey: @"lng"])
  {
    __lng = [[decoder decodeObjectForKey: @"lng"] retain_stub];
    __lng_isset = YES;
  }
  if ([decoder containsValueForKey: @"lat"])
  {
    __lat = [[decoder decodeObjectForKey: @"lat"] retain_stub];
    __lat_isset = YES;
  }
  if ([decoder containsValueForKey: @"distance"])
  {
    __distance = [[decoder decodeObjectForKey: @"distance"] retain_stub];
    __distance_isset = YES;
  }
  if ([decoder containsValueForKey: @"openness"])
  {
    __openness = [decoder decodeInt32ForKey: @"openness"];
    __openness_isset = YES;
  }
  if ([decoder containsValueForKey: @"evaluation"])
  {
    __evaluation = [[decoder decodeObjectForKey: @"evaluation"] retain_stub];
    __evaluation_isset = YES;
  }
  if ([decoder containsValueForKey: @"diamonds"])
  {
    __diamonds = [[decoder decodeObjectForKey: @"diamonds"] retain_stub];
    __diamonds_isset = YES;
  }
  if ([decoder containsValueForKey: @"estimateTime"])
  {
    __estimateTime = [[decoder decodeObjectForKey: @"estimateTime"] retain_stub];
    __estimateTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"isOpenNet"])
  {
    __isOpenNet = [decoder decodeInt32ForKey: @"isOpenNet"];
    __isOpenNet_isset = YES;
  }
  if ([decoder containsValueForKey: @"featureDepts"])
  {
    __featureDepts = [[decoder decodeObjectForKey: @"featureDepts"] retain_stub];
    __featureDepts_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__hospId_isset)
  {
    [encoder encodeObject: __hospId forKey: @"hospId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__remark_isset)
  {
    [encoder encodeObject: __remark forKey: @"remark"];
  }
  if (__hospLogoUrl_isset)
  {
    [encoder encodeObject: __hospLogoUrl forKey: @"hospLogoUrl"];
  }
  if (__imageUrl_isset)
  {
    [encoder encodeObject: __imageUrl forKey: @"imageUrl"];
  }
  if (__hospType_isset)
  {
    [encoder encodeObject: __hospType forKey: @"hospType"];
  }
  if (__hospLevel_isset)
  {
    [encoder encodeObject: __hospLevel forKey: @"hospLevel"];
  }
  if (__patientCount_isset)
  {
    [encoder encodeObject: __patientCount forKey: @"patientCount"];
  }
  if (__dailyVisitCount_isset)
  {
    [encoder encodeObject: __dailyVisitCount forKey: @"dailyVisitCount"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__contactNo_isset)
  {
    [encoder encodeObject: __contactNo forKey: @"contactNo"];
  }
  if (__depts_isset)
  {
    [encoder encodeObject: __depts forKey: @"depts"];
  }
  if (__deptDtos_isset)
  {
    [encoder encodeObject: __deptDtos forKey: @"deptDtos"];
  }
  if (__isSupportReg_isset)
  {
    [encoder encodeObject: __isSupportReg forKey: @"isSupportReg"];
  }
  if (__isOpened_isset)
  {
    [encoder encodeObject: __isOpened forKey: @"isOpened"];
  }
  if (__serviceCode_isset)
  {
    [encoder encodeObject: __serviceCode forKey: @"serviceCode"];
  }
  if (__isInsurAssigned_isset)
  {
    [encoder encodeObject: __isInsurAssigned forKey: @"isInsurAssigned"];
  }
  if (__lng_isset)
  {
    [encoder encodeObject: __lng forKey: @"lng"];
  }
  if (__lat_isset)
  {
    [encoder encodeObject: __lat forKey: @"lat"];
  }
  if (__distance_isset)
  {
    [encoder encodeObject: __distance forKey: @"distance"];
  }
  if (__openness_isset)
  {
    [encoder encodeInt32: __openness forKey: @"openness"];
  }
  if (__evaluation_isset)
  {
    [encoder encodeObject: __evaluation forKey: @"evaluation"];
  }
  if (__diamonds_isset)
  {
    [encoder encodeObject: __diamonds forKey: @"diamonds"];
  }
  if (__estimateTime_isset)
  {
    [encoder encodeObject: __estimateTime forKey: @"estimateTime"];
  }
  if (__isOpenNet_isset)
  {
    [encoder encodeInt32: __isOpenNet forKey: @"isOpenNet"];
  }
  if (__featureDepts_isset)
  {
    [encoder encodeObject: __featureDepts forKey: @"featureDepts"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [__hospId hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __remark_isset ? 2654435761 : 0;
  if (__remark_isset)
  {
    hash = (hash * 31) ^ [__remark hash];
  }
  hash = (hash * 31) ^ __hospLogoUrl_isset ? 2654435761 : 0;
  if (__hospLogoUrl_isset)
  {
    hash = (hash * 31) ^ [__hospLogoUrl hash];
  }
  hash = (hash * 31) ^ __imageUrl_isset ? 2654435761 : 0;
  if (__imageUrl_isset)
  {
    hash = (hash * 31) ^ [__imageUrl hash];
  }
  hash = (hash * 31) ^ __hospType_isset ? 2654435761 : 0;
  if (__hospType_isset)
  {
    hash = (hash * 31) ^ [__hospType hash];
  }
  hash = (hash * 31) ^ __hospLevel_isset ? 2654435761 : 0;
  if (__hospLevel_isset)
  {
    hash = (hash * 31) ^ [__hospLevel hash];
  }
  hash = (hash * 31) ^ __patientCount_isset ? 2654435761 : 0;
  if (__patientCount_isset)
  {
    hash = (hash * 31) ^ [__patientCount hash];
  }
  hash = (hash * 31) ^ __dailyVisitCount_isset ? 2654435761 : 0;
  if (__dailyVisitCount_isset)
  {
    hash = (hash * 31) ^ [__dailyVisitCount hash];
  }
  hash = (hash * 31) ^ __address_isset ? 2654435761 : 0;
  if (__address_isset)
  {
    hash = (hash * 31) ^ [__address hash];
  }
  hash = (hash * 31) ^ __contactNo_isset ? 2654435761 : 0;
  if (__contactNo_isset)
  {
    hash = (hash * 31) ^ [__contactNo hash];
  }
  hash = (hash * 31) ^ __depts_isset ? 2654435761 : 0;
  if (__depts_isset)
  {
    hash = (hash * 31) ^ [__depts hash];
  }
  hash = (hash * 31) ^ __deptDtos_isset ? 2654435761 : 0;
  if (__deptDtos_isset)
  {
    hash = (hash * 31) ^ [__deptDtos hash];
  }
  hash = (hash * 31) ^ __isSupportReg_isset ? 2654435761 : 0;
  if (__isSupportReg_isset)
  {
    hash = (hash * 31) ^ [__isSupportReg hash];
  }
  hash = (hash * 31) ^ __isOpened_isset ? 2654435761 : 0;
  if (__isOpened_isset)
  {
    hash = (hash * 31) ^ [__isOpened hash];
  }
  hash = (hash * 31) ^ __serviceCode_isset ? 2654435761 : 0;
  if (__serviceCode_isset)
  {
    hash = (hash * 31) ^ [__serviceCode hash];
  }
  hash = (hash * 31) ^ __isInsurAssigned_isset ? 2654435761 : 0;
  if (__isInsurAssigned_isset)
  {
    hash = (hash * 31) ^ [__isInsurAssigned hash];
  }
  hash = (hash * 31) ^ __lng_isset ? 2654435761 : 0;
  if (__lng_isset)
  {
    hash = (hash * 31) ^ [__lng hash];
  }
  hash = (hash * 31) ^ __lat_isset ? 2654435761 : 0;
  if (__lat_isset)
  {
    hash = (hash * 31) ^ [__lat hash];
  }
  hash = (hash * 31) ^ __distance_isset ? 2654435761 : 0;
  if (__distance_isset)
  {
    hash = (hash * 31) ^ [__distance hash];
  }
  hash = (hash * 31) ^ __openness_isset ? 2654435761 : 0;
  if (__openness_isset)
  {
    hash = (hash * 31) ^ [@(__openness) hash];
  }
  hash = (hash * 31) ^ __evaluation_isset ? 2654435761 : 0;
  if (__evaluation_isset)
  {
    hash = (hash * 31) ^ [__evaluation hash];
  }
  hash = (hash * 31) ^ __diamonds_isset ? 2654435761 : 0;
  if (__diamonds_isset)
  {
    hash = (hash * 31) ^ [__diamonds hash];
  }
  hash = (hash * 31) ^ __estimateTime_isset ? 2654435761 : 0;
  if (__estimateTime_isset)
  {
    hash = (hash * 31) ^ [__estimateTime hash];
  }
  hash = (hash * 31) ^ __isOpenNet_isset ? 2654435761 : 0;
  if (__isOpenNet_isset)
  {
    hash = (hash * 31) ^ [@(__isOpenNet) hash];
  }
  hash = (hash * 31) ^ __featureDepts_isset ? 2654435761 : 0;
  if (__featureDepts_isset)
  {
    hash = (hash * 31) ^ [__featureDepts hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFindHospOutput class]]) {
    return NO;
  }
  NXTFFindHospOutput *other = (NXTFFindHospOutput *)anObject;
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && ((__hospId || other->__hospId) && ![__hospId isEqual:other->__hospId]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__remark_isset != other->__remark_isset) ||
      (__remark_isset && ((__remark || other->__remark) && ![__remark isEqual:other->__remark]))) {
    return NO;
  }
  if ((__hospLogoUrl_isset != other->__hospLogoUrl_isset) ||
      (__hospLogoUrl_isset && ((__hospLogoUrl || other->__hospLogoUrl) && ![__hospLogoUrl isEqual:other->__hospLogoUrl]))) {
    return NO;
  }
  if ((__imageUrl_isset != other->__imageUrl_isset) ||
      (__imageUrl_isset && ((__imageUrl || other->__imageUrl) && ![__imageUrl isEqual:other->__imageUrl]))) {
    return NO;
  }
  if ((__hospType_isset != other->__hospType_isset) ||
      (__hospType_isset && ((__hospType || other->__hospType) && ![__hospType isEqual:other->__hospType]))) {
    return NO;
  }
  if ((__hospLevel_isset != other->__hospLevel_isset) ||
      (__hospLevel_isset && ((__hospLevel || other->__hospLevel) && ![__hospLevel isEqual:other->__hospLevel]))) {
    return NO;
  }
  if ((__patientCount_isset != other->__patientCount_isset) ||
      (__patientCount_isset && ((__patientCount || other->__patientCount) && ![__patientCount isEqual:other->__patientCount]))) {
    return NO;
  }
  if ((__dailyVisitCount_isset != other->__dailyVisitCount_isset) ||
      (__dailyVisitCount_isset && ((__dailyVisitCount || other->__dailyVisitCount) && ![__dailyVisitCount isEqual:other->__dailyVisitCount]))) {
    return NO;
  }
  if ((__address_isset != other->__address_isset) ||
      (__address_isset && ((__address || other->__address) && ![__address isEqual:other->__address]))) {
    return NO;
  }
  if ((__contactNo_isset != other->__contactNo_isset) ||
      (__contactNo_isset && ((__contactNo || other->__contactNo) && ![__contactNo isEqual:other->__contactNo]))) {
    return NO;
  }
  if ((__depts_isset != other->__depts_isset) ||
      (__depts_isset && ((__depts || other->__depts) && ![__depts isEqual:other->__depts]))) {
    return NO;
  }
  if ((__deptDtos_isset != other->__deptDtos_isset) ||
      (__deptDtos_isset && ((__deptDtos || other->__deptDtos) && ![__deptDtos isEqual:other->__deptDtos]))) {
    return NO;
  }
  if ((__isSupportReg_isset != other->__isSupportReg_isset) ||
      (__isSupportReg_isset && ((__isSupportReg || other->__isSupportReg) && ![__isSupportReg isEqual:other->__isSupportReg]))) {
    return NO;
  }
  if ((__isOpened_isset != other->__isOpened_isset) ||
      (__isOpened_isset && ((__isOpened || other->__isOpened) && ![__isOpened isEqual:other->__isOpened]))) {
    return NO;
  }
  if ((__serviceCode_isset != other->__serviceCode_isset) ||
      (__serviceCode_isset && ((__serviceCode || other->__serviceCode) && ![__serviceCode isEqual:other->__serviceCode]))) {
    return NO;
  }
  if ((__isInsurAssigned_isset != other->__isInsurAssigned_isset) ||
      (__isInsurAssigned_isset && ((__isInsurAssigned || other->__isInsurAssigned) && ![__isInsurAssigned isEqual:other->__isInsurAssigned]))) {
    return NO;
  }
  if ((__lng_isset != other->__lng_isset) ||
      (__lng_isset && ((__lng || other->__lng) && ![__lng isEqual:other->__lng]))) {
    return NO;
  }
  if ((__lat_isset != other->__lat_isset) ||
      (__lat_isset && ((__lat || other->__lat) && ![__lat isEqual:other->__lat]))) {
    return NO;
  }
  if ((__distance_isset != other->__distance_isset) ||
      (__distance_isset && ((__distance || other->__distance) && ![__distance isEqual:other->__distance]))) {
    return NO;
  }
  if ((__openness_isset != other->__openness_isset) ||
      (__openness_isset && (__openness != other->__openness))) {
    return NO;
  }
  if ((__evaluation_isset != other->__evaluation_isset) ||
      (__evaluation_isset && ((__evaluation || other->__evaluation) && ![__evaluation isEqual:other->__evaluation]))) {
    return NO;
  }
  if ((__diamonds_isset != other->__diamonds_isset) ||
      (__diamonds_isset && ((__diamonds || other->__diamonds) && ![__diamonds isEqual:other->__diamonds]))) {
    return NO;
  }
  if ((__estimateTime_isset != other->__estimateTime_isset) ||
      (__estimateTime_isset && ((__estimateTime || other->__estimateTime) && ![__estimateTime isEqual:other->__estimateTime]))) {
    return NO;
  }
  if ((__isOpenNet_isset != other->__isOpenNet_isset) ||
      (__isOpenNet_isset && (__isOpenNet != other->__isOpenNet))) {
    return NO;
  }
  if ((__featureDepts_isset != other->__featureDepts_isset) ||
      (__featureDepts_isset && ((__featureDepts || other->__featureDepts) && ![__featureDepts isEqual:other->__featureDepts]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__hospId release_stub];
  [__name release_stub];
  [__desc release_stub];
  [__remark release_stub];
  [__hospLogoUrl release_stub];
  [__imageUrl release_stub];
  [__hospType release_stub];
  [__hospLevel release_stub];
  [__patientCount release_stub];
  [__dailyVisitCount release_stub];
  [__address release_stub];
  [__contactNo release_stub];
  [__depts release_stub];
  [__deptDtos release_stub];
  [__isSupportReg release_stub];
  [__isOpened release_stub];
  [__serviceCode release_stub];
  [__isInsurAssigned release_stub];
  [__lng release_stub];
  [__lat release_stub];
  [__distance release_stub];
  [__evaluation release_stub];
  [__diamonds release_stub];
  [__estimateTime release_stub];
  [__featureDepts release_stub];
  [super dealloc_stub];
}

- (NSString *) hospId {
  return [[__hospId retain_stub] autorelease_stub];
}

- (void) setHospId: (NSString *) hospId {
  [hospId retain_stub];
  [__hospId release_stub];
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  [__hospId release_stub];
  __hospId = nil;
  __hospId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) remark {
  return [[__remark retain_stub] autorelease_stub];
}

- (void) setRemark: (NSString *) remark {
  [remark retain_stub];
  [__remark release_stub];
  __remark = remark;
  __remark_isset = YES;
}

- (BOOL) remarkIsSet {
  return __remark_isset;
}

- (void) unsetRemark {
  [__remark release_stub];
  __remark = nil;
  __remark_isset = NO;
}

- (NSString *) hospLogoUrl {
  return [[__hospLogoUrl retain_stub] autorelease_stub];
}

- (void) setHospLogoUrl: (NSString *) hospLogoUrl {
  [hospLogoUrl retain_stub];
  [__hospLogoUrl release_stub];
  __hospLogoUrl = hospLogoUrl;
  __hospLogoUrl_isset = YES;
}

- (BOOL) hospLogoUrlIsSet {
  return __hospLogoUrl_isset;
}

- (void) unsetHospLogoUrl {
  [__hospLogoUrl release_stub];
  __hospLogoUrl = nil;
  __hospLogoUrl_isset = NO;
}

- (NSString *) imageUrl {
  return [[__imageUrl retain_stub] autorelease_stub];
}

- (void) setImageUrl: (NSString *) imageUrl {
  [imageUrl retain_stub];
  [__imageUrl release_stub];
  __imageUrl = imageUrl;
  __imageUrl_isset = YES;
}

- (BOOL) imageUrlIsSet {
  return __imageUrl_isset;
}

- (void) unsetImageUrl {
  [__imageUrl release_stub];
  __imageUrl = nil;
  __imageUrl_isset = NO;
}

- (NSString *) hospType {
  return [[__hospType retain_stub] autorelease_stub];
}

- (void) setHospType: (NSString *) hospType {
  [hospType retain_stub];
  [__hospType release_stub];
  __hospType = hospType;
  __hospType_isset = YES;
}

- (BOOL) hospTypeIsSet {
  return __hospType_isset;
}

- (void) unsetHospType {
  [__hospType release_stub];
  __hospType = nil;
  __hospType_isset = NO;
}

- (NSString *) hospLevel {
  return [[__hospLevel retain_stub] autorelease_stub];
}

- (void) setHospLevel: (NSString *) hospLevel {
  [hospLevel retain_stub];
  [__hospLevel release_stub];
  __hospLevel = hospLevel;
  __hospLevel_isset = YES;
}

- (BOOL) hospLevelIsSet {
  return __hospLevel_isset;
}

- (void) unsetHospLevel {
  [__hospLevel release_stub];
  __hospLevel = nil;
  __hospLevel_isset = NO;
}

- (NSString *) patientCount {
  return [[__patientCount retain_stub] autorelease_stub];
}

- (void) setPatientCount: (NSString *) patientCount {
  [patientCount retain_stub];
  [__patientCount release_stub];
  __patientCount = patientCount;
  __patientCount_isset = YES;
}

- (BOOL) patientCountIsSet {
  return __patientCount_isset;
}

- (void) unsetPatientCount {
  [__patientCount release_stub];
  __patientCount = nil;
  __patientCount_isset = NO;
}

- (NSString *) dailyVisitCount {
  return [[__dailyVisitCount retain_stub] autorelease_stub];
}

- (void) setDailyVisitCount: (NSString *) dailyVisitCount {
  [dailyVisitCount retain_stub];
  [__dailyVisitCount release_stub];
  __dailyVisitCount = dailyVisitCount;
  __dailyVisitCount_isset = YES;
}

- (BOOL) dailyVisitCountIsSet {
  return __dailyVisitCount_isset;
}

- (void) unsetDailyVisitCount {
  [__dailyVisitCount release_stub];
  __dailyVisitCount = nil;
  __dailyVisitCount_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (NSString *) contactNo {
  return [[__contactNo retain_stub] autorelease_stub];
}

- (void) setContactNo: (NSString *) contactNo {
  [contactNo retain_stub];
  [__contactNo release_stub];
  __contactNo = contactNo;
  __contactNo_isset = YES;
}

- (BOOL) contactNoIsSet {
  return __contactNo_isset;
}

- (void) unsetContactNo {
  [__contactNo release_stub];
  __contactNo = nil;
  __contactNo_isset = NO;
}

- (NSMutableArray *) depts {
  return [[__depts retain_stub] autorelease_stub];
}

- (void) setDepts: (NSMutableArray *) depts {
  [depts retain_stub];
  [__depts release_stub];
  __depts = depts;
  __depts_isset = YES;
}

- (BOOL) deptsIsSet {
  return __depts_isset;
}

- (void) unsetDepts {
  [__depts release_stub];
  __depts = nil;
  __depts_isset = NO;
}

- (NSMutableArray *) deptDtos {
  return [[__deptDtos retain_stub] autorelease_stub];
}

- (void) setDeptDtos: (NSMutableArray *) deptDtos {
  [deptDtos retain_stub];
  [__deptDtos release_stub];
  __deptDtos = deptDtos;
  __deptDtos_isset = YES;
}

- (BOOL) deptDtosIsSet {
  return __deptDtos_isset;
}

- (void) unsetDeptDtos {
  [__deptDtos release_stub];
  __deptDtos = nil;
  __deptDtos_isset = NO;
}

- (NSString *) isSupportReg {
  return [[__isSupportReg retain_stub] autorelease_stub];
}

- (void) setIsSupportReg: (NSString *) isSupportReg {
  [isSupportReg retain_stub];
  [__isSupportReg release_stub];
  __isSupportReg = isSupportReg;
  __isSupportReg_isset = YES;
}

- (BOOL) isSupportRegIsSet {
  return __isSupportReg_isset;
}

- (void) unsetIsSupportReg {
  [__isSupportReg release_stub];
  __isSupportReg = nil;
  __isSupportReg_isset = NO;
}

- (NSString *) isOpened {
  return [[__isOpened retain_stub] autorelease_stub];
}

- (void) setIsOpened: (NSString *) isOpened {
  [isOpened retain_stub];
  [__isOpened release_stub];
  __isOpened = isOpened;
  __isOpened_isset = YES;
}

- (BOOL) isOpenedIsSet {
  return __isOpened_isset;
}

- (void) unsetIsOpened {
  [__isOpened release_stub];
  __isOpened = nil;
  __isOpened_isset = NO;
}

- (NSString *) serviceCode {
  return [[__serviceCode retain_stub] autorelease_stub];
}

- (void) setServiceCode: (NSString *) serviceCode {
  [serviceCode retain_stub];
  [__serviceCode release_stub];
  __serviceCode = serviceCode;
  __serviceCode_isset = YES;
}

- (BOOL) serviceCodeIsSet {
  return __serviceCode_isset;
}

- (void) unsetServiceCode {
  [__serviceCode release_stub];
  __serviceCode = nil;
  __serviceCode_isset = NO;
}

- (NSString *) isInsurAssigned {
  return [[__isInsurAssigned retain_stub] autorelease_stub];
}

- (void) setIsInsurAssigned: (NSString *) isInsurAssigned {
  [isInsurAssigned retain_stub];
  [__isInsurAssigned release_stub];
  __isInsurAssigned = isInsurAssigned;
  __isInsurAssigned_isset = YES;
}

- (BOOL) isInsurAssignedIsSet {
  return __isInsurAssigned_isset;
}

- (void) unsetIsInsurAssigned {
  [__isInsurAssigned release_stub];
  __isInsurAssigned = nil;
  __isInsurAssigned_isset = NO;
}

- (NSString *) lng {
  return [[__lng retain_stub] autorelease_stub];
}

- (void) setLng: (NSString *) lng {
  [lng retain_stub];
  [__lng release_stub];
  __lng = lng;
  __lng_isset = YES;
}

- (BOOL) lngIsSet {
  return __lng_isset;
}

- (void) unsetLng {
  [__lng release_stub];
  __lng = nil;
  __lng_isset = NO;
}

- (NSString *) lat {
  return [[__lat retain_stub] autorelease_stub];
}

- (void) setLat: (NSString *) lat {
  [lat retain_stub];
  [__lat release_stub];
  __lat = lat;
  __lat_isset = YES;
}

- (BOOL) latIsSet {
  return __lat_isset;
}

- (void) unsetLat {
  [__lat release_stub];
  __lat = nil;
  __lat_isset = NO;
}

- (NSString *) distance {
  return [[__distance retain_stub] autorelease_stub];
}

- (void) setDistance: (NSString *) distance {
  [distance retain_stub];
  [__distance release_stub];
  __distance = distance;
  __distance_isset = YES;
}

- (BOOL) distanceIsSet {
  return __distance_isset;
}

- (void) unsetDistance {
  [__distance release_stub];
  __distance = nil;
  __distance_isset = NO;
}

- (int32_t) openness {
  return __openness;
}

- (void) setOpenness: (int32_t) openness {
  __openness = openness;
  __openness_isset = YES;
}

- (BOOL) opennessIsSet {
  return __openness_isset;
}

- (void) unsetOpenness {
  __openness_isset = NO;
}

- (NSString *) evaluation {
  return [[__evaluation retain_stub] autorelease_stub];
}

- (void) setEvaluation: (NSString *) evaluation {
  [evaluation retain_stub];
  [__evaluation release_stub];
  __evaluation = evaluation;
  __evaluation_isset = YES;
}

- (BOOL) evaluationIsSet {
  return __evaluation_isset;
}

- (void) unsetEvaluation {
  [__evaluation release_stub];
  __evaluation = nil;
  __evaluation_isset = NO;
}

- (NSString *) diamonds {
  return [[__diamonds retain_stub] autorelease_stub];
}

- (void) setDiamonds: (NSString *) diamonds {
  [diamonds retain_stub];
  [__diamonds release_stub];
  __diamonds = diamonds;
  __diamonds_isset = YES;
}

- (BOOL) diamondsIsSet {
  return __diamonds_isset;
}

- (void) unsetDiamonds {
  [__diamonds release_stub];
  __diamonds = nil;
  __diamonds_isset = NO;
}

- (NSString *) estimateTime {
  return [[__estimateTime retain_stub] autorelease_stub];
}

- (void) setEstimateTime: (NSString *) estimateTime {
  [estimateTime retain_stub];
  [__estimateTime release_stub];
  __estimateTime = estimateTime;
  __estimateTime_isset = YES;
}

- (BOOL) estimateTimeIsSet {
  return __estimateTime_isset;
}

- (void) unsetEstimateTime {
  [__estimateTime release_stub];
  __estimateTime = nil;
  __estimateTime_isset = NO;
}

- (int32_t) isOpenNet {
  return __isOpenNet;
}

- (void) setIsOpenNet: (int32_t) isOpenNet {
  __isOpenNet = isOpenNet;
  __isOpenNet_isset = YES;
}

- (BOOL) isOpenNetIsSet {
  return __isOpenNet_isset;
}

- (void) unsetIsOpenNet {
  __isOpenNet_isset = NO;
}

- (NSMutableArray *) featureDepts {
  return [[__featureDepts retain_stub] autorelease_stub];
}

- (void) setFeatureDepts: (NSMutableArray *) featureDepts {
  [featureDepts retain_stub];
  [__featureDepts release_stub];
  __featureDepts = featureDepts;
  __featureDepts_isset = YES;
}

- (BOOL) featureDeptsIsSet {
  return __featureDepts_isset;
}

- (void) unsetFeatureDepts {
  [__featureDepts release_stub];
  __featureDepts = nil;
  __featureDepts_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemark: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospLogoUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImageUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospLevel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDailyVisitCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContactNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_LIST) {
          int _size40;
          [inProtocol readListBeginReturningElementType: NULL size: &_size40];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size40];
          int _i41;
          for (_i41 = 0; _i41 < _size40; ++_i41)
          {
            NSString * _elem42 = [inProtocol readString];
            [fieldValue addObject: _elem42];
          }
          [inProtocol readListEnd];
          [self setDepts: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_LIST) {
          int _size43;
          [inProtocol readListBeginReturningElementType: NULL size: &_size43];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size43];
          int _i44;
          for (_i44 = 0; _i44 < _size43; ++_i44)
          {
            NXTFDeptDto *_elem45 = [[NXTFDeptDto alloc] init];
            [_elem45 read: inProtocol];
            [fieldValue addObject: _elem45];
            [_elem45 release_stub];
          }
          [inProtocol readListEnd];
          [self setDeptDtos: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsSupportReg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsOpened: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsInsurAssigned: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLng: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLat: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDistance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOpenness: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEvaluation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDiamonds: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEstimateTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 26:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsOpenNet: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 27:
        if (fieldType == TType_LIST) {
          int _size46;
          [inProtocol readListBeginReturningElementType: NULL size: &_size46];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size46];
          int _i47;
          for (_i47 = 0; _i47 < _size46; ++_i47)
          {
            NXTFFeatureDeptDto *_elem48 = [[NXTFFeatureDeptDto alloc] init];
            [_elem48 read: inProtocol];
            [fieldValue addObject: _elem48];
            [_elem48 release_stub];
          }
          [inProtocol readListEnd];
          [self setFeatureDepts: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FindHospOutput"];
  if (__hospId_isset) {
    if (__hospId != nil) {
      [outProtocol writeFieldBeginWithName: @"hospId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __hospId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__remark_isset) {
    if (__remark != nil) {
      [outProtocol writeFieldBeginWithName: @"remark" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __remark];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospLogoUrl_isset) {
    if (__hospLogoUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"hospLogoUrl" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __hospLogoUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__imageUrl_isset) {
    if (__imageUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"imageUrl" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __imageUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospType_isset) {
    if (__hospType != nil) {
      [outProtocol writeFieldBeginWithName: @"hospType" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __hospType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospLevel_isset) {
    if (__hospLevel != nil) {
      [outProtocol writeFieldBeginWithName: @"hospLevel" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __hospLevel];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientCount_isset) {
    if (__patientCount != nil) {
      [outProtocol writeFieldBeginWithName: @"patientCount" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __patientCount];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dailyVisitCount_isset) {
    if (__dailyVisitCount != nil) {
      [outProtocol writeFieldBeginWithName: @"dailyVisitCount" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __dailyVisitCount];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__contactNo_isset) {
    if (__contactNo != nil) {
      [outProtocol writeFieldBeginWithName: @"contactNo" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __contactNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__depts_isset) {
    if (__depts != nil) {
      [outProtocol writeFieldBeginWithName: @"depts" type: TType_LIST fieldID: 13];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__depts count]];
        int idx50;
        for (idx50 = 0; idx50 < [__depts count]; idx50++)
        {
          [outProtocol writeString: [__depts objectAtIndex: idx50]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptDtos_isset) {
    if (__deptDtos != nil) {
      [outProtocol writeFieldBeginWithName: @"deptDtos" type: TType_LIST fieldID: 14];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__deptDtos count]];
        int idx52;
        for (idx52 = 0; idx52 < [__deptDtos count]; idx52++)
        {
          [[__deptDtos objectAtIndex: idx52] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__isSupportReg_isset) {
    if (__isSupportReg != nil) {
      [outProtocol writeFieldBeginWithName: @"isSupportReg" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __isSupportReg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isOpened_isset) {
    if (__isOpened != nil) {
      [outProtocol writeFieldBeginWithName: @"isOpened" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __isOpened];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceCode_isset) {
    if (__serviceCode != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceCode" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __serviceCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isInsurAssigned_isset) {
    if (__isInsurAssigned != nil) {
      [outProtocol writeFieldBeginWithName: @"isInsurAssigned" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __isInsurAssigned];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lng_isset) {
    if (__lng != nil) {
      [outProtocol writeFieldBeginWithName: @"lng" type: TType_STRING fieldID: 19];
      [outProtocol writeString: __lng];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lat_isset) {
    if (__lat != nil) {
      [outProtocol writeFieldBeginWithName: @"lat" type: TType_STRING fieldID: 20];
      [outProtocol writeString: __lat];
      [outProtocol writeFieldEnd];
    }
  }
  if (__distance_isset) {
    if (__distance != nil) {
      [outProtocol writeFieldBeginWithName: @"distance" type: TType_STRING fieldID: 21];
      [outProtocol writeString: __distance];
      [outProtocol writeFieldEnd];
    }
  }
  if (__openness_isset) {
    [outProtocol writeFieldBeginWithName: @"openness" type: TType_I32 fieldID: 22];
    [outProtocol writeI32: __openness];
    [outProtocol writeFieldEnd];
  }
  if (__evaluation_isset) {
    if (__evaluation != nil) {
      [outProtocol writeFieldBeginWithName: @"evaluation" type: TType_STRING fieldID: 23];
      [outProtocol writeString: __evaluation];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diamonds_isset) {
    if (__diamonds != nil) {
      [outProtocol writeFieldBeginWithName: @"diamonds" type: TType_STRING fieldID: 24];
      [outProtocol writeString: __diamonds];
      [outProtocol writeFieldEnd];
    }
  }
  if (__estimateTime_isset) {
    if (__estimateTime != nil) {
      [outProtocol writeFieldBeginWithName: @"estimateTime" type: TType_STRING fieldID: 25];
      [outProtocol writeString: __estimateTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isOpenNet_isset) {
    [outProtocol writeFieldBeginWithName: @"isOpenNet" type: TType_I32 fieldID: 26];
    [outProtocol writeI32: __isOpenNet];
    [outProtocol writeFieldEnd];
  }
  if (__featureDepts_isset) {
    if (__featureDepts != nil) {
      [outProtocol writeFieldBeginWithName: @"featureDepts" type: TType_LIST fieldID: 27];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__featureDepts count]];
        int idx54;
        for (idx54 = 0; idx54 < [__featureDepts count]; idx54++)
        {
          [[__featureDepts objectAtIndex: idx54] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFindHospOutput("];
  [ms appendString: @"hospId:"];
  [ms appendFormat: @"\"%@\"", __hospId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",remark:"];
  [ms appendFormat: @"\"%@\"", __remark];
  [ms appendString: @",hospLogoUrl:"];
  [ms appendFormat: @"\"%@\"", __hospLogoUrl];
  [ms appendString: @",imageUrl:"];
  [ms appendFormat: @"\"%@\"", __imageUrl];
  [ms appendString: @",hospType:"];
  [ms appendFormat: @"\"%@\"", __hospType];
  [ms appendString: @",hospLevel:"];
  [ms appendFormat: @"\"%@\"", __hospLevel];
  [ms appendString: @",patientCount:"];
  [ms appendFormat: @"\"%@\"", __patientCount];
  [ms appendString: @",dailyVisitCount:"];
  [ms appendFormat: @"\"%@\"", __dailyVisitCount];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",contactNo:"];
  [ms appendFormat: @"\"%@\"", __contactNo];
  [ms appendString: @",depts:"];
  [ms appendFormat: @"%@", __depts];
  [ms appendString: @",deptDtos:"];
  [ms appendFormat: @"%@", __deptDtos];
  [ms appendString: @",isSupportReg:"];
  [ms appendFormat: @"\"%@\"", __isSupportReg];
  [ms appendString: @",isOpened:"];
  [ms appendFormat: @"\"%@\"", __isOpened];
  [ms appendString: @",serviceCode:"];
  [ms appendFormat: @"\"%@\"", __serviceCode];
  [ms appendString: @",isInsurAssigned:"];
  [ms appendFormat: @"\"%@\"", __isInsurAssigned];
  [ms appendString: @",lng:"];
  [ms appendFormat: @"\"%@\"", __lng];
  [ms appendString: @",lat:"];
  [ms appendFormat: @"\"%@\"", __lat];
  [ms appendString: @",distance:"];
  [ms appendFormat: @"\"%@\"", __distance];
  [ms appendString: @",openness:"];
  [ms appendFormat: @"%i", __openness];
  [ms appendString: @",evaluation:"];
  [ms appendFormat: @"\"%@\"", __evaluation];
  [ms appendString: @",diamonds:"];
  [ms appendFormat: @"\"%@\"", __diamonds];
  [ms appendString: @",estimateTime:"];
  [ms appendFormat: @"\"%@\"", __estimateTime];
  [ms appendString: @",isOpenNet:"];
  [ms appendFormat: @"%i", __isOpenNet];
  [ms appendString: @",featureDepts:"];
  [ms appendFormat: @"%@", __featureDepts];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFDiseaseDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDiseaseId: (NSString *) diseaseId name: (NSString *) name desc: (NSString *) desc recomDepts: (NSString *) recomDepts
{
  self = [super init];
  __diseaseId = [diseaseId retain_stub];
  __diseaseId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __recomDepts = [recomDepts retain_stub];
  __recomDepts_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"diseaseId"])
  {
    __diseaseId = [[decoder decodeObjectForKey: @"diseaseId"] retain_stub];
    __diseaseId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"recomDepts"])
  {
    __recomDepts = [[decoder decodeObjectForKey: @"recomDepts"] retain_stub];
    __recomDepts_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__diseaseId_isset)
  {
    [encoder encodeObject: __diseaseId forKey: @"diseaseId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__recomDepts_isset)
  {
    [encoder encodeObject: __recomDepts forKey: @"recomDepts"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __diseaseId_isset ? 2654435761 : 0;
  if (__diseaseId_isset)
  {
    hash = (hash * 31) ^ [__diseaseId hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __recomDepts_isset ? 2654435761 : 0;
  if (__recomDepts_isset)
  {
    hash = (hash * 31) ^ [__recomDepts hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFDiseaseDto class]]) {
    return NO;
  }
  NXTFDiseaseDto *other = (NXTFDiseaseDto *)anObject;
  if ((__diseaseId_isset != other->__diseaseId_isset) ||
      (__diseaseId_isset && ((__diseaseId || other->__diseaseId) && ![__diseaseId isEqual:other->__diseaseId]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__recomDepts_isset != other->__recomDepts_isset) ||
      (__recomDepts_isset && ((__recomDepts || other->__recomDepts) && ![__recomDepts isEqual:other->__recomDepts]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__diseaseId release_stub];
  [__name release_stub];
  [__desc release_stub];
  [__recomDepts release_stub];
  [super dealloc_stub];
}

- (NSString *) diseaseId {
  return [[__diseaseId retain_stub] autorelease_stub];
}

- (void) setDiseaseId: (NSString *) diseaseId {
  [diseaseId retain_stub];
  [__diseaseId release_stub];
  __diseaseId = diseaseId;
  __diseaseId_isset = YES;
}

- (BOOL) diseaseIdIsSet {
  return __diseaseId_isset;
}

- (void) unsetDiseaseId {
  [__diseaseId release_stub];
  __diseaseId = nil;
  __diseaseId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) recomDepts {
  return [[__recomDepts retain_stub] autorelease_stub];
}

- (void) setRecomDepts: (NSString *) recomDepts {
  [recomDepts retain_stub];
  [__recomDepts release_stub];
  __recomDepts = recomDepts;
  __recomDepts_isset = YES;
}

- (BOOL) recomDeptsIsSet {
  return __recomDepts_isset;
}

- (void) unsetRecomDepts {
  [__recomDepts release_stub];
  __recomDepts = nil;
  __recomDepts_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDiseaseId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRecomDepts: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DiseaseDto"];
  if (__diseaseId_isset) {
    if (__diseaseId != nil) {
      [outProtocol writeFieldBeginWithName: @"diseaseId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __diseaseId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__recomDepts_isset) {
    if (__recomDepts != nil) {
      [outProtocol writeFieldBeginWithName: @"recomDepts" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __recomDepts];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFDiseaseDto("];
  [ms appendString: @"diseaseId:"];
  [ms appendFormat: @"\"%@\"", __diseaseId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",recomDepts:"];
  [ms appendFormat: @"\"%@\"", __recomDepts];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFComDeptDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithComDeptId: (NSString *) comDeptId comDeptName: (NSString *) comDeptName comDeptDesc: (NSString *) comDeptDesc comDeptPic: (NSString *) comDeptPic
{
  self = [super init];
  __comDeptId = [comDeptId retain_stub];
  __comDeptId_isset = YES;
  __comDeptName = [comDeptName retain_stub];
  __comDeptName_isset = YES;
  __comDeptDesc = [comDeptDesc retain_stub];
  __comDeptDesc_isset = YES;
  __comDeptPic = [comDeptPic retain_stub];
  __comDeptPic_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"comDeptId"])
  {
    __comDeptId = [[decoder decodeObjectForKey: @"comDeptId"] retain_stub];
    __comDeptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"comDeptName"])
  {
    __comDeptName = [[decoder decodeObjectForKey: @"comDeptName"] retain_stub];
    __comDeptName_isset = YES;
  }
  if ([decoder containsValueForKey: @"comDeptDesc"])
  {
    __comDeptDesc = [[decoder decodeObjectForKey: @"comDeptDesc"] retain_stub];
    __comDeptDesc_isset = YES;
  }
  if ([decoder containsValueForKey: @"comDeptPic"])
  {
    __comDeptPic = [[decoder decodeObjectForKey: @"comDeptPic"] retain_stub];
    __comDeptPic_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__comDeptId_isset)
  {
    [encoder encodeObject: __comDeptId forKey: @"comDeptId"];
  }
  if (__comDeptName_isset)
  {
    [encoder encodeObject: __comDeptName forKey: @"comDeptName"];
  }
  if (__comDeptDesc_isset)
  {
    [encoder encodeObject: __comDeptDesc forKey: @"comDeptDesc"];
  }
  if (__comDeptPic_isset)
  {
    [encoder encodeObject: __comDeptPic forKey: @"comDeptPic"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __comDeptId_isset ? 2654435761 : 0;
  if (__comDeptId_isset)
  {
    hash = (hash * 31) ^ [__comDeptId hash];
  }
  hash = (hash * 31) ^ __comDeptName_isset ? 2654435761 : 0;
  if (__comDeptName_isset)
  {
    hash = (hash * 31) ^ [__comDeptName hash];
  }
  hash = (hash * 31) ^ __comDeptDesc_isset ? 2654435761 : 0;
  if (__comDeptDesc_isset)
  {
    hash = (hash * 31) ^ [__comDeptDesc hash];
  }
  hash = (hash * 31) ^ __comDeptPic_isset ? 2654435761 : 0;
  if (__comDeptPic_isset)
  {
    hash = (hash * 31) ^ [__comDeptPic hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFComDeptDto class]]) {
    return NO;
  }
  NXTFComDeptDto *other = (NXTFComDeptDto *)anObject;
  if ((__comDeptId_isset != other->__comDeptId_isset) ||
      (__comDeptId_isset && ((__comDeptId || other->__comDeptId) && ![__comDeptId isEqual:other->__comDeptId]))) {
    return NO;
  }
  if ((__comDeptName_isset != other->__comDeptName_isset) ||
      (__comDeptName_isset && ((__comDeptName || other->__comDeptName) && ![__comDeptName isEqual:other->__comDeptName]))) {
    return NO;
  }
  if ((__comDeptDesc_isset != other->__comDeptDesc_isset) ||
      (__comDeptDesc_isset && ((__comDeptDesc || other->__comDeptDesc) && ![__comDeptDesc isEqual:other->__comDeptDesc]))) {
    return NO;
  }
  if ((__comDeptPic_isset != other->__comDeptPic_isset) ||
      (__comDeptPic_isset && ((__comDeptPic || other->__comDeptPic) && ![__comDeptPic isEqual:other->__comDeptPic]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__comDeptId release_stub];
  [__comDeptName release_stub];
  [__comDeptDesc release_stub];
  [__comDeptPic release_stub];
  [super dealloc_stub];
}

- (NSString *) comDeptId {
  return [[__comDeptId retain_stub] autorelease_stub];
}

- (void) setComDeptId: (NSString *) comDeptId {
  [comDeptId retain_stub];
  [__comDeptId release_stub];
  __comDeptId = comDeptId;
  __comDeptId_isset = YES;
}

- (BOOL) comDeptIdIsSet {
  return __comDeptId_isset;
}

- (void) unsetComDeptId {
  [__comDeptId release_stub];
  __comDeptId = nil;
  __comDeptId_isset = NO;
}

- (NSString *) comDeptName {
  return [[__comDeptName retain_stub] autorelease_stub];
}

- (void) setComDeptName: (NSString *) comDeptName {
  [comDeptName retain_stub];
  [__comDeptName release_stub];
  __comDeptName = comDeptName;
  __comDeptName_isset = YES;
}

- (BOOL) comDeptNameIsSet {
  return __comDeptName_isset;
}

- (void) unsetComDeptName {
  [__comDeptName release_stub];
  __comDeptName = nil;
  __comDeptName_isset = NO;
}

- (NSString *) comDeptDesc {
  return [[__comDeptDesc retain_stub] autorelease_stub];
}

- (void) setComDeptDesc: (NSString *) comDeptDesc {
  [comDeptDesc retain_stub];
  [__comDeptDesc release_stub];
  __comDeptDesc = comDeptDesc;
  __comDeptDesc_isset = YES;
}

- (BOOL) comDeptDescIsSet {
  return __comDeptDesc_isset;
}

- (void) unsetComDeptDesc {
  [__comDeptDesc release_stub];
  __comDeptDesc = nil;
  __comDeptDesc_isset = NO;
}

- (NSString *) comDeptPic {
  return [[__comDeptPic retain_stub] autorelease_stub];
}

- (void) setComDeptPic: (NSString *) comDeptPic {
  [comDeptPic retain_stub];
  [__comDeptPic release_stub];
  __comDeptPic = comDeptPic;
  __comDeptPic_isset = YES;
}

- (BOOL) comDeptPicIsSet {
  return __comDeptPic_isset;
}

- (void) unsetComDeptPic {
  [__comDeptPic release_stub];
  __comDeptPic = nil;
  __comDeptPic_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setComDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setComDeptName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setComDeptDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setComDeptPic: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ComDeptDto"];
  if (__comDeptId_isset) {
    if (__comDeptId != nil) {
      [outProtocol writeFieldBeginWithName: @"comDeptId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __comDeptId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__comDeptName_isset) {
    if (__comDeptName != nil) {
      [outProtocol writeFieldBeginWithName: @"comDeptName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __comDeptName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__comDeptDesc_isset) {
    if (__comDeptDesc != nil) {
      [outProtocol writeFieldBeginWithName: @"comDeptDesc" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __comDeptDesc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__comDeptPic_isset) {
    if (__comDeptPic != nil) {
      [outProtocol writeFieldBeginWithName: @"comDeptPic" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __comDeptPic];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFComDeptDto("];
  [ms appendString: @"comDeptId:"];
  [ms appendFormat: @"\"%@\"", __comDeptId];
  [ms appendString: @",comDeptName:"];
  [ms appendFormat: @"\"%@\"", __comDeptName];
  [ms appendString: @",comDeptDesc:"];
  [ms appendFormat: @"\"%@\"", __comDeptDesc];
  [ms appendString: @",comDeptPic:"];
  [ms appendFormat: @"\"%@\"", __comDeptPic];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFSpecialtyDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSpecialtyId: (NSString *) specialtyId name: (NSString *) name
{
  self = [super init];
  __specialtyId = [specialtyId retain_stub];
  __specialtyId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"specialtyId"])
  {
    __specialtyId = [[decoder decodeObjectForKey: @"specialtyId"] retain_stub];
    __specialtyId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__specialtyId_isset)
  {
    [encoder encodeObject: __specialtyId forKey: @"specialtyId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __specialtyId_isset ? 2654435761 : 0;
  if (__specialtyId_isset)
  {
    hash = (hash * 31) ^ [__specialtyId hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFSpecialtyDto class]]) {
    return NO;
  }
  NXTFSpecialtyDto *other = (NXTFSpecialtyDto *)anObject;
  if ((__specialtyId_isset != other->__specialtyId_isset) ||
      (__specialtyId_isset && ((__specialtyId || other->__specialtyId) && ![__specialtyId isEqual:other->__specialtyId]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__specialtyId release_stub];
  [__name release_stub];
  [super dealloc_stub];
}

- (NSString *) specialtyId {
  return [[__specialtyId retain_stub] autorelease_stub];
}

- (void) setSpecialtyId: (NSString *) specialtyId {
  [specialtyId retain_stub];
  [__specialtyId release_stub];
  __specialtyId = specialtyId;
  __specialtyId_isset = YES;
}

- (BOOL) specialtyIdIsSet {
  return __specialtyId_isset;
}

- (void) unsetSpecialtyId {
  [__specialtyId release_stub];
  __specialtyId = nil;
  __specialtyId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSpecialtyId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SpecialtyDto"];
  if (__specialtyId_isset) {
    if (__specialtyId != nil) {
      [outProtocol writeFieldBeginWithName: @"specialtyId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __specialtyId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFSpecialtyDto("];
  [ms appendString: @"specialtyId:"];
  [ms appendFormat: @"\"%@\"", __specialtyId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFReportDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPatientId: (NSString *) patientId patient: (NSString *) patient status: (NSString *) status reportName: (NSString *) reportName department: (NSString *) department date: (NSString *) date reportId: (NSString *) reportId reportType: (NSString *) reportType sampleTime: (NSString *) sampleTime checkTime: (NSString *) checkTime checkDrName: (NSString *) checkDrName confirmTime: (NSString *) confirmTime confirmDrName: (NSString *) confirmDrName diag: (NSString *) diag desc: (NSString *) desc summary: (NSString *) summary equipment: (NSString *) equipment checkPoint: (NSString *) checkPoint lisItems: (NSMutableArray *) lisItems pacsImg: (NSString *) pacsImg
{
  self = [super init];
  __patientId = [patientId retain_stub];
  __patientId_isset = YES;
  __patient = [patient retain_stub];
  __patient_isset = YES;
  __status = [status retain_stub];
  __status_isset = YES;
  __reportName = [reportName retain_stub];
  __reportName_isset = YES;
  __department = [department retain_stub];
  __department_isset = YES;
  __date = [date retain_stub];
  __date_isset = YES;
  __reportId = [reportId retain_stub];
  __reportId_isset = YES;
  __reportType = [reportType retain_stub];
  __reportType_isset = YES;
  __sampleTime = [sampleTime retain_stub];
  __sampleTime_isset = YES;
  __checkTime = [checkTime retain_stub];
  __checkTime_isset = YES;
  __checkDrName = [checkDrName retain_stub];
  __checkDrName_isset = YES;
  __confirmTime = [confirmTime retain_stub];
  __confirmTime_isset = YES;
  __confirmDrName = [confirmDrName retain_stub];
  __confirmDrName_isset = YES;
  __diag = [diag retain_stub];
  __diag_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __summary = [summary retain_stub];
  __summary_isset = YES;
  __equipment = [equipment retain_stub];
  __equipment_isset = YES;
  __checkPoint = [checkPoint retain_stub];
  __checkPoint_isset = YES;
  __lisItems = [lisItems retain_stub];
  __lisItems_isset = YES;
  __pacsImg = [pacsImg retain_stub];
  __pacsImg_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [[decoder decodeObjectForKey: @"patientId"] retain_stub];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patient"])
  {
    __patient = [[decoder decodeObjectForKey: @"patient"] retain_stub];
    __patient_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [[decoder decodeObjectForKey: @"status"] retain_stub];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"reportName"])
  {
    __reportName = [[decoder decodeObjectForKey: @"reportName"] retain_stub];
    __reportName_isset = YES;
  }
  if ([decoder containsValueForKey: @"department"])
  {
    __department = [[decoder decodeObjectForKey: @"department"] retain_stub];
    __department_isset = YES;
  }
  if ([decoder containsValueForKey: @"date"])
  {
    __date = [[decoder decodeObjectForKey: @"date"] retain_stub];
    __date_isset = YES;
  }
  if ([decoder containsValueForKey: @"reportId"])
  {
    __reportId = [[decoder decodeObjectForKey: @"reportId"] retain_stub];
    __reportId_isset = YES;
  }
  if ([decoder containsValueForKey: @"reportType"])
  {
    __reportType = [[decoder decodeObjectForKey: @"reportType"] retain_stub];
    __reportType_isset = YES;
  }
  if ([decoder containsValueForKey: @"sampleTime"])
  {
    __sampleTime = [[decoder decodeObjectForKey: @"sampleTime"] retain_stub];
    __sampleTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"checkTime"])
  {
    __checkTime = [[decoder decodeObjectForKey: @"checkTime"] retain_stub];
    __checkTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"checkDrName"])
  {
    __checkDrName = [[decoder decodeObjectForKey: @"checkDrName"] retain_stub];
    __checkDrName_isset = YES;
  }
  if ([decoder containsValueForKey: @"confirmTime"])
  {
    __confirmTime = [[decoder decodeObjectForKey: @"confirmTime"] retain_stub];
    __confirmTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"confirmDrName"])
  {
    __confirmDrName = [[decoder decodeObjectForKey: @"confirmDrName"] retain_stub];
    __confirmDrName_isset = YES;
  }
  if ([decoder containsValueForKey: @"diag"])
  {
    __diag = [[decoder decodeObjectForKey: @"diag"] retain_stub];
    __diag_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"summary"])
  {
    __summary = [[decoder decodeObjectForKey: @"summary"] retain_stub];
    __summary_isset = YES;
  }
  if ([decoder containsValueForKey: @"equipment"])
  {
    __equipment = [[decoder decodeObjectForKey: @"equipment"] retain_stub];
    __equipment_isset = YES;
  }
  if ([decoder containsValueForKey: @"checkPoint"])
  {
    __checkPoint = [[decoder decodeObjectForKey: @"checkPoint"] retain_stub];
    __checkPoint_isset = YES;
  }
  if ([decoder containsValueForKey: @"lisItems"])
  {
    __lisItems = [[decoder decodeObjectForKey: @"lisItems"] retain_stub];
    __lisItems_isset = YES;
  }
  if ([decoder containsValueForKey: @"pacsImg"])
  {
    __pacsImg = [[decoder decodeObjectForKey: @"pacsImg"] retain_stub];
    __pacsImg_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__patientId_isset)
  {
    [encoder encodeObject: __patientId forKey: @"patientId"];
  }
  if (__patient_isset)
  {
    [encoder encodeObject: __patient forKey: @"patient"];
  }
  if (__status_isset)
  {
    [encoder encodeObject: __status forKey: @"status"];
  }
  if (__reportName_isset)
  {
    [encoder encodeObject: __reportName forKey: @"reportName"];
  }
  if (__department_isset)
  {
    [encoder encodeObject: __department forKey: @"department"];
  }
  if (__date_isset)
  {
    [encoder encodeObject: __date forKey: @"date"];
  }
  if (__reportId_isset)
  {
    [encoder encodeObject: __reportId forKey: @"reportId"];
  }
  if (__reportType_isset)
  {
    [encoder encodeObject: __reportType forKey: @"reportType"];
  }
  if (__sampleTime_isset)
  {
    [encoder encodeObject: __sampleTime forKey: @"sampleTime"];
  }
  if (__checkTime_isset)
  {
    [encoder encodeObject: __checkTime forKey: @"checkTime"];
  }
  if (__checkDrName_isset)
  {
    [encoder encodeObject: __checkDrName forKey: @"checkDrName"];
  }
  if (__confirmTime_isset)
  {
    [encoder encodeObject: __confirmTime forKey: @"confirmTime"];
  }
  if (__confirmDrName_isset)
  {
    [encoder encodeObject: __confirmDrName forKey: @"confirmDrName"];
  }
  if (__diag_isset)
  {
    [encoder encodeObject: __diag forKey: @"diag"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__summary_isset)
  {
    [encoder encodeObject: __summary forKey: @"summary"];
  }
  if (__equipment_isset)
  {
    [encoder encodeObject: __equipment forKey: @"equipment"];
  }
  if (__checkPoint_isset)
  {
    [encoder encodeObject: __checkPoint forKey: @"checkPoint"];
  }
  if (__lisItems_isset)
  {
    [encoder encodeObject: __lisItems forKey: @"lisItems"];
  }
  if (__pacsImg_isset)
  {
    [encoder encodeObject: __pacsImg forKey: @"pacsImg"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [__patientId hash];
  }
  hash = (hash * 31) ^ __patient_isset ? 2654435761 : 0;
  if (__patient_isset)
  {
    hash = (hash * 31) ^ [__patient hash];
  }
  hash = (hash * 31) ^ __status_isset ? 2654435761 : 0;
  if (__status_isset)
  {
    hash = (hash * 31) ^ [__status hash];
  }
  hash = (hash * 31) ^ __reportName_isset ? 2654435761 : 0;
  if (__reportName_isset)
  {
    hash = (hash * 31) ^ [__reportName hash];
  }
  hash = (hash * 31) ^ __department_isset ? 2654435761 : 0;
  if (__department_isset)
  {
    hash = (hash * 31) ^ [__department hash];
  }
  hash = (hash * 31) ^ __date_isset ? 2654435761 : 0;
  if (__date_isset)
  {
    hash = (hash * 31) ^ [__date hash];
  }
  hash = (hash * 31) ^ __reportId_isset ? 2654435761 : 0;
  if (__reportId_isset)
  {
    hash = (hash * 31) ^ [__reportId hash];
  }
  hash = (hash * 31) ^ __reportType_isset ? 2654435761 : 0;
  if (__reportType_isset)
  {
    hash = (hash * 31) ^ [__reportType hash];
  }
  hash = (hash * 31) ^ __sampleTime_isset ? 2654435761 : 0;
  if (__sampleTime_isset)
  {
    hash = (hash * 31) ^ [__sampleTime hash];
  }
  hash = (hash * 31) ^ __checkTime_isset ? 2654435761 : 0;
  if (__checkTime_isset)
  {
    hash = (hash * 31) ^ [__checkTime hash];
  }
  hash = (hash * 31) ^ __checkDrName_isset ? 2654435761 : 0;
  if (__checkDrName_isset)
  {
    hash = (hash * 31) ^ [__checkDrName hash];
  }
  hash = (hash * 31) ^ __confirmTime_isset ? 2654435761 : 0;
  if (__confirmTime_isset)
  {
    hash = (hash * 31) ^ [__confirmTime hash];
  }
  hash = (hash * 31) ^ __confirmDrName_isset ? 2654435761 : 0;
  if (__confirmDrName_isset)
  {
    hash = (hash * 31) ^ [__confirmDrName hash];
  }
  hash = (hash * 31) ^ __diag_isset ? 2654435761 : 0;
  if (__diag_isset)
  {
    hash = (hash * 31) ^ [__diag hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __summary_isset ? 2654435761 : 0;
  if (__summary_isset)
  {
    hash = (hash * 31) ^ [__summary hash];
  }
  hash = (hash * 31) ^ __equipment_isset ? 2654435761 : 0;
  if (__equipment_isset)
  {
    hash = (hash * 31) ^ [__equipment hash];
  }
  hash = (hash * 31) ^ __checkPoint_isset ? 2654435761 : 0;
  if (__checkPoint_isset)
  {
    hash = (hash * 31) ^ [__checkPoint hash];
  }
  hash = (hash * 31) ^ __lisItems_isset ? 2654435761 : 0;
  if (__lisItems_isset)
  {
    hash = (hash * 31) ^ [__lisItems hash];
  }
  hash = (hash * 31) ^ __pacsImg_isset ? 2654435761 : 0;
  if (__pacsImg_isset)
  {
    hash = (hash * 31) ^ [__pacsImg hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFReportDto class]]) {
    return NO;
  }
  NXTFReportDto *other = (NXTFReportDto *)anObject;
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && ((__patientId || other->__patientId) && ![__patientId isEqual:other->__patientId]))) {
    return NO;
  }
  if ((__patient_isset != other->__patient_isset) ||
      (__patient_isset && ((__patient || other->__patient) && ![__patient isEqual:other->__patient]))) {
    return NO;
  }
  if ((__status_isset != other->__status_isset) ||
      (__status_isset && ((__status || other->__status) && ![__status isEqual:other->__status]))) {
    return NO;
  }
  if ((__reportName_isset != other->__reportName_isset) ||
      (__reportName_isset && ((__reportName || other->__reportName) && ![__reportName isEqual:other->__reportName]))) {
    return NO;
  }
  if ((__department_isset != other->__department_isset) ||
      (__department_isset && ((__department || other->__department) && ![__department isEqual:other->__department]))) {
    return NO;
  }
  if ((__date_isset != other->__date_isset) ||
      (__date_isset && ((__date || other->__date) && ![__date isEqual:other->__date]))) {
    return NO;
  }
  if ((__reportId_isset != other->__reportId_isset) ||
      (__reportId_isset && ((__reportId || other->__reportId) && ![__reportId isEqual:other->__reportId]))) {
    return NO;
  }
  if ((__reportType_isset != other->__reportType_isset) ||
      (__reportType_isset && ((__reportType || other->__reportType) && ![__reportType isEqual:other->__reportType]))) {
    return NO;
  }
  if ((__sampleTime_isset != other->__sampleTime_isset) ||
      (__sampleTime_isset && ((__sampleTime || other->__sampleTime) && ![__sampleTime isEqual:other->__sampleTime]))) {
    return NO;
  }
  if ((__checkTime_isset != other->__checkTime_isset) ||
      (__checkTime_isset && ((__checkTime || other->__checkTime) && ![__checkTime isEqual:other->__checkTime]))) {
    return NO;
  }
  if ((__checkDrName_isset != other->__checkDrName_isset) ||
      (__checkDrName_isset && ((__checkDrName || other->__checkDrName) && ![__checkDrName isEqual:other->__checkDrName]))) {
    return NO;
  }
  if ((__confirmTime_isset != other->__confirmTime_isset) ||
      (__confirmTime_isset && ((__confirmTime || other->__confirmTime) && ![__confirmTime isEqual:other->__confirmTime]))) {
    return NO;
  }
  if ((__confirmDrName_isset != other->__confirmDrName_isset) ||
      (__confirmDrName_isset && ((__confirmDrName || other->__confirmDrName) && ![__confirmDrName isEqual:other->__confirmDrName]))) {
    return NO;
  }
  if ((__diag_isset != other->__diag_isset) ||
      (__diag_isset && ((__diag || other->__diag) && ![__diag isEqual:other->__diag]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__summary_isset != other->__summary_isset) ||
      (__summary_isset && ((__summary || other->__summary) && ![__summary isEqual:other->__summary]))) {
    return NO;
  }
  if ((__equipment_isset != other->__equipment_isset) ||
      (__equipment_isset && ((__equipment || other->__equipment) && ![__equipment isEqual:other->__equipment]))) {
    return NO;
  }
  if ((__checkPoint_isset != other->__checkPoint_isset) ||
      (__checkPoint_isset && ((__checkPoint || other->__checkPoint) && ![__checkPoint isEqual:other->__checkPoint]))) {
    return NO;
  }
  if ((__lisItems_isset != other->__lisItems_isset) ||
      (__lisItems_isset && ((__lisItems || other->__lisItems) && ![__lisItems isEqual:other->__lisItems]))) {
    return NO;
  }
  if ((__pacsImg_isset != other->__pacsImg_isset) ||
      (__pacsImg_isset && ((__pacsImg || other->__pacsImg) && ![__pacsImg isEqual:other->__pacsImg]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__patientId release_stub];
  [__patient release_stub];
  [__status release_stub];
  [__reportName release_stub];
  [__department release_stub];
  [__date release_stub];
  [__reportId release_stub];
  [__reportType release_stub];
  [__sampleTime release_stub];
  [__checkTime release_stub];
  [__checkDrName release_stub];
  [__confirmTime release_stub];
  [__confirmDrName release_stub];
  [__diag release_stub];
  [__desc release_stub];
  [__summary release_stub];
  [__equipment release_stub];
  [__checkPoint release_stub];
  [__lisItems release_stub];
  [__pacsImg release_stub];
  [super dealloc_stub];
}

- (NSString *) patientId {
  return [[__patientId retain_stub] autorelease_stub];
}

- (void) setPatientId: (NSString *) patientId {
  [patientId retain_stub];
  [__patientId release_stub];
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  [__patientId release_stub];
  __patientId = nil;
  __patientId_isset = NO;
}

- (NSString *) patient {
  return [[__patient retain_stub] autorelease_stub];
}

- (void) setPatient: (NSString *) patient {
  [patient retain_stub];
  [__patient release_stub];
  __patient = patient;
  __patient_isset = YES;
}

- (BOOL) patientIsSet {
  return __patient_isset;
}

- (void) unsetPatient {
  [__patient release_stub];
  __patient = nil;
  __patient_isset = NO;
}

- (NSString *) status {
  return [[__status retain_stub] autorelease_stub];
}

- (void) setStatus: (NSString *) status {
  [status retain_stub];
  [__status release_stub];
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  [__status release_stub];
  __status = nil;
  __status_isset = NO;
}

- (NSString *) reportName {
  return [[__reportName retain_stub] autorelease_stub];
}

- (void) setReportName: (NSString *) reportName {
  [reportName retain_stub];
  [__reportName release_stub];
  __reportName = reportName;
  __reportName_isset = YES;
}

- (BOOL) reportNameIsSet {
  return __reportName_isset;
}

- (void) unsetReportName {
  [__reportName release_stub];
  __reportName = nil;
  __reportName_isset = NO;
}

- (NSString *) department {
  return [[__department retain_stub] autorelease_stub];
}

- (void) setDepartment: (NSString *) department {
  [department retain_stub];
  [__department release_stub];
  __department = department;
  __department_isset = YES;
}

- (BOOL) departmentIsSet {
  return __department_isset;
}

- (void) unsetDepartment {
  [__department release_stub];
  __department = nil;
  __department_isset = NO;
}

- (NSString *) date {
  return [[__date retain_stub] autorelease_stub];
}

- (void) setDate: (NSString *) date {
  [date retain_stub];
  [__date release_stub];
  __date = date;
  __date_isset = YES;
}

- (BOOL) dateIsSet {
  return __date_isset;
}

- (void) unsetDate {
  [__date release_stub];
  __date = nil;
  __date_isset = NO;
}

- (NSString *) reportId {
  return [[__reportId retain_stub] autorelease_stub];
}

- (void) setReportId: (NSString *) reportId {
  [reportId retain_stub];
  [__reportId release_stub];
  __reportId = reportId;
  __reportId_isset = YES;
}

- (BOOL) reportIdIsSet {
  return __reportId_isset;
}

- (void) unsetReportId {
  [__reportId release_stub];
  __reportId = nil;
  __reportId_isset = NO;
}

- (NSString *) reportType {
  return [[__reportType retain_stub] autorelease_stub];
}

- (void) setReportType: (NSString *) reportType {
  [reportType retain_stub];
  [__reportType release_stub];
  __reportType = reportType;
  __reportType_isset = YES;
}

- (BOOL) reportTypeIsSet {
  return __reportType_isset;
}

- (void) unsetReportType {
  [__reportType release_stub];
  __reportType = nil;
  __reportType_isset = NO;
}

- (NSString *) sampleTime {
  return [[__sampleTime retain_stub] autorelease_stub];
}

- (void) setSampleTime: (NSString *) sampleTime {
  [sampleTime retain_stub];
  [__sampleTime release_stub];
  __sampleTime = sampleTime;
  __sampleTime_isset = YES;
}

- (BOOL) sampleTimeIsSet {
  return __sampleTime_isset;
}

- (void) unsetSampleTime {
  [__sampleTime release_stub];
  __sampleTime = nil;
  __sampleTime_isset = NO;
}

- (NSString *) checkTime {
  return [[__checkTime retain_stub] autorelease_stub];
}

- (void) setCheckTime: (NSString *) checkTime {
  [checkTime retain_stub];
  [__checkTime release_stub];
  __checkTime = checkTime;
  __checkTime_isset = YES;
}

- (BOOL) checkTimeIsSet {
  return __checkTime_isset;
}

- (void) unsetCheckTime {
  [__checkTime release_stub];
  __checkTime = nil;
  __checkTime_isset = NO;
}

- (NSString *) checkDrName {
  return [[__checkDrName retain_stub] autorelease_stub];
}

- (void) setCheckDrName: (NSString *) checkDrName {
  [checkDrName retain_stub];
  [__checkDrName release_stub];
  __checkDrName = checkDrName;
  __checkDrName_isset = YES;
}

- (BOOL) checkDrNameIsSet {
  return __checkDrName_isset;
}

- (void) unsetCheckDrName {
  [__checkDrName release_stub];
  __checkDrName = nil;
  __checkDrName_isset = NO;
}

- (NSString *) confirmTime {
  return [[__confirmTime retain_stub] autorelease_stub];
}

- (void) setConfirmTime: (NSString *) confirmTime {
  [confirmTime retain_stub];
  [__confirmTime release_stub];
  __confirmTime = confirmTime;
  __confirmTime_isset = YES;
}

- (BOOL) confirmTimeIsSet {
  return __confirmTime_isset;
}

- (void) unsetConfirmTime {
  [__confirmTime release_stub];
  __confirmTime = nil;
  __confirmTime_isset = NO;
}

- (NSString *) confirmDrName {
  return [[__confirmDrName retain_stub] autorelease_stub];
}

- (void) setConfirmDrName: (NSString *) confirmDrName {
  [confirmDrName retain_stub];
  [__confirmDrName release_stub];
  __confirmDrName = confirmDrName;
  __confirmDrName_isset = YES;
}

- (BOOL) confirmDrNameIsSet {
  return __confirmDrName_isset;
}

- (void) unsetConfirmDrName {
  [__confirmDrName release_stub];
  __confirmDrName = nil;
  __confirmDrName_isset = NO;
}

- (NSString *) diag {
  return [[__diag retain_stub] autorelease_stub];
}

- (void) setDiag: (NSString *) diag {
  [diag retain_stub];
  [__diag release_stub];
  __diag = diag;
  __diag_isset = YES;
}

- (BOOL) diagIsSet {
  return __diag_isset;
}

- (void) unsetDiag {
  [__diag release_stub];
  __diag = nil;
  __diag_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) summary {
  return [[__summary retain_stub] autorelease_stub];
}

- (void) setSummary: (NSString *) summary {
  [summary retain_stub];
  [__summary release_stub];
  __summary = summary;
  __summary_isset = YES;
}

- (BOOL) summaryIsSet {
  return __summary_isset;
}

- (void) unsetSummary {
  [__summary release_stub];
  __summary = nil;
  __summary_isset = NO;
}

- (NSString *) equipment {
  return [[__equipment retain_stub] autorelease_stub];
}

- (void) setEquipment: (NSString *) equipment {
  [equipment retain_stub];
  [__equipment release_stub];
  __equipment = equipment;
  __equipment_isset = YES;
}

- (BOOL) equipmentIsSet {
  return __equipment_isset;
}

- (void) unsetEquipment {
  [__equipment release_stub];
  __equipment = nil;
  __equipment_isset = NO;
}

- (NSString *) checkPoint {
  return [[__checkPoint retain_stub] autorelease_stub];
}

- (void) setCheckPoint: (NSString *) checkPoint {
  [checkPoint retain_stub];
  [__checkPoint release_stub];
  __checkPoint = checkPoint;
  __checkPoint_isset = YES;
}

- (BOOL) checkPointIsSet {
  return __checkPoint_isset;
}

- (void) unsetCheckPoint {
  [__checkPoint release_stub];
  __checkPoint = nil;
  __checkPoint_isset = NO;
}

- (NSMutableArray *) lisItems {
  return [[__lisItems retain_stub] autorelease_stub];
}

- (void) setLisItems: (NSMutableArray *) lisItems {
  [lisItems retain_stub];
  [__lisItems release_stub];
  __lisItems = lisItems;
  __lisItems_isset = YES;
}

- (BOOL) lisItemsIsSet {
  return __lisItems_isset;
}

- (void) unsetLisItems {
  [__lisItems release_stub];
  __lisItems = nil;
  __lisItems_isset = NO;
}

- (NSString *) pacsImg {
  return [[__pacsImg retain_stub] autorelease_stub];
}

- (void) setPacsImg: (NSString *) pacsImg {
  [pacsImg retain_stub];
  [__pacsImg release_stub];
  __pacsImg = pacsImg;
  __pacsImg_isset = YES;
}

- (BOOL) pacsImgIsSet {
  return __pacsImg_isset;
}

- (void) unsetPacsImg {
  [__pacsImg release_stub];
  __pacsImg = nil;
  __pacsImg_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatient: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReportName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDepartment: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReportId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReportType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSampleTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCheckTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCheckDrName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConfirmTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConfirmDrName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDiag: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSummary: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEquipment: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCheckPoint: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_LIST) {
          int _size55;
          [inProtocol readListBeginReturningElementType: NULL size: &_size55];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size55];
          int _i56;
          for (_i56 = 0; _i56 < _size55; ++_i56)
          {
            NXTFLisItemDto *_elem57 = [[NXTFLisItemDto alloc] init];
            [_elem57 read: inProtocol];
            [fieldValue addObject: _elem57];
            [_elem57 release_stub];
          }
          [inProtocol readListEnd];
          [self setLisItems: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPacsImg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReportDto"];
  if (__patientId_isset) {
    if (__patientId != nil) {
      [outProtocol writeFieldBeginWithName: @"patientId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __patientId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patient_isset) {
    if (__patient != nil) {
      [outProtocol writeFieldBeginWithName: @"patient" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __patient];
      [outProtocol writeFieldEnd];
    }
  }
  if (__status_isset) {
    if (__status != nil) {
      [outProtocol writeFieldBeginWithName: @"status" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __status];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reportName_isset) {
    if (__reportName != nil) {
      [outProtocol writeFieldBeginWithName: @"reportName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __reportName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__department_isset) {
    if (__department != nil) {
      [outProtocol writeFieldBeginWithName: @"department" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __department];
      [outProtocol writeFieldEnd];
    }
  }
  if (__date_isset) {
    if (__date != nil) {
      [outProtocol writeFieldBeginWithName: @"date" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __date];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reportId_isset) {
    if (__reportId != nil) {
      [outProtocol writeFieldBeginWithName: @"reportId" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __reportId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reportType_isset) {
    if (__reportType != nil) {
      [outProtocol writeFieldBeginWithName: @"reportType" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __reportType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sampleTime_isset) {
    if (__sampleTime != nil) {
      [outProtocol writeFieldBeginWithName: @"sampleTime" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __sampleTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__checkTime_isset) {
    if (__checkTime != nil) {
      [outProtocol writeFieldBeginWithName: @"checkTime" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __checkTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__checkDrName_isset) {
    if (__checkDrName != nil) {
      [outProtocol writeFieldBeginWithName: @"checkDrName" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __checkDrName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__confirmTime_isset) {
    if (__confirmTime != nil) {
      [outProtocol writeFieldBeginWithName: @"confirmTime" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __confirmTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__confirmDrName_isset) {
    if (__confirmDrName != nil) {
      [outProtocol writeFieldBeginWithName: @"confirmDrName" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __confirmDrName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diag_isset) {
    if (__diag != nil) {
      [outProtocol writeFieldBeginWithName: @"diag" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __diag];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__summary_isset) {
    if (__summary != nil) {
      [outProtocol writeFieldBeginWithName: @"summary" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __summary];
      [outProtocol writeFieldEnd];
    }
  }
  if (__equipment_isset) {
    if (__equipment != nil) {
      [outProtocol writeFieldBeginWithName: @"equipment" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __equipment];
      [outProtocol writeFieldEnd];
    }
  }
  if (__checkPoint_isset) {
    if (__checkPoint != nil) {
      [outProtocol writeFieldBeginWithName: @"checkPoint" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __checkPoint];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lisItems_isset) {
    if (__lisItems != nil) {
      [outProtocol writeFieldBeginWithName: @"lisItems" type: TType_LIST fieldID: 19];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__lisItems count]];
        int idx59;
        for (idx59 = 0; idx59 < [__lisItems count]; idx59++)
        {
          [[__lisItems objectAtIndex: idx59] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__pacsImg_isset) {
    if (__pacsImg != nil) {
      [outProtocol writeFieldBeginWithName: @"pacsImg" type: TType_STRING fieldID: 20];
      [outProtocol writeString: __pacsImg];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFReportDto("];
  [ms appendString: @"patientId:"];
  [ms appendFormat: @"\"%@\"", __patientId];
  [ms appendString: @",patient:"];
  [ms appendFormat: @"\"%@\"", __patient];
  [ms appendString: @",status:"];
  [ms appendFormat: @"\"%@\"", __status];
  [ms appendString: @",reportName:"];
  [ms appendFormat: @"\"%@\"", __reportName];
  [ms appendString: @",department:"];
  [ms appendFormat: @"\"%@\"", __department];
  [ms appendString: @",date:"];
  [ms appendFormat: @"\"%@\"", __date];
  [ms appendString: @",reportId:"];
  [ms appendFormat: @"\"%@\"", __reportId];
  [ms appendString: @",reportType:"];
  [ms appendFormat: @"\"%@\"", __reportType];
  [ms appendString: @",sampleTime:"];
  [ms appendFormat: @"\"%@\"", __sampleTime];
  [ms appendString: @",checkTime:"];
  [ms appendFormat: @"\"%@\"", __checkTime];
  [ms appendString: @",checkDrName:"];
  [ms appendFormat: @"\"%@\"", __checkDrName];
  [ms appendString: @",confirmTime:"];
  [ms appendFormat: @"\"%@\"", __confirmTime];
  [ms appendString: @",confirmDrName:"];
  [ms appendFormat: @"\"%@\"", __confirmDrName];
  [ms appendString: @",diag:"];
  [ms appendFormat: @"\"%@\"", __diag];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",summary:"];
  [ms appendFormat: @"\"%@\"", __summary];
  [ms appendString: @",equipment:"];
  [ms appendFormat: @"\"%@\"", __equipment];
  [ms appendString: @",checkPoint:"];
  [ms appendFormat: @"\"%@\"", __checkPoint];
  [ms appendString: @",lisItems:"];
  [ms appendFormat: @"%@", __lisItems];
  [ms appendString: @",pacsImg:"];
  [ms appendFormat: @"\"%@\"", __pacsImg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFindDoctorOutput

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDocId: (NSString *) docId docName: (NSString *) docName hospId: (NSString *) hospId hospName: (NSString *) hospName hospType: (NSString *) hospType hospLevel: (NSString *) hospLevel deptName: (NSString *) deptName levelName: (NSString *) levelName remark: (NSString *) remark headImg: (NSString *) headImg desc: (NSString *) desc flowers: (NSString *) flowers totalVisits: (NSString *) totalVisits isExpert: (NSString *) isExpert isRegisted: (NSString *) isRegisted evaluation: (NSString *) evaluation isConsulted: (NSString *) isConsulted hospAbbrName: (NSString *) hospAbbrName diamonds: (NSString *) diamonds titleStatus: (NSString *) titleStatus qualStatus: (NSString *) qualStatus gender: (NSString *) gender consPrice: (NSString *) consPrice isReviewPic: (NSString *) isReviewPic revPrice: (NSString *) revPrice isVideoCons: (NSString *) isVideoCons videoPrice: (NSString *) videoPrice consVisits: (int64_t) consVisits rmngNum: (int32_t) rmngNum
{
  self = [super init];
  __docId = [docId retain_stub];
  __docId_isset = YES;
  __docName = [docName retain_stub];
  __docName_isset = YES;
  __hospId = [hospId retain_stub];
  __hospId_isset = YES;
  __hospName = [hospName retain_stub];
  __hospName_isset = YES;
  __hospType = [hospType retain_stub];
  __hospType_isset = YES;
  __hospLevel = [hospLevel retain_stub];
  __hospLevel_isset = YES;
  __deptName = [deptName retain_stub];
  __deptName_isset = YES;
  __levelName = [levelName retain_stub];
  __levelName_isset = YES;
  __remark = [remark retain_stub];
  __remark_isset = YES;
  __headImg = [headImg retain_stub];
  __headImg_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __flowers = [flowers retain_stub];
  __flowers_isset = YES;
  __totalVisits = [totalVisits retain_stub];
  __totalVisits_isset = YES;
  __isExpert = [isExpert retain_stub];
  __isExpert_isset = YES;
  __isRegisted = [isRegisted retain_stub];
  __isRegisted_isset = YES;
  __evaluation = [evaluation retain_stub];
  __evaluation_isset = YES;
  __isConsulted = [isConsulted retain_stub];
  __isConsulted_isset = YES;
  __hospAbbrName = [hospAbbrName retain_stub];
  __hospAbbrName_isset = YES;
  __diamonds = [diamonds retain_stub];
  __diamonds_isset = YES;
  __titleStatus = [titleStatus retain_stub];
  __titleStatus_isset = YES;
  __qualStatus = [qualStatus retain_stub];
  __qualStatus_isset = YES;
  __gender = [gender retain_stub];
  __gender_isset = YES;
  __consPrice = [consPrice retain_stub];
  __consPrice_isset = YES;
  __isReviewPic = [isReviewPic retain_stub];
  __isReviewPic_isset = YES;
  __revPrice = [revPrice retain_stub];
  __revPrice_isset = YES;
  __isVideoCons = [isVideoCons retain_stub];
  __isVideoCons_isset = YES;
  __videoPrice = [videoPrice retain_stub];
  __videoPrice_isset = YES;
  __consVisits = consVisits;
  __consVisits_isset = YES;
  __rmngNum = rmngNum;
  __rmngNum_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"docId"])
  {
    __docId = [[decoder decodeObjectForKey: @"docId"] retain_stub];
    __docId_isset = YES;
  }
  if ([decoder containsValueForKey: @"docName"])
  {
    __docName = [[decoder decodeObjectForKey: @"docName"] retain_stub];
    __docName_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [[decoder decodeObjectForKey: @"hospId"] retain_stub];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospName"])
  {
    __hospName = [[decoder decodeObjectForKey: @"hospName"] retain_stub];
    __hospName_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospType"])
  {
    __hospType = [[decoder decodeObjectForKey: @"hospType"] retain_stub];
    __hospType_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospLevel"])
  {
    __hospLevel = [[decoder decodeObjectForKey: @"hospLevel"] retain_stub];
    __hospLevel_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptName"])
  {
    __deptName = [[decoder decodeObjectForKey: @"deptName"] retain_stub];
    __deptName_isset = YES;
  }
  if ([decoder containsValueForKey: @"levelName"])
  {
    __levelName = [[decoder decodeObjectForKey: @"levelName"] retain_stub];
    __levelName_isset = YES;
  }
  if ([decoder containsValueForKey: @"remark"])
  {
    __remark = [[decoder decodeObjectForKey: @"remark"] retain_stub];
    __remark_isset = YES;
  }
  if ([decoder containsValueForKey: @"headImg"])
  {
    __headImg = [[decoder decodeObjectForKey: @"headImg"] retain_stub];
    __headImg_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"flowers"])
  {
    __flowers = [[decoder decodeObjectForKey: @"flowers"] retain_stub];
    __flowers_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalVisits"])
  {
    __totalVisits = [[decoder decodeObjectForKey: @"totalVisits"] retain_stub];
    __totalVisits_isset = YES;
  }
  if ([decoder containsValueForKey: @"isExpert"])
  {
    __isExpert = [[decoder decodeObjectForKey: @"isExpert"] retain_stub];
    __isExpert_isset = YES;
  }
  if ([decoder containsValueForKey: @"isRegisted"])
  {
    __isRegisted = [[decoder decodeObjectForKey: @"isRegisted"] retain_stub];
    __isRegisted_isset = YES;
  }
  if ([decoder containsValueForKey: @"evaluation"])
  {
    __evaluation = [[decoder decodeObjectForKey: @"evaluation"] retain_stub];
    __evaluation_isset = YES;
  }
  if ([decoder containsValueForKey: @"isConsulted"])
  {
    __isConsulted = [[decoder decodeObjectForKey: @"isConsulted"] retain_stub];
    __isConsulted_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospAbbrName"])
  {
    __hospAbbrName = [[decoder decodeObjectForKey: @"hospAbbrName"] retain_stub];
    __hospAbbrName_isset = YES;
  }
  if ([decoder containsValueForKey: @"diamonds"])
  {
    __diamonds = [[decoder decodeObjectForKey: @"diamonds"] retain_stub];
    __diamonds_isset = YES;
  }
  if ([decoder containsValueForKey: @"titleStatus"])
  {
    __titleStatus = [[decoder decodeObjectForKey: @"titleStatus"] retain_stub];
    __titleStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"qualStatus"])
  {
    __qualStatus = [[decoder decodeObjectForKey: @"qualStatus"] retain_stub];
    __qualStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [[decoder decodeObjectForKey: @"gender"] retain_stub];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"consPrice"])
  {
    __consPrice = [[decoder decodeObjectForKey: @"consPrice"] retain_stub];
    __consPrice_isset = YES;
  }
  if ([decoder containsValueForKey: @"isReviewPic"])
  {
    __isReviewPic = [[decoder decodeObjectForKey: @"isReviewPic"] retain_stub];
    __isReviewPic_isset = YES;
  }
  if ([decoder containsValueForKey: @"revPrice"])
  {
    __revPrice = [[decoder decodeObjectForKey: @"revPrice"] retain_stub];
    __revPrice_isset = YES;
  }
  if ([decoder containsValueForKey: @"isVideoCons"])
  {
    __isVideoCons = [[decoder decodeObjectForKey: @"isVideoCons"] retain_stub];
    __isVideoCons_isset = YES;
  }
  if ([decoder containsValueForKey: @"videoPrice"])
  {
    __videoPrice = [[decoder decodeObjectForKey: @"videoPrice"] retain_stub];
    __videoPrice_isset = YES;
  }
  if ([decoder containsValueForKey: @"consVisits"])
  {
    __consVisits = [decoder decodeInt64ForKey: @"consVisits"];
    __consVisits_isset = YES;
  }
  if ([decoder containsValueForKey: @"rmngNum"])
  {
    __rmngNum = [decoder decodeInt32ForKey: @"rmngNum"];
    __rmngNum_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__docId_isset)
  {
    [encoder encodeObject: __docId forKey: @"docId"];
  }
  if (__docName_isset)
  {
    [encoder encodeObject: __docName forKey: @"docName"];
  }
  if (__hospId_isset)
  {
    [encoder encodeObject: __hospId forKey: @"hospId"];
  }
  if (__hospName_isset)
  {
    [encoder encodeObject: __hospName forKey: @"hospName"];
  }
  if (__hospType_isset)
  {
    [encoder encodeObject: __hospType forKey: @"hospType"];
  }
  if (__hospLevel_isset)
  {
    [encoder encodeObject: __hospLevel forKey: @"hospLevel"];
  }
  if (__deptName_isset)
  {
    [encoder encodeObject: __deptName forKey: @"deptName"];
  }
  if (__levelName_isset)
  {
    [encoder encodeObject: __levelName forKey: @"levelName"];
  }
  if (__remark_isset)
  {
    [encoder encodeObject: __remark forKey: @"remark"];
  }
  if (__headImg_isset)
  {
    [encoder encodeObject: __headImg forKey: @"headImg"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__flowers_isset)
  {
    [encoder encodeObject: __flowers forKey: @"flowers"];
  }
  if (__totalVisits_isset)
  {
    [encoder encodeObject: __totalVisits forKey: @"totalVisits"];
  }
  if (__isExpert_isset)
  {
    [encoder encodeObject: __isExpert forKey: @"isExpert"];
  }
  if (__isRegisted_isset)
  {
    [encoder encodeObject: __isRegisted forKey: @"isRegisted"];
  }
  if (__evaluation_isset)
  {
    [encoder encodeObject: __evaluation forKey: @"evaluation"];
  }
  if (__isConsulted_isset)
  {
    [encoder encodeObject: __isConsulted forKey: @"isConsulted"];
  }
  if (__hospAbbrName_isset)
  {
    [encoder encodeObject: __hospAbbrName forKey: @"hospAbbrName"];
  }
  if (__diamonds_isset)
  {
    [encoder encodeObject: __diamonds forKey: @"diamonds"];
  }
  if (__titleStatus_isset)
  {
    [encoder encodeObject: __titleStatus forKey: @"titleStatus"];
  }
  if (__qualStatus_isset)
  {
    [encoder encodeObject: __qualStatus forKey: @"qualStatus"];
  }
  if (__gender_isset)
  {
    [encoder encodeObject: __gender forKey: @"gender"];
  }
  if (__consPrice_isset)
  {
    [encoder encodeObject: __consPrice forKey: @"consPrice"];
  }
  if (__isReviewPic_isset)
  {
    [encoder encodeObject: __isReviewPic forKey: @"isReviewPic"];
  }
  if (__revPrice_isset)
  {
    [encoder encodeObject: __revPrice forKey: @"revPrice"];
  }
  if (__isVideoCons_isset)
  {
    [encoder encodeObject: __isVideoCons forKey: @"isVideoCons"];
  }
  if (__videoPrice_isset)
  {
    [encoder encodeObject: __videoPrice forKey: @"videoPrice"];
  }
  if (__consVisits_isset)
  {
    [encoder encodeInt64: __consVisits forKey: @"consVisits"];
  }
  if (__rmngNum_isset)
  {
    [encoder encodeInt32: __rmngNum forKey: @"rmngNum"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __docId_isset ? 2654435761 : 0;
  if (__docId_isset)
  {
    hash = (hash * 31) ^ [__docId hash];
  }
  hash = (hash * 31) ^ __docName_isset ? 2654435761 : 0;
  if (__docName_isset)
  {
    hash = (hash * 31) ^ [__docName hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [__hospId hash];
  }
  hash = (hash * 31) ^ __hospName_isset ? 2654435761 : 0;
  if (__hospName_isset)
  {
    hash = (hash * 31) ^ [__hospName hash];
  }
  hash = (hash * 31) ^ __hospType_isset ? 2654435761 : 0;
  if (__hospType_isset)
  {
    hash = (hash * 31) ^ [__hospType hash];
  }
  hash = (hash * 31) ^ __hospLevel_isset ? 2654435761 : 0;
  if (__hospLevel_isset)
  {
    hash = (hash * 31) ^ [__hospLevel hash];
  }
  hash = (hash * 31) ^ __deptName_isset ? 2654435761 : 0;
  if (__deptName_isset)
  {
    hash = (hash * 31) ^ [__deptName hash];
  }
  hash = (hash * 31) ^ __levelName_isset ? 2654435761 : 0;
  if (__levelName_isset)
  {
    hash = (hash * 31) ^ [__levelName hash];
  }
  hash = (hash * 31) ^ __remark_isset ? 2654435761 : 0;
  if (__remark_isset)
  {
    hash = (hash * 31) ^ [__remark hash];
  }
  hash = (hash * 31) ^ __headImg_isset ? 2654435761 : 0;
  if (__headImg_isset)
  {
    hash = (hash * 31) ^ [__headImg hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __flowers_isset ? 2654435761 : 0;
  if (__flowers_isset)
  {
    hash = (hash * 31) ^ [__flowers hash];
  }
  hash = (hash * 31) ^ __totalVisits_isset ? 2654435761 : 0;
  if (__totalVisits_isset)
  {
    hash = (hash * 31) ^ [__totalVisits hash];
  }
  hash = (hash * 31) ^ __isExpert_isset ? 2654435761 : 0;
  if (__isExpert_isset)
  {
    hash = (hash * 31) ^ [__isExpert hash];
  }
  hash = (hash * 31) ^ __isRegisted_isset ? 2654435761 : 0;
  if (__isRegisted_isset)
  {
    hash = (hash * 31) ^ [__isRegisted hash];
  }
  hash = (hash * 31) ^ __evaluation_isset ? 2654435761 : 0;
  if (__evaluation_isset)
  {
    hash = (hash * 31) ^ [__evaluation hash];
  }
  hash = (hash * 31) ^ __isConsulted_isset ? 2654435761 : 0;
  if (__isConsulted_isset)
  {
    hash = (hash * 31) ^ [__isConsulted hash];
  }
  hash = (hash * 31) ^ __hospAbbrName_isset ? 2654435761 : 0;
  if (__hospAbbrName_isset)
  {
    hash = (hash * 31) ^ [__hospAbbrName hash];
  }
  hash = (hash * 31) ^ __diamonds_isset ? 2654435761 : 0;
  if (__diamonds_isset)
  {
    hash = (hash * 31) ^ [__diamonds hash];
  }
  hash = (hash * 31) ^ __titleStatus_isset ? 2654435761 : 0;
  if (__titleStatus_isset)
  {
    hash = (hash * 31) ^ [__titleStatus hash];
  }
  hash = (hash * 31) ^ __qualStatus_isset ? 2654435761 : 0;
  if (__qualStatus_isset)
  {
    hash = (hash * 31) ^ [__qualStatus hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [__gender hash];
  }
  hash = (hash * 31) ^ __consPrice_isset ? 2654435761 : 0;
  if (__consPrice_isset)
  {
    hash = (hash * 31) ^ [__consPrice hash];
  }
  hash = (hash * 31) ^ __isReviewPic_isset ? 2654435761 : 0;
  if (__isReviewPic_isset)
  {
    hash = (hash * 31) ^ [__isReviewPic hash];
  }
  hash = (hash * 31) ^ __revPrice_isset ? 2654435761 : 0;
  if (__revPrice_isset)
  {
    hash = (hash * 31) ^ [__revPrice hash];
  }
  hash = (hash * 31) ^ __isVideoCons_isset ? 2654435761 : 0;
  if (__isVideoCons_isset)
  {
    hash = (hash * 31) ^ [__isVideoCons hash];
  }
  hash = (hash * 31) ^ __videoPrice_isset ? 2654435761 : 0;
  if (__videoPrice_isset)
  {
    hash = (hash * 31) ^ [__videoPrice hash];
  }
  hash = (hash * 31) ^ __consVisits_isset ? 2654435761 : 0;
  if (__consVisits_isset)
  {
    hash = (hash * 31) ^ [@(__consVisits) hash];
  }
  hash = (hash * 31) ^ __rmngNum_isset ? 2654435761 : 0;
  if (__rmngNum_isset)
  {
    hash = (hash * 31) ^ [@(__rmngNum) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFindDoctorOutput class]]) {
    return NO;
  }
  NXTFFindDoctorOutput *other = (NXTFFindDoctorOutput *)anObject;
  if ((__docId_isset != other->__docId_isset) ||
      (__docId_isset && ((__docId || other->__docId) && ![__docId isEqual:other->__docId]))) {
    return NO;
  }
  if ((__docName_isset != other->__docName_isset) ||
      (__docName_isset && ((__docName || other->__docName) && ![__docName isEqual:other->__docName]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && ((__hospId || other->__hospId) && ![__hospId isEqual:other->__hospId]))) {
    return NO;
  }
  if ((__hospName_isset != other->__hospName_isset) ||
      (__hospName_isset && ((__hospName || other->__hospName) && ![__hospName isEqual:other->__hospName]))) {
    return NO;
  }
  if ((__hospType_isset != other->__hospType_isset) ||
      (__hospType_isset && ((__hospType || other->__hospType) && ![__hospType isEqual:other->__hospType]))) {
    return NO;
  }
  if ((__hospLevel_isset != other->__hospLevel_isset) ||
      (__hospLevel_isset && ((__hospLevel || other->__hospLevel) && ![__hospLevel isEqual:other->__hospLevel]))) {
    return NO;
  }
  if ((__deptName_isset != other->__deptName_isset) ||
      (__deptName_isset && ((__deptName || other->__deptName) && ![__deptName isEqual:other->__deptName]))) {
    return NO;
  }
  if ((__levelName_isset != other->__levelName_isset) ||
      (__levelName_isset && ((__levelName || other->__levelName) && ![__levelName isEqual:other->__levelName]))) {
    return NO;
  }
  if ((__remark_isset != other->__remark_isset) ||
      (__remark_isset && ((__remark || other->__remark) && ![__remark isEqual:other->__remark]))) {
    return NO;
  }
  if ((__headImg_isset != other->__headImg_isset) ||
      (__headImg_isset && ((__headImg || other->__headImg) && ![__headImg isEqual:other->__headImg]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__flowers_isset != other->__flowers_isset) ||
      (__flowers_isset && ((__flowers || other->__flowers) && ![__flowers isEqual:other->__flowers]))) {
    return NO;
  }
  if ((__totalVisits_isset != other->__totalVisits_isset) ||
      (__totalVisits_isset && ((__totalVisits || other->__totalVisits) && ![__totalVisits isEqual:other->__totalVisits]))) {
    return NO;
  }
  if ((__isExpert_isset != other->__isExpert_isset) ||
      (__isExpert_isset && ((__isExpert || other->__isExpert) && ![__isExpert isEqual:other->__isExpert]))) {
    return NO;
  }
  if ((__isRegisted_isset != other->__isRegisted_isset) ||
      (__isRegisted_isset && ((__isRegisted || other->__isRegisted) && ![__isRegisted isEqual:other->__isRegisted]))) {
    return NO;
  }
  if ((__evaluation_isset != other->__evaluation_isset) ||
      (__evaluation_isset && ((__evaluation || other->__evaluation) && ![__evaluation isEqual:other->__evaluation]))) {
    return NO;
  }
  if ((__isConsulted_isset != other->__isConsulted_isset) ||
      (__isConsulted_isset && ((__isConsulted || other->__isConsulted) && ![__isConsulted isEqual:other->__isConsulted]))) {
    return NO;
  }
  if ((__hospAbbrName_isset != other->__hospAbbrName_isset) ||
      (__hospAbbrName_isset && ((__hospAbbrName || other->__hospAbbrName) && ![__hospAbbrName isEqual:other->__hospAbbrName]))) {
    return NO;
  }
  if ((__diamonds_isset != other->__diamonds_isset) ||
      (__diamonds_isset && ((__diamonds || other->__diamonds) && ![__diamonds isEqual:other->__diamonds]))) {
    return NO;
  }
  if ((__titleStatus_isset != other->__titleStatus_isset) ||
      (__titleStatus_isset && ((__titleStatus || other->__titleStatus) && ![__titleStatus isEqual:other->__titleStatus]))) {
    return NO;
  }
  if ((__qualStatus_isset != other->__qualStatus_isset) ||
      (__qualStatus_isset && ((__qualStatus || other->__qualStatus) && ![__qualStatus isEqual:other->__qualStatus]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && ((__gender || other->__gender) && ![__gender isEqual:other->__gender]))) {
    return NO;
  }
  if ((__consPrice_isset != other->__consPrice_isset) ||
      (__consPrice_isset && ((__consPrice || other->__consPrice) && ![__consPrice isEqual:other->__consPrice]))) {
    return NO;
  }
  if ((__isReviewPic_isset != other->__isReviewPic_isset) ||
      (__isReviewPic_isset && ((__isReviewPic || other->__isReviewPic) && ![__isReviewPic isEqual:other->__isReviewPic]))) {
    return NO;
  }
  if ((__revPrice_isset != other->__revPrice_isset) ||
      (__revPrice_isset && ((__revPrice || other->__revPrice) && ![__revPrice isEqual:other->__revPrice]))) {
    return NO;
  }
  if ((__isVideoCons_isset != other->__isVideoCons_isset) ||
      (__isVideoCons_isset && ((__isVideoCons || other->__isVideoCons) && ![__isVideoCons isEqual:other->__isVideoCons]))) {
    return NO;
  }
  if ((__videoPrice_isset != other->__videoPrice_isset) ||
      (__videoPrice_isset && ((__videoPrice || other->__videoPrice) && ![__videoPrice isEqual:other->__videoPrice]))) {
    return NO;
  }
  if ((__consVisits_isset != other->__consVisits_isset) ||
      (__consVisits_isset && (__consVisits != other->__consVisits))) {
    return NO;
  }
  if ((__rmngNum_isset != other->__rmngNum_isset) ||
      (__rmngNum_isset && (__rmngNum != other->__rmngNum))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__docId release_stub];
  [__docName release_stub];
  [__hospId release_stub];
  [__hospName release_stub];
  [__hospType release_stub];
  [__hospLevel release_stub];
  [__deptName release_stub];
  [__levelName release_stub];
  [__remark release_stub];
  [__headImg release_stub];
  [__desc release_stub];
  [__flowers release_stub];
  [__totalVisits release_stub];
  [__isExpert release_stub];
  [__isRegisted release_stub];
  [__evaluation release_stub];
  [__isConsulted release_stub];
  [__hospAbbrName release_stub];
  [__diamonds release_stub];
  [__titleStatus release_stub];
  [__qualStatus release_stub];
  [__gender release_stub];
  [__consPrice release_stub];
  [__isReviewPic release_stub];
  [__revPrice release_stub];
  [__isVideoCons release_stub];
  [__videoPrice release_stub];
  [super dealloc_stub];
}

- (NSString *) docId {
  return [[__docId retain_stub] autorelease_stub];
}

- (void) setDocId: (NSString *) docId {
  [docId retain_stub];
  [__docId release_stub];
  __docId = docId;
  __docId_isset = YES;
}

- (BOOL) docIdIsSet {
  return __docId_isset;
}

- (void) unsetDocId {
  [__docId release_stub];
  __docId = nil;
  __docId_isset = NO;
}

- (NSString *) docName {
  return [[__docName retain_stub] autorelease_stub];
}

- (void) setDocName: (NSString *) docName {
  [docName retain_stub];
  [__docName release_stub];
  __docName = docName;
  __docName_isset = YES;
}

- (BOOL) docNameIsSet {
  return __docName_isset;
}

- (void) unsetDocName {
  [__docName release_stub];
  __docName = nil;
  __docName_isset = NO;
}

- (NSString *) hospId {
  return [[__hospId retain_stub] autorelease_stub];
}

- (void) setHospId: (NSString *) hospId {
  [hospId retain_stub];
  [__hospId release_stub];
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  [__hospId release_stub];
  __hospId = nil;
  __hospId_isset = NO;
}

- (NSString *) hospName {
  return [[__hospName retain_stub] autorelease_stub];
}

- (void) setHospName: (NSString *) hospName {
  [hospName retain_stub];
  [__hospName release_stub];
  __hospName = hospName;
  __hospName_isset = YES;
}

- (BOOL) hospNameIsSet {
  return __hospName_isset;
}

- (void) unsetHospName {
  [__hospName release_stub];
  __hospName = nil;
  __hospName_isset = NO;
}

- (NSString *) hospType {
  return [[__hospType retain_stub] autorelease_stub];
}

- (void) setHospType: (NSString *) hospType {
  [hospType retain_stub];
  [__hospType release_stub];
  __hospType = hospType;
  __hospType_isset = YES;
}

- (BOOL) hospTypeIsSet {
  return __hospType_isset;
}

- (void) unsetHospType {
  [__hospType release_stub];
  __hospType = nil;
  __hospType_isset = NO;
}

- (NSString *) hospLevel {
  return [[__hospLevel retain_stub] autorelease_stub];
}

- (void) setHospLevel: (NSString *) hospLevel {
  [hospLevel retain_stub];
  [__hospLevel release_stub];
  __hospLevel = hospLevel;
  __hospLevel_isset = YES;
}

- (BOOL) hospLevelIsSet {
  return __hospLevel_isset;
}

- (void) unsetHospLevel {
  [__hospLevel release_stub];
  __hospLevel = nil;
  __hospLevel_isset = NO;
}

- (NSString *) deptName {
  return [[__deptName retain_stub] autorelease_stub];
}

- (void) setDeptName: (NSString *) deptName {
  [deptName retain_stub];
  [__deptName release_stub];
  __deptName = deptName;
  __deptName_isset = YES;
}

- (BOOL) deptNameIsSet {
  return __deptName_isset;
}

- (void) unsetDeptName {
  [__deptName release_stub];
  __deptName = nil;
  __deptName_isset = NO;
}

- (NSString *) levelName {
  return [[__levelName retain_stub] autorelease_stub];
}

- (void) setLevelName: (NSString *) levelName {
  [levelName retain_stub];
  [__levelName release_stub];
  __levelName = levelName;
  __levelName_isset = YES;
}

- (BOOL) levelNameIsSet {
  return __levelName_isset;
}

- (void) unsetLevelName {
  [__levelName release_stub];
  __levelName = nil;
  __levelName_isset = NO;
}

- (NSString *) remark {
  return [[__remark retain_stub] autorelease_stub];
}

- (void) setRemark: (NSString *) remark {
  [remark retain_stub];
  [__remark release_stub];
  __remark = remark;
  __remark_isset = YES;
}

- (BOOL) remarkIsSet {
  return __remark_isset;
}

- (void) unsetRemark {
  [__remark release_stub];
  __remark = nil;
  __remark_isset = NO;
}

- (NSString *) headImg {
  return [[__headImg retain_stub] autorelease_stub];
}

- (void) setHeadImg: (NSString *) headImg {
  [headImg retain_stub];
  [__headImg release_stub];
  __headImg = headImg;
  __headImg_isset = YES;
}

- (BOOL) headImgIsSet {
  return __headImg_isset;
}

- (void) unsetHeadImg {
  [__headImg release_stub];
  __headImg = nil;
  __headImg_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) flowers {
  return [[__flowers retain_stub] autorelease_stub];
}

- (void) setFlowers: (NSString *) flowers {
  [flowers retain_stub];
  [__flowers release_stub];
  __flowers = flowers;
  __flowers_isset = YES;
}

- (BOOL) flowersIsSet {
  return __flowers_isset;
}

- (void) unsetFlowers {
  [__flowers release_stub];
  __flowers = nil;
  __flowers_isset = NO;
}

- (NSString *) totalVisits {
  return [[__totalVisits retain_stub] autorelease_stub];
}

- (void) setTotalVisits: (NSString *) totalVisits {
  [totalVisits retain_stub];
  [__totalVisits release_stub];
  __totalVisits = totalVisits;
  __totalVisits_isset = YES;
}

- (BOOL) totalVisitsIsSet {
  return __totalVisits_isset;
}

- (void) unsetTotalVisits {
  [__totalVisits release_stub];
  __totalVisits = nil;
  __totalVisits_isset = NO;
}

- (NSString *) isExpert {
  return [[__isExpert retain_stub] autorelease_stub];
}

- (void) setIsExpert: (NSString *) isExpert {
  [isExpert retain_stub];
  [__isExpert release_stub];
  __isExpert = isExpert;
  __isExpert_isset = YES;
}

- (BOOL) isExpertIsSet {
  return __isExpert_isset;
}

- (void) unsetIsExpert {
  [__isExpert release_stub];
  __isExpert = nil;
  __isExpert_isset = NO;
}

- (NSString *) isRegisted {
  return [[__isRegisted retain_stub] autorelease_stub];
}

- (void) setIsRegisted: (NSString *) isRegisted {
  [isRegisted retain_stub];
  [__isRegisted release_stub];
  __isRegisted = isRegisted;
  __isRegisted_isset = YES;
}

- (BOOL) isRegistedIsSet {
  return __isRegisted_isset;
}

- (void) unsetIsRegisted {
  [__isRegisted release_stub];
  __isRegisted = nil;
  __isRegisted_isset = NO;
}

- (NSString *) evaluation {
  return [[__evaluation retain_stub] autorelease_stub];
}

- (void) setEvaluation: (NSString *) evaluation {
  [evaluation retain_stub];
  [__evaluation release_stub];
  __evaluation = evaluation;
  __evaluation_isset = YES;
}

- (BOOL) evaluationIsSet {
  return __evaluation_isset;
}

- (void) unsetEvaluation {
  [__evaluation release_stub];
  __evaluation = nil;
  __evaluation_isset = NO;
}

- (NSString *) isConsulted {
  return [[__isConsulted retain_stub] autorelease_stub];
}

- (void) setIsConsulted: (NSString *) isConsulted {
  [isConsulted retain_stub];
  [__isConsulted release_stub];
  __isConsulted = isConsulted;
  __isConsulted_isset = YES;
}

- (BOOL) isConsultedIsSet {
  return __isConsulted_isset;
}

- (void) unsetIsConsulted {
  [__isConsulted release_stub];
  __isConsulted = nil;
  __isConsulted_isset = NO;
}

- (NSString *) hospAbbrName {
  return [[__hospAbbrName retain_stub] autorelease_stub];
}

- (void) setHospAbbrName: (NSString *) hospAbbrName {
  [hospAbbrName retain_stub];
  [__hospAbbrName release_stub];
  __hospAbbrName = hospAbbrName;
  __hospAbbrName_isset = YES;
}

- (BOOL) hospAbbrNameIsSet {
  return __hospAbbrName_isset;
}

- (void) unsetHospAbbrName {
  [__hospAbbrName release_stub];
  __hospAbbrName = nil;
  __hospAbbrName_isset = NO;
}

- (NSString *) diamonds {
  return [[__diamonds retain_stub] autorelease_stub];
}

- (void) setDiamonds: (NSString *) diamonds {
  [diamonds retain_stub];
  [__diamonds release_stub];
  __diamonds = diamonds;
  __diamonds_isset = YES;
}

- (BOOL) diamondsIsSet {
  return __diamonds_isset;
}

- (void) unsetDiamonds {
  [__diamonds release_stub];
  __diamonds = nil;
  __diamonds_isset = NO;
}

- (NSString *) titleStatus {
  return [[__titleStatus retain_stub] autorelease_stub];
}

- (void) setTitleStatus: (NSString *) titleStatus {
  [titleStatus retain_stub];
  [__titleStatus release_stub];
  __titleStatus = titleStatus;
  __titleStatus_isset = YES;
}

- (BOOL) titleStatusIsSet {
  return __titleStatus_isset;
}

- (void) unsetTitleStatus {
  [__titleStatus release_stub];
  __titleStatus = nil;
  __titleStatus_isset = NO;
}

- (NSString *) qualStatus {
  return [[__qualStatus retain_stub] autorelease_stub];
}

- (void) setQualStatus: (NSString *) qualStatus {
  [qualStatus retain_stub];
  [__qualStatus release_stub];
  __qualStatus = qualStatus;
  __qualStatus_isset = YES;
}

- (BOOL) qualStatusIsSet {
  return __qualStatus_isset;
}

- (void) unsetQualStatus {
  [__qualStatus release_stub];
  __qualStatus = nil;
  __qualStatus_isset = NO;
}

- (NSString *) gender {
  return [[__gender retain_stub] autorelease_stub];
}

- (void) setGender: (NSString *) gender {
  [gender retain_stub];
  [__gender release_stub];
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  [__gender release_stub];
  __gender = nil;
  __gender_isset = NO;
}

- (NSString *) consPrice {
  return [[__consPrice retain_stub] autorelease_stub];
}

- (void) setConsPrice: (NSString *) consPrice {
  [consPrice retain_stub];
  [__consPrice release_stub];
  __consPrice = consPrice;
  __consPrice_isset = YES;
}

- (BOOL) consPriceIsSet {
  return __consPrice_isset;
}

- (void) unsetConsPrice {
  [__consPrice release_stub];
  __consPrice = nil;
  __consPrice_isset = NO;
}

- (NSString *) isReviewPic {
  return [[__isReviewPic retain_stub] autorelease_stub];
}

- (void) setIsReviewPic: (NSString *) isReviewPic {
  [isReviewPic retain_stub];
  [__isReviewPic release_stub];
  __isReviewPic = isReviewPic;
  __isReviewPic_isset = YES;
}

- (BOOL) isReviewPicIsSet {
  return __isReviewPic_isset;
}

- (void) unsetIsReviewPic {
  [__isReviewPic release_stub];
  __isReviewPic = nil;
  __isReviewPic_isset = NO;
}

- (NSString *) revPrice {
  return [[__revPrice retain_stub] autorelease_stub];
}

- (void) setRevPrice: (NSString *) revPrice {
  [revPrice retain_stub];
  [__revPrice release_stub];
  __revPrice = revPrice;
  __revPrice_isset = YES;
}

- (BOOL) revPriceIsSet {
  return __revPrice_isset;
}

- (void) unsetRevPrice {
  [__revPrice release_stub];
  __revPrice = nil;
  __revPrice_isset = NO;
}

- (NSString *) isVideoCons {
  return [[__isVideoCons retain_stub] autorelease_stub];
}

- (void) setIsVideoCons: (NSString *) isVideoCons {
  [isVideoCons retain_stub];
  [__isVideoCons release_stub];
  __isVideoCons = isVideoCons;
  __isVideoCons_isset = YES;
}

- (BOOL) isVideoConsIsSet {
  return __isVideoCons_isset;
}

- (void) unsetIsVideoCons {
  [__isVideoCons release_stub];
  __isVideoCons = nil;
  __isVideoCons_isset = NO;
}

- (NSString *) videoPrice {
  return [[__videoPrice retain_stub] autorelease_stub];
}

- (void) setVideoPrice: (NSString *) videoPrice {
  [videoPrice retain_stub];
  [__videoPrice release_stub];
  __videoPrice = videoPrice;
  __videoPrice_isset = YES;
}

- (BOOL) videoPriceIsSet {
  return __videoPrice_isset;
}

- (void) unsetVideoPrice {
  [__videoPrice release_stub];
  __videoPrice = nil;
  __videoPrice_isset = NO;
}

- (int64_t) consVisits {
  return __consVisits;
}

- (void) setConsVisits: (int64_t) consVisits {
  __consVisits = consVisits;
  __consVisits_isset = YES;
}

- (BOOL) consVisitsIsSet {
  return __consVisits_isset;
}

- (void) unsetConsVisits {
  __consVisits_isset = NO;
}

- (int32_t) rmngNum {
  return __rmngNum;
}

- (void) setRmngNum: (int32_t) rmngNum {
  __rmngNum = rmngNum;
  __rmngNum_isset = YES;
}

- (BOOL) rmngNumIsSet {
  return __rmngNum_isset;
}

- (void) unsetRmngNum {
  __rmngNum_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDocId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDocName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospLevel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLevelName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemark: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHeadImg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFlowers: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTotalVisits: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsExpert: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsRegisted: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEvaluation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsConsulted: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospAbbrName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDiamonds: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitleStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setQualStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConsPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsReviewPic: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRevPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 26:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsVideoCons: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 27:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVideoPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 28:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setConsVisits: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 29:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRmngNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FindDoctorOutput"];
  if (__docId_isset) {
    if (__docId != nil) {
      [outProtocol writeFieldBeginWithName: @"docId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __docId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__docName_isset) {
    if (__docName != nil) {
      [outProtocol writeFieldBeginWithName: @"docName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __docName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    if (__hospId != nil) {
      [outProtocol writeFieldBeginWithName: @"hospId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __hospId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospName_isset) {
    if (__hospName != nil) {
      [outProtocol writeFieldBeginWithName: @"hospName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __hospName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospType_isset) {
    if (__hospType != nil) {
      [outProtocol writeFieldBeginWithName: @"hospType" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __hospType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospLevel_isset) {
    if (__hospLevel != nil) {
      [outProtocol writeFieldBeginWithName: @"hospLevel" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __hospLevel];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptName_isset) {
    if (__deptName != nil) {
      [outProtocol writeFieldBeginWithName: @"deptName" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __deptName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__levelName_isset) {
    if (__levelName != nil) {
      [outProtocol writeFieldBeginWithName: @"levelName" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __levelName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__remark_isset) {
    if (__remark != nil) {
      [outProtocol writeFieldBeginWithName: @"remark" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __remark];
      [outProtocol writeFieldEnd];
    }
  }
  if (__headImg_isset) {
    if (__headImg != nil) {
      [outProtocol writeFieldBeginWithName: @"headImg" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __headImg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__flowers_isset) {
    if (__flowers != nil) {
      [outProtocol writeFieldBeginWithName: @"flowers" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __flowers];
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalVisits_isset) {
    if (__totalVisits != nil) {
      [outProtocol writeFieldBeginWithName: @"totalVisits" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __totalVisits];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isExpert_isset) {
    if (__isExpert != nil) {
      [outProtocol writeFieldBeginWithName: @"isExpert" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __isExpert];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isRegisted_isset) {
    if (__isRegisted != nil) {
      [outProtocol writeFieldBeginWithName: @"isRegisted" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __isRegisted];
      [outProtocol writeFieldEnd];
    }
  }
  if (__evaluation_isset) {
    if (__evaluation != nil) {
      [outProtocol writeFieldBeginWithName: @"evaluation" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __evaluation];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isConsulted_isset) {
    if (__isConsulted != nil) {
      [outProtocol writeFieldBeginWithName: @"isConsulted" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __isConsulted];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospAbbrName_isset) {
    if (__hospAbbrName != nil) {
      [outProtocol writeFieldBeginWithName: @"hospAbbrName" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __hospAbbrName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diamonds_isset) {
    if (__diamonds != nil) {
      [outProtocol writeFieldBeginWithName: @"diamonds" type: TType_STRING fieldID: 19];
      [outProtocol writeString: __diamonds];
      [outProtocol writeFieldEnd];
    }
  }
  if (__titleStatus_isset) {
    if (__titleStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"titleStatus" type: TType_STRING fieldID: 20];
      [outProtocol writeString: __titleStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__qualStatus_isset) {
    if (__qualStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"qualStatus" type: TType_STRING fieldID: 21];
      [outProtocol writeString: __qualStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    if (__gender != nil) {
      [outProtocol writeFieldBeginWithName: @"gender" type: TType_STRING fieldID: 22];
      [outProtocol writeString: __gender];
      [outProtocol writeFieldEnd];
    }
  }
  if (__consPrice_isset) {
    if (__consPrice != nil) {
      [outProtocol writeFieldBeginWithName: @"consPrice" type: TType_STRING fieldID: 23];
      [outProtocol writeString: __consPrice];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isReviewPic_isset) {
    if (__isReviewPic != nil) {
      [outProtocol writeFieldBeginWithName: @"isReviewPic" type: TType_STRING fieldID: 24];
      [outProtocol writeString: __isReviewPic];
      [outProtocol writeFieldEnd];
    }
  }
  if (__revPrice_isset) {
    if (__revPrice != nil) {
      [outProtocol writeFieldBeginWithName: @"revPrice" type: TType_STRING fieldID: 25];
      [outProtocol writeString: __revPrice];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isVideoCons_isset) {
    if (__isVideoCons != nil) {
      [outProtocol writeFieldBeginWithName: @"isVideoCons" type: TType_STRING fieldID: 26];
      [outProtocol writeString: __isVideoCons];
      [outProtocol writeFieldEnd];
    }
  }
  if (__videoPrice_isset) {
    if (__videoPrice != nil) {
      [outProtocol writeFieldBeginWithName: @"videoPrice" type: TType_STRING fieldID: 27];
      [outProtocol writeString: __videoPrice];
      [outProtocol writeFieldEnd];
    }
  }
  if (__consVisits_isset) {
    [outProtocol writeFieldBeginWithName: @"consVisits" type: TType_I64 fieldID: 28];
    [outProtocol writeI64: __consVisits];
    [outProtocol writeFieldEnd];
  }
  if (__rmngNum_isset) {
    [outProtocol writeFieldBeginWithName: @"rmngNum" type: TType_I32 fieldID: 29];
    [outProtocol writeI32: __rmngNum];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFindDoctorOutput("];
  [ms appendString: @"docId:"];
  [ms appendFormat: @"\"%@\"", __docId];
  [ms appendString: @",docName:"];
  [ms appendFormat: @"\"%@\"", __docName];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"\"%@\"", __hospId];
  [ms appendString: @",hospName:"];
  [ms appendFormat: @"\"%@\"", __hospName];
  [ms appendString: @",hospType:"];
  [ms appendFormat: @"\"%@\"", __hospType];
  [ms appendString: @",hospLevel:"];
  [ms appendFormat: @"\"%@\"", __hospLevel];
  [ms appendString: @",deptName:"];
  [ms appendFormat: @"\"%@\"", __deptName];
  [ms appendString: @",levelName:"];
  [ms appendFormat: @"\"%@\"", __levelName];
  [ms appendString: @",remark:"];
  [ms appendFormat: @"\"%@\"", __remark];
  [ms appendString: @",headImg:"];
  [ms appendFormat: @"\"%@\"", __headImg];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",flowers:"];
  [ms appendFormat: @"\"%@\"", __flowers];
  [ms appendString: @",totalVisits:"];
  [ms appendFormat: @"\"%@\"", __totalVisits];
  [ms appendString: @",isExpert:"];
  [ms appendFormat: @"\"%@\"", __isExpert];
  [ms appendString: @",isRegisted:"];
  [ms appendFormat: @"\"%@\"", __isRegisted];
  [ms appendString: @",evaluation:"];
  [ms appendFormat: @"\"%@\"", __evaluation];
  [ms appendString: @",isConsulted:"];
  [ms appendFormat: @"\"%@\"", __isConsulted];
  [ms appendString: @",hospAbbrName:"];
  [ms appendFormat: @"\"%@\"", __hospAbbrName];
  [ms appendString: @",diamonds:"];
  [ms appendFormat: @"\"%@\"", __diamonds];
  [ms appendString: @",titleStatus:"];
  [ms appendFormat: @"\"%@\"", __titleStatus];
  [ms appendString: @",qualStatus:"];
  [ms appendFormat: @"\"%@\"", __qualStatus];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"\"%@\"", __gender];
  [ms appendString: @",consPrice:"];
  [ms appendFormat: @"\"%@\"", __consPrice];
  [ms appendString: @",isReviewPic:"];
  [ms appendFormat: @"\"%@\"", __isReviewPic];
  [ms appendString: @",revPrice:"];
  [ms appendFormat: @"\"%@\"", __revPrice];
  [ms appendString: @",isVideoCons:"];
  [ms appendFormat: @"\"%@\"", __isVideoCons];
  [ms appendString: @",videoPrice:"];
  [ms appendFormat: @"\"%@\"", __videoPrice];
  [ms appendString: @",consVisits:"];
  [ms appendFormat: @"%qi", __consVisits];
  [ms appendString: @",rmngNum:"];
  [ms appendFormat: @"%i", __rmngNum];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFQueueDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithManCount: (NSString *) manCount queueNo: (NSString *) queueNo currentNo: (NSString *) currentNo roomName: (NSString *) roomName position: (NSString *) position deptName: (NSString *) deptName doctName: (NSString *) doctName patientName: (NSString *) patientName timeStart: (NSString *) timeStart timeEnd: (NSString *) timeEnd regId: (NSString *) regId headImg: (NSString *) headImg patientId: (int64_t) patientId
{
  self = [super init];
  __manCount = [manCount retain_stub];
  __manCount_isset = YES;
  __queueNo = [queueNo retain_stub];
  __queueNo_isset = YES;
  __currentNo = [currentNo retain_stub];
  __currentNo_isset = YES;
  __roomName = [roomName retain_stub];
  __roomName_isset = YES;
  __position = [position retain_stub];
  __position_isset = YES;
  __deptName = [deptName retain_stub];
  __deptName_isset = YES;
  __doctName = [doctName retain_stub];
  __doctName_isset = YES;
  __patientName = [patientName retain_stub];
  __patientName_isset = YES;
  __timeStart = [timeStart retain_stub];
  __timeStart_isset = YES;
  __timeEnd = [timeEnd retain_stub];
  __timeEnd_isset = YES;
  __regId = [regId retain_stub];
  __regId_isset = YES;
  __headImg = [headImg retain_stub];
  __headImg_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"manCount"])
  {
    __manCount = [[decoder decodeObjectForKey: @"manCount"] retain_stub];
    __manCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"queueNo"])
  {
    __queueNo = [[decoder decodeObjectForKey: @"queueNo"] retain_stub];
    __queueNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"currentNo"])
  {
    __currentNo = [[decoder decodeObjectForKey: @"currentNo"] retain_stub];
    __currentNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomName"])
  {
    __roomName = [[decoder decodeObjectForKey: @"roomName"] retain_stub];
    __roomName_isset = YES;
  }
  if ([decoder containsValueForKey: @"position"])
  {
    __position = [[decoder decodeObjectForKey: @"position"] retain_stub];
    __position_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptName"])
  {
    __deptName = [[decoder decodeObjectForKey: @"deptName"] retain_stub];
    __deptName_isset = YES;
  }
  if ([decoder containsValueForKey: @"doctName"])
  {
    __doctName = [[decoder decodeObjectForKey: @"doctName"] retain_stub];
    __doctName_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientName"])
  {
    __patientName = [[decoder decodeObjectForKey: @"patientName"] retain_stub];
    __patientName_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeStart"])
  {
    __timeStart = [[decoder decodeObjectForKey: @"timeStart"] retain_stub];
    __timeStart_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeEnd"])
  {
    __timeEnd = [[decoder decodeObjectForKey: @"timeEnd"] retain_stub];
    __timeEnd_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [[decoder decodeObjectForKey: @"regId"] retain_stub];
    __regId_isset = YES;
  }
  if ([decoder containsValueForKey: @"headImg"])
  {
    __headImg = [[decoder decodeObjectForKey: @"headImg"] retain_stub];
    __headImg_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__manCount_isset)
  {
    [encoder encodeObject: __manCount forKey: @"manCount"];
  }
  if (__queueNo_isset)
  {
    [encoder encodeObject: __queueNo forKey: @"queueNo"];
  }
  if (__currentNo_isset)
  {
    [encoder encodeObject: __currentNo forKey: @"currentNo"];
  }
  if (__roomName_isset)
  {
    [encoder encodeObject: __roomName forKey: @"roomName"];
  }
  if (__position_isset)
  {
    [encoder encodeObject: __position forKey: @"position"];
  }
  if (__deptName_isset)
  {
    [encoder encodeObject: __deptName forKey: @"deptName"];
  }
  if (__doctName_isset)
  {
    [encoder encodeObject: __doctName forKey: @"doctName"];
  }
  if (__patientName_isset)
  {
    [encoder encodeObject: __patientName forKey: @"patientName"];
  }
  if (__timeStart_isset)
  {
    [encoder encodeObject: __timeStart forKey: @"timeStart"];
  }
  if (__timeEnd_isset)
  {
    [encoder encodeObject: __timeEnd forKey: @"timeEnd"];
  }
  if (__regId_isset)
  {
    [encoder encodeObject: __regId forKey: @"regId"];
  }
  if (__headImg_isset)
  {
    [encoder encodeObject: __headImg forKey: @"headImg"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __manCount_isset ? 2654435761 : 0;
  if (__manCount_isset)
  {
    hash = (hash * 31) ^ [__manCount hash];
  }
  hash = (hash * 31) ^ __queueNo_isset ? 2654435761 : 0;
  if (__queueNo_isset)
  {
    hash = (hash * 31) ^ [__queueNo hash];
  }
  hash = (hash * 31) ^ __currentNo_isset ? 2654435761 : 0;
  if (__currentNo_isset)
  {
    hash = (hash * 31) ^ [__currentNo hash];
  }
  hash = (hash * 31) ^ __roomName_isset ? 2654435761 : 0;
  if (__roomName_isset)
  {
    hash = (hash * 31) ^ [__roomName hash];
  }
  hash = (hash * 31) ^ __position_isset ? 2654435761 : 0;
  if (__position_isset)
  {
    hash = (hash * 31) ^ [__position hash];
  }
  hash = (hash * 31) ^ __deptName_isset ? 2654435761 : 0;
  if (__deptName_isset)
  {
    hash = (hash * 31) ^ [__deptName hash];
  }
  hash = (hash * 31) ^ __doctName_isset ? 2654435761 : 0;
  if (__doctName_isset)
  {
    hash = (hash * 31) ^ [__doctName hash];
  }
  hash = (hash * 31) ^ __patientName_isset ? 2654435761 : 0;
  if (__patientName_isset)
  {
    hash = (hash * 31) ^ [__patientName hash];
  }
  hash = (hash * 31) ^ __timeStart_isset ? 2654435761 : 0;
  if (__timeStart_isset)
  {
    hash = (hash * 31) ^ [__timeStart hash];
  }
  hash = (hash * 31) ^ __timeEnd_isset ? 2654435761 : 0;
  if (__timeEnd_isset)
  {
    hash = (hash * 31) ^ [__timeEnd hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [__regId hash];
  }
  hash = (hash * 31) ^ __headImg_isset ? 2654435761 : 0;
  if (__headImg_isset)
  {
    hash = (hash * 31) ^ [__headImg hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFQueueDto class]]) {
    return NO;
  }
  NXTFQueueDto *other = (NXTFQueueDto *)anObject;
  if ((__manCount_isset != other->__manCount_isset) ||
      (__manCount_isset && ((__manCount || other->__manCount) && ![__manCount isEqual:other->__manCount]))) {
    return NO;
  }
  if ((__queueNo_isset != other->__queueNo_isset) ||
      (__queueNo_isset && ((__queueNo || other->__queueNo) && ![__queueNo isEqual:other->__queueNo]))) {
    return NO;
  }
  if ((__currentNo_isset != other->__currentNo_isset) ||
      (__currentNo_isset && ((__currentNo || other->__currentNo) && ![__currentNo isEqual:other->__currentNo]))) {
    return NO;
  }
  if ((__roomName_isset != other->__roomName_isset) ||
      (__roomName_isset && ((__roomName || other->__roomName) && ![__roomName isEqual:other->__roomName]))) {
    return NO;
  }
  if ((__position_isset != other->__position_isset) ||
      (__position_isset && ((__position || other->__position) && ![__position isEqual:other->__position]))) {
    return NO;
  }
  if ((__deptName_isset != other->__deptName_isset) ||
      (__deptName_isset && ((__deptName || other->__deptName) && ![__deptName isEqual:other->__deptName]))) {
    return NO;
  }
  if ((__doctName_isset != other->__doctName_isset) ||
      (__doctName_isset && ((__doctName || other->__doctName) && ![__doctName isEqual:other->__doctName]))) {
    return NO;
  }
  if ((__patientName_isset != other->__patientName_isset) ||
      (__patientName_isset && ((__patientName || other->__patientName) && ![__patientName isEqual:other->__patientName]))) {
    return NO;
  }
  if ((__timeStart_isset != other->__timeStart_isset) ||
      (__timeStart_isset && ((__timeStart || other->__timeStart) && ![__timeStart isEqual:other->__timeStart]))) {
    return NO;
  }
  if ((__timeEnd_isset != other->__timeEnd_isset) ||
      (__timeEnd_isset && ((__timeEnd || other->__timeEnd) && ![__timeEnd isEqual:other->__timeEnd]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && ((__regId || other->__regId) && ![__regId isEqual:other->__regId]))) {
    return NO;
  }
  if ((__headImg_isset != other->__headImg_isset) ||
      (__headImg_isset && ((__headImg || other->__headImg) && ![__headImg isEqual:other->__headImg]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__manCount release_stub];
  [__queueNo release_stub];
  [__currentNo release_stub];
  [__roomName release_stub];
  [__position release_stub];
  [__deptName release_stub];
  [__doctName release_stub];
  [__patientName release_stub];
  [__timeStart release_stub];
  [__timeEnd release_stub];
  [__regId release_stub];
  [__headImg release_stub];
  [super dealloc_stub];
}

- (NSString *) manCount {
  return [[__manCount retain_stub] autorelease_stub];
}

- (void) setManCount: (NSString *) manCount {
  [manCount retain_stub];
  [__manCount release_stub];
  __manCount = manCount;
  __manCount_isset = YES;
}

- (BOOL) manCountIsSet {
  return __manCount_isset;
}

- (void) unsetManCount {
  [__manCount release_stub];
  __manCount = nil;
  __manCount_isset = NO;
}

- (NSString *) queueNo {
  return [[__queueNo retain_stub] autorelease_stub];
}

- (void) setQueueNo: (NSString *) queueNo {
  [queueNo retain_stub];
  [__queueNo release_stub];
  __queueNo = queueNo;
  __queueNo_isset = YES;
}

- (BOOL) queueNoIsSet {
  return __queueNo_isset;
}

- (void) unsetQueueNo {
  [__queueNo release_stub];
  __queueNo = nil;
  __queueNo_isset = NO;
}

- (NSString *) currentNo {
  return [[__currentNo retain_stub] autorelease_stub];
}

- (void) setCurrentNo: (NSString *) currentNo {
  [currentNo retain_stub];
  [__currentNo release_stub];
  __currentNo = currentNo;
  __currentNo_isset = YES;
}

- (BOOL) currentNoIsSet {
  return __currentNo_isset;
}

- (void) unsetCurrentNo {
  [__currentNo release_stub];
  __currentNo = nil;
  __currentNo_isset = NO;
}

- (NSString *) roomName {
  return [[__roomName retain_stub] autorelease_stub];
}

- (void) setRoomName: (NSString *) roomName {
  [roomName retain_stub];
  [__roomName release_stub];
  __roomName = roomName;
  __roomName_isset = YES;
}

- (BOOL) roomNameIsSet {
  return __roomName_isset;
}

- (void) unsetRoomName {
  [__roomName release_stub];
  __roomName = nil;
  __roomName_isset = NO;
}

- (NSString *) position {
  return [[__position retain_stub] autorelease_stub];
}

- (void) setPosition: (NSString *) position {
  [position retain_stub];
  [__position release_stub];
  __position = position;
  __position_isset = YES;
}

- (BOOL) positionIsSet {
  return __position_isset;
}

- (void) unsetPosition {
  [__position release_stub];
  __position = nil;
  __position_isset = NO;
}

- (NSString *) deptName {
  return [[__deptName retain_stub] autorelease_stub];
}

- (void) setDeptName: (NSString *) deptName {
  [deptName retain_stub];
  [__deptName release_stub];
  __deptName = deptName;
  __deptName_isset = YES;
}

- (BOOL) deptNameIsSet {
  return __deptName_isset;
}

- (void) unsetDeptName {
  [__deptName release_stub];
  __deptName = nil;
  __deptName_isset = NO;
}

- (NSString *) doctName {
  return [[__doctName retain_stub] autorelease_stub];
}

- (void) setDoctName: (NSString *) doctName {
  [doctName retain_stub];
  [__doctName release_stub];
  __doctName = doctName;
  __doctName_isset = YES;
}

- (BOOL) doctNameIsSet {
  return __doctName_isset;
}

- (void) unsetDoctName {
  [__doctName release_stub];
  __doctName = nil;
  __doctName_isset = NO;
}

- (NSString *) patientName {
  return [[__patientName retain_stub] autorelease_stub];
}

- (void) setPatientName: (NSString *) patientName {
  [patientName retain_stub];
  [__patientName release_stub];
  __patientName = patientName;
  __patientName_isset = YES;
}

- (BOOL) patientNameIsSet {
  return __patientName_isset;
}

- (void) unsetPatientName {
  [__patientName release_stub];
  __patientName = nil;
  __patientName_isset = NO;
}

- (NSString *) timeStart {
  return [[__timeStart retain_stub] autorelease_stub];
}

- (void) setTimeStart: (NSString *) timeStart {
  [timeStart retain_stub];
  [__timeStart release_stub];
  __timeStart = timeStart;
  __timeStart_isset = YES;
}

- (BOOL) timeStartIsSet {
  return __timeStart_isset;
}

- (void) unsetTimeStart {
  [__timeStart release_stub];
  __timeStart = nil;
  __timeStart_isset = NO;
}

- (NSString *) timeEnd {
  return [[__timeEnd retain_stub] autorelease_stub];
}

- (void) setTimeEnd: (NSString *) timeEnd {
  [timeEnd retain_stub];
  [__timeEnd release_stub];
  __timeEnd = timeEnd;
  __timeEnd_isset = YES;
}

- (BOOL) timeEndIsSet {
  return __timeEnd_isset;
}

- (void) unsetTimeEnd {
  [__timeEnd release_stub];
  __timeEnd = nil;
  __timeEnd_isset = NO;
}

- (NSString *) regId {
  return [[__regId retain_stub] autorelease_stub];
}

- (void) setRegId: (NSString *) regId {
  [regId retain_stub];
  [__regId release_stub];
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  [__regId release_stub];
  __regId = nil;
  __regId_isset = NO;
}

- (NSString *) headImg {
  return [[__headImg retain_stub] autorelease_stub];
}

- (void) setHeadImg: (NSString *) headImg {
  [headImg retain_stub];
  [__headImg release_stub];
  __headImg = headImg;
  __headImg_isset = YES;
}

- (BOOL) headImgIsSet {
  return __headImg_isset;
}

- (void) unsetHeadImg {
  [__headImg release_stub];
  __headImg = nil;
  __headImg_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setManCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setQueueNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCurrentNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRoomName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPosition: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDoctName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTimeStart: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTimeEnd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHeadImg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueueDto"];
  if (__manCount_isset) {
    if (__manCount != nil) {
      [outProtocol writeFieldBeginWithName: @"manCount" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __manCount];
      [outProtocol writeFieldEnd];
    }
  }
  if (__queueNo_isset) {
    if (__queueNo != nil) {
      [outProtocol writeFieldBeginWithName: @"queueNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __queueNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__currentNo_isset) {
    if (__currentNo != nil) {
      [outProtocol writeFieldBeginWithName: @"currentNo" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __currentNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__roomName_isset) {
    if (__roomName != nil) {
      [outProtocol writeFieldBeginWithName: @"roomName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __roomName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__position_isset) {
    if (__position != nil) {
      [outProtocol writeFieldBeginWithName: @"position" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __position];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptName_isset) {
    if (__deptName != nil) {
      [outProtocol writeFieldBeginWithName: @"deptName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __deptName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__doctName_isset) {
    if (__doctName != nil) {
      [outProtocol writeFieldBeginWithName: @"doctName" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __doctName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientName_isset) {
    if (__patientName != nil) {
      [outProtocol writeFieldBeginWithName: @"patientName" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __patientName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timeStart_isset) {
    if (__timeStart != nil) {
      [outProtocol writeFieldBeginWithName: @"timeStart" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __timeStart];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timeEnd_isset) {
    if (__timeEnd != nil) {
      [outProtocol writeFieldBeginWithName: @"timeEnd" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __timeEnd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    if (__regId != nil) {
      [outProtocol writeFieldBeginWithName: @"regId" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __regId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__headImg_isset) {
    if (__headImg != nil) {
      [outProtocol writeFieldBeginWithName: @"headImg" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __headImg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 13];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFQueueDto("];
  [ms appendString: @"manCount:"];
  [ms appendFormat: @"\"%@\"", __manCount];
  [ms appendString: @",queueNo:"];
  [ms appendFormat: @"\"%@\"", __queueNo];
  [ms appendString: @",currentNo:"];
  [ms appendFormat: @"\"%@\"", __currentNo];
  [ms appendString: @",roomName:"];
  [ms appendFormat: @"\"%@\"", __roomName];
  [ms appendString: @",position:"];
  [ms appendFormat: @"\"%@\"", __position];
  [ms appendString: @",deptName:"];
  [ms appendFormat: @"\"%@\"", __deptName];
  [ms appendString: @",doctName:"];
  [ms appendFormat: @"\"%@\"", __doctName];
  [ms appendString: @",patientName:"];
  [ms appendFormat: @"\"%@\"", __patientName];
  [ms appendString: @",timeStart:"];
  [ms appendFormat: @"\"%@\"", __timeStart];
  [ms appendString: @",timeEnd:"];
  [ms appendFormat: @"\"%@\"", __timeEnd];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"\"%@\"", __regId];
  [ms appendString: @",headImg:"];
  [ms appendFormat: @"\"%@\"", __headImg];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFAppointmentDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDeptName: (NSString *) deptName docName: (NSString *) docName patientName: (NSString *) patientName regId: (int64_t) regId regDate: (NSString *) regDate hisRegId: (NSString *) hisRegId
{
  self = [super init];
  __deptName = [deptName retain_stub];
  __deptName_isset = YES;
  __docName = [docName retain_stub];
  __docName_isset = YES;
  __patientName = [patientName retain_stub];
  __patientName_isset = YES;
  __regId = regId;
  __regId_isset = YES;
  __regDate = [regDate retain_stub];
  __regDate_isset = YES;
  __hisRegId = [hisRegId retain_stub];
  __hisRegId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"deptName"])
  {
    __deptName = [[decoder decodeObjectForKey: @"deptName"] retain_stub];
    __deptName_isset = YES;
  }
  if ([decoder containsValueForKey: @"docName"])
  {
    __docName = [[decoder decodeObjectForKey: @"docName"] retain_stub];
    __docName_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientName"])
  {
    __patientName = [[decoder decodeObjectForKey: @"patientName"] retain_stub];
    __patientName_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [decoder decodeInt64ForKey: @"regId"];
    __regId_isset = YES;
  }
  if ([decoder containsValueForKey: @"regDate"])
  {
    __regDate = [[decoder decodeObjectForKey: @"regDate"] retain_stub];
    __regDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"hisRegId"])
  {
    __hisRegId = [[decoder decodeObjectForKey: @"hisRegId"] retain_stub];
    __hisRegId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__deptName_isset)
  {
    [encoder encodeObject: __deptName forKey: @"deptName"];
  }
  if (__docName_isset)
  {
    [encoder encodeObject: __docName forKey: @"docName"];
  }
  if (__patientName_isset)
  {
    [encoder encodeObject: __patientName forKey: @"patientName"];
  }
  if (__regId_isset)
  {
    [encoder encodeInt64: __regId forKey: @"regId"];
  }
  if (__regDate_isset)
  {
    [encoder encodeObject: __regDate forKey: @"regDate"];
  }
  if (__hisRegId_isset)
  {
    [encoder encodeObject: __hisRegId forKey: @"hisRegId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __deptName_isset ? 2654435761 : 0;
  if (__deptName_isset)
  {
    hash = (hash * 31) ^ [__deptName hash];
  }
  hash = (hash * 31) ^ __docName_isset ? 2654435761 : 0;
  if (__docName_isset)
  {
    hash = (hash * 31) ^ [__docName hash];
  }
  hash = (hash * 31) ^ __patientName_isset ? 2654435761 : 0;
  if (__patientName_isset)
  {
    hash = (hash * 31) ^ [__patientName hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [@(__regId) hash];
  }
  hash = (hash * 31) ^ __regDate_isset ? 2654435761 : 0;
  if (__regDate_isset)
  {
    hash = (hash * 31) ^ [__regDate hash];
  }
  hash = (hash * 31) ^ __hisRegId_isset ? 2654435761 : 0;
  if (__hisRegId_isset)
  {
    hash = (hash * 31) ^ [__hisRegId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFAppointmentDto class]]) {
    return NO;
  }
  NXTFAppointmentDto *other = (NXTFAppointmentDto *)anObject;
  if ((__deptName_isset != other->__deptName_isset) ||
      (__deptName_isset && ((__deptName || other->__deptName) && ![__deptName isEqual:other->__deptName]))) {
    return NO;
  }
  if ((__docName_isset != other->__docName_isset) ||
      (__docName_isset && ((__docName || other->__docName) && ![__docName isEqual:other->__docName]))) {
    return NO;
  }
  if ((__patientName_isset != other->__patientName_isset) ||
      (__patientName_isset && ((__patientName || other->__patientName) && ![__patientName isEqual:other->__patientName]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && (__regId != other->__regId))) {
    return NO;
  }
  if ((__regDate_isset != other->__regDate_isset) ||
      (__regDate_isset && ((__regDate || other->__regDate) && ![__regDate isEqual:other->__regDate]))) {
    return NO;
  }
  if ((__hisRegId_isset != other->__hisRegId_isset) ||
      (__hisRegId_isset && ((__hisRegId || other->__hisRegId) && ![__hisRegId isEqual:other->__hisRegId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__deptName release_stub];
  [__docName release_stub];
  [__patientName release_stub];
  [__regDate release_stub];
  [__hisRegId release_stub];
  [super dealloc_stub];
}

- (NSString *) deptName {
  return [[__deptName retain_stub] autorelease_stub];
}

- (void) setDeptName: (NSString *) deptName {
  [deptName retain_stub];
  [__deptName release_stub];
  __deptName = deptName;
  __deptName_isset = YES;
}

- (BOOL) deptNameIsSet {
  return __deptName_isset;
}

- (void) unsetDeptName {
  [__deptName release_stub];
  __deptName = nil;
  __deptName_isset = NO;
}

- (NSString *) docName {
  return [[__docName retain_stub] autorelease_stub];
}

- (void) setDocName: (NSString *) docName {
  [docName retain_stub];
  [__docName release_stub];
  __docName = docName;
  __docName_isset = YES;
}

- (BOOL) docNameIsSet {
  return __docName_isset;
}

- (void) unsetDocName {
  [__docName release_stub];
  __docName = nil;
  __docName_isset = NO;
}

- (NSString *) patientName {
  return [[__patientName retain_stub] autorelease_stub];
}

- (void) setPatientName: (NSString *) patientName {
  [patientName retain_stub];
  [__patientName release_stub];
  __patientName = patientName;
  __patientName_isset = YES;
}

- (BOOL) patientNameIsSet {
  return __patientName_isset;
}

- (void) unsetPatientName {
  [__patientName release_stub];
  __patientName = nil;
  __patientName_isset = NO;
}

- (int64_t) regId {
  return __regId;
}

- (void) setRegId: (int64_t) regId {
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  __regId_isset = NO;
}

- (NSString *) regDate {
  return [[__regDate retain_stub] autorelease_stub];
}

- (void) setRegDate: (NSString *) regDate {
  [regDate retain_stub];
  [__regDate release_stub];
  __regDate = regDate;
  __regDate_isset = YES;
}

- (BOOL) regDateIsSet {
  return __regDate_isset;
}

- (void) unsetRegDate {
  [__regDate release_stub];
  __regDate = nil;
  __regDate_isset = NO;
}

- (NSString *) hisRegId {
  return [[__hisRegId retain_stub] autorelease_stub];
}

- (void) setHisRegId: (NSString *) hisRegId {
  [hisRegId retain_stub];
  [__hisRegId release_stub];
  __hisRegId = hisRegId;
  __hisRegId_isset = YES;
}

- (BOOL) hisRegIdIsSet {
  return __hisRegId_isset;
}

- (void) unsetHisRegId {
  [__hisRegId release_stub];
  __hisRegId = nil;
  __hisRegId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDocName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHisRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AppointmentDto"];
  if (__deptName_isset) {
    if (__deptName != nil) {
      [outProtocol writeFieldBeginWithName: @"deptName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __deptName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__docName_isset) {
    if (__docName != nil) {
      [outProtocol writeFieldBeginWithName: @"docName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __docName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientName_isset) {
    if (__patientName != nil) {
      [outProtocol writeFieldBeginWithName: @"patientName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __patientName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    [outProtocol writeFieldBeginWithName: @"regId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __regId];
    [outProtocol writeFieldEnd];
  }
  if (__regDate_isset) {
    if (__regDate != nil) {
      [outProtocol writeFieldBeginWithName: @"regDate" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __regDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hisRegId_isset) {
    if (__hisRegId != nil) {
      [outProtocol writeFieldBeginWithName: @"hisRegId" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __hisRegId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFAppointmentDto("];
  [ms appendString: @"deptName:"];
  [ms appendFormat: @"\"%@\"", __deptName];
  [ms appendString: @",docName:"];
  [ms appendFormat: @"\"%@\"", __docName];
  [ms appendString: @",patientName:"];
  [ms appendFormat: @"\"%@\"", __patientName];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"%qi", __regId];
  [ms appendString: @",regDate:"];
  [ms appendFormat: @"\"%@\"", __regDate];
  [ms appendString: @",hisRegId:"];
  [ms appendFormat: @"\"%@\"", __hisRegId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRecipeItemDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRecipeType: (NSString *) recipeType itemName: (NSString *) itemName dose: (NSString *) dose frequency: (NSString *) frequency usage: (NSString *) usage dosage: (NSString *) dosage dosageSpec: (NSString *) dosageSpec itemNum: (NSString *) itemNum itemSpec: (NSString *) itemSpec itemPrice: (NSString *) itemPrice itemFee: (NSString *) itemFee execDeptName: (NSString *) execDeptName execStatus: (NSString *) execStatus execLocation: (NSString *) execLocation feeType: (NSString *) feeType pics: (NSMutableArray *) pics
{
  self = [super init];
  __recipeType = [recipeType retain_stub];
  __recipeType_isset = YES;
  __itemName = [itemName retain_stub];
  __itemName_isset = YES;
  __dose = [dose retain_stub];
  __dose_isset = YES;
  __frequency = [frequency retain_stub];
  __frequency_isset = YES;
  __usage = [usage retain_stub];
  __usage_isset = YES;
  __dosage = [dosage retain_stub];
  __dosage_isset = YES;
  __dosageSpec = [dosageSpec retain_stub];
  __dosageSpec_isset = YES;
  __itemNum = [itemNum retain_stub];
  __itemNum_isset = YES;
  __itemSpec = [itemSpec retain_stub];
  __itemSpec_isset = YES;
  __itemPrice = [itemPrice retain_stub];
  __itemPrice_isset = YES;
  __itemFee = [itemFee retain_stub];
  __itemFee_isset = YES;
  __execDeptName = [execDeptName retain_stub];
  __execDeptName_isset = YES;
  __execStatus = [execStatus retain_stub];
  __execStatus_isset = YES;
  __execLocation = [execLocation retain_stub];
  __execLocation_isset = YES;
  __feeType = [feeType retain_stub];
  __feeType_isset = YES;
  __pics = [pics retain_stub];
  __pics_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"recipeType"])
  {
    __recipeType = [[decoder decodeObjectForKey: @"recipeType"] retain_stub];
    __recipeType_isset = YES;
  }
  if ([decoder containsValueForKey: @"itemName"])
  {
    __itemName = [[decoder decodeObjectForKey: @"itemName"] retain_stub];
    __itemName_isset = YES;
  }
  if ([decoder containsValueForKey: @"dose"])
  {
    __dose = [[decoder decodeObjectForKey: @"dose"] retain_stub];
    __dose_isset = YES;
  }
  if ([decoder containsValueForKey: @"frequency"])
  {
    __frequency = [[decoder decodeObjectForKey: @"frequency"] retain_stub];
    __frequency_isset = YES;
  }
  if ([decoder containsValueForKey: @"usage"])
  {
    __usage = [[decoder decodeObjectForKey: @"usage"] retain_stub];
    __usage_isset = YES;
  }
  if ([decoder containsValueForKey: @"dosage"])
  {
    __dosage = [[decoder decodeObjectForKey: @"dosage"] retain_stub];
    __dosage_isset = YES;
  }
  if ([decoder containsValueForKey: @"dosageSpec"])
  {
    __dosageSpec = [[decoder decodeObjectForKey: @"dosageSpec"] retain_stub];
    __dosageSpec_isset = YES;
  }
  if ([decoder containsValueForKey: @"itemNum"])
  {
    __itemNum = [[decoder decodeObjectForKey: @"itemNum"] retain_stub];
    __itemNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"itemSpec"])
  {
    __itemSpec = [[decoder decodeObjectForKey: @"itemSpec"] retain_stub];
    __itemSpec_isset = YES;
  }
  if ([decoder containsValueForKey: @"itemPrice"])
  {
    __itemPrice = [[decoder decodeObjectForKey: @"itemPrice"] retain_stub];
    __itemPrice_isset = YES;
  }
  if ([decoder containsValueForKey: @"itemFee"])
  {
    __itemFee = [[decoder decodeObjectForKey: @"itemFee"] retain_stub];
    __itemFee_isset = YES;
  }
  if ([decoder containsValueForKey: @"execDeptName"])
  {
    __execDeptName = [[decoder decodeObjectForKey: @"execDeptName"] retain_stub];
    __execDeptName_isset = YES;
  }
  if ([decoder containsValueForKey: @"execStatus"])
  {
    __execStatus = [[decoder decodeObjectForKey: @"execStatus"] retain_stub];
    __execStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"execLocation"])
  {
    __execLocation = [[decoder decodeObjectForKey: @"execLocation"] retain_stub];
    __execLocation_isset = YES;
  }
  if ([decoder containsValueForKey: @"feeType"])
  {
    __feeType = [[decoder decodeObjectForKey: @"feeType"] retain_stub];
    __feeType_isset = YES;
  }
  if ([decoder containsValueForKey: @"pics"])
  {
    __pics = [[decoder decodeObjectForKey: @"pics"] retain_stub];
    __pics_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__recipeType_isset)
  {
    [encoder encodeObject: __recipeType forKey: @"recipeType"];
  }
  if (__itemName_isset)
  {
    [encoder encodeObject: __itemName forKey: @"itemName"];
  }
  if (__dose_isset)
  {
    [encoder encodeObject: __dose forKey: @"dose"];
  }
  if (__frequency_isset)
  {
    [encoder encodeObject: __frequency forKey: @"frequency"];
  }
  if (__usage_isset)
  {
    [encoder encodeObject: __usage forKey: @"usage"];
  }
  if (__dosage_isset)
  {
    [encoder encodeObject: __dosage forKey: @"dosage"];
  }
  if (__dosageSpec_isset)
  {
    [encoder encodeObject: __dosageSpec forKey: @"dosageSpec"];
  }
  if (__itemNum_isset)
  {
    [encoder encodeObject: __itemNum forKey: @"itemNum"];
  }
  if (__itemSpec_isset)
  {
    [encoder encodeObject: __itemSpec forKey: @"itemSpec"];
  }
  if (__itemPrice_isset)
  {
    [encoder encodeObject: __itemPrice forKey: @"itemPrice"];
  }
  if (__itemFee_isset)
  {
    [encoder encodeObject: __itemFee forKey: @"itemFee"];
  }
  if (__execDeptName_isset)
  {
    [encoder encodeObject: __execDeptName forKey: @"execDeptName"];
  }
  if (__execStatus_isset)
  {
    [encoder encodeObject: __execStatus forKey: @"execStatus"];
  }
  if (__execLocation_isset)
  {
    [encoder encodeObject: __execLocation forKey: @"execLocation"];
  }
  if (__feeType_isset)
  {
    [encoder encodeObject: __feeType forKey: @"feeType"];
  }
  if (__pics_isset)
  {
    [encoder encodeObject: __pics forKey: @"pics"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __recipeType_isset ? 2654435761 : 0;
  if (__recipeType_isset)
  {
    hash = (hash * 31) ^ [__recipeType hash];
  }
  hash = (hash * 31) ^ __itemName_isset ? 2654435761 : 0;
  if (__itemName_isset)
  {
    hash = (hash * 31) ^ [__itemName hash];
  }
  hash = (hash * 31) ^ __dose_isset ? 2654435761 : 0;
  if (__dose_isset)
  {
    hash = (hash * 31) ^ [__dose hash];
  }
  hash = (hash * 31) ^ __frequency_isset ? 2654435761 : 0;
  if (__frequency_isset)
  {
    hash = (hash * 31) ^ [__frequency hash];
  }
  hash = (hash * 31) ^ __usage_isset ? 2654435761 : 0;
  if (__usage_isset)
  {
    hash = (hash * 31) ^ [__usage hash];
  }
  hash = (hash * 31) ^ __dosage_isset ? 2654435761 : 0;
  if (__dosage_isset)
  {
    hash = (hash * 31) ^ [__dosage hash];
  }
  hash = (hash * 31) ^ __dosageSpec_isset ? 2654435761 : 0;
  if (__dosageSpec_isset)
  {
    hash = (hash * 31) ^ [__dosageSpec hash];
  }
  hash = (hash * 31) ^ __itemNum_isset ? 2654435761 : 0;
  if (__itemNum_isset)
  {
    hash = (hash * 31) ^ [__itemNum hash];
  }
  hash = (hash * 31) ^ __itemSpec_isset ? 2654435761 : 0;
  if (__itemSpec_isset)
  {
    hash = (hash * 31) ^ [__itemSpec hash];
  }
  hash = (hash * 31) ^ __itemPrice_isset ? 2654435761 : 0;
  if (__itemPrice_isset)
  {
    hash = (hash * 31) ^ [__itemPrice hash];
  }
  hash = (hash * 31) ^ __itemFee_isset ? 2654435761 : 0;
  if (__itemFee_isset)
  {
    hash = (hash * 31) ^ [__itemFee hash];
  }
  hash = (hash * 31) ^ __execDeptName_isset ? 2654435761 : 0;
  if (__execDeptName_isset)
  {
    hash = (hash * 31) ^ [__execDeptName hash];
  }
  hash = (hash * 31) ^ __execStatus_isset ? 2654435761 : 0;
  if (__execStatus_isset)
  {
    hash = (hash * 31) ^ [__execStatus hash];
  }
  hash = (hash * 31) ^ __execLocation_isset ? 2654435761 : 0;
  if (__execLocation_isset)
  {
    hash = (hash * 31) ^ [__execLocation hash];
  }
  hash = (hash * 31) ^ __feeType_isset ? 2654435761 : 0;
  if (__feeType_isset)
  {
    hash = (hash * 31) ^ [__feeType hash];
  }
  hash = (hash * 31) ^ __pics_isset ? 2654435761 : 0;
  if (__pics_isset)
  {
    hash = (hash * 31) ^ [__pics hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRecipeItemDto class]]) {
    return NO;
  }
  NXTFRecipeItemDto *other = (NXTFRecipeItemDto *)anObject;
  if ((__recipeType_isset != other->__recipeType_isset) ||
      (__recipeType_isset && ((__recipeType || other->__recipeType) && ![__recipeType isEqual:other->__recipeType]))) {
    return NO;
  }
  if ((__itemName_isset != other->__itemName_isset) ||
      (__itemName_isset && ((__itemName || other->__itemName) && ![__itemName isEqual:other->__itemName]))) {
    return NO;
  }
  if ((__dose_isset != other->__dose_isset) ||
      (__dose_isset && ((__dose || other->__dose) && ![__dose isEqual:other->__dose]))) {
    return NO;
  }
  if ((__frequency_isset != other->__frequency_isset) ||
      (__frequency_isset && ((__frequency || other->__frequency) && ![__frequency isEqual:other->__frequency]))) {
    return NO;
  }
  if ((__usage_isset != other->__usage_isset) ||
      (__usage_isset && ((__usage || other->__usage) && ![__usage isEqual:other->__usage]))) {
    return NO;
  }
  if ((__dosage_isset != other->__dosage_isset) ||
      (__dosage_isset && ((__dosage || other->__dosage) && ![__dosage isEqual:other->__dosage]))) {
    return NO;
  }
  if ((__dosageSpec_isset != other->__dosageSpec_isset) ||
      (__dosageSpec_isset && ((__dosageSpec || other->__dosageSpec) && ![__dosageSpec isEqual:other->__dosageSpec]))) {
    return NO;
  }
  if ((__itemNum_isset != other->__itemNum_isset) ||
      (__itemNum_isset && ((__itemNum || other->__itemNum) && ![__itemNum isEqual:other->__itemNum]))) {
    return NO;
  }
  if ((__itemSpec_isset != other->__itemSpec_isset) ||
      (__itemSpec_isset && ((__itemSpec || other->__itemSpec) && ![__itemSpec isEqual:other->__itemSpec]))) {
    return NO;
  }
  if ((__itemPrice_isset != other->__itemPrice_isset) ||
      (__itemPrice_isset && ((__itemPrice || other->__itemPrice) && ![__itemPrice isEqual:other->__itemPrice]))) {
    return NO;
  }
  if ((__itemFee_isset != other->__itemFee_isset) ||
      (__itemFee_isset && ((__itemFee || other->__itemFee) && ![__itemFee isEqual:other->__itemFee]))) {
    return NO;
  }
  if ((__execDeptName_isset != other->__execDeptName_isset) ||
      (__execDeptName_isset && ((__execDeptName || other->__execDeptName) && ![__execDeptName isEqual:other->__execDeptName]))) {
    return NO;
  }
  if ((__execStatus_isset != other->__execStatus_isset) ||
      (__execStatus_isset && ((__execStatus || other->__execStatus) && ![__execStatus isEqual:other->__execStatus]))) {
    return NO;
  }
  if ((__execLocation_isset != other->__execLocation_isset) ||
      (__execLocation_isset && ((__execLocation || other->__execLocation) && ![__execLocation isEqual:other->__execLocation]))) {
    return NO;
  }
  if ((__feeType_isset != other->__feeType_isset) ||
      (__feeType_isset && ((__feeType || other->__feeType) && ![__feeType isEqual:other->__feeType]))) {
    return NO;
  }
  if ((__pics_isset != other->__pics_isset) ||
      (__pics_isset && ((__pics || other->__pics) && ![__pics isEqual:other->__pics]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__recipeType release_stub];
  [__itemName release_stub];
  [__dose release_stub];
  [__frequency release_stub];
  [__usage release_stub];
  [__dosage release_stub];
  [__dosageSpec release_stub];
  [__itemNum release_stub];
  [__itemSpec release_stub];
  [__itemPrice release_stub];
  [__itemFee release_stub];
  [__execDeptName release_stub];
  [__execStatus release_stub];
  [__execLocation release_stub];
  [__feeType release_stub];
  [__pics release_stub];
  [super dealloc_stub];
}

- (NSString *) recipeType {
  return [[__recipeType retain_stub] autorelease_stub];
}

- (void) setRecipeType: (NSString *) recipeType {
  [recipeType retain_stub];
  [__recipeType release_stub];
  __recipeType = recipeType;
  __recipeType_isset = YES;
}

- (BOOL) recipeTypeIsSet {
  return __recipeType_isset;
}

- (void) unsetRecipeType {
  [__recipeType release_stub];
  __recipeType = nil;
  __recipeType_isset = NO;
}

- (NSString *) itemName {
  return [[__itemName retain_stub] autorelease_stub];
}

- (void) setItemName: (NSString *) itemName {
  [itemName retain_stub];
  [__itemName release_stub];
  __itemName = itemName;
  __itemName_isset = YES;
}

- (BOOL) itemNameIsSet {
  return __itemName_isset;
}

- (void) unsetItemName {
  [__itemName release_stub];
  __itemName = nil;
  __itemName_isset = NO;
}

- (NSString *) dose {
  return [[__dose retain_stub] autorelease_stub];
}

- (void) setDose: (NSString *) dose {
  [dose retain_stub];
  [__dose release_stub];
  __dose = dose;
  __dose_isset = YES;
}

- (BOOL) doseIsSet {
  return __dose_isset;
}

- (void) unsetDose {
  [__dose release_stub];
  __dose = nil;
  __dose_isset = NO;
}

- (NSString *) frequency {
  return [[__frequency retain_stub] autorelease_stub];
}

- (void) setFrequency: (NSString *) frequency {
  [frequency retain_stub];
  [__frequency release_stub];
  __frequency = frequency;
  __frequency_isset = YES;
}

- (BOOL) frequencyIsSet {
  return __frequency_isset;
}

- (void) unsetFrequency {
  [__frequency release_stub];
  __frequency = nil;
  __frequency_isset = NO;
}

- (NSString *) usage {
  return [[__usage retain_stub] autorelease_stub];
}

- (void) setUsage: (NSString *) usage {
  [usage retain_stub];
  [__usage release_stub];
  __usage = usage;
  __usage_isset = YES;
}

- (BOOL) usageIsSet {
  return __usage_isset;
}

- (void) unsetUsage {
  [__usage release_stub];
  __usage = nil;
  __usage_isset = NO;
}

- (NSString *) dosage {
  return [[__dosage retain_stub] autorelease_stub];
}

- (void) setDosage: (NSString *) dosage {
  [dosage retain_stub];
  [__dosage release_stub];
  __dosage = dosage;
  __dosage_isset = YES;
}

- (BOOL) dosageIsSet {
  return __dosage_isset;
}

- (void) unsetDosage {
  [__dosage release_stub];
  __dosage = nil;
  __dosage_isset = NO;
}

- (NSString *) dosageSpec {
  return [[__dosageSpec retain_stub] autorelease_stub];
}

- (void) setDosageSpec: (NSString *) dosageSpec {
  [dosageSpec retain_stub];
  [__dosageSpec release_stub];
  __dosageSpec = dosageSpec;
  __dosageSpec_isset = YES;
}

- (BOOL) dosageSpecIsSet {
  return __dosageSpec_isset;
}

- (void) unsetDosageSpec {
  [__dosageSpec release_stub];
  __dosageSpec = nil;
  __dosageSpec_isset = NO;
}

- (NSString *) itemNum {
  return [[__itemNum retain_stub] autorelease_stub];
}

- (void) setItemNum: (NSString *) itemNum {
  [itemNum retain_stub];
  [__itemNum release_stub];
  __itemNum = itemNum;
  __itemNum_isset = YES;
}

- (BOOL) itemNumIsSet {
  return __itemNum_isset;
}

- (void) unsetItemNum {
  [__itemNum release_stub];
  __itemNum = nil;
  __itemNum_isset = NO;
}

- (NSString *) itemSpec {
  return [[__itemSpec retain_stub] autorelease_stub];
}

- (void) setItemSpec: (NSString *) itemSpec {
  [itemSpec retain_stub];
  [__itemSpec release_stub];
  __itemSpec = itemSpec;
  __itemSpec_isset = YES;
}

- (BOOL) itemSpecIsSet {
  return __itemSpec_isset;
}

- (void) unsetItemSpec {
  [__itemSpec release_stub];
  __itemSpec = nil;
  __itemSpec_isset = NO;
}

- (NSString *) itemPrice {
  return [[__itemPrice retain_stub] autorelease_stub];
}

- (void) setItemPrice: (NSString *) itemPrice {
  [itemPrice retain_stub];
  [__itemPrice release_stub];
  __itemPrice = itemPrice;
  __itemPrice_isset = YES;
}

- (BOOL) itemPriceIsSet {
  return __itemPrice_isset;
}

- (void) unsetItemPrice {
  [__itemPrice release_stub];
  __itemPrice = nil;
  __itemPrice_isset = NO;
}

- (NSString *) itemFee {
  return [[__itemFee retain_stub] autorelease_stub];
}

- (void) setItemFee: (NSString *) itemFee {
  [itemFee retain_stub];
  [__itemFee release_stub];
  __itemFee = itemFee;
  __itemFee_isset = YES;
}

- (BOOL) itemFeeIsSet {
  return __itemFee_isset;
}

- (void) unsetItemFee {
  [__itemFee release_stub];
  __itemFee = nil;
  __itemFee_isset = NO;
}

- (NSString *) execDeptName {
  return [[__execDeptName retain_stub] autorelease_stub];
}

- (void) setExecDeptName: (NSString *) execDeptName {
  [execDeptName retain_stub];
  [__execDeptName release_stub];
  __execDeptName = execDeptName;
  __execDeptName_isset = YES;
}

- (BOOL) execDeptNameIsSet {
  return __execDeptName_isset;
}

- (void) unsetExecDeptName {
  [__execDeptName release_stub];
  __execDeptName = nil;
  __execDeptName_isset = NO;
}

- (NSString *) execStatus {
  return [[__execStatus retain_stub] autorelease_stub];
}

- (void) setExecStatus: (NSString *) execStatus {
  [execStatus retain_stub];
  [__execStatus release_stub];
  __execStatus = execStatus;
  __execStatus_isset = YES;
}

- (BOOL) execStatusIsSet {
  return __execStatus_isset;
}

- (void) unsetExecStatus {
  [__execStatus release_stub];
  __execStatus = nil;
  __execStatus_isset = NO;
}

- (NSString *) execLocation {
  return [[__execLocation retain_stub] autorelease_stub];
}

- (void) setExecLocation: (NSString *) execLocation {
  [execLocation retain_stub];
  [__execLocation release_stub];
  __execLocation = execLocation;
  __execLocation_isset = YES;
}

- (BOOL) execLocationIsSet {
  return __execLocation_isset;
}

- (void) unsetExecLocation {
  [__execLocation release_stub];
  __execLocation = nil;
  __execLocation_isset = NO;
}

- (NSString *) feeType {
  return [[__feeType retain_stub] autorelease_stub];
}

- (void) setFeeType: (NSString *) feeType {
  [feeType retain_stub];
  [__feeType release_stub];
  __feeType = feeType;
  __feeType_isset = YES;
}

- (BOOL) feeTypeIsSet {
  return __feeType_isset;
}

- (void) unsetFeeType {
  [__feeType release_stub];
  __feeType = nil;
  __feeType_isset = NO;
}

- (NSMutableArray *) pics {
  return [[__pics retain_stub] autorelease_stub];
}

- (void) setPics: (NSMutableArray *) pics {
  [pics retain_stub];
  [__pics release_stub];
  __pics = pics;
  __pics_isset = YES;
}

- (BOOL) picsIsSet {
  return __pics_isset;
}

- (void) unsetPics {
  [__pics release_stub];
  __pics = nil;
  __pics_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRecipeType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setItemName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDose: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFrequency: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDosage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDosageSpec: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setItemNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setItemSpec: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setItemPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setItemFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExecDeptName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExecStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExecLocation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFeeType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_LIST) {
          int _size60;
          [inProtocol readListBeginReturningElementType: NULL size: &_size60];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size60];
          int _i61;
          for (_i61 = 0; _i61 < _size60; ++_i61)
          {
            NSString * _elem62 = [inProtocol readString];
            [fieldValue addObject: _elem62];
          }
          [inProtocol readListEnd];
          [self setPics: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RecipeItemDto"];
  if (__recipeType_isset) {
    if (__recipeType != nil) {
      [outProtocol writeFieldBeginWithName: @"recipeType" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __recipeType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__itemName_isset) {
    if (__itemName != nil) {
      [outProtocol writeFieldBeginWithName: @"itemName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __itemName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dose_isset) {
    if (__dose != nil) {
      [outProtocol writeFieldBeginWithName: @"dose" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __dose];
      [outProtocol writeFieldEnd];
    }
  }
  if (__frequency_isset) {
    if (__frequency != nil) {
      [outProtocol writeFieldBeginWithName: @"frequency" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __frequency];
      [outProtocol writeFieldEnd];
    }
  }
  if (__usage_isset) {
    if (__usage != nil) {
      [outProtocol writeFieldBeginWithName: @"usage" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __usage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dosage_isset) {
    if (__dosage != nil) {
      [outProtocol writeFieldBeginWithName: @"dosage" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __dosage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dosageSpec_isset) {
    if (__dosageSpec != nil) {
      [outProtocol writeFieldBeginWithName: @"dosageSpec" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __dosageSpec];
      [outProtocol writeFieldEnd];
    }
  }
  if (__itemNum_isset) {
    if (__itemNum != nil) {
      [outProtocol writeFieldBeginWithName: @"itemNum" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __itemNum];
      [outProtocol writeFieldEnd];
    }
  }
  if (__itemSpec_isset) {
    if (__itemSpec != nil) {
      [outProtocol writeFieldBeginWithName: @"itemSpec" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __itemSpec];
      [outProtocol writeFieldEnd];
    }
  }
  if (__itemPrice_isset) {
    if (__itemPrice != nil) {
      [outProtocol writeFieldBeginWithName: @"itemPrice" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __itemPrice];
      [outProtocol writeFieldEnd];
    }
  }
  if (__itemFee_isset) {
    if (__itemFee != nil) {
      [outProtocol writeFieldBeginWithName: @"itemFee" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __itemFee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__execDeptName_isset) {
    if (__execDeptName != nil) {
      [outProtocol writeFieldBeginWithName: @"execDeptName" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __execDeptName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__execStatus_isset) {
    if (__execStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"execStatus" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __execStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__execLocation_isset) {
    if (__execLocation != nil) {
      [outProtocol writeFieldBeginWithName: @"execLocation" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __execLocation];
      [outProtocol writeFieldEnd];
    }
  }
  if (__feeType_isset) {
    if (__feeType != nil) {
      [outProtocol writeFieldBeginWithName: @"feeType" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __feeType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pics_isset) {
    if (__pics != nil) {
      [outProtocol writeFieldBeginWithName: @"pics" type: TType_LIST fieldID: 16];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__pics count]];
        int idx64;
        for (idx64 = 0; idx64 < [__pics count]; idx64++)
        {
          [outProtocol writeString: [__pics objectAtIndex: idx64]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRecipeItemDto("];
  [ms appendString: @"recipeType:"];
  [ms appendFormat: @"\"%@\"", __recipeType];
  [ms appendString: @",itemName:"];
  [ms appendFormat: @"\"%@\"", __itemName];
  [ms appendString: @",dose:"];
  [ms appendFormat: @"\"%@\"", __dose];
  [ms appendString: @",frequency:"];
  [ms appendFormat: @"\"%@\"", __frequency];
  [ms appendString: @",usage:"];
  [ms appendFormat: @"\"%@\"", __usage];
  [ms appendString: @",dosage:"];
  [ms appendFormat: @"\"%@\"", __dosage];
  [ms appendString: @",dosageSpec:"];
  [ms appendFormat: @"\"%@\"", __dosageSpec];
  [ms appendString: @",itemNum:"];
  [ms appendFormat: @"\"%@\"", __itemNum];
  [ms appendString: @",itemSpec:"];
  [ms appendFormat: @"\"%@\"", __itemSpec];
  [ms appendString: @",itemPrice:"];
  [ms appendFormat: @"\"%@\"", __itemPrice];
  [ms appendString: @",itemFee:"];
  [ms appendFormat: @"\"%@\"", __itemFee];
  [ms appendString: @",execDeptName:"];
  [ms appendFormat: @"\"%@\"", __execDeptName];
  [ms appendString: @",execStatus:"];
  [ms appendFormat: @"\"%@\"", __execStatus];
  [ms appendString: @",execLocation:"];
  [ms appendFormat: @"\"%@\"", __execLocation];
  [ms appendString: @",feeType:"];
  [ms appendFormat: @"\"%@\"", __feeType];
  [ms appendString: @",pics:"];
  [ms appendFormat: @"%@", __pics];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRecipeDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.recipeItems = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithRegNo: (NSString *) regNo recipeNo: (NSString *) recipeNo recipeId: (NSString *) recipeId recipeDate: (NSString *) recipeDate recipeFee: (NSString *) recipeFee payStatus: (NSString *) payStatus recipeDrName: (NSString *) recipeDrName medicalCount: (int32_t) medicalCount nonMedicalCount: (int32_t) nonMedicalCount recipeItems: (NSMutableArray *) recipeItems pubFee: (NSString *) pubFee sumFee: (NSString *) sumFee
{
  self = [super init];
  __regNo = [regNo retain_stub];
  __regNo_isset = YES;
  __recipeNo = [recipeNo retain_stub];
  __recipeNo_isset = YES;
  __recipeId = [recipeId retain_stub];
  __recipeId_isset = YES;
  __recipeDate = [recipeDate retain_stub];
  __recipeDate_isset = YES;
  __recipeFee = [recipeFee retain_stub];
  __recipeFee_isset = YES;
  __payStatus = [payStatus retain_stub];
  __payStatus_isset = YES;
  __recipeDrName = [recipeDrName retain_stub];
  __recipeDrName_isset = YES;
  __medicalCount = medicalCount;
  __medicalCount_isset = YES;
  __nonMedicalCount = nonMedicalCount;
  __nonMedicalCount_isset = YES;
  __recipeItems = [recipeItems retain_stub];
  __recipeItems_isset = YES;
  __pubFee = [pubFee retain_stub];
  __pubFee_isset = YES;
  __sumFee = [sumFee retain_stub];
  __sumFee_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"regNo"])
  {
    __regNo = [[decoder decodeObjectForKey: @"regNo"] retain_stub];
    __regNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"recipeNo"])
  {
    __recipeNo = [[decoder decodeObjectForKey: @"recipeNo"] retain_stub];
    __recipeNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"recipeId"])
  {
    __recipeId = [[decoder decodeObjectForKey: @"recipeId"] retain_stub];
    __recipeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"recipeDate"])
  {
    __recipeDate = [[decoder decodeObjectForKey: @"recipeDate"] retain_stub];
    __recipeDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"recipeFee"])
  {
    __recipeFee = [[decoder decodeObjectForKey: @"recipeFee"] retain_stub];
    __recipeFee_isset = YES;
  }
  if ([decoder containsValueForKey: @"payStatus"])
  {
    __payStatus = [[decoder decodeObjectForKey: @"payStatus"] retain_stub];
    __payStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"recipeDrName"])
  {
    __recipeDrName = [[decoder decodeObjectForKey: @"recipeDrName"] retain_stub];
    __recipeDrName_isset = YES;
  }
  if ([decoder containsValueForKey: @"medicalCount"])
  {
    __medicalCount = [decoder decodeInt32ForKey: @"medicalCount"];
    __medicalCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"nonMedicalCount"])
  {
    __nonMedicalCount = [decoder decodeInt32ForKey: @"nonMedicalCount"];
    __nonMedicalCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"recipeItems"])
  {
    __recipeItems = [[decoder decodeObjectForKey: @"recipeItems"] retain_stub];
    __recipeItems_isset = YES;
  }
  if ([decoder containsValueForKey: @"pubFee"])
  {
    __pubFee = [[decoder decodeObjectForKey: @"pubFee"] retain_stub];
    __pubFee_isset = YES;
  }
  if ([decoder containsValueForKey: @"sumFee"])
  {
    __sumFee = [[decoder decodeObjectForKey: @"sumFee"] retain_stub];
    __sumFee_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__regNo_isset)
  {
    [encoder encodeObject: __regNo forKey: @"regNo"];
  }
  if (__recipeNo_isset)
  {
    [encoder encodeObject: __recipeNo forKey: @"recipeNo"];
  }
  if (__recipeId_isset)
  {
    [encoder encodeObject: __recipeId forKey: @"recipeId"];
  }
  if (__recipeDate_isset)
  {
    [encoder encodeObject: __recipeDate forKey: @"recipeDate"];
  }
  if (__recipeFee_isset)
  {
    [encoder encodeObject: __recipeFee forKey: @"recipeFee"];
  }
  if (__payStatus_isset)
  {
    [encoder encodeObject: __payStatus forKey: @"payStatus"];
  }
  if (__recipeDrName_isset)
  {
    [encoder encodeObject: __recipeDrName forKey: @"recipeDrName"];
  }
  if (__medicalCount_isset)
  {
    [encoder encodeInt32: __medicalCount forKey: @"medicalCount"];
  }
  if (__nonMedicalCount_isset)
  {
    [encoder encodeInt32: __nonMedicalCount forKey: @"nonMedicalCount"];
  }
  if (__recipeItems_isset)
  {
    [encoder encodeObject: __recipeItems forKey: @"recipeItems"];
  }
  if (__pubFee_isset)
  {
    [encoder encodeObject: __pubFee forKey: @"pubFee"];
  }
  if (__sumFee_isset)
  {
    [encoder encodeObject: __sumFee forKey: @"sumFee"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __regNo_isset ? 2654435761 : 0;
  if (__regNo_isset)
  {
    hash = (hash * 31) ^ [__regNo hash];
  }
  hash = (hash * 31) ^ __recipeNo_isset ? 2654435761 : 0;
  if (__recipeNo_isset)
  {
    hash = (hash * 31) ^ [__recipeNo hash];
  }
  hash = (hash * 31) ^ __recipeId_isset ? 2654435761 : 0;
  if (__recipeId_isset)
  {
    hash = (hash * 31) ^ [__recipeId hash];
  }
  hash = (hash * 31) ^ __recipeDate_isset ? 2654435761 : 0;
  if (__recipeDate_isset)
  {
    hash = (hash * 31) ^ [__recipeDate hash];
  }
  hash = (hash * 31) ^ __recipeFee_isset ? 2654435761 : 0;
  if (__recipeFee_isset)
  {
    hash = (hash * 31) ^ [__recipeFee hash];
  }
  hash = (hash * 31) ^ __payStatus_isset ? 2654435761 : 0;
  if (__payStatus_isset)
  {
    hash = (hash * 31) ^ [__payStatus hash];
  }
  hash = (hash * 31) ^ __recipeDrName_isset ? 2654435761 : 0;
  if (__recipeDrName_isset)
  {
    hash = (hash * 31) ^ [__recipeDrName hash];
  }
  hash = (hash * 31) ^ __medicalCount_isset ? 2654435761 : 0;
  if (__medicalCount_isset)
  {
    hash = (hash * 31) ^ [@(__medicalCount) hash];
  }
  hash = (hash * 31) ^ __nonMedicalCount_isset ? 2654435761 : 0;
  if (__nonMedicalCount_isset)
  {
    hash = (hash * 31) ^ [@(__nonMedicalCount) hash];
  }
  hash = (hash * 31) ^ __recipeItems_isset ? 2654435761 : 0;
  if (__recipeItems_isset)
  {
    hash = (hash * 31) ^ [__recipeItems hash];
  }
  hash = (hash * 31) ^ __pubFee_isset ? 2654435761 : 0;
  if (__pubFee_isset)
  {
    hash = (hash * 31) ^ [__pubFee hash];
  }
  hash = (hash * 31) ^ __sumFee_isset ? 2654435761 : 0;
  if (__sumFee_isset)
  {
    hash = (hash * 31) ^ [__sumFee hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRecipeDto class]]) {
    return NO;
  }
  NXTFRecipeDto *other = (NXTFRecipeDto *)anObject;
  if ((__regNo_isset != other->__regNo_isset) ||
      (__regNo_isset && ((__regNo || other->__regNo) && ![__regNo isEqual:other->__regNo]))) {
    return NO;
  }
  if ((__recipeNo_isset != other->__recipeNo_isset) ||
      (__recipeNo_isset && ((__recipeNo || other->__recipeNo) && ![__recipeNo isEqual:other->__recipeNo]))) {
    return NO;
  }
  if ((__recipeId_isset != other->__recipeId_isset) ||
      (__recipeId_isset && ((__recipeId || other->__recipeId) && ![__recipeId isEqual:other->__recipeId]))) {
    return NO;
  }
  if ((__recipeDate_isset != other->__recipeDate_isset) ||
      (__recipeDate_isset && ((__recipeDate || other->__recipeDate) && ![__recipeDate isEqual:other->__recipeDate]))) {
    return NO;
  }
  if ((__recipeFee_isset != other->__recipeFee_isset) ||
      (__recipeFee_isset && ((__recipeFee || other->__recipeFee) && ![__recipeFee isEqual:other->__recipeFee]))) {
    return NO;
  }
  if ((__payStatus_isset != other->__payStatus_isset) ||
      (__payStatus_isset && ((__payStatus || other->__payStatus) && ![__payStatus isEqual:other->__payStatus]))) {
    return NO;
  }
  if ((__recipeDrName_isset != other->__recipeDrName_isset) ||
      (__recipeDrName_isset && ((__recipeDrName || other->__recipeDrName) && ![__recipeDrName isEqual:other->__recipeDrName]))) {
    return NO;
  }
  if ((__medicalCount_isset != other->__medicalCount_isset) ||
      (__medicalCount_isset && (__medicalCount != other->__medicalCount))) {
    return NO;
  }
  if ((__nonMedicalCount_isset != other->__nonMedicalCount_isset) ||
      (__nonMedicalCount_isset && (__nonMedicalCount != other->__nonMedicalCount))) {
    return NO;
  }
  if ((__recipeItems_isset != other->__recipeItems_isset) ||
      (__recipeItems_isset && ((__recipeItems || other->__recipeItems) && ![__recipeItems isEqual:other->__recipeItems]))) {
    return NO;
  }
  if ((__pubFee_isset != other->__pubFee_isset) ||
      (__pubFee_isset && ((__pubFee || other->__pubFee) && ![__pubFee isEqual:other->__pubFee]))) {
    return NO;
  }
  if ((__sumFee_isset != other->__sumFee_isset) ||
      (__sumFee_isset && ((__sumFee || other->__sumFee) && ![__sumFee isEqual:other->__sumFee]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__regNo release_stub];
  [__recipeNo release_stub];
  [__recipeId release_stub];
  [__recipeDate release_stub];
  [__recipeFee release_stub];
  [__payStatus release_stub];
  [__recipeDrName release_stub];
  [__recipeItems release_stub];
  [__pubFee release_stub];
  [__sumFee release_stub];
  [super dealloc_stub];
}

- (NSString *) regNo {
  return [[__regNo retain_stub] autorelease_stub];
}

- (void) setRegNo: (NSString *) regNo {
  [regNo retain_stub];
  [__regNo release_stub];
  __regNo = regNo;
  __regNo_isset = YES;
}

- (BOOL) regNoIsSet {
  return __regNo_isset;
}

- (void) unsetRegNo {
  [__regNo release_stub];
  __regNo = nil;
  __regNo_isset = NO;
}

- (NSString *) recipeNo {
  return [[__recipeNo retain_stub] autorelease_stub];
}

- (void) setRecipeNo: (NSString *) recipeNo {
  [recipeNo retain_stub];
  [__recipeNo release_stub];
  __recipeNo = recipeNo;
  __recipeNo_isset = YES;
}

- (BOOL) recipeNoIsSet {
  return __recipeNo_isset;
}

- (void) unsetRecipeNo {
  [__recipeNo release_stub];
  __recipeNo = nil;
  __recipeNo_isset = NO;
}

- (NSString *) recipeId {
  return [[__recipeId retain_stub] autorelease_stub];
}

- (void) setRecipeId: (NSString *) recipeId {
  [recipeId retain_stub];
  [__recipeId release_stub];
  __recipeId = recipeId;
  __recipeId_isset = YES;
}

- (BOOL) recipeIdIsSet {
  return __recipeId_isset;
}

- (void) unsetRecipeId {
  [__recipeId release_stub];
  __recipeId = nil;
  __recipeId_isset = NO;
}

- (NSString *) recipeDate {
  return [[__recipeDate retain_stub] autorelease_stub];
}

- (void) setRecipeDate: (NSString *) recipeDate {
  [recipeDate retain_stub];
  [__recipeDate release_stub];
  __recipeDate = recipeDate;
  __recipeDate_isset = YES;
}

- (BOOL) recipeDateIsSet {
  return __recipeDate_isset;
}

- (void) unsetRecipeDate {
  [__recipeDate release_stub];
  __recipeDate = nil;
  __recipeDate_isset = NO;
}

- (NSString *) recipeFee {
  return [[__recipeFee retain_stub] autorelease_stub];
}

- (void) setRecipeFee: (NSString *) recipeFee {
  [recipeFee retain_stub];
  [__recipeFee release_stub];
  __recipeFee = recipeFee;
  __recipeFee_isset = YES;
}

- (BOOL) recipeFeeIsSet {
  return __recipeFee_isset;
}

- (void) unsetRecipeFee {
  [__recipeFee release_stub];
  __recipeFee = nil;
  __recipeFee_isset = NO;
}

- (NSString *) payStatus {
  return [[__payStatus retain_stub] autorelease_stub];
}

- (void) setPayStatus: (NSString *) payStatus {
  [payStatus retain_stub];
  [__payStatus release_stub];
  __payStatus = payStatus;
  __payStatus_isset = YES;
}

- (BOOL) payStatusIsSet {
  return __payStatus_isset;
}

- (void) unsetPayStatus {
  [__payStatus release_stub];
  __payStatus = nil;
  __payStatus_isset = NO;
}

- (NSString *) recipeDrName {
  return [[__recipeDrName retain_stub] autorelease_stub];
}

- (void) setRecipeDrName: (NSString *) recipeDrName {
  [recipeDrName retain_stub];
  [__recipeDrName release_stub];
  __recipeDrName = recipeDrName;
  __recipeDrName_isset = YES;
}

- (BOOL) recipeDrNameIsSet {
  return __recipeDrName_isset;
}

- (void) unsetRecipeDrName {
  [__recipeDrName release_stub];
  __recipeDrName = nil;
  __recipeDrName_isset = NO;
}

- (int32_t) medicalCount {
  return __medicalCount;
}

- (void) setMedicalCount: (int32_t) medicalCount {
  __medicalCount = medicalCount;
  __medicalCount_isset = YES;
}

- (BOOL) medicalCountIsSet {
  return __medicalCount_isset;
}

- (void) unsetMedicalCount {
  __medicalCount_isset = NO;
}

- (int32_t) nonMedicalCount {
  return __nonMedicalCount;
}

- (void) setNonMedicalCount: (int32_t) nonMedicalCount {
  __nonMedicalCount = nonMedicalCount;
  __nonMedicalCount_isset = YES;
}

- (BOOL) nonMedicalCountIsSet {
  return __nonMedicalCount_isset;
}

- (void) unsetNonMedicalCount {
  __nonMedicalCount_isset = NO;
}

- (NSMutableArray *) recipeItems {
  return [[__recipeItems retain_stub] autorelease_stub];
}

- (void) setRecipeItems: (NSMutableArray *) recipeItems {
  [recipeItems retain_stub];
  [__recipeItems release_stub];
  __recipeItems = recipeItems;
  __recipeItems_isset = YES;
}

- (BOOL) recipeItemsIsSet {
  return __recipeItems_isset;
}

- (void) unsetRecipeItems {
  [__recipeItems release_stub];
  __recipeItems = nil;
  __recipeItems_isset = NO;
}

- (NSString *) pubFee {
  return [[__pubFee retain_stub] autorelease_stub];
}

- (void) setPubFee: (NSString *) pubFee {
  [pubFee retain_stub];
  [__pubFee release_stub];
  __pubFee = pubFee;
  __pubFee_isset = YES;
}

- (BOOL) pubFeeIsSet {
  return __pubFee_isset;
}

- (void) unsetPubFee {
  [__pubFee release_stub];
  __pubFee = nil;
  __pubFee_isset = NO;
}

- (NSString *) sumFee {
  return [[__sumFee retain_stub] autorelease_stub];
}

- (void) setSumFee: (NSString *) sumFee {
  [sumFee retain_stub];
  [__sumFee release_stub];
  __sumFee = sumFee;
  __sumFee_isset = YES;
}

- (BOOL) sumFeeIsSet {
  return __sumFee_isset;
}

- (void) unsetSumFee {
  [__sumFee release_stub];
  __sumFee = nil;
  __sumFee_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRecipeNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRecipeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRecipeDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRecipeFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPayStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRecipeDrName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMedicalCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNonMedicalCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_LIST) {
          int _size65;
          [inProtocol readListBeginReturningElementType: NULL size: &_size65];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size65];
          int _i66;
          for (_i66 = 0; _i66 < _size65; ++_i66)
          {
            NXTFRecipeItemDto *_elem67 = [[NXTFRecipeItemDto alloc] init];
            [_elem67 read: inProtocol];
            [fieldValue addObject: _elem67];
            [_elem67 release_stub];
          }
          [inProtocol readListEnd];
          [self setRecipeItems: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPubFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSumFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RecipeDto"];
  if (__regNo_isset) {
    if (__regNo != nil) {
      [outProtocol writeFieldBeginWithName: @"regNo" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __regNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__recipeNo_isset) {
    if (__recipeNo != nil) {
      [outProtocol writeFieldBeginWithName: @"recipeNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __recipeNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__recipeId_isset) {
    if (__recipeId != nil) {
      [outProtocol writeFieldBeginWithName: @"recipeId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __recipeId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__recipeDate_isset) {
    if (__recipeDate != nil) {
      [outProtocol writeFieldBeginWithName: @"recipeDate" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __recipeDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__recipeFee_isset) {
    if (__recipeFee != nil) {
      [outProtocol writeFieldBeginWithName: @"recipeFee" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __recipeFee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__payStatus_isset) {
    if (__payStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"payStatus" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __payStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__recipeDrName_isset) {
    if (__recipeDrName != nil) {
      [outProtocol writeFieldBeginWithName: @"recipeDrName" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __recipeDrName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__medicalCount_isset) {
    [outProtocol writeFieldBeginWithName: @"medicalCount" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __medicalCount];
    [outProtocol writeFieldEnd];
  }
  if (__nonMedicalCount_isset) {
    [outProtocol writeFieldBeginWithName: @"nonMedicalCount" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __nonMedicalCount];
    [outProtocol writeFieldEnd];
  }
  if (__recipeItems_isset) {
    if (__recipeItems != nil) {
      [outProtocol writeFieldBeginWithName: @"recipeItems" type: TType_LIST fieldID: 10];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__recipeItems count]];
        int idx69;
        for (idx69 = 0; idx69 < [__recipeItems count]; idx69++)
        {
          [[__recipeItems objectAtIndex: idx69] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__pubFee_isset) {
    if (__pubFee != nil) {
      [outProtocol writeFieldBeginWithName: @"pubFee" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __pubFee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sumFee_isset) {
    if (__sumFee != nil) {
      [outProtocol writeFieldBeginWithName: @"sumFee" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __sumFee];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRecipeDto("];
  [ms appendString: @"regNo:"];
  [ms appendFormat: @"\"%@\"", __regNo];
  [ms appendString: @",recipeNo:"];
  [ms appendFormat: @"\"%@\"", __recipeNo];
  [ms appendString: @",recipeId:"];
  [ms appendFormat: @"\"%@\"", __recipeId];
  [ms appendString: @",recipeDate:"];
  [ms appendFormat: @"\"%@\"", __recipeDate];
  [ms appendString: @",recipeFee:"];
  [ms appendFormat: @"\"%@\"", __recipeFee];
  [ms appendString: @",payStatus:"];
  [ms appendFormat: @"\"%@\"", __payStatus];
  [ms appendString: @",recipeDrName:"];
  [ms appendFormat: @"\"%@\"", __recipeDrName];
  [ms appendString: @",medicalCount:"];
  [ms appendFormat: @"%i", __medicalCount];
  [ms appendString: @",nonMedicalCount:"];
  [ms appendFormat: @"%i", __nonMedicalCount];
  [ms appendString: @",recipeItems:"];
  [ms appendFormat: @"%@", __recipeItems];
  [ms appendString: @",pubFee:"];
  [ms appendFormat: @"\"%@\"", __pubFee];
  [ms appendString: @",sumFee:"];
  [ms appendFormat: @"\"%@\"", __sumFee];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFHospOutputDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPage: (NXTFPage *) page hosps: (NSMutableArray *) hosps
{
  self = [super init];
  __page = [page retain_stub];
  __page_isset = YES;
  __hosps = [hosps retain_stub];
  __hosps_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"hosps"])
  {
    __hosps = [[decoder decodeObjectForKey: @"hosps"] retain_stub];
    __hosps_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__hosps_isset)
  {
    [encoder encodeObject: __hosps forKey: @"hosps"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __hosps_isset ? 2654435761 : 0;
  if (__hosps_isset)
  {
    hash = (hash * 31) ^ [__hosps hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFHospOutputDto class]]) {
    return NO;
  }
  NXTFHospOutputDto *other = (NXTFHospOutputDto *)anObject;
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__hosps_isset != other->__hosps_isset) ||
      (__hosps_isset && ((__hosps || other->__hosps) && ![__hosps isEqual:other->__hosps]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__page release_stub];
  [__hosps release_stub];
  [super dealloc_stub];
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSMutableArray *) hosps {
  return [[__hosps retain_stub] autorelease_stub];
}

- (void) setHosps: (NSMutableArray *) hosps {
  [hosps retain_stub];
  [__hosps release_stub];
  __hosps = hosps;
  __hosps_isset = YES;
}

- (BOOL) hospsIsSet {
  return __hosps_isset;
}

- (void) unsetHosps {
  [__hosps release_stub];
  __hosps = nil;
  __hosps_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size70;
          [inProtocol readListBeginReturningElementType: NULL size: &_size70];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size70];
          int _i71;
          for (_i71 = 0; _i71 < _size70; ++_i71)
          {
            NXTFFindHospOutput *_elem72 = [[NXTFFindHospOutput alloc] init];
            [_elem72 read: inProtocol];
            [fieldValue addObject: _elem72];
            [_elem72 release_stub];
          }
          [inProtocol readListEnd];
          [self setHosps: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HospOutputDto"];
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 1];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hosps_isset) {
    if (__hosps != nil) {
      [outProtocol writeFieldBeginWithName: @"hosps" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__hosps count]];
        int idx74;
        for (idx74 = 0; idx74 < [__hosps count]; idx74++)
        {
          [[__hosps objectAtIndex: idx74] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFHospOutputDto("];
  [ms appendString: @"page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",hosps:"];
  [ms appendFormat: @"%@", __hosps];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFDoctorOutputDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPage: (NXTFPage *) page doctors: (NSMutableArray *) doctors
{
  self = [super init];
  __page = [page retain_stub];
  __page_isset = YES;
  __doctors = [doctors retain_stub];
  __doctors_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"doctors"])
  {
    __doctors = [[decoder decodeObjectForKey: @"doctors"] retain_stub];
    __doctors_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__doctors_isset)
  {
    [encoder encodeObject: __doctors forKey: @"doctors"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __doctors_isset ? 2654435761 : 0;
  if (__doctors_isset)
  {
    hash = (hash * 31) ^ [__doctors hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFDoctorOutputDto class]]) {
    return NO;
  }
  NXTFDoctorOutputDto *other = (NXTFDoctorOutputDto *)anObject;
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__doctors_isset != other->__doctors_isset) ||
      (__doctors_isset && ((__doctors || other->__doctors) && ![__doctors isEqual:other->__doctors]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__page release_stub];
  [__doctors release_stub];
  [super dealloc_stub];
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSMutableArray *) doctors {
  return [[__doctors retain_stub] autorelease_stub];
}

- (void) setDoctors: (NSMutableArray *) doctors {
  [doctors retain_stub];
  [__doctors release_stub];
  __doctors = doctors;
  __doctors_isset = YES;
}

- (BOOL) doctorsIsSet {
  return __doctors_isset;
}

- (void) unsetDoctors {
  [__doctors release_stub];
  __doctors = nil;
  __doctors_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size75;
          [inProtocol readListBeginReturningElementType: NULL size: &_size75];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size75];
          int _i76;
          for (_i76 = 0; _i76 < _size75; ++_i76)
          {
            NXTFFindDoctorOutput *_elem77 = [[NXTFFindDoctorOutput alloc] init];
            [_elem77 read: inProtocol];
            [fieldValue addObject: _elem77];
            [_elem77 release_stub];
          }
          [inProtocol readListEnd];
          [self setDoctors: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DoctorOutputDto"];
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 1];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__doctors_isset) {
    if (__doctors != nil) {
      [outProtocol writeFieldBeginWithName: @"doctors" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__doctors count]];
        int idx79;
        for (idx79 = 0; idx79 < [__doctors count]; idx79++)
        {
          [[__doctors objectAtIndex: idx79] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFDoctorOutputDto("];
  [ms appendString: @"page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",doctors:"];
  [ms appendFormat: @"%@", __doctors];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFDiseaseOutputDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPage: (NXTFPage *) page diseases: (NSMutableArray *) diseases
{
  self = [super init];
  __page = [page retain_stub];
  __page_isset = YES;
  __diseases = [diseases retain_stub];
  __diseases_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"diseases"])
  {
    __diseases = [[decoder decodeObjectForKey: @"diseases"] retain_stub];
    __diseases_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__diseases_isset)
  {
    [encoder encodeObject: __diseases forKey: @"diseases"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __diseases_isset ? 2654435761 : 0;
  if (__diseases_isset)
  {
    hash = (hash * 31) ^ [__diseases hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFDiseaseOutputDto class]]) {
    return NO;
  }
  NXTFDiseaseOutputDto *other = (NXTFDiseaseOutputDto *)anObject;
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__diseases_isset != other->__diseases_isset) ||
      (__diseases_isset && ((__diseases || other->__diseases) && ![__diseases isEqual:other->__diseases]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__page release_stub];
  [__diseases release_stub];
  [super dealloc_stub];
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSMutableArray *) diseases {
  return [[__diseases retain_stub] autorelease_stub];
}

- (void) setDiseases: (NSMutableArray *) diseases {
  [diseases retain_stub];
  [__diseases release_stub];
  __diseases = diseases;
  __diseases_isset = YES;
}

- (BOOL) diseasesIsSet {
  return __diseases_isset;
}

- (void) unsetDiseases {
  [__diseases release_stub];
  __diseases = nil;
  __diseases_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size80;
          [inProtocol readListBeginReturningElementType: NULL size: &_size80];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size80];
          int _i81;
          for (_i81 = 0; _i81 < _size80; ++_i81)
          {
            NXTFDiseaseDto *_elem82 = [[NXTFDiseaseDto alloc] init];
            [_elem82 read: inProtocol];
            [fieldValue addObject: _elem82];
            [_elem82 release_stub];
          }
          [inProtocol readListEnd];
          [self setDiseases: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DiseaseOutputDto"];
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 1];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diseases_isset) {
    if (__diseases != nil) {
      [outProtocol writeFieldBeginWithName: @"diseases" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__diseases count]];
        int idx84;
        for (idx84 = 0; idx84 < [__diseases count]; idx84++)
        {
          [[__diseases objectAtIndex: idx84] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFDiseaseOutputDto("];
  [ms appendString: @"page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",diseases:"];
  [ms appendFormat: @"%@", __diseases];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFEvaluateDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEvalType: (int32_t) evalType evalDate: (NSString *) evalDate patientName: (NSString *) patientName disease: (NSString *) disease message: (NSString *) message general: (NSString *) general attitude: (int32_t) attitude effect: (int32_t) effect waiting: (int32_t) waiting consult: (int32_t) consult hospSrv: (int32_t) hospSrv visit: (int32_t) visit
{
  self = [super init];
  __evalType = evalType;
  __evalType_isset = YES;
  __evalDate = [evalDate retain_stub];
  __evalDate_isset = YES;
  __patientName = [patientName retain_stub];
  __patientName_isset = YES;
  __disease = [disease retain_stub];
  __disease_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  __general = [general retain_stub];
  __general_isset = YES;
  __attitude = attitude;
  __attitude_isset = YES;
  __effect = effect;
  __effect_isset = YES;
  __waiting = waiting;
  __waiting_isset = YES;
  __consult = consult;
  __consult_isset = YES;
  __hospSrv = hospSrv;
  __hospSrv_isset = YES;
  __visit = visit;
  __visit_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"evalType"])
  {
    __evalType = [decoder decodeInt32ForKey: @"evalType"];
    __evalType_isset = YES;
  }
  if ([decoder containsValueForKey: @"evalDate"])
  {
    __evalDate = [[decoder decodeObjectForKey: @"evalDate"] retain_stub];
    __evalDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientName"])
  {
    __patientName = [[decoder decodeObjectForKey: @"patientName"] retain_stub];
    __patientName_isset = YES;
  }
  if ([decoder containsValueForKey: @"disease"])
  {
    __disease = [[decoder decodeObjectForKey: @"disease"] retain_stub];
    __disease_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"general"])
  {
    __general = [[decoder decodeObjectForKey: @"general"] retain_stub];
    __general_isset = YES;
  }
  if ([decoder containsValueForKey: @"attitude"])
  {
    __attitude = [decoder decodeInt32ForKey: @"attitude"];
    __attitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"effect"])
  {
    __effect = [decoder decodeInt32ForKey: @"effect"];
    __effect_isset = YES;
  }
  if ([decoder containsValueForKey: @"waiting"])
  {
    __waiting = [decoder decodeInt32ForKey: @"waiting"];
    __waiting_isset = YES;
  }
  if ([decoder containsValueForKey: @"consult"])
  {
    __consult = [decoder decodeInt32ForKey: @"consult"];
    __consult_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospSrv"])
  {
    __hospSrv = [decoder decodeInt32ForKey: @"hospSrv"];
    __hospSrv_isset = YES;
  }
  if ([decoder containsValueForKey: @"visit"])
  {
    __visit = [decoder decodeInt32ForKey: @"visit"];
    __visit_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__evalType_isset)
  {
    [encoder encodeInt32: __evalType forKey: @"evalType"];
  }
  if (__evalDate_isset)
  {
    [encoder encodeObject: __evalDate forKey: @"evalDate"];
  }
  if (__patientName_isset)
  {
    [encoder encodeObject: __patientName forKey: @"patientName"];
  }
  if (__disease_isset)
  {
    [encoder encodeObject: __disease forKey: @"disease"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__general_isset)
  {
    [encoder encodeObject: __general forKey: @"general"];
  }
  if (__attitude_isset)
  {
    [encoder encodeInt32: __attitude forKey: @"attitude"];
  }
  if (__effect_isset)
  {
    [encoder encodeInt32: __effect forKey: @"effect"];
  }
  if (__waiting_isset)
  {
    [encoder encodeInt32: __waiting forKey: @"waiting"];
  }
  if (__consult_isset)
  {
    [encoder encodeInt32: __consult forKey: @"consult"];
  }
  if (__hospSrv_isset)
  {
    [encoder encodeInt32: __hospSrv forKey: @"hospSrv"];
  }
  if (__visit_isset)
  {
    [encoder encodeInt32: __visit forKey: @"visit"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __evalType_isset ? 2654435761 : 0;
  if (__evalType_isset)
  {
    hash = (hash * 31) ^ [@(__evalType) hash];
  }
  hash = (hash * 31) ^ __evalDate_isset ? 2654435761 : 0;
  if (__evalDate_isset)
  {
    hash = (hash * 31) ^ [__evalDate hash];
  }
  hash = (hash * 31) ^ __patientName_isset ? 2654435761 : 0;
  if (__patientName_isset)
  {
    hash = (hash * 31) ^ [__patientName hash];
  }
  hash = (hash * 31) ^ __disease_isset ? 2654435761 : 0;
  if (__disease_isset)
  {
    hash = (hash * 31) ^ [__disease hash];
  }
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __general_isset ? 2654435761 : 0;
  if (__general_isset)
  {
    hash = (hash * 31) ^ [__general hash];
  }
  hash = (hash * 31) ^ __attitude_isset ? 2654435761 : 0;
  if (__attitude_isset)
  {
    hash = (hash * 31) ^ [@(__attitude) hash];
  }
  hash = (hash * 31) ^ __effect_isset ? 2654435761 : 0;
  if (__effect_isset)
  {
    hash = (hash * 31) ^ [@(__effect) hash];
  }
  hash = (hash * 31) ^ __waiting_isset ? 2654435761 : 0;
  if (__waiting_isset)
  {
    hash = (hash * 31) ^ [@(__waiting) hash];
  }
  hash = (hash * 31) ^ __consult_isset ? 2654435761 : 0;
  if (__consult_isset)
  {
    hash = (hash * 31) ^ [@(__consult) hash];
  }
  hash = (hash * 31) ^ __hospSrv_isset ? 2654435761 : 0;
  if (__hospSrv_isset)
  {
    hash = (hash * 31) ^ [@(__hospSrv) hash];
  }
  hash = (hash * 31) ^ __visit_isset ? 2654435761 : 0;
  if (__visit_isset)
  {
    hash = (hash * 31) ^ [@(__visit) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFEvaluateDto class]]) {
    return NO;
  }
  NXTFEvaluateDto *other = (NXTFEvaluateDto *)anObject;
  if ((__evalType_isset != other->__evalType_isset) ||
      (__evalType_isset && (__evalType != other->__evalType))) {
    return NO;
  }
  if ((__evalDate_isset != other->__evalDate_isset) ||
      (__evalDate_isset && ((__evalDate || other->__evalDate) && ![__evalDate isEqual:other->__evalDate]))) {
    return NO;
  }
  if ((__patientName_isset != other->__patientName_isset) ||
      (__patientName_isset && ((__patientName || other->__patientName) && ![__patientName isEqual:other->__patientName]))) {
    return NO;
  }
  if ((__disease_isset != other->__disease_isset) ||
      (__disease_isset && ((__disease || other->__disease) && ![__disease isEqual:other->__disease]))) {
    return NO;
  }
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__general_isset != other->__general_isset) ||
      (__general_isset && ((__general || other->__general) && ![__general isEqual:other->__general]))) {
    return NO;
  }
  if ((__attitude_isset != other->__attitude_isset) ||
      (__attitude_isset && (__attitude != other->__attitude))) {
    return NO;
  }
  if ((__effect_isset != other->__effect_isset) ||
      (__effect_isset && (__effect != other->__effect))) {
    return NO;
  }
  if ((__waiting_isset != other->__waiting_isset) ||
      (__waiting_isset && (__waiting != other->__waiting))) {
    return NO;
  }
  if ((__consult_isset != other->__consult_isset) ||
      (__consult_isset && (__consult != other->__consult))) {
    return NO;
  }
  if ((__hospSrv_isset != other->__hospSrv_isset) ||
      (__hospSrv_isset && (__hospSrv != other->__hospSrv))) {
    return NO;
  }
  if ((__visit_isset != other->__visit_isset) ||
      (__visit_isset && (__visit != other->__visit))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__evalDate release_stub];
  [__patientName release_stub];
  [__disease release_stub];
  [__message release_stub];
  [__general release_stub];
  [super dealloc_stub];
}

- (int32_t) evalType {
  return __evalType;
}

- (void) setEvalType: (int32_t) evalType {
  __evalType = evalType;
  __evalType_isset = YES;
}

- (BOOL) evalTypeIsSet {
  return __evalType_isset;
}

- (void) unsetEvalType {
  __evalType_isset = NO;
}

- (NSString *) evalDate {
  return [[__evalDate retain_stub] autorelease_stub];
}

- (void) setEvalDate: (NSString *) evalDate {
  [evalDate retain_stub];
  [__evalDate release_stub];
  __evalDate = evalDate;
  __evalDate_isset = YES;
}

- (BOOL) evalDateIsSet {
  return __evalDate_isset;
}

- (void) unsetEvalDate {
  [__evalDate release_stub];
  __evalDate = nil;
  __evalDate_isset = NO;
}

- (NSString *) patientName {
  return [[__patientName retain_stub] autorelease_stub];
}

- (void) setPatientName: (NSString *) patientName {
  [patientName retain_stub];
  [__patientName release_stub];
  __patientName = patientName;
  __patientName_isset = YES;
}

- (BOOL) patientNameIsSet {
  return __patientName_isset;
}

- (void) unsetPatientName {
  [__patientName release_stub];
  __patientName = nil;
  __patientName_isset = NO;
}

- (NSString *) disease {
  return [[__disease retain_stub] autorelease_stub];
}

- (void) setDisease: (NSString *) disease {
  [disease retain_stub];
  [__disease release_stub];
  __disease = disease;
  __disease_isset = YES;
}

- (BOOL) diseaseIsSet {
  return __disease_isset;
}

- (void) unsetDisease {
  [__disease release_stub];
  __disease = nil;
  __disease_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (NSString *) general {
  return [[__general retain_stub] autorelease_stub];
}

- (void) setGeneral: (NSString *) general {
  [general retain_stub];
  [__general release_stub];
  __general = general;
  __general_isset = YES;
}

- (BOOL) generalIsSet {
  return __general_isset;
}

- (void) unsetGeneral {
  [__general release_stub];
  __general = nil;
  __general_isset = NO;
}

- (int32_t) attitude {
  return __attitude;
}

- (void) setAttitude: (int32_t) attitude {
  __attitude = attitude;
  __attitude_isset = YES;
}

- (BOOL) attitudeIsSet {
  return __attitude_isset;
}

- (void) unsetAttitude {
  __attitude_isset = NO;
}

- (int32_t) effect {
  return __effect;
}

- (void) setEffect: (int32_t) effect {
  __effect = effect;
  __effect_isset = YES;
}

- (BOOL) effectIsSet {
  return __effect_isset;
}

- (void) unsetEffect {
  __effect_isset = NO;
}

- (int32_t) waiting {
  return __waiting;
}

- (void) setWaiting: (int32_t) waiting {
  __waiting = waiting;
  __waiting_isset = YES;
}

- (BOOL) waitingIsSet {
  return __waiting_isset;
}

- (void) unsetWaiting {
  __waiting_isset = NO;
}

- (int32_t) consult {
  return __consult;
}

- (void) setConsult: (int32_t) consult {
  __consult = consult;
  __consult_isset = YES;
}

- (BOOL) consultIsSet {
  return __consult_isset;
}

- (void) unsetConsult {
  __consult_isset = NO;
}

- (int32_t) hospSrv {
  return __hospSrv;
}

- (void) setHospSrv: (int32_t) hospSrv {
  __hospSrv = hospSrv;
  __hospSrv_isset = YES;
}

- (BOOL) hospSrvIsSet {
  return __hospSrv_isset;
}

- (void) unsetHospSrv {
  __hospSrv_isset = NO;
}

- (int32_t) visit {
  return __visit;
}

- (void) setVisit: (int32_t) visit {
  __visit = visit;
  __visit_isset = YES;
}

- (BOOL) visitIsSet {
  return __visit_isset;
}

- (void) unsetVisit {
  __visit_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setEvalType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEvalDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDisease: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGeneral: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setAttitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setEffect: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setWaiting: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setConsult: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospSrv: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setVisit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EvaluateDto"];
  if (__evalType_isset) {
    [outProtocol writeFieldBeginWithName: @"evalType" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __evalType];
    [outProtocol writeFieldEnd];
  }
  if (__evalDate_isset) {
    if (__evalDate != nil) {
      [outProtocol writeFieldBeginWithName: @"evalDate" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __evalDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientName_isset) {
    if (__patientName != nil) {
      [outProtocol writeFieldBeginWithName: @"patientName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __patientName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__disease_isset) {
    if (__disease != nil) {
      [outProtocol writeFieldBeginWithName: @"disease" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __disease];
      [outProtocol writeFieldEnd];
    }
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__general_isset) {
    if (__general != nil) {
      [outProtocol writeFieldBeginWithName: @"general" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __general];
      [outProtocol writeFieldEnd];
    }
  }
  if (__attitude_isset) {
    [outProtocol writeFieldBeginWithName: @"attitude" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __attitude];
    [outProtocol writeFieldEnd];
  }
  if (__effect_isset) {
    [outProtocol writeFieldBeginWithName: @"effect" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __effect];
    [outProtocol writeFieldEnd];
  }
  if (__waiting_isset) {
    [outProtocol writeFieldBeginWithName: @"waiting" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __waiting];
    [outProtocol writeFieldEnd];
  }
  if (__consult_isset) {
    [outProtocol writeFieldBeginWithName: @"consult" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __consult];
    [outProtocol writeFieldEnd];
  }
  if (__hospSrv_isset) {
    [outProtocol writeFieldBeginWithName: @"hospSrv" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __hospSrv];
    [outProtocol writeFieldEnd];
  }
  if (__visit_isset) {
    [outProtocol writeFieldBeginWithName: @"visit" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __visit];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFEvaluateDto("];
  [ms appendString: @"evalType:"];
  [ms appendFormat: @"%i", __evalType];
  [ms appendString: @",evalDate:"];
  [ms appendFormat: @"\"%@\"", __evalDate];
  [ms appendString: @",patientName:"];
  [ms appendFormat: @"\"%@\"", __patientName];
  [ms appendString: @",disease:"];
  [ms appendFormat: @"\"%@\"", __disease];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",general:"];
  [ms appendFormat: @"\"%@\"", __general];
  [ms appendString: @",attitude:"];
  [ms appendFormat: @"%i", __attitude];
  [ms appendString: @",effect:"];
  [ms appendFormat: @"%i", __effect];
  [ms appendString: @",waiting:"];
  [ms appendFormat: @"%i", __waiting];
  [ms appendString: @",consult:"];
  [ms appendFormat: @"%i", __consult];
  [ms appendString: @",hospSrv:"];
  [ms appendFormat: @"%i", __hospSrv];
  [ms appendString: @",visit:"];
  [ms appendFormat: @"%i", __visit];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPushmsgDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.extras = [[[NSMutableDictionary alloc] initWithCapacity:0] autorelease_stub]; 

#endif
  return self;
}

- (id) initWithAlert: (NSString *) alert extras: (NSMutableDictionary *) extras
{
  self = [super init];
  __alert = [alert retain_stub];
  __alert_isset = YES;
  __extras = [extras retain_stub];
  __extras_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"alert"])
  {
    __alert = [[decoder decodeObjectForKey: @"alert"] retain_stub];
    __alert_isset = YES;
  }
  if ([decoder containsValueForKey: @"extras"])
  {
    __extras = [[decoder decodeObjectForKey: @"extras"] retain_stub];
    __extras_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__alert_isset)
  {
    [encoder encodeObject: __alert forKey: @"alert"];
  }
  if (__extras_isset)
  {
    [encoder encodeObject: __extras forKey: @"extras"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __alert_isset ? 2654435761 : 0;
  if (__alert_isset)
  {
    hash = (hash * 31) ^ [__alert hash];
  }
  hash = (hash * 31) ^ __extras_isset ? 2654435761 : 0;
  if (__extras_isset)
  {
    hash = (hash * 31) ^ [__extras hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPushmsgDto class]]) {
    return NO;
  }
  NXTFPushmsgDto *other = (NXTFPushmsgDto *)anObject;
  if ((__alert_isset != other->__alert_isset) ||
      (__alert_isset && ((__alert || other->__alert) && ![__alert isEqual:other->__alert]))) {
    return NO;
  }
  if ((__extras_isset != other->__extras_isset) ||
      (__extras_isset && ((__extras || other->__extras) && ![__extras isEqual:other->__extras]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__alert release_stub];
  [__extras release_stub];
  [super dealloc_stub];
}

- (NSString *) alert {
  return [[__alert retain_stub] autorelease_stub];
}

- (void) setAlert: (NSString *) alert {
  [alert retain_stub];
  [__alert release_stub];
  __alert = alert;
  __alert_isset = YES;
}

- (BOOL) alertIsSet {
  return __alert_isset;
}

- (void) unsetAlert {
  [__alert release_stub];
  __alert = nil;
  __alert_isset = NO;
}

- (NSMutableDictionary *) extras {
  return [[__extras retain_stub] autorelease_stub];
}

- (void) setExtras: (NSMutableDictionary *) extras {
  [extras retain_stub];
  [__extras release_stub];
  __extras = extras;
  __extras_isset = YES;
}

- (BOOL) extrasIsSet {
  return __extras_isset;
}

- (void) unsetExtras {
  [__extras release_stub];
  __extras = nil;
  __extras_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAlert: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_MAP) {
          int _size85;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size85];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size85];
          int _i86;
          for (_i86 = 0; _i86 < _size85; ++_i86)
          {
            NSString * _key87 = [inProtocol readString];
            NSString * _val88 = [inProtocol readString];
            [fieldValue setObject: _val88 forKey: _key87];
          }
          [inProtocol readMapEnd];
          [self setExtras: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PushmsgDto"];
  if (__alert_isset) {
    if (__alert != nil) {
      [outProtocol writeFieldBeginWithName: @"alert" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __alert];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extras_isset) {
    if (__extras != nil) {
      [outProtocol writeFieldBeginWithName: @"extras" type: TType_MAP fieldID: 2];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__extras count]];
        NSEnumerator * _iter89 = [__extras keyEnumerator];
        id key90;
        while ((key90 = [_iter89 nextObject]))
        {
          [outProtocol writeString: key90];
          [outProtocol writeString: [__extras objectForKey: key90]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPushmsgDto("];
  [ms appendString: @"alert:"];
  [ms appendFormat: @"\"%@\"", __alert];
  [ms appendString: @",extras:"];
  [ms appendFormat: @"%@", __extras];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFInpatientCardDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHospId: (NSString *) hospId hospName: (NSString *) hospName patientId: (NSString *) patientId inpatientNo: (NSString *) inpatientNo hospLogo: (NSString *) hospLogo patientName: (NSString *) patientName
{
  self = [super init];
  __hospId = [hospId retain_stub];
  __hospId_isset = YES;
  __hospName = [hospName retain_stub];
  __hospName_isset = YES;
  __patientId = [patientId retain_stub];
  __patientId_isset = YES;
  __inpatientNo = [inpatientNo retain_stub];
  __inpatientNo_isset = YES;
  __hospLogo = [hospLogo retain_stub];
  __hospLogo_isset = YES;
  __patientName = [patientName retain_stub];
  __patientName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [[decoder decodeObjectForKey: @"hospId"] retain_stub];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospName"])
  {
    __hospName = [[decoder decodeObjectForKey: @"hospName"] retain_stub];
    __hospName_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [[decoder decodeObjectForKey: @"patientId"] retain_stub];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"inpatientNo"])
  {
    __inpatientNo = [[decoder decodeObjectForKey: @"inpatientNo"] retain_stub];
    __inpatientNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospLogo"])
  {
    __hospLogo = [[decoder decodeObjectForKey: @"hospLogo"] retain_stub];
    __hospLogo_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientName"])
  {
    __patientName = [[decoder decodeObjectForKey: @"patientName"] retain_stub];
    __patientName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__hospId_isset)
  {
    [encoder encodeObject: __hospId forKey: @"hospId"];
  }
  if (__hospName_isset)
  {
    [encoder encodeObject: __hospName forKey: @"hospName"];
  }
  if (__patientId_isset)
  {
    [encoder encodeObject: __patientId forKey: @"patientId"];
  }
  if (__inpatientNo_isset)
  {
    [encoder encodeObject: __inpatientNo forKey: @"inpatientNo"];
  }
  if (__hospLogo_isset)
  {
    [encoder encodeObject: __hospLogo forKey: @"hospLogo"];
  }
  if (__patientName_isset)
  {
    [encoder encodeObject: __patientName forKey: @"patientName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [__hospId hash];
  }
  hash = (hash * 31) ^ __hospName_isset ? 2654435761 : 0;
  if (__hospName_isset)
  {
    hash = (hash * 31) ^ [__hospName hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [__patientId hash];
  }
  hash = (hash * 31) ^ __inpatientNo_isset ? 2654435761 : 0;
  if (__inpatientNo_isset)
  {
    hash = (hash * 31) ^ [__inpatientNo hash];
  }
  hash = (hash * 31) ^ __hospLogo_isset ? 2654435761 : 0;
  if (__hospLogo_isset)
  {
    hash = (hash * 31) ^ [__hospLogo hash];
  }
  hash = (hash * 31) ^ __patientName_isset ? 2654435761 : 0;
  if (__patientName_isset)
  {
    hash = (hash * 31) ^ [__patientName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFInpatientCardDto class]]) {
    return NO;
  }
  NXTFInpatientCardDto *other = (NXTFInpatientCardDto *)anObject;
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && ((__hospId || other->__hospId) && ![__hospId isEqual:other->__hospId]))) {
    return NO;
  }
  if ((__hospName_isset != other->__hospName_isset) ||
      (__hospName_isset && ((__hospName || other->__hospName) && ![__hospName isEqual:other->__hospName]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && ((__patientId || other->__patientId) && ![__patientId isEqual:other->__patientId]))) {
    return NO;
  }
  if ((__inpatientNo_isset != other->__inpatientNo_isset) ||
      (__inpatientNo_isset && ((__inpatientNo || other->__inpatientNo) && ![__inpatientNo isEqual:other->__inpatientNo]))) {
    return NO;
  }
  if ((__hospLogo_isset != other->__hospLogo_isset) ||
      (__hospLogo_isset && ((__hospLogo || other->__hospLogo) && ![__hospLogo isEqual:other->__hospLogo]))) {
    return NO;
  }
  if ((__patientName_isset != other->__patientName_isset) ||
      (__patientName_isset && ((__patientName || other->__patientName) && ![__patientName isEqual:other->__patientName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__hospId release_stub];
  [__hospName release_stub];
  [__patientId release_stub];
  [__inpatientNo release_stub];
  [__hospLogo release_stub];
  [__patientName release_stub];
  [super dealloc_stub];
}

- (NSString *) hospId {
  return [[__hospId retain_stub] autorelease_stub];
}

- (void) setHospId: (NSString *) hospId {
  [hospId retain_stub];
  [__hospId release_stub];
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  [__hospId release_stub];
  __hospId = nil;
  __hospId_isset = NO;
}

- (NSString *) hospName {
  return [[__hospName retain_stub] autorelease_stub];
}

- (void) setHospName: (NSString *) hospName {
  [hospName retain_stub];
  [__hospName release_stub];
  __hospName = hospName;
  __hospName_isset = YES;
}

- (BOOL) hospNameIsSet {
  return __hospName_isset;
}

- (void) unsetHospName {
  [__hospName release_stub];
  __hospName = nil;
  __hospName_isset = NO;
}

- (NSString *) patientId {
  return [[__patientId retain_stub] autorelease_stub];
}

- (void) setPatientId: (NSString *) patientId {
  [patientId retain_stub];
  [__patientId release_stub];
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  [__patientId release_stub];
  __patientId = nil;
  __patientId_isset = NO;
}

- (NSString *) inpatientNo {
  return [[__inpatientNo retain_stub] autorelease_stub];
}

- (void) setInpatientNo: (NSString *) inpatientNo {
  [inpatientNo retain_stub];
  [__inpatientNo release_stub];
  __inpatientNo = inpatientNo;
  __inpatientNo_isset = YES;
}

- (BOOL) inpatientNoIsSet {
  return __inpatientNo_isset;
}

- (void) unsetInpatientNo {
  [__inpatientNo release_stub];
  __inpatientNo = nil;
  __inpatientNo_isset = NO;
}

- (NSString *) hospLogo {
  return [[__hospLogo retain_stub] autorelease_stub];
}

- (void) setHospLogo: (NSString *) hospLogo {
  [hospLogo retain_stub];
  [__hospLogo release_stub];
  __hospLogo = hospLogo;
  __hospLogo_isset = YES;
}

- (BOOL) hospLogoIsSet {
  return __hospLogo_isset;
}

- (void) unsetHospLogo {
  [__hospLogo release_stub];
  __hospLogo = nil;
  __hospLogo_isset = NO;
}

- (NSString *) patientName {
  return [[__patientName retain_stub] autorelease_stub];
}

- (void) setPatientName: (NSString *) patientName {
  [patientName retain_stub];
  [__patientName release_stub];
  __patientName = patientName;
  __patientName_isset = YES;
}

- (BOOL) patientNameIsSet {
  return __patientName_isset;
}

- (void) unsetPatientName {
  [__patientName release_stub];
  __patientName = nil;
  __patientName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInpatientNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospLogo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"InpatientCardDto"];
  if (__hospId_isset) {
    if (__hospId != nil) {
      [outProtocol writeFieldBeginWithName: @"hospId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __hospId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospName_isset) {
    if (__hospName != nil) {
      [outProtocol writeFieldBeginWithName: @"hospName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __hospName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    if (__patientId != nil) {
      [outProtocol writeFieldBeginWithName: @"patientId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __patientId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__inpatientNo_isset) {
    if (__inpatientNo != nil) {
      [outProtocol writeFieldBeginWithName: @"inpatientNo" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __inpatientNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospLogo_isset) {
    if (__hospLogo != nil) {
      [outProtocol writeFieldBeginWithName: @"hospLogo" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __hospLogo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientName_isset) {
    if (__patientName != nil) {
      [outProtocol writeFieldBeginWithName: @"patientName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __patientName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFInpatientCardDto("];
  [ms appendString: @"hospId:"];
  [ms appendFormat: @"\"%@\"", __hospId];
  [ms appendString: @",hospName:"];
  [ms appendFormat: @"\"%@\"", __hospName];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"\"%@\"", __patientId];
  [ms appendString: @",inpatientNo:"];
  [ms appendFormat: @"\"%@\"", __inpatientNo];
  [ms appendString: @",hospLogo:"];
  [ms appendFormat: @"\"%@\"", __hospLogo];
  [ms appendString: @",patientName:"];
  [ms appendFormat: @"\"%@\"", __patientName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFHospAnnDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTitle: (NSString *) title date: (NSString *) date content: (NSString *) content
{
  self = [super init];
  __title = [title retain_stub];
  __title_isset = YES;
  __date = [date retain_stub];
  __date_isset = YES;
  __content = [content retain_stub];
  __content_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"date"])
  {
    __date = [[decoder decodeObjectForKey: @"date"] retain_stub];
    __date_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain_stub];
    __content_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__date_isset)
  {
    [encoder encodeObject: __date forKey: @"date"];
  }
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __title_isset ? 2654435761 : 0;
  if (__title_isset)
  {
    hash = (hash * 31) ^ [__title hash];
  }
  hash = (hash * 31) ^ __date_isset ? 2654435761 : 0;
  if (__date_isset)
  {
    hash = (hash * 31) ^ [__date hash];
  }
  hash = (hash * 31) ^ __content_isset ? 2654435761 : 0;
  if (__content_isset)
  {
    hash = (hash * 31) ^ [__content hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFHospAnnDto class]]) {
    return NO;
  }
  NXTFHospAnnDto *other = (NXTFHospAnnDto *)anObject;
  if ((__title_isset != other->__title_isset) ||
      (__title_isset && ((__title || other->__title) && ![__title isEqual:other->__title]))) {
    return NO;
  }
  if ((__date_isset != other->__date_isset) ||
      (__date_isset && ((__date || other->__date) && ![__date isEqual:other->__date]))) {
    return NO;
  }
  if ((__content_isset != other->__content_isset) ||
      (__content_isset && ((__content || other->__content) && ![__content isEqual:other->__content]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__title release_stub];
  [__date release_stub];
  [__content release_stub];
  [super dealloc_stub];
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) date {
  return [[__date retain_stub] autorelease_stub];
}

- (void) setDate: (NSString *) date {
  [date retain_stub];
  [__date release_stub];
  __date = date;
  __date_isset = YES;
}

- (BOOL) dateIsSet {
  return __date_isset;
}

- (void) unsetDate {
  [__date release_stub];
  __date = nil;
  __date_isset = NO;
}

- (NSString *) content {
  return [[__content retain_stub] autorelease_stub];
}

- (void) setContent: (NSString *) content {
  [content retain_stub];
  [__content release_stub];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release_stub];
  __content = nil;
  __content_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HospAnnDto"];
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__date_isset) {
    if (__date != nil) {
      [outProtocol writeFieldBeginWithName: @"date" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __date];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __content];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFHospAnnDto("];
  [ms appendString: @"title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",date:"];
  [ms appendFormat: @"\"%@\"", __date];
  [ms appendString: @",content:"];
  [ms appendFormat: @"\"%@\"", __content];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFAdvertisDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAdId: (NSString *) adId title: (NSString *) title content: (NSString *) content summary: (NSString *) summary pointNum: (int32_t) pointNum qualityDate: (NSString *) qualityDate adsUrl: (NSString *) adsUrl adsPic: (NSString *) adsPic
{
  self = [super init];
  __adId = [adId retain_stub];
  __adId_isset = YES;
  __title = [title retain_stub];
  __title_isset = YES;
  __content = [content retain_stub];
  __content_isset = YES;
  __summary = [summary retain_stub];
  __summary_isset = YES;
  __pointNum = pointNum;
  __pointNum_isset = YES;
  __qualityDate = [qualityDate retain_stub];
  __qualityDate_isset = YES;
  __adsUrl = [adsUrl retain_stub];
  __adsUrl_isset = YES;
  __adsPic = [adsPic retain_stub];
  __adsPic_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"adId"])
  {
    __adId = [[decoder decodeObjectForKey: @"adId"] retain_stub];
    __adId_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain_stub];
    __content_isset = YES;
  }
  if ([decoder containsValueForKey: @"summary"])
  {
    __summary = [[decoder decodeObjectForKey: @"summary"] retain_stub];
    __summary_isset = YES;
  }
  if ([decoder containsValueForKey: @"pointNum"])
  {
    __pointNum = [decoder decodeInt32ForKey: @"pointNum"];
    __pointNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"qualityDate"])
  {
    __qualityDate = [[decoder decodeObjectForKey: @"qualityDate"] retain_stub];
    __qualityDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"adsUrl"])
  {
    __adsUrl = [[decoder decodeObjectForKey: @"adsUrl"] retain_stub];
    __adsUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"adsPic"])
  {
    __adsPic = [[decoder decodeObjectForKey: @"adsPic"] retain_stub];
    __adsPic_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__adId_isset)
  {
    [encoder encodeObject: __adId forKey: @"adId"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
  if (__summary_isset)
  {
    [encoder encodeObject: __summary forKey: @"summary"];
  }
  if (__pointNum_isset)
  {
    [encoder encodeInt32: __pointNum forKey: @"pointNum"];
  }
  if (__qualityDate_isset)
  {
    [encoder encodeObject: __qualityDate forKey: @"qualityDate"];
  }
  if (__adsUrl_isset)
  {
    [encoder encodeObject: __adsUrl forKey: @"adsUrl"];
  }
  if (__adsPic_isset)
  {
    [encoder encodeObject: __adsPic forKey: @"adsPic"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __adId_isset ? 2654435761 : 0;
  if (__adId_isset)
  {
    hash = (hash * 31) ^ [__adId hash];
  }
  hash = (hash * 31) ^ __title_isset ? 2654435761 : 0;
  if (__title_isset)
  {
    hash = (hash * 31) ^ [__title hash];
  }
  hash = (hash * 31) ^ __content_isset ? 2654435761 : 0;
  if (__content_isset)
  {
    hash = (hash * 31) ^ [__content hash];
  }
  hash = (hash * 31) ^ __summary_isset ? 2654435761 : 0;
  if (__summary_isset)
  {
    hash = (hash * 31) ^ [__summary hash];
  }
  hash = (hash * 31) ^ __pointNum_isset ? 2654435761 : 0;
  if (__pointNum_isset)
  {
    hash = (hash * 31) ^ [@(__pointNum) hash];
  }
  hash = (hash * 31) ^ __qualityDate_isset ? 2654435761 : 0;
  if (__qualityDate_isset)
  {
    hash = (hash * 31) ^ [__qualityDate hash];
  }
  hash = (hash * 31) ^ __adsUrl_isset ? 2654435761 : 0;
  if (__adsUrl_isset)
  {
    hash = (hash * 31) ^ [__adsUrl hash];
  }
  hash = (hash * 31) ^ __adsPic_isset ? 2654435761 : 0;
  if (__adsPic_isset)
  {
    hash = (hash * 31) ^ [__adsPic hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFAdvertisDto class]]) {
    return NO;
  }
  NXTFAdvertisDto *other = (NXTFAdvertisDto *)anObject;
  if ((__adId_isset != other->__adId_isset) ||
      (__adId_isset && ((__adId || other->__adId) && ![__adId isEqual:other->__adId]))) {
    return NO;
  }
  if ((__title_isset != other->__title_isset) ||
      (__title_isset && ((__title || other->__title) && ![__title isEqual:other->__title]))) {
    return NO;
  }
  if ((__content_isset != other->__content_isset) ||
      (__content_isset && ((__content || other->__content) && ![__content isEqual:other->__content]))) {
    return NO;
  }
  if ((__summary_isset != other->__summary_isset) ||
      (__summary_isset && ((__summary || other->__summary) && ![__summary isEqual:other->__summary]))) {
    return NO;
  }
  if ((__pointNum_isset != other->__pointNum_isset) ||
      (__pointNum_isset && (__pointNum != other->__pointNum))) {
    return NO;
  }
  if ((__qualityDate_isset != other->__qualityDate_isset) ||
      (__qualityDate_isset && ((__qualityDate || other->__qualityDate) && ![__qualityDate isEqual:other->__qualityDate]))) {
    return NO;
  }
  if ((__adsUrl_isset != other->__adsUrl_isset) ||
      (__adsUrl_isset && ((__adsUrl || other->__adsUrl) && ![__adsUrl isEqual:other->__adsUrl]))) {
    return NO;
  }
  if ((__adsPic_isset != other->__adsPic_isset) ||
      (__adsPic_isset && ((__adsPic || other->__adsPic) && ![__adsPic isEqual:other->__adsPic]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__adId release_stub];
  [__title release_stub];
  [__content release_stub];
  [__summary release_stub];
  [__qualityDate release_stub];
  [__adsUrl release_stub];
  [__adsPic release_stub];
  [super dealloc_stub];
}

- (NSString *) adId {
  return [[__adId retain_stub] autorelease_stub];
}

- (void) setAdId: (NSString *) adId {
  [adId retain_stub];
  [__adId release_stub];
  __adId = adId;
  __adId_isset = YES;
}

- (BOOL) adIdIsSet {
  return __adId_isset;
}

- (void) unsetAdId {
  [__adId release_stub];
  __adId = nil;
  __adId_isset = NO;
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) content {
  return [[__content retain_stub] autorelease_stub];
}

- (void) setContent: (NSString *) content {
  [content retain_stub];
  [__content release_stub];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release_stub];
  __content = nil;
  __content_isset = NO;
}

- (NSString *) summary {
  return [[__summary retain_stub] autorelease_stub];
}

- (void) setSummary: (NSString *) summary {
  [summary retain_stub];
  [__summary release_stub];
  __summary = summary;
  __summary_isset = YES;
}

- (BOOL) summaryIsSet {
  return __summary_isset;
}

- (void) unsetSummary {
  [__summary release_stub];
  __summary = nil;
  __summary_isset = NO;
}

- (int32_t) pointNum {
  return __pointNum;
}

- (void) setPointNum: (int32_t) pointNum {
  __pointNum = pointNum;
  __pointNum_isset = YES;
}

- (BOOL) pointNumIsSet {
  return __pointNum_isset;
}

- (void) unsetPointNum {
  __pointNum_isset = NO;
}

- (NSString *) qualityDate {
  return [[__qualityDate retain_stub] autorelease_stub];
}

- (void) setQualityDate: (NSString *) qualityDate {
  [qualityDate retain_stub];
  [__qualityDate release_stub];
  __qualityDate = qualityDate;
  __qualityDate_isset = YES;
}

- (BOOL) qualityDateIsSet {
  return __qualityDate_isset;
}

- (void) unsetQualityDate {
  [__qualityDate release_stub];
  __qualityDate = nil;
  __qualityDate_isset = NO;
}

- (NSString *) adsUrl {
  return [[__adsUrl retain_stub] autorelease_stub];
}

- (void) setAdsUrl: (NSString *) adsUrl {
  [adsUrl retain_stub];
  [__adsUrl release_stub];
  __adsUrl = adsUrl;
  __adsUrl_isset = YES;
}

- (BOOL) adsUrlIsSet {
  return __adsUrl_isset;
}

- (void) unsetAdsUrl {
  [__adsUrl release_stub];
  __adsUrl = nil;
  __adsUrl_isset = NO;
}

- (NSString *) adsPic {
  return [[__adsPic retain_stub] autorelease_stub];
}

- (void) setAdsPic: (NSString *) adsPic {
  [adsPic retain_stub];
  [__adsPic release_stub];
  __adsPic = adsPic;
  __adsPic_isset = YES;
}

- (BOOL) adsPicIsSet {
  return __adsPic_isset;
}

- (void) unsetAdsPic {
  [__adsPic release_stub];
  __adsPic = nil;
  __adsPic_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAdId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSummary: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPointNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setQualityDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAdsUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAdsPic: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AdvertisDto"];
  if (__adId_isset) {
    if (__adId != nil) {
      [outProtocol writeFieldBeginWithName: @"adId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __adId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __content];
      [outProtocol writeFieldEnd];
    }
  }
  if (__summary_isset) {
    if (__summary != nil) {
      [outProtocol writeFieldBeginWithName: @"summary" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __summary];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pointNum_isset) {
    [outProtocol writeFieldBeginWithName: @"pointNum" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __pointNum];
    [outProtocol writeFieldEnd];
  }
  if (__qualityDate_isset) {
    if (__qualityDate != nil) {
      [outProtocol writeFieldBeginWithName: @"qualityDate" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __qualityDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__adsUrl_isset) {
    if (__adsUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"adsUrl" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __adsUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__adsPic_isset) {
    if (__adsPic != nil) {
      [outProtocol writeFieldBeginWithName: @"adsPic" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __adsPic];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFAdvertisDto("];
  [ms appendString: @"adId:"];
  [ms appendFormat: @"\"%@\"", __adId];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",content:"];
  [ms appendFormat: @"\"%@\"", __content];
  [ms appendString: @",summary:"];
  [ms appendFormat: @"\"%@\"", __summary];
  [ms appendString: @",pointNum:"];
  [ms appendFormat: @"%i", __pointNum];
  [ms appendString: @",qualityDate:"];
  [ms appendFormat: @"\"%@\"", __qualityDate];
  [ms appendString: @",adsUrl:"];
  [ms appendFormat: @"\"%@\"", __adsUrl];
  [ms appendString: @",adsPic:"];
  [ms appendFormat: @"\"%@\"", __adsPic];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPhoneNoDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPhoneName: (NSString *) phoneName phoneNo: (NSString *) phoneNo
{
  self = [super init];
  __phoneName = [phoneName retain_stub];
  __phoneName_isset = YES;
  __phoneNo = [phoneNo retain_stub];
  __phoneNo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"phoneName"])
  {
    __phoneName = [[decoder decodeObjectForKey: @"phoneName"] retain_stub];
    __phoneName_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneNo"])
  {
    __phoneNo = [[decoder decodeObjectForKey: @"phoneNo"] retain_stub];
    __phoneNo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__phoneName_isset)
  {
    [encoder encodeObject: __phoneName forKey: @"phoneName"];
  }
  if (__phoneNo_isset)
  {
    [encoder encodeObject: __phoneNo forKey: @"phoneNo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __phoneName_isset ? 2654435761 : 0;
  if (__phoneName_isset)
  {
    hash = (hash * 31) ^ [__phoneName hash];
  }
  hash = (hash * 31) ^ __phoneNo_isset ? 2654435761 : 0;
  if (__phoneNo_isset)
  {
    hash = (hash * 31) ^ [__phoneNo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPhoneNoDto class]]) {
    return NO;
  }
  NXTFPhoneNoDto *other = (NXTFPhoneNoDto *)anObject;
  if ((__phoneName_isset != other->__phoneName_isset) ||
      (__phoneName_isset && ((__phoneName || other->__phoneName) && ![__phoneName isEqual:other->__phoneName]))) {
    return NO;
  }
  if ((__phoneNo_isset != other->__phoneNo_isset) ||
      (__phoneNo_isset && ((__phoneNo || other->__phoneNo) && ![__phoneNo isEqual:other->__phoneNo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__phoneName release_stub];
  [__phoneNo release_stub];
  [super dealloc_stub];
}

- (NSString *) phoneName {
  return [[__phoneName retain_stub] autorelease_stub];
}

- (void) setPhoneName: (NSString *) phoneName {
  [phoneName retain_stub];
  [__phoneName release_stub];
  __phoneName = phoneName;
  __phoneName_isset = YES;
}

- (BOOL) phoneNameIsSet {
  return __phoneName_isset;
}

- (void) unsetPhoneName {
  [__phoneName release_stub];
  __phoneName = nil;
  __phoneName_isset = NO;
}

- (NSString *) phoneNo {
  return [[__phoneNo retain_stub] autorelease_stub];
}

- (void) setPhoneNo: (NSString *) phoneNo {
  [phoneNo retain_stub];
  [__phoneNo release_stub];
  __phoneNo = phoneNo;
  __phoneNo_isset = YES;
}

- (BOOL) phoneNoIsSet {
  return __phoneNo_isset;
}

- (void) unsetPhoneNo {
  [__phoneNo release_stub];
  __phoneNo = nil;
  __phoneNo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoneName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoneNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PhoneNoDto"];
  if (__phoneName_isset) {
    if (__phoneName != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __phoneName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phoneNo_isset) {
    if (__phoneNo != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __phoneNo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPhoneNoDto("];
  [ms appendString: @"phoneName:"];
  [ms appendFormat: @"\"%@\"", __phoneName];
  [ms appendString: @",phoneNo:"];
  [ms appendFormat: @"\"%@\"", __phoneNo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPartSymptomDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.symptoms = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithPartId: (int32_t) partId partName: (NSString *) partName symptoms: (NSMutableArray *) symptoms
{
  self = [super init];
  __partId = partId;
  __partId_isset = YES;
  __partName = [partName retain_stub];
  __partName_isset = YES;
  __symptoms = [symptoms retain_stub];
  __symptoms_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"partId"])
  {
    __partId = [decoder decodeInt32ForKey: @"partId"];
    __partId_isset = YES;
  }
  if ([decoder containsValueForKey: @"partName"])
  {
    __partName = [[decoder decodeObjectForKey: @"partName"] retain_stub];
    __partName_isset = YES;
  }
  if ([decoder containsValueForKey: @"symptoms"])
  {
    __symptoms = [[decoder decodeObjectForKey: @"symptoms"] retain_stub];
    __symptoms_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__partId_isset)
  {
    [encoder encodeInt32: __partId forKey: @"partId"];
  }
  if (__partName_isset)
  {
    [encoder encodeObject: __partName forKey: @"partName"];
  }
  if (__symptoms_isset)
  {
    [encoder encodeObject: __symptoms forKey: @"symptoms"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __partId_isset ? 2654435761 : 0;
  if (__partId_isset)
  {
    hash = (hash * 31) ^ [@(__partId) hash];
  }
  hash = (hash * 31) ^ __partName_isset ? 2654435761 : 0;
  if (__partName_isset)
  {
    hash = (hash * 31) ^ [__partName hash];
  }
  hash = (hash * 31) ^ __symptoms_isset ? 2654435761 : 0;
  if (__symptoms_isset)
  {
    hash = (hash * 31) ^ [__symptoms hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPartSymptomDto class]]) {
    return NO;
  }
  NXTFPartSymptomDto *other = (NXTFPartSymptomDto *)anObject;
  if ((__partId_isset != other->__partId_isset) ||
      (__partId_isset && (__partId != other->__partId))) {
    return NO;
  }
  if ((__partName_isset != other->__partName_isset) ||
      (__partName_isset && ((__partName || other->__partName) && ![__partName isEqual:other->__partName]))) {
    return NO;
  }
  if ((__symptoms_isset != other->__symptoms_isset) ||
      (__symptoms_isset && ((__symptoms || other->__symptoms) && ![__symptoms isEqual:other->__symptoms]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__partName release_stub];
  [__symptoms release_stub];
  [super dealloc_stub];
}

- (int32_t) partId {
  return __partId;
}

- (void) setPartId: (int32_t) partId {
  __partId = partId;
  __partId_isset = YES;
}

- (BOOL) partIdIsSet {
  return __partId_isset;
}

- (void) unsetPartId {
  __partId_isset = NO;
}

- (NSString *) partName {
  return [[__partName retain_stub] autorelease_stub];
}

- (void) setPartName: (NSString *) partName {
  [partName retain_stub];
  [__partName release_stub];
  __partName = partName;
  __partName_isset = YES;
}

- (BOOL) partNameIsSet {
  return __partName_isset;
}

- (void) unsetPartName {
  [__partName release_stub];
  __partName = nil;
  __partName_isset = NO;
}

- (NSMutableArray *) symptoms {
  return [[__symptoms retain_stub] autorelease_stub];
}

- (void) setSymptoms: (NSMutableArray *) symptoms {
  [symptoms retain_stub];
  [__symptoms release_stub];
  __symptoms = symptoms;
  __symptoms_isset = YES;
}

- (BOOL) symptomsIsSet {
  return __symptoms_isset;
}

- (void) unsetSymptoms {
  [__symptoms release_stub];
  __symptoms = nil;
  __symptoms_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPartId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPartName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size91;
          [inProtocol readListBeginReturningElementType: NULL size: &_size91];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size91];
          int _i92;
          for (_i92 = 0; _i92 < _size91; ++_i92)
          {
            NSString * _elem93 = [inProtocol readString];
            [fieldValue addObject: _elem93];
          }
          [inProtocol readListEnd];
          [self setSymptoms: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PartSymptomDto"];
  if (__partId_isset) {
    [outProtocol writeFieldBeginWithName: @"partId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __partId];
    [outProtocol writeFieldEnd];
  }
  if (__partName_isset) {
    if (__partName != nil) {
      [outProtocol writeFieldBeginWithName: @"partName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __partName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__symptoms_isset) {
    if (__symptoms != nil) {
      [outProtocol writeFieldBeginWithName: @"symptoms" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__symptoms count]];
        int idx95;
        for (idx95 = 0; idx95 < [__symptoms count]; idx95++)
        {
          [outProtocol writeString: [__symptoms objectAtIndex: idx95]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPartSymptomDto("];
  [ms appendString: @"partId:"];
  [ms appendFormat: @"%i", __partId];
  [ms appendString: @",partName:"];
  [ms appendFormat: @"\"%@\"", __partName];
  [ms appendString: @",symptoms:"];
  [ms appendFormat: @"%@", __symptoms];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGnosisDetailDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.symptoms = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

  self.diseases = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithSymptoms: (NSMutableArray *) symptoms comDept: (NXTFComDeptDto *) comDept percent: (NSString *) percent diseases: (NSMutableArray *) diseases
{
  self = [super init];
  __symptoms = [symptoms retain_stub];
  __symptoms_isset = YES;
  __comDept = [comDept retain_stub];
  __comDept_isset = YES;
  __percent = [percent retain_stub];
  __percent_isset = YES;
  __diseases = [diseases retain_stub];
  __diseases_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"symptoms"])
  {
    __symptoms = [[decoder decodeObjectForKey: @"symptoms"] retain_stub];
    __symptoms_isset = YES;
  }
  if ([decoder containsValueForKey: @"comDept"])
  {
    __comDept = [[decoder decodeObjectForKey: @"comDept"] retain_stub];
    __comDept_isset = YES;
  }
  if ([decoder containsValueForKey: @"percent"])
  {
    __percent = [[decoder decodeObjectForKey: @"percent"] retain_stub];
    __percent_isset = YES;
  }
  if ([decoder containsValueForKey: @"diseases"])
  {
    __diseases = [[decoder decodeObjectForKey: @"diseases"] retain_stub];
    __diseases_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__symptoms_isset)
  {
    [encoder encodeObject: __symptoms forKey: @"symptoms"];
  }
  if (__comDept_isset)
  {
    [encoder encodeObject: __comDept forKey: @"comDept"];
  }
  if (__percent_isset)
  {
    [encoder encodeObject: __percent forKey: @"percent"];
  }
  if (__diseases_isset)
  {
    [encoder encodeObject: __diseases forKey: @"diseases"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __symptoms_isset ? 2654435761 : 0;
  if (__symptoms_isset)
  {
    hash = (hash * 31) ^ [__symptoms hash];
  }
  hash = (hash * 31) ^ __comDept_isset ? 2654435761 : 0;
  if (__comDept_isset)
  {
    hash = (hash * 31) ^ [__comDept hash];
  }
  hash = (hash * 31) ^ __percent_isset ? 2654435761 : 0;
  if (__percent_isset)
  {
    hash = (hash * 31) ^ [__percent hash];
  }
  hash = (hash * 31) ^ __diseases_isset ? 2654435761 : 0;
  if (__diseases_isset)
  {
    hash = (hash * 31) ^ [__diseases hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGnosisDetailDto class]]) {
    return NO;
  }
  NXTFGnosisDetailDto *other = (NXTFGnosisDetailDto *)anObject;
  if ((__symptoms_isset != other->__symptoms_isset) ||
      (__symptoms_isset && ((__symptoms || other->__symptoms) && ![__symptoms isEqual:other->__symptoms]))) {
    return NO;
  }
  if ((__comDept_isset != other->__comDept_isset) ||
      (__comDept_isset && ((__comDept || other->__comDept) && ![__comDept isEqual:other->__comDept]))) {
    return NO;
  }
  if ((__percent_isset != other->__percent_isset) ||
      (__percent_isset && ((__percent || other->__percent) && ![__percent isEqual:other->__percent]))) {
    return NO;
  }
  if ((__diseases_isset != other->__diseases_isset) ||
      (__diseases_isset && ((__diseases || other->__diseases) && ![__diseases isEqual:other->__diseases]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__symptoms release_stub];
  [__comDept release_stub];
  [__percent release_stub];
  [__diseases release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) symptoms {
  return [[__symptoms retain_stub] autorelease_stub];
}

- (void) setSymptoms: (NSMutableArray *) symptoms {
  [symptoms retain_stub];
  [__symptoms release_stub];
  __symptoms = symptoms;
  __symptoms_isset = YES;
}

- (BOOL) symptomsIsSet {
  return __symptoms_isset;
}

- (void) unsetSymptoms {
  [__symptoms release_stub];
  __symptoms = nil;
  __symptoms_isset = NO;
}

- (NXTFComDeptDto *) comDept {
  return [[__comDept retain_stub] autorelease_stub];
}

- (void) setComDept: (NXTFComDeptDto *) comDept {
  [comDept retain_stub];
  [__comDept release_stub];
  __comDept = comDept;
  __comDept_isset = YES;
}

- (BOOL) comDeptIsSet {
  return __comDept_isset;
}

- (void) unsetComDept {
  [__comDept release_stub];
  __comDept = nil;
  __comDept_isset = NO;
}

- (NSString *) percent {
  return [[__percent retain_stub] autorelease_stub];
}

- (void) setPercent: (NSString *) percent {
  [percent retain_stub];
  [__percent release_stub];
  __percent = percent;
  __percent_isset = YES;
}

- (BOOL) percentIsSet {
  return __percent_isset;
}

- (void) unsetPercent {
  [__percent release_stub];
  __percent = nil;
  __percent_isset = NO;
}

- (NSMutableArray *) diseases {
  return [[__diseases retain_stub] autorelease_stub];
}

- (void) setDiseases: (NSMutableArray *) diseases {
  [diseases retain_stub];
  [__diseases release_stub];
  __diseases = diseases;
  __diseases_isset = YES;
}

- (BOOL) diseasesIsSet {
  return __diseases_isset;
}

- (void) unsetDiseases {
  [__diseases release_stub];
  __diseases = nil;
  __diseases_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size96;
          [inProtocol readListBeginReturningElementType: NULL size: &_size96];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size96];
          int _i97;
          for (_i97 = 0; _i97 < _size96; ++_i97)
          {
            NSString * _elem98 = [inProtocol readString];
            [fieldValue addObject: _elem98];
          }
          [inProtocol readListEnd];
          [self setSymptoms: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFComDeptDto *fieldValue = [[NXTFComDeptDto alloc] init];
          [fieldValue read: inProtocol];
          [self setComDept: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPercent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size99;
          [inProtocol readListBeginReturningElementType: NULL size: &_size99];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size99];
          int _i100;
          for (_i100 = 0; _i100 < _size99; ++_i100)
          {
            NXTFDiseaseDto *_elem101 = [[NXTFDiseaseDto alloc] init];
            [_elem101 read: inProtocol];
            [fieldValue addObject: _elem101];
            [_elem101 release_stub];
          }
          [inProtocol readListEnd];
          [self setDiseases: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GnosisDetailDto"];
  if (__symptoms_isset) {
    if (__symptoms != nil) {
      [outProtocol writeFieldBeginWithName: @"symptoms" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__symptoms count]];
        int idx103;
        for (idx103 = 0; idx103 < [__symptoms count]; idx103++)
        {
          [outProtocol writeString: [__symptoms objectAtIndex: idx103]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__comDept_isset) {
    if (__comDept != nil) {
      [outProtocol writeFieldBeginWithName: @"comDept" type: TType_STRUCT fieldID: 2];
      [__comDept write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__percent_isset) {
    if (__percent != nil) {
      [outProtocol writeFieldBeginWithName: @"percent" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __percent];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diseases_isset) {
    if (__diseases != nil) {
      [outProtocol writeFieldBeginWithName: @"diseases" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__diseases count]];
        int idx105;
        for (idx105 = 0; idx105 < [__diseases count]; idx105++)
        {
          [[__diseases objectAtIndex: idx105] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGnosisDetailDto("];
  [ms appendString: @"symptoms:"];
  [ms appendFormat: @"%@", __symptoms];
  [ms appendString: @",comDept:"];
  [ms appendFormat: @"%@", __comDept];
  [ms appendString: @",percent:"];
  [ms appendFormat: @"\"%@\"", __percent];
  [ms appendString: @",diseases:"];
  [ms appendFormat: @"%@", __diseases];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFDiagDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.symptoms = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithSymptoms: (NSMutableArray *) symptoms diseaseName: (NSString *) diseaseName depts: (NSMutableArray *) depts likelihood: (NSString *) likelihood diseaseId: (int64_t) diseaseId
{
  self = [super init];
  __symptoms = [symptoms retain_stub];
  __symptoms_isset = YES;
  __diseaseName = [diseaseName retain_stub];
  __diseaseName_isset = YES;
  __depts = [depts retain_stub];
  __depts_isset = YES;
  __likelihood = [likelihood retain_stub];
  __likelihood_isset = YES;
  __diseaseId = diseaseId;
  __diseaseId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"symptoms"])
  {
    __symptoms = [[decoder decodeObjectForKey: @"symptoms"] retain_stub];
    __symptoms_isset = YES;
  }
  if ([decoder containsValueForKey: @"diseaseName"])
  {
    __diseaseName = [[decoder decodeObjectForKey: @"diseaseName"] retain_stub];
    __diseaseName_isset = YES;
  }
  if ([decoder containsValueForKey: @"depts"])
  {
    __depts = [[decoder decodeObjectForKey: @"depts"] retain_stub];
    __depts_isset = YES;
  }
  if ([decoder containsValueForKey: @"likelihood"])
  {
    __likelihood = [[decoder decodeObjectForKey: @"likelihood"] retain_stub];
    __likelihood_isset = YES;
  }
  if ([decoder containsValueForKey: @"diseaseId"])
  {
    __diseaseId = [decoder decodeInt64ForKey: @"diseaseId"];
    __diseaseId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__symptoms_isset)
  {
    [encoder encodeObject: __symptoms forKey: @"symptoms"];
  }
  if (__diseaseName_isset)
  {
    [encoder encodeObject: __diseaseName forKey: @"diseaseName"];
  }
  if (__depts_isset)
  {
    [encoder encodeObject: __depts forKey: @"depts"];
  }
  if (__likelihood_isset)
  {
    [encoder encodeObject: __likelihood forKey: @"likelihood"];
  }
  if (__diseaseId_isset)
  {
    [encoder encodeInt64: __diseaseId forKey: @"diseaseId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __symptoms_isset ? 2654435761 : 0;
  if (__symptoms_isset)
  {
    hash = (hash * 31) ^ [__symptoms hash];
  }
  hash = (hash * 31) ^ __diseaseName_isset ? 2654435761 : 0;
  if (__diseaseName_isset)
  {
    hash = (hash * 31) ^ [__diseaseName hash];
  }
  hash = (hash * 31) ^ __depts_isset ? 2654435761 : 0;
  if (__depts_isset)
  {
    hash = (hash * 31) ^ [__depts hash];
  }
  hash = (hash * 31) ^ __likelihood_isset ? 2654435761 : 0;
  if (__likelihood_isset)
  {
    hash = (hash * 31) ^ [__likelihood hash];
  }
  hash = (hash * 31) ^ __diseaseId_isset ? 2654435761 : 0;
  if (__diseaseId_isset)
  {
    hash = (hash * 31) ^ [@(__diseaseId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFDiagDto class]]) {
    return NO;
  }
  NXTFDiagDto *other = (NXTFDiagDto *)anObject;
  if ((__symptoms_isset != other->__symptoms_isset) ||
      (__symptoms_isset && ((__symptoms || other->__symptoms) && ![__symptoms isEqual:other->__symptoms]))) {
    return NO;
  }
  if ((__diseaseName_isset != other->__diseaseName_isset) ||
      (__diseaseName_isset && ((__diseaseName || other->__diseaseName) && ![__diseaseName isEqual:other->__diseaseName]))) {
    return NO;
  }
  if ((__depts_isset != other->__depts_isset) ||
      (__depts_isset && ((__depts || other->__depts) && ![__depts isEqual:other->__depts]))) {
    return NO;
  }
  if ((__likelihood_isset != other->__likelihood_isset) ||
      (__likelihood_isset && ((__likelihood || other->__likelihood) && ![__likelihood isEqual:other->__likelihood]))) {
    return NO;
  }
  if ((__diseaseId_isset != other->__diseaseId_isset) ||
      (__diseaseId_isset && (__diseaseId != other->__diseaseId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__symptoms release_stub];
  [__diseaseName release_stub];
  [__depts release_stub];
  [__likelihood release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) symptoms {
  return [[__symptoms retain_stub] autorelease_stub];
}

- (void) setSymptoms: (NSMutableArray *) symptoms {
  [symptoms retain_stub];
  [__symptoms release_stub];
  __symptoms = symptoms;
  __symptoms_isset = YES;
}

- (BOOL) symptomsIsSet {
  return __symptoms_isset;
}

- (void) unsetSymptoms {
  [__symptoms release_stub];
  __symptoms = nil;
  __symptoms_isset = NO;
}

- (NSString *) diseaseName {
  return [[__diseaseName retain_stub] autorelease_stub];
}

- (void) setDiseaseName: (NSString *) diseaseName {
  [diseaseName retain_stub];
  [__diseaseName release_stub];
  __diseaseName = diseaseName;
  __diseaseName_isset = YES;
}

- (BOOL) diseaseNameIsSet {
  return __diseaseName_isset;
}

- (void) unsetDiseaseName {
  [__diseaseName release_stub];
  __diseaseName = nil;
  __diseaseName_isset = NO;
}

- (NSMutableArray *) depts {
  return [[__depts retain_stub] autorelease_stub];
}

- (void) setDepts: (NSMutableArray *) depts {
  [depts retain_stub];
  [__depts release_stub];
  __depts = depts;
  __depts_isset = YES;
}

- (BOOL) deptsIsSet {
  return __depts_isset;
}

- (void) unsetDepts {
  [__depts release_stub];
  __depts = nil;
  __depts_isset = NO;
}

- (NSString *) likelihood {
  return [[__likelihood retain_stub] autorelease_stub];
}

- (void) setLikelihood: (NSString *) likelihood {
  [likelihood retain_stub];
  [__likelihood release_stub];
  __likelihood = likelihood;
  __likelihood_isset = YES;
}

- (BOOL) likelihoodIsSet {
  return __likelihood_isset;
}

- (void) unsetLikelihood {
  [__likelihood release_stub];
  __likelihood = nil;
  __likelihood_isset = NO;
}

- (int64_t) diseaseId {
  return __diseaseId;
}

- (void) setDiseaseId: (int64_t) diseaseId {
  __diseaseId = diseaseId;
  __diseaseId_isset = YES;
}

- (BOOL) diseaseIdIsSet {
  return __diseaseId_isset;
}

- (void) unsetDiseaseId {
  __diseaseId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size106;
          [inProtocol readListBeginReturningElementType: NULL size: &_size106];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size106];
          int _i107;
          for (_i107 = 0; _i107 < _size106; ++_i107)
          {
            NSString * _elem108 = [inProtocol readString];
            [fieldValue addObject: _elem108];
          }
          [inProtocol readListEnd];
          [self setSymptoms: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDiseaseName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size109;
          [inProtocol readListBeginReturningElementType: NULL size: &_size109];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size109];
          int _i110;
          for (_i110 = 0; _i110 < _size109; ++_i110)
          {
            NXTFDept *_elem111 = [[NXTFDept alloc] init];
            [_elem111 read: inProtocol];
            [fieldValue addObject: _elem111];
            [_elem111 release_stub];
          }
          [inProtocol readListEnd];
          [self setDepts: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLikelihood: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDiseaseId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DiagDto"];
  if (__symptoms_isset) {
    if (__symptoms != nil) {
      [outProtocol writeFieldBeginWithName: @"symptoms" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__symptoms count]];
        int idx113;
        for (idx113 = 0; idx113 < [__symptoms count]; idx113++)
        {
          [outProtocol writeString: [__symptoms objectAtIndex: idx113]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__diseaseName_isset) {
    if (__diseaseName != nil) {
      [outProtocol writeFieldBeginWithName: @"diseaseName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __diseaseName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__depts_isset) {
    if (__depts != nil) {
      [outProtocol writeFieldBeginWithName: @"depts" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__depts count]];
        int idx115;
        for (idx115 = 0; idx115 < [__depts count]; idx115++)
        {
          [[__depts objectAtIndex: idx115] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__likelihood_isset) {
    if (__likelihood != nil) {
      [outProtocol writeFieldBeginWithName: @"likelihood" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __likelihood];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diseaseId_isset) {
    [outProtocol writeFieldBeginWithName: @"diseaseId" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __diseaseId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFDiagDto("];
  [ms appendString: @"symptoms:"];
  [ms appendFormat: @"%@", __symptoms];
  [ms appendString: @",diseaseName:"];
  [ms appendFormat: @"\"%@\"", __diseaseName];
  [ms appendString: @",depts:"];
  [ms appendFormat: @"%@", __depts];
  [ms appendString: @",likelihood:"];
  [ms appendFormat: @"\"%@\"", __likelihood];
  [ms appendString: @",diseaseId:"];
  [ms appendFormat: @"%qi", __diseaseId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFDept

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDeptId: (int64_t) deptId deptName: (NSString *) deptName
{
  self = [super init];
  __deptId = deptId;
  __deptId_isset = YES;
  __deptName = [deptName retain_stub];
  __deptName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"deptId"])
  {
    __deptId = [decoder decodeInt64ForKey: @"deptId"];
    __deptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptName"])
  {
    __deptName = [[decoder decodeObjectForKey: @"deptName"] retain_stub];
    __deptName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__deptId_isset)
  {
    [encoder encodeInt64: __deptId forKey: @"deptId"];
  }
  if (__deptName_isset)
  {
    [encoder encodeObject: __deptName forKey: @"deptName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __deptId_isset ? 2654435761 : 0;
  if (__deptId_isset)
  {
    hash = (hash * 31) ^ [@(__deptId) hash];
  }
  hash = (hash * 31) ^ __deptName_isset ? 2654435761 : 0;
  if (__deptName_isset)
  {
    hash = (hash * 31) ^ [__deptName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFDept class]]) {
    return NO;
  }
  NXTFDept *other = (NXTFDept *)anObject;
  if ((__deptId_isset != other->__deptId_isset) ||
      (__deptId_isset && (__deptId != other->__deptId))) {
    return NO;
  }
  if ((__deptName_isset != other->__deptName_isset) ||
      (__deptName_isset && ((__deptName || other->__deptName) && ![__deptName isEqual:other->__deptName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__deptName release_stub];
  [super dealloc_stub];
}

- (int64_t) deptId {
  return __deptId;
}

- (void) setDeptId: (int64_t) deptId {
  __deptId = deptId;
  __deptId_isset = YES;
}

- (BOOL) deptIdIsSet {
  return __deptId_isset;
}

- (void) unsetDeptId {
  __deptId_isset = NO;
}

- (NSString *) deptName {
  return [[__deptName retain_stub] autorelease_stub];
}

- (void) setDeptName: (NSString *) deptName {
  [deptName retain_stub];
  [__deptName release_stub];
  __deptName = deptName;
  __deptName_isset = YES;
}

- (BOOL) deptNameIsSet {
  return __deptName_isset;
}

- (void) unsetDeptName {
  [__deptName release_stub];
  __deptName = nil;
  __deptName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Dept"];
  if (__deptId_isset) {
    [outProtocol writeFieldBeginWithName: @"deptId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __deptId];
    [outProtocol writeFieldEnd];
  }
  if (__deptName_isset) {
    if (__deptName != nil) {
      [outProtocol writeFieldBeginWithName: @"deptName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __deptName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFDept("];
  [ms appendString: @"deptId:"];
  [ms appendFormat: @"%qi", __deptId];
  [ms appendString: @",deptName:"];
  [ms appendFormat: @"\"%@\"", __deptName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFExtItem

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name value: (NSString *) value
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __value = [value retain_stub];
  __value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [[decoder decodeObjectForKey: @"value"] retain_stub];
    __value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__value_isset)
  {
    [encoder encodeObject: __value forKey: @"value"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __value_isset ? 2654435761 : 0;
  if (__value_isset)
  {
    hash = (hash * 31) ^ [__value hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFExtItem class]]) {
    return NO;
  }
  NXTFExtItem *other = (NXTFExtItem *)anObject;
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__value_isset != other->__value_isset) ||
      (__value_isset && ((__value || other->__value) && ![__value isEqual:other->__value]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [__value release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) value {
  return [[__value retain_stub] autorelease_stub];
}

- (void) setValue: (NSString *) value {
  [value retain_stub];
  [__value release_stub];
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  [__value release_stub];
  __value = nil;
  __value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ExtItem"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__value_isset) {
    if (__value != nil) {
      [outProtocol writeFieldBeginWithName: @"value" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFExtItem("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",value:"];
  [ms appendFormat: @"\"%@\"", __value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFStartPics

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPicId: (NSString *) picId name: (NSString *) name startDate: (NSString *) startDate endDate: (NSString *) endDate rank: (NSString *) rank url: (NSString *) url link: (NSString *) link
{
  self = [super init];
  __picId = [picId retain_stub];
  __picId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __startDate = [startDate retain_stub];
  __startDate_isset = YES;
  __endDate = [endDate retain_stub];
  __endDate_isset = YES;
  __rank = [rank retain_stub];
  __rank_isset = YES;
  __url = [url retain_stub];
  __url_isset = YES;
  __link = [link retain_stub];
  __link_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"picId"])
  {
    __picId = [[decoder decodeObjectForKey: @"picId"] retain_stub];
    __picId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"startDate"])
  {
    __startDate = [[decoder decodeObjectForKey: @"startDate"] retain_stub];
    __startDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"endDate"])
  {
    __endDate = [[decoder decodeObjectForKey: @"endDate"] retain_stub];
    __endDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"rank"])
  {
    __rank = [[decoder decodeObjectForKey: @"rank"] retain_stub];
    __rank_isset = YES;
  }
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain_stub];
    __url_isset = YES;
  }
  if ([decoder containsValueForKey: @"link"])
  {
    __link = [[decoder decodeObjectForKey: @"link"] retain_stub];
    __link_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__picId_isset)
  {
    [encoder encodeObject: __picId forKey: @"picId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__startDate_isset)
  {
    [encoder encodeObject: __startDate forKey: @"startDate"];
  }
  if (__endDate_isset)
  {
    [encoder encodeObject: __endDate forKey: @"endDate"];
  }
  if (__rank_isset)
  {
    [encoder encodeObject: __rank forKey: @"rank"];
  }
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
  if (__link_isset)
  {
    [encoder encodeObject: __link forKey: @"link"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __picId_isset ? 2654435761 : 0;
  if (__picId_isset)
  {
    hash = (hash * 31) ^ [__picId hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __startDate_isset ? 2654435761 : 0;
  if (__startDate_isset)
  {
    hash = (hash * 31) ^ [__startDate hash];
  }
  hash = (hash * 31) ^ __endDate_isset ? 2654435761 : 0;
  if (__endDate_isset)
  {
    hash = (hash * 31) ^ [__endDate hash];
  }
  hash = (hash * 31) ^ __rank_isset ? 2654435761 : 0;
  if (__rank_isset)
  {
    hash = (hash * 31) ^ [__rank hash];
  }
  hash = (hash * 31) ^ __url_isset ? 2654435761 : 0;
  if (__url_isset)
  {
    hash = (hash * 31) ^ [__url hash];
  }
  hash = (hash * 31) ^ __link_isset ? 2654435761 : 0;
  if (__link_isset)
  {
    hash = (hash * 31) ^ [__link hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFStartPics class]]) {
    return NO;
  }
  NXTFStartPics *other = (NXTFStartPics *)anObject;
  if ((__picId_isset != other->__picId_isset) ||
      (__picId_isset && ((__picId || other->__picId) && ![__picId isEqual:other->__picId]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__startDate_isset != other->__startDate_isset) ||
      (__startDate_isset && ((__startDate || other->__startDate) && ![__startDate isEqual:other->__startDate]))) {
    return NO;
  }
  if ((__endDate_isset != other->__endDate_isset) ||
      (__endDate_isset && ((__endDate || other->__endDate) && ![__endDate isEqual:other->__endDate]))) {
    return NO;
  }
  if ((__rank_isset != other->__rank_isset) ||
      (__rank_isset && ((__rank || other->__rank) && ![__rank isEqual:other->__rank]))) {
    return NO;
  }
  if ((__url_isset != other->__url_isset) ||
      (__url_isset && ((__url || other->__url) && ![__url isEqual:other->__url]))) {
    return NO;
  }
  if ((__link_isset != other->__link_isset) ||
      (__link_isset && ((__link || other->__link) && ![__link isEqual:other->__link]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__picId release_stub];
  [__name release_stub];
  [__startDate release_stub];
  [__endDate release_stub];
  [__rank release_stub];
  [__url release_stub];
  [__link release_stub];
  [super dealloc_stub];
}

- (NSString *) picId {
  return [[__picId retain_stub] autorelease_stub];
}

- (void) setPicId: (NSString *) picId {
  [picId retain_stub];
  [__picId release_stub];
  __picId = picId;
  __picId_isset = YES;
}

- (BOOL) picIdIsSet {
  return __picId_isset;
}

- (void) unsetPicId {
  [__picId release_stub];
  __picId = nil;
  __picId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) startDate {
  return [[__startDate retain_stub] autorelease_stub];
}

- (void) setStartDate: (NSString *) startDate {
  [startDate retain_stub];
  [__startDate release_stub];
  __startDate = startDate;
  __startDate_isset = YES;
}

- (BOOL) startDateIsSet {
  return __startDate_isset;
}

- (void) unsetStartDate {
  [__startDate release_stub];
  __startDate = nil;
  __startDate_isset = NO;
}

- (NSString *) endDate {
  return [[__endDate retain_stub] autorelease_stub];
}

- (void) setEndDate: (NSString *) endDate {
  [endDate retain_stub];
  [__endDate release_stub];
  __endDate = endDate;
  __endDate_isset = YES;
}

- (BOOL) endDateIsSet {
  return __endDate_isset;
}

- (void) unsetEndDate {
  [__endDate release_stub];
  __endDate = nil;
  __endDate_isset = NO;
}

- (NSString *) rank {
  return [[__rank retain_stub] autorelease_stub];
}

- (void) setRank: (NSString *) rank {
  [rank retain_stub];
  [__rank release_stub];
  __rank = rank;
  __rank_isset = YES;
}

- (BOOL) rankIsSet {
  return __rank_isset;
}

- (void) unsetRank {
  [__rank release_stub];
  __rank = nil;
  __rank_isset = NO;
}

- (NSString *) url {
  return [[__url retain_stub] autorelease_stub];
}

- (void) setUrl: (NSString *) url {
  [url retain_stub];
  [__url release_stub];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release_stub];
  __url = nil;
  __url_isset = NO;
}

- (NSString *) link {
  return [[__link retain_stub] autorelease_stub];
}

- (void) setLink: (NSString *) link {
  [link retain_stub];
  [__link release_stub];
  __link = link;
  __link_isset = YES;
}

- (BOOL) linkIsSet {
  return __link_isset;
}

- (void) unsetLink {
  [__link release_stub];
  __link = nil;
  __link_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPicId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStartDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEndDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRank: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLink: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"StartPics"];
  if (__picId_isset) {
    if (__picId != nil) {
      [outProtocol writeFieldBeginWithName: @"picId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __picId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__startDate_isset) {
    if (__startDate != nil) {
      [outProtocol writeFieldBeginWithName: @"startDate" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __startDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__endDate_isset) {
    if (__endDate != nil) {
      [outProtocol writeFieldBeginWithName: @"endDate" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __endDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__rank_isset) {
    if (__rank != nil) {
      [outProtocol writeFieldBeginWithName: @"rank" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __rank];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  if (__link_isset) {
    if (__link != nil) {
      [outProtocol writeFieldBeginWithName: @"link" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __link];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFStartPics("];
  [ms appendString: @"picId:"];
  [ms appendFormat: @"\"%@\"", __picId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",startDate:"];
  [ms appendFormat: @"\"%@\"", __startDate];
  [ms appendString: @",endDate:"];
  [ms appendFormat: @"\"%@\"", __endDate];
  [ms appendString: @",rank:"];
  [ms appendFormat: @"\"%@\"", __rank];
  [ms appendString: @",url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @",link:"];
  [ms appendFormat: @"\"%@\"", __link];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFEmrPatientDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPatientId: (NSString *) patientId patientName: (NSString *) patientName bornDate: (NSString *) bornDate gender: (NSString *) gender marriage: (NSString *) marriage patientHead: (NSString *) patientHead criticalIllness: (NSString *) criticalIllness allergicHistory: (NSString *) allergicHistory familyHistory: (NSString *) familyHistory presentIllness: (NSString *) presentIllness historyIllness: (NSString *) historyIllness physiqueFeature: (NSString *) physiqueFeature
{
  self = [super init];
  __patientId = [patientId retain_stub];
  __patientId_isset = YES;
  __patientName = [patientName retain_stub];
  __patientName_isset = YES;
  __bornDate = [bornDate retain_stub];
  __bornDate_isset = YES;
  __gender = [gender retain_stub];
  __gender_isset = YES;
  __marriage = [marriage retain_stub];
  __marriage_isset = YES;
  __patientHead = [patientHead retain_stub];
  __patientHead_isset = YES;
  __criticalIllness = [criticalIllness retain_stub];
  __criticalIllness_isset = YES;
  __allergicHistory = [allergicHistory retain_stub];
  __allergicHistory_isset = YES;
  __familyHistory = [familyHistory retain_stub];
  __familyHistory_isset = YES;
  __presentIllness = [presentIllness retain_stub];
  __presentIllness_isset = YES;
  __historyIllness = [historyIllness retain_stub];
  __historyIllness_isset = YES;
  __physiqueFeature = [physiqueFeature retain_stub];
  __physiqueFeature_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [[decoder decodeObjectForKey: @"patientId"] retain_stub];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientName"])
  {
    __patientName = [[decoder decodeObjectForKey: @"patientName"] retain_stub];
    __patientName_isset = YES;
  }
  if ([decoder containsValueForKey: @"bornDate"])
  {
    __bornDate = [[decoder decodeObjectForKey: @"bornDate"] retain_stub];
    __bornDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [[decoder decodeObjectForKey: @"gender"] retain_stub];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"marriage"])
  {
    __marriage = [[decoder decodeObjectForKey: @"marriage"] retain_stub];
    __marriage_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientHead"])
  {
    __patientHead = [[decoder decodeObjectForKey: @"patientHead"] retain_stub];
    __patientHead_isset = YES;
  }
  if ([decoder containsValueForKey: @"criticalIllness"])
  {
    __criticalIllness = [[decoder decodeObjectForKey: @"criticalIllness"] retain_stub];
    __criticalIllness_isset = YES;
  }
  if ([decoder containsValueForKey: @"allergicHistory"])
  {
    __allergicHistory = [[decoder decodeObjectForKey: @"allergicHistory"] retain_stub];
    __allergicHistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"familyHistory"])
  {
    __familyHistory = [[decoder decodeObjectForKey: @"familyHistory"] retain_stub];
    __familyHistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"presentIllness"])
  {
    __presentIllness = [[decoder decodeObjectForKey: @"presentIllness"] retain_stub];
    __presentIllness_isset = YES;
  }
  if ([decoder containsValueForKey: @"historyIllness"])
  {
    __historyIllness = [[decoder decodeObjectForKey: @"historyIllness"] retain_stub];
    __historyIllness_isset = YES;
  }
  if ([decoder containsValueForKey: @"physiqueFeature"])
  {
    __physiqueFeature = [[decoder decodeObjectForKey: @"physiqueFeature"] retain_stub];
    __physiqueFeature_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__patientId_isset)
  {
    [encoder encodeObject: __patientId forKey: @"patientId"];
  }
  if (__patientName_isset)
  {
    [encoder encodeObject: __patientName forKey: @"patientName"];
  }
  if (__bornDate_isset)
  {
    [encoder encodeObject: __bornDate forKey: @"bornDate"];
  }
  if (__gender_isset)
  {
    [encoder encodeObject: __gender forKey: @"gender"];
  }
  if (__marriage_isset)
  {
    [encoder encodeObject: __marriage forKey: @"marriage"];
  }
  if (__patientHead_isset)
  {
    [encoder encodeObject: __patientHead forKey: @"patientHead"];
  }
  if (__criticalIllness_isset)
  {
    [encoder encodeObject: __criticalIllness forKey: @"criticalIllness"];
  }
  if (__allergicHistory_isset)
  {
    [encoder encodeObject: __allergicHistory forKey: @"allergicHistory"];
  }
  if (__familyHistory_isset)
  {
    [encoder encodeObject: __familyHistory forKey: @"familyHistory"];
  }
  if (__presentIllness_isset)
  {
    [encoder encodeObject: __presentIllness forKey: @"presentIllness"];
  }
  if (__historyIllness_isset)
  {
    [encoder encodeObject: __historyIllness forKey: @"historyIllness"];
  }
  if (__physiqueFeature_isset)
  {
    [encoder encodeObject: __physiqueFeature forKey: @"physiqueFeature"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [__patientId hash];
  }
  hash = (hash * 31) ^ __patientName_isset ? 2654435761 : 0;
  if (__patientName_isset)
  {
    hash = (hash * 31) ^ [__patientName hash];
  }
  hash = (hash * 31) ^ __bornDate_isset ? 2654435761 : 0;
  if (__bornDate_isset)
  {
    hash = (hash * 31) ^ [__bornDate hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [__gender hash];
  }
  hash = (hash * 31) ^ __marriage_isset ? 2654435761 : 0;
  if (__marriage_isset)
  {
    hash = (hash * 31) ^ [__marriage hash];
  }
  hash = (hash * 31) ^ __patientHead_isset ? 2654435761 : 0;
  if (__patientHead_isset)
  {
    hash = (hash * 31) ^ [__patientHead hash];
  }
  hash = (hash * 31) ^ __criticalIllness_isset ? 2654435761 : 0;
  if (__criticalIllness_isset)
  {
    hash = (hash * 31) ^ [__criticalIllness hash];
  }
  hash = (hash * 31) ^ __allergicHistory_isset ? 2654435761 : 0;
  if (__allergicHistory_isset)
  {
    hash = (hash * 31) ^ [__allergicHistory hash];
  }
  hash = (hash * 31) ^ __familyHistory_isset ? 2654435761 : 0;
  if (__familyHistory_isset)
  {
    hash = (hash * 31) ^ [__familyHistory hash];
  }
  hash = (hash * 31) ^ __presentIllness_isset ? 2654435761 : 0;
  if (__presentIllness_isset)
  {
    hash = (hash * 31) ^ [__presentIllness hash];
  }
  hash = (hash * 31) ^ __historyIllness_isset ? 2654435761 : 0;
  if (__historyIllness_isset)
  {
    hash = (hash * 31) ^ [__historyIllness hash];
  }
  hash = (hash * 31) ^ __physiqueFeature_isset ? 2654435761 : 0;
  if (__physiqueFeature_isset)
  {
    hash = (hash * 31) ^ [__physiqueFeature hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFEmrPatientDto class]]) {
    return NO;
  }
  NXTFEmrPatientDto *other = (NXTFEmrPatientDto *)anObject;
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && ((__patientId || other->__patientId) && ![__patientId isEqual:other->__patientId]))) {
    return NO;
  }
  if ((__patientName_isset != other->__patientName_isset) ||
      (__patientName_isset && ((__patientName || other->__patientName) && ![__patientName isEqual:other->__patientName]))) {
    return NO;
  }
  if ((__bornDate_isset != other->__bornDate_isset) ||
      (__bornDate_isset && ((__bornDate || other->__bornDate) && ![__bornDate isEqual:other->__bornDate]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && ((__gender || other->__gender) && ![__gender isEqual:other->__gender]))) {
    return NO;
  }
  if ((__marriage_isset != other->__marriage_isset) ||
      (__marriage_isset && ((__marriage || other->__marriage) && ![__marriage isEqual:other->__marriage]))) {
    return NO;
  }
  if ((__patientHead_isset != other->__patientHead_isset) ||
      (__patientHead_isset && ((__patientHead || other->__patientHead) && ![__patientHead isEqual:other->__patientHead]))) {
    return NO;
  }
  if ((__criticalIllness_isset != other->__criticalIllness_isset) ||
      (__criticalIllness_isset && ((__criticalIllness || other->__criticalIllness) && ![__criticalIllness isEqual:other->__criticalIllness]))) {
    return NO;
  }
  if ((__allergicHistory_isset != other->__allergicHistory_isset) ||
      (__allergicHistory_isset && ((__allergicHistory || other->__allergicHistory) && ![__allergicHistory isEqual:other->__allergicHistory]))) {
    return NO;
  }
  if ((__familyHistory_isset != other->__familyHistory_isset) ||
      (__familyHistory_isset && ((__familyHistory || other->__familyHistory) && ![__familyHistory isEqual:other->__familyHistory]))) {
    return NO;
  }
  if ((__presentIllness_isset != other->__presentIllness_isset) ||
      (__presentIllness_isset && ((__presentIllness || other->__presentIllness) && ![__presentIllness isEqual:other->__presentIllness]))) {
    return NO;
  }
  if ((__historyIllness_isset != other->__historyIllness_isset) ||
      (__historyIllness_isset && ((__historyIllness || other->__historyIllness) && ![__historyIllness isEqual:other->__historyIllness]))) {
    return NO;
  }
  if ((__physiqueFeature_isset != other->__physiqueFeature_isset) ||
      (__physiqueFeature_isset && ((__physiqueFeature || other->__physiqueFeature) && ![__physiqueFeature isEqual:other->__physiqueFeature]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__patientId release_stub];
  [__patientName release_stub];
  [__bornDate release_stub];
  [__gender release_stub];
  [__marriage release_stub];
  [__patientHead release_stub];
  [__criticalIllness release_stub];
  [__allergicHistory release_stub];
  [__familyHistory release_stub];
  [__presentIllness release_stub];
  [__historyIllness release_stub];
  [__physiqueFeature release_stub];
  [super dealloc_stub];
}

- (NSString *) patientId {
  return [[__patientId retain_stub] autorelease_stub];
}

- (void) setPatientId: (NSString *) patientId {
  [patientId retain_stub];
  [__patientId release_stub];
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  [__patientId release_stub];
  __patientId = nil;
  __patientId_isset = NO;
}

- (NSString *) patientName {
  return [[__patientName retain_stub] autorelease_stub];
}

- (void) setPatientName: (NSString *) patientName {
  [patientName retain_stub];
  [__patientName release_stub];
  __patientName = patientName;
  __patientName_isset = YES;
}

- (BOOL) patientNameIsSet {
  return __patientName_isset;
}

- (void) unsetPatientName {
  [__patientName release_stub];
  __patientName = nil;
  __patientName_isset = NO;
}

- (NSString *) bornDate {
  return [[__bornDate retain_stub] autorelease_stub];
}

- (void) setBornDate: (NSString *) bornDate {
  [bornDate retain_stub];
  [__bornDate release_stub];
  __bornDate = bornDate;
  __bornDate_isset = YES;
}

- (BOOL) bornDateIsSet {
  return __bornDate_isset;
}

- (void) unsetBornDate {
  [__bornDate release_stub];
  __bornDate = nil;
  __bornDate_isset = NO;
}

- (NSString *) gender {
  return [[__gender retain_stub] autorelease_stub];
}

- (void) setGender: (NSString *) gender {
  [gender retain_stub];
  [__gender release_stub];
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  [__gender release_stub];
  __gender = nil;
  __gender_isset = NO;
}

- (NSString *) marriage {
  return [[__marriage retain_stub] autorelease_stub];
}

- (void) setMarriage: (NSString *) marriage {
  [marriage retain_stub];
  [__marriage release_stub];
  __marriage = marriage;
  __marriage_isset = YES;
}

- (BOOL) marriageIsSet {
  return __marriage_isset;
}

- (void) unsetMarriage {
  [__marriage release_stub];
  __marriage = nil;
  __marriage_isset = NO;
}

- (NSString *) patientHead {
  return [[__patientHead retain_stub] autorelease_stub];
}

- (void) setPatientHead: (NSString *) patientHead {
  [patientHead retain_stub];
  [__patientHead release_stub];
  __patientHead = patientHead;
  __patientHead_isset = YES;
}

- (BOOL) patientHeadIsSet {
  return __patientHead_isset;
}

- (void) unsetPatientHead {
  [__patientHead release_stub];
  __patientHead = nil;
  __patientHead_isset = NO;
}

- (NSString *) criticalIllness {
  return [[__criticalIllness retain_stub] autorelease_stub];
}

- (void) setCriticalIllness: (NSString *) criticalIllness {
  [criticalIllness retain_stub];
  [__criticalIllness release_stub];
  __criticalIllness = criticalIllness;
  __criticalIllness_isset = YES;
}

- (BOOL) criticalIllnessIsSet {
  return __criticalIllness_isset;
}

- (void) unsetCriticalIllness {
  [__criticalIllness release_stub];
  __criticalIllness = nil;
  __criticalIllness_isset = NO;
}

- (NSString *) allergicHistory {
  return [[__allergicHistory retain_stub] autorelease_stub];
}

- (void) setAllergicHistory: (NSString *) allergicHistory {
  [allergicHistory retain_stub];
  [__allergicHistory release_stub];
  __allergicHistory = allergicHistory;
  __allergicHistory_isset = YES;
}

- (BOOL) allergicHistoryIsSet {
  return __allergicHistory_isset;
}

- (void) unsetAllergicHistory {
  [__allergicHistory release_stub];
  __allergicHistory = nil;
  __allergicHistory_isset = NO;
}

- (NSString *) familyHistory {
  return [[__familyHistory retain_stub] autorelease_stub];
}

- (void) setFamilyHistory: (NSString *) familyHistory {
  [familyHistory retain_stub];
  [__familyHistory release_stub];
  __familyHistory = familyHistory;
  __familyHistory_isset = YES;
}

- (BOOL) familyHistoryIsSet {
  return __familyHistory_isset;
}

- (void) unsetFamilyHistory {
  [__familyHistory release_stub];
  __familyHistory = nil;
  __familyHistory_isset = NO;
}

- (NSString *) presentIllness {
  return [[__presentIllness retain_stub] autorelease_stub];
}

- (void) setPresentIllness: (NSString *) presentIllness {
  [presentIllness retain_stub];
  [__presentIllness release_stub];
  __presentIllness = presentIllness;
  __presentIllness_isset = YES;
}

- (BOOL) presentIllnessIsSet {
  return __presentIllness_isset;
}

- (void) unsetPresentIllness {
  [__presentIllness release_stub];
  __presentIllness = nil;
  __presentIllness_isset = NO;
}

- (NSString *) historyIllness {
  return [[__historyIllness retain_stub] autorelease_stub];
}

- (void) setHistoryIllness: (NSString *) historyIllness {
  [historyIllness retain_stub];
  [__historyIllness release_stub];
  __historyIllness = historyIllness;
  __historyIllness_isset = YES;
}

- (BOOL) historyIllnessIsSet {
  return __historyIllness_isset;
}

- (void) unsetHistoryIllness {
  [__historyIllness release_stub];
  __historyIllness = nil;
  __historyIllness_isset = NO;
}

- (NSString *) physiqueFeature {
  return [[__physiqueFeature retain_stub] autorelease_stub];
}

- (void) setPhysiqueFeature: (NSString *) physiqueFeature {
  [physiqueFeature retain_stub];
  [__physiqueFeature release_stub];
  __physiqueFeature = physiqueFeature;
  __physiqueFeature_isset = YES;
}

- (BOOL) physiqueFeatureIsSet {
  return __physiqueFeature_isset;
}

- (void) unsetPhysiqueFeature {
  [__physiqueFeature release_stub];
  __physiqueFeature = nil;
  __physiqueFeature_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBornDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMarriage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientHead: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCriticalIllness: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAllergicHistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFamilyHistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPresentIllness: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHistoryIllness: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhysiqueFeature: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EmrPatientDto"];
  if (__patientId_isset) {
    if (__patientId != nil) {
      [outProtocol writeFieldBeginWithName: @"patientId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __patientId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientName_isset) {
    if (__patientName != nil) {
      [outProtocol writeFieldBeginWithName: @"patientName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __patientName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bornDate_isset) {
    if (__bornDate != nil) {
      [outProtocol writeFieldBeginWithName: @"bornDate" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __bornDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    if (__gender != nil) {
      [outProtocol writeFieldBeginWithName: @"gender" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __gender];
      [outProtocol writeFieldEnd];
    }
  }
  if (__marriage_isset) {
    if (__marriage != nil) {
      [outProtocol writeFieldBeginWithName: @"marriage" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __marriage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientHead_isset) {
    if (__patientHead != nil) {
      [outProtocol writeFieldBeginWithName: @"patientHead" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __patientHead];
      [outProtocol writeFieldEnd];
    }
  }
  if (__criticalIllness_isset) {
    if (__criticalIllness != nil) {
      [outProtocol writeFieldBeginWithName: @"criticalIllness" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __criticalIllness];
      [outProtocol writeFieldEnd];
    }
  }
  if (__allergicHistory_isset) {
    if (__allergicHistory != nil) {
      [outProtocol writeFieldBeginWithName: @"allergicHistory" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __allergicHistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__familyHistory_isset) {
    if (__familyHistory != nil) {
      [outProtocol writeFieldBeginWithName: @"familyHistory" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __familyHistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__presentIllness_isset) {
    if (__presentIllness != nil) {
      [outProtocol writeFieldBeginWithName: @"presentIllness" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __presentIllness];
      [outProtocol writeFieldEnd];
    }
  }
  if (__historyIllness_isset) {
    if (__historyIllness != nil) {
      [outProtocol writeFieldBeginWithName: @"historyIllness" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __historyIllness];
      [outProtocol writeFieldEnd];
    }
  }
  if (__physiqueFeature_isset) {
    if (__physiqueFeature != nil) {
      [outProtocol writeFieldBeginWithName: @"physiqueFeature" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __physiqueFeature];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFEmrPatientDto("];
  [ms appendString: @"patientId:"];
  [ms appendFormat: @"\"%@\"", __patientId];
  [ms appendString: @",patientName:"];
  [ms appendFormat: @"\"%@\"", __patientName];
  [ms appendString: @",bornDate:"];
  [ms appendFormat: @"\"%@\"", __bornDate];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"\"%@\"", __gender];
  [ms appendString: @",marriage:"];
  [ms appendFormat: @"\"%@\"", __marriage];
  [ms appendString: @",patientHead:"];
  [ms appendFormat: @"\"%@\"", __patientHead];
  [ms appendString: @",criticalIllness:"];
  [ms appendFormat: @"\"%@\"", __criticalIllness];
  [ms appendString: @",allergicHistory:"];
  [ms appendFormat: @"\"%@\"", __allergicHistory];
  [ms appendString: @",familyHistory:"];
  [ms appendFormat: @"\"%@\"", __familyHistory];
  [ms appendString: @",presentIllness:"];
  [ms appendFormat: @"\"%@\"", __presentIllness];
  [ms appendString: @",historyIllness:"];
  [ms appendFormat: @"\"%@\"", __historyIllness];
  [ms appendString: @",physiqueFeature:"];
  [ms appendFormat: @"\"%@\"", __physiqueFeature];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFEmrRegDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRegType: (NSString *) regType medType: (NSString *) medType regFee: (NSString *) regFee totalFee: (NSString *) totalFee regId: (NSString *) regId regNo: (NSString *) regNo cardNo: (NSString *) cardNo hospName: (NSString *) hospName deptName: (NSString *) deptName drName: (NSString *) drName medDate: (NSString *) medDate symptom: (NSString *) symptom pointName: (NSString *) pointName
{
  self = [super init];
  __regType = [regType retain_stub];
  __regType_isset = YES;
  __medType = [medType retain_stub];
  __medType_isset = YES;
  __regFee = [regFee retain_stub];
  __regFee_isset = YES;
  __totalFee = [totalFee retain_stub];
  __totalFee_isset = YES;
  __regId = [regId retain_stub];
  __regId_isset = YES;
  __regNo = [regNo retain_stub];
  __regNo_isset = YES;
  __cardNo = [cardNo retain_stub];
  __cardNo_isset = YES;
  __hospName = [hospName retain_stub];
  __hospName_isset = YES;
  __deptName = [deptName retain_stub];
  __deptName_isset = YES;
  __drName = [drName retain_stub];
  __drName_isset = YES;
  __medDate = [medDate retain_stub];
  __medDate_isset = YES;
  __symptom = [symptom retain_stub];
  __symptom_isset = YES;
  __pointName = [pointName retain_stub];
  __pointName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"regType"])
  {
    __regType = [[decoder decodeObjectForKey: @"regType"] retain_stub];
    __regType_isset = YES;
  }
  if ([decoder containsValueForKey: @"medType"])
  {
    __medType = [[decoder decodeObjectForKey: @"medType"] retain_stub];
    __medType_isset = YES;
  }
  if ([decoder containsValueForKey: @"regFee"])
  {
    __regFee = [[decoder decodeObjectForKey: @"regFee"] retain_stub];
    __regFee_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalFee"])
  {
    __totalFee = [[decoder decodeObjectForKey: @"totalFee"] retain_stub];
    __totalFee_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [[decoder decodeObjectForKey: @"regId"] retain_stub];
    __regId_isset = YES;
  }
  if ([decoder containsValueForKey: @"regNo"])
  {
    __regNo = [[decoder decodeObjectForKey: @"regNo"] retain_stub];
    __regNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardNo"])
  {
    __cardNo = [[decoder decodeObjectForKey: @"cardNo"] retain_stub];
    __cardNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospName"])
  {
    __hospName = [[decoder decodeObjectForKey: @"hospName"] retain_stub];
    __hospName_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptName"])
  {
    __deptName = [[decoder decodeObjectForKey: @"deptName"] retain_stub];
    __deptName_isset = YES;
  }
  if ([decoder containsValueForKey: @"drName"])
  {
    __drName = [[decoder decodeObjectForKey: @"drName"] retain_stub];
    __drName_isset = YES;
  }
  if ([decoder containsValueForKey: @"medDate"])
  {
    __medDate = [[decoder decodeObjectForKey: @"medDate"] retain_stub];
    __medDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"symptom"])
  {
    __symptom = [[decoder decodeObjectForKey: @"symptom"] retain_stub];
    __symptom_isset = YES;
  }
  if ([decoder containsValueForKey: @"pointName"])
  {
    __pointName = [[decoder decodeObjectForKey: @"pointName"] retain_stub];
    __pointName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__regType_isset)
  {
    [encoder encodeObject: __regType forKey: @"regType"];
  }
  if (__medType_isset)
  {
    [encoder encodeObject: __medType forKey: @"medType"];
  }
  if (__regFee_isset)
  {
    [encoder encodeObject: __regFee forKey: @"regFee"];
  }
  if (__totalFee_isset)
  {
    [encoder encodeObject: __totalFee forKey: @"totalFee"];
  }
  if (__regId_isset)
  {
    [encoder encodeObject: __regId forKey: @"regId"];
  }
  if (__regNo_isset)
  {
    [encoder encodeObject: __regNo forKey: @"regNo"];
  }
  if (__cardNo_isset)
  {
    [encoder encodeObject: __cardNo forKey: @"cardNo"];
  }
  if (__hospName_isset)
  {
    [encoder encodeObject: __hospName forKey: @"hospName"];
  }
  if (__deptName_isset)
  {
    [encoder encodeObject: __deptName forKey: @"deptName"];
  }
  if (__drName_isset)
  {
    [encoder encodeObject: __drName forKey: @"drName"];
  }
  if (__medDate_isset)
  {
    [encoder encodeObject: __medDate forKey: @"medDate"];
  }
  if (__symptom_isset)
  {
    [encoder encodeObject: __symptom forKey: @"symptom"];
  }
  if (__pointName_isset)
  {
    [encoder encodeObject: __pointName forKey: @"pointName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __regType_isset ? 2654435761 : 0;
  if (__regType_isset)
  {
    hash = (hash * 31) ^ [__regType hash];
  }
  hash = (hash * 31) ^ __medType_isset ? 2654435761 : 0;
  if (__medType_isset)
  {
    hash = (hash * 31) ^ [__medType hash];
  }
  hash = (hash * 31) ^ __regFee_isset ? 2654435761 : 0;
  if (__regFee_isset)
  {
    hash = (hash * 31) ^ [__regFee hash];
  }
  hash = (hash * 31) ^ __totalFee_isset ? 2654435761 : 0;
  if (__totalFee_isset)
  {
    hash = (hash * 31) ^ [__totalFee hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [__regId hash];
  }
  hash = (hash * 31) ^ __regNo_isset ? 2654435761 : 0;
  if (__regNo_isset)
  {
    hash = (hash * 31) ^ [__regNo hash];
  }
  hash = (hash * 31) ^ __cardNo_isset ? 2654435761 : 0;
  if (__cardNo_isset)
  {
    hash = (hash * 31) ^ [__cardNo hash];
  }
  hash = (hash * 31) ^ __hospName_isset ? 2654435761 : 0;
  if (__hospName_isset)
  {
    hash = (hash * 31) ^ [__hospName hash];
  }
  hash = (hash * 31) ^ __deptName_isset ? 2654435761 : 0;
  if (__deptName_isset)
  {
    hash = (hash * 31) ^ [__deptName hash];
  }
  hash = (hash * 31) ^ __drName_isset ? 2654435761 : 0;
  if (__drName_isset)
  {
    hash = (hash * 31) ^ [__drName hash];
  }
  hash = (hash * 31) ^ __medDate_isset ? 2654435761 : 0;
  if (__medDate_isset)
  {
    hash = (hash * 31) ^ [__medDate hash];
  }
  hash = (hash * 31) ^ __symptom_isset ? 2654435761 : 0;
  if (__symptom_isset)
  {
    hash = (hash * 31) ^ [__symptom hash];
  }
  hash = (hash * 31) ^ __pointName_isset ? 2654435761 : 0;
  if (__pointName_isset)
  {
    hash = (hash * 31) ^ [__pointName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFEmrRegDto class]]) {
    return NO;
  }
  NXTFEmrRegDto *other = (NXTFEmrRegDto *)anObject;
  if ((__regType_isset != other->__regType_isset) ||
      (__regType_isset && ((__regType || other->__regType) && ![__regType isEqual:other->__regType]))) {
    return NO;
  }
  if ((__medType_isset != other->__medType_isset) ||
      (__medType_isset && ((__medType || other->__medType) && ![__medType isEqual:other->__medType]))) {
    return NO;
  }
  if ((__regFee_isset != other->__regFee_isset) ||
      (__regFee_isset && ((__regFee || other->__regFee) && ![__regFee isEqual:other->__regFee]))) {
    return NO;
  }
  if ((__totalFee_isset != other->__totalFee_isset) ||
      (__totalFee_isset && ((__totalFee || other->__totalFee) && ![__totalFee isEqual:other->__totalFee]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && ((__regId || other->__regId) && ![__regId isEqual:other->__regId]))) {
    return NO;
  }
  if ((__regNo_isset != other->__regNo_isset) ||
      (__regNo_isset && ((__regNo || other->__regNo) && ![__regNo isEqual:other->__regNo]))) {
    return NO;
  }
  if ((__cardNo_isset != other->__cardNo_isset) ||
      (__cardNo_isset && ((__cardNo || other->__cardNo) && ![__cardNo isEqual:other->__cardNo]))) {
    return NO;
  }
  if ((__hospName_isset != other->__hospName_isset) ||
      (__hospName_isset && ((__hospName || other->__hospName) && ![__hospName isEqual:other->__hospName]))) {
    return NO;
  }
  if ((__deptName_isset != other->__deptName_isset) ||
      (__deptName_isset && ((__deptName || other->__deptName) && ![__deptName isEqual:other->__deptName]))) {
    return NO;
  }
  if ((__drName_isset != other->__drName_isset) ||
      (__drName_isset && ((__drName || other->__drName) && ![__drName isEqual:other->__drName]))) {
    return NO;
  }
  if ((__medDate_isset != other->__medDate_isset) ||
      (__medDate_isset && ((__medDate || other->__medDate) && ![__medDate isEqual:other->__medDate]))) {
    return NO;
  }
  if ((__symptom_isset != other->__symptom_isset) ||
      (__symptom_isset && ((__symptom || other->__symptom) && ![__symptom isEqual:other->__symptom]))) {
    return NO;
  }
  if ((__pointName_isset != other->__pointName_isset) ||
      (__pointName_isset && ((__pointName || other->__pointName) && ![__pointName isEqual:other->__pointName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__regType release_stub];
  [__medType release_stub];
  [__regFee release_stub];
  [__totalFee release_stub];
  [__regId release_stub];
  [__regNo release_stub];
  [__cardNo release_stub];
  [__hospName release_stub];
  [__deptName release_stub];
  [__drName release_stub];
  [__medDate release_stub];
  [__symptom release_stub];
  [__pointName release_stub];
  [super dealloc_stub];
}

- (NSString *) regType {
  return [[__regType retain_stub] autorelease_stub];
}

- (void) setRegType: (NSString *) regType {
  [regType retain_stub];
  [__regType release_stub];
  __regType = regType;
  __regType_isset = YES;
}

- (BOOL) regTypeIsSet {
  return __regType_isset;
}

- (void) unsetRegType {
  [__regType release_stub];
  __regType = nil;
  __regType_isset = NO;
}

- (NSString *) medType {
  return [[__medType retain_stub] autorelease_stub];
}

- (void) setMedType: (NSString *) medType {
  [medType retain_stub];
  [__medType release_stub];
  __medType = medType;
  __medType_isset = YES;
}

- (BOOL) medTypeIsSet {
  return __medType_isset;
}

- (void) unsetMedType {
  [__medType release_stub];
  __medType = nil;
  __medType_isset = NO;
}

- (NSString *) regFee {
  return [[__regFee retain_stub] autorelease_stub];
}

- (void) setRegFee: (NSString *) regFee {
  [regFee retain_stub];
  [__regFee release_stub];
  __regFee = regFee;
  __regFee_isset = YES;
}

- (BOOL) regFeeIsSet {
  return __regFee_isset;
}

- (void) unsetRegFee {
  [__regFee release_stub];
  __regFee = nil;
  __regFee_isset = NO;
}

- (NSString *) totalFee {
  return [[__totalFee retain_stub] autorelease_stub];
}

- (void) setTotalFee: (NSString *) totalFee {
  [totalFee retain_stub];
  [__totalFee release_stub];
  __totalFee = totalFee;
  __totalFee_isset = YES;
}

- (BOOL) totalFeeIsSet {
  return __totalFee_isset;
}

- (void) unsetTotalFee {
  [__totalFee release_stub];
  __totalFee = nil;
  __totalFee_isset = NO;
}

- (NSString *) regId {
  return [[__regId retain_stub] autorelease_stub];
}

- (void) setRegId: (NSString *) regId {
  [regId retain_stub];
  [__regId release_stub];
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  [__regId release_stub];
  __regId = nil;
  __regId_isset = NO;
}

- (NSString *) regNo {
  return [[__regNo retain_stub] autorelease_stub];
}

- (void) setRegNo: (NSString *) regNo {
  [regNo retain_stub];
  [__regNo release_stub];
  __regNo = regNo;
  __regNo_isset = YES;
}

- (BOOL) regNoIsSet {
  return __regNo_isset;
}

- (void) unsetRegNo {
  [__regNo release_stub];
  __regNo = nil;
  __regNo_isset = NO;
}

- (NSString *) cardNo {
  return [[__cardNo retain_stub] autorelease_stub];
}

- (void) setCardNo: (NSString *) cardNo {
  [cardNo retain_stub];
  [__cardNo release_stub];
  __cardNo = cardNo;
  __cardNo_isset = YES;
}

- (BOOL) cardNoIsSet {
  return __cardNo_isset;
}

- (void) unsetCardNo {
  [__cardNo release_stub];
  __cardNo = nil;
  __cardNo_isset = NO;
}

- (NSString *) hospName {
  return [[__hospName retain_stub] autorelease_stub];
}

- (void) setHospName: (NSString *) hospName {
  [hospName retain_stub];
  [__hospName release_stub];
  __hospName = hospName;
  __hospName_isset = YES;
}

- (BOOL) hospNameIsSet {
  return __hospName_isset;
}

- (void) unsetHospName {
  [__hospName release_stub];
  __hospName = nil;
  __hospName_isset = NO;
}

- (NSString *) deptName {
  return [[__deptName retain_stub] autorelease_stub];
}

- (void) setDeptName: (NSString *) deptName {
  [deptName retain_stub];
  [__deptName release_stub];
  __deptName = deptName;
  __deptName_isset = YES;
}

- (BOOL) deptNameIsSet {
  return __deptName_isset;
}

- (void) unsetDeptName {
  [__deptName release_stub];
  __deptName = nil;
  __deptName_isset = NO;
}

- (NSString *) drName {
  return [[__drName retain_stub] autorelease_stub];
}

- (void) setDrName: (NSString *) drName {
  [drName retain_stub];
  [__drName release_stub];
  __drName = drName;
  __drName_isset = YES;
}

- (BOOL) drNameIsSet {
  return __drName_isset;
}

- (void) unsetDrName {
  [__drName release_stub];
  __drName = nil;
  __drName_isset = NO;
}

- (NSString *) medDate {
  return [[__medDate retain_stub] autorelease_stub];
}

- (void) setMedDate: (NSString *) medDate {
  [medDate retain_stub];
  [__medDate release_stub];
  __medDate = medDate;
  __medDate_isset = YES;
}

- (BOOL) medDateIsSet {
  return __medDate_isset;
}

- (void) unsetMedDate {
  [__medDate release_stub];
  __medDate = nil;
  __medDate_isset = NO;
}

- (NSString *) symptom {
  return [[__symptom retain_stub] autorelease_stub];
}

- (void) setSymptom: (NSString *) symptom {
  [symptom retain_stub];
  [__symptom release_stub];
  __symptom = symptom;
  __symptom_isset = YES;
}

- (BOOL) symptomIsSet {
  return __symptom_isset;
}

- (void) unsetSymptom {
  [__symptom release_stub];
  __symptom = nil;
  __symptom_isset = NO;
}

- (NSString *) pointName {
  return [[__pointName retain_stub] autorelease_stub];
}

- (void) setPointName: (NSString *) pointName {
  [pointName retain_stub];
  [__pointName release_stub];
  __pointName = pointName;
  __pointName_isset = YES;
}

- (BOOL) pointNameIsSet {
  return __pointName_isset;
}

- (void) unsetPointName {
  [__pointName release_stub];
  __pointName = nil;
  __pointName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMedType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTotalFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCardNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMedDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSymptom: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPointName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EmrRegDto"];
  if (__regType_isset) {
    if (__regType != nil) {
      [outProtocol writeFieldBeginWithName: @"regType" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __regType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__medType_isset) {
    if (__medType != nil) {
      [outProtocol writeFieldBeginWithName: @"medType" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __medType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regFee_isset) {
    if (__regFee != nil) {
      [outProtocol writeFieldBeginWithName: @"regFee" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __regFee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalFee_isset) {
    if (__totalFee != nil) {
      [outProtocol writeFieldBeginWithName: @"totalFee" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __totalFee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    if (__regId != nil) {
      [outProtocol writeFieldBeginWithName: @"regId" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __regId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regNo_isset) {
    if (__regNo != nil) {
      [outProtocol writeFieldBeginWithName: @"regNo" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __regNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cardNo_isset) {
    if (__cardNo != nil) {
      [outProtocol writeFieldBeginWithName: @"cardNo" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __cardNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospName_isset) {
    if (__hospName != nil) {
      [outProtocol writeFieldBeginWithName: @"hospName" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __hospName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptName_isset) {
    if (__deptName != nil) {
      [outProtocol writeFieldBeginWithName: @"deptName" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __deptName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drName_isset) {
    if (__drName != nil) {
      [outProtocol writeFieldBeginWithName: @"drName" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __drName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__medDate_isset) {
    if (__medDate != nil) {
      [outProtocol writeFieldBeginWithName: @"medDate" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __medDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__symptom_isset) {
    if (__symptom != nil) {
      [outProtocol writeFieldBeginWithName: @"symptom" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __symptom];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pointName_isset) {
    if (__pointName != nil) {
      [outProtocol writeFieldBeginWithName: @"pointName" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __pointName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFEmrRegDto("];
  [ms appendString: @"regType:"];
  [ms appendFormat: @"\"%@\"", __regType];
  [ms appendString: @",medType:"];
  [ms appendFormat: @"\"%@\"", __medType];
  [ms appendString: @",regFee:"];
  [ms appendFormat: @"\"%@\"", __regFee];
  [ms appendString: @",totalFee:"];
  [ms appendFormat: @"\"%@\"", __totalFee];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"\"%@\"", __regId];
  [ms appendString: @",regNo:"];
  [ms appendFormat: @"\"%@\"", __regNo];
  [ms appendString: @",cardNo:"];
  [ms appendFormat: @"\"%@\"", __cardNo];
  [ms appendString: @",hospName:"];
  [ms appendFormat: @"\"%@\"", __hospName];
  [ms appendString: @",deptName:"];
  [ms appendFormat: @"\"%@\"", __deptName];
  [ms appendString: @",drName:"];
  [ms appendFormat: @"\"%@\"", __drName];
  [ms appendString: @",medDate:"];
  [ms appendFormat: @"\"%@\"", __medDate];
  [ms appendString: @",symptom:"];
  [ms appendFormat: @"\"%@\"", __symptom];
  [ms appendString: @",pointName:"];
  [ms appendFormat: @"\"%@\"", __pointName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFScheduleDetailDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSchDate: (NSString *) schDate schSummary: (NSString *) schSummary
{
  self = [super init];
  __schDate = [schDate retain_stub];
  __schDate_isset = YES;
  __schSummary = [schSummary retain_stub];
  __schSummary_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"schDate"])
  {
    __schDate = [[decoder decodeObjectForKey: @"schDate"] retain_stub];
    __schDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"schSummary"])
  {
    __schSummary = [[decoder decodeObjectForKey: @"schSummary"] retain_stub];
    __schSummary_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__schDate_isset)
  {
    [encoder encodeObject: __schDate forKey: @"schDate"];
  }
  if (__schSummary_isset)
  {
    [encoder encodeObject: __schSummary forKey: @"schSummary"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __schDate_isset ? 2654435761 : 0;
  if (__schDate_isset)
  {
    hash = (hash * 31) ^ [__schDate hash];
  }
  hash = (hash * 31) ^ __schSummary_isset ? 2654435761 : 0;
  if (__schSummary_isset)
  {
    hash = (hash * 31) ^ [__schSummary hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFScheduleDetailDto class]]) {
    return NO;
  }
  NXTFScheduleDetailDto *other = (NXTFScheduleDetailDto *)anObject;
  if ((__schDate_isset != other->__schDate_isset) ||
      (__schDate_isset && ((__schDate || other->__schDate) && ![__schDate isEqual:other->__schDate]))) {
    return NO;
  }
  if ((__schSummary_isset != other->__schSummary_isset) ||
      (__schSummary_isset && ((__schSummary || other->__schSummary) && ![__schSummary isEqual:other->__schSummary]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__schDate release_stub];
  [__schSummary release_stub];
  [super dealloc_stub];
}

- (NSString *) schDate {
  return [[__schDate retain_stub] autorelease_stub];
}

- (void) setSchDate: (NSString *) schDate {
  [schDate retain_stub];
  [__schDate release_stub];
  __schDate = schDate;
  __schDate_isset = YES;
}

- (BOOL) schDateIsSet {
  return __schDate_isset;
}

- (void) unsetSchDate {
  [__schDate release_stub];
  __schDate = nil;
  __schDate_isset = NO;
}

- (NSString *) schSummary {
  return [[__schSummary retain_stub] autorelease_stub];
}

- (void) setSchSummary: (NSString *) schSummary {
  [schSummary retain_stub];
  [__schSummary release_stub];
  __schSummary = schSummary;
  __schSummary_isset = YES;
}

- (BOOL) schSummaryIsSet {
  return __schSummary_isset;
}

- (void) unsetSchSummary {
  [__schSummary release_stub];
  __schSummary = nil;
  __schSummary_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSchDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSchSummary: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ScheduleDetailDto"];
  if (__schDate_isset) {
    if (__schDate != nil) {
      [outProtocol writeFieldBeginWithName: @"schDate" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __schDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__schSummary_isset) {
    if (__schSummary != nil) {
      [outProtocol writeFieldBeginWithName: @"schSummary" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __schSummary];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFScheduleDetailDto("];
  [ms appendString: @"schDate:"];
  [ms appendFormat: @"\"%@\"", __schDate];
  [ms appendString: @",schSummary:"];
  [ms appendFormat: @"\"%@\"", __schSummary];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFScheduleDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.details = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithOperatorName: (NSString *) operatorName details: (NSMutableArray *) details
{
  self = [super init];
  __operatorName = [operatorName retain_stub];
  __operatorName_isset = YES;
  __details = [details retain_stub];
  __details_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"operatorName"])
  {
    __operatorName = [[decoder decodeObjectForKey: @"operatorName"] retain_stub];
    __operatorName_isset = YES;
  }
  if ([decoder containsValueForKey: @"details"])
  {
    __details = [[decoder decodeObjectForKey: @"details"] retain_stub];
    __details_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__operatorName_isset)
  {
    [encoder encodeObject: __operatorName forKey: @"operatorName"];
  }
  if (__details_isset)
  {
    [encoder encodeObject: __details forKey: @"details"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __operatorName_isset ? 2654435761 : 0;
  if (__operatorName_isset)
  {
    hash = (hash * 31) ^ [__operatorName hash];
  }
  hash = (hash * 31) ^ __details_isset ? 2654435761 : 0;
  if (__details_isset)
  {
    hash = (hash * 31) ^ [__details hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFScheduleDto class]]) {
    return NO;
  }
  NXTFScheduleDto *other = (NXTFScheduleDto *)anObject;
  if ((__operatorName_isset != other->__operatorName_isset) ||
      (__operatorName_isset && ((__operatorName || other->__operatorName) && ![__operatorName isEqual:other->__operatorName]))) {
    return NO;
  }
  if ((__details_isset != other->__details_isset) ||
      (__details_isset && ((__details || other->__details) && ![__details isEqual:other->__details]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__operatorName release_stub];
  [__details release_stub];
  [super dealloc_stub];
}

- (NSString *) operatorName {
  return [[__operatorName retain_stub] autorelease_stub];
}

- (void) setOperatorName: (NSString *) operatorName {
  [operatorName retain_stub];
  [__operatorName release_stub];
  __operatorName = operatorName;
  __operatorName_isset = YES;
}

- (BOOL) operatorNameIsSet {
  return __operatorName_isset;
}

- (void) unsetOperatorName {
  [__operatorName release_stub];
  __operatorName = nil;
  __operatorName_isset = NO;
}

- (NSMutableArray *) details {
  return [[__details retain_stub] autorelease_stub];
}

- (void) setDetails: (NSMutableArray *) details {
  [details retain_stub];
  [__details release_stub];
  __details = details;
  __details_isset = YES;
}

- (BOOL) detailsIsSet {
  return __details_isset;
}

- (void) unsetDetails {
  [__details release_stub];
  __details = nil;
  __details_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOperatorName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size116;
          [inProtocol readListBeginReturningElementType: NULL size: &_size116];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size116];
          int _i117;
          for (_i117 = 0; _i117 < _size116; ++_i117)
          {
            NXTFScheduleDetailDto *_elem118 = [[NXTFScheduleDetailDto alloc] init];
            [_elem118 read: inProtocol];
            [fieldValue addObject: _elem118];
            [_elem118 release_stub];
          }
          [inProtocol readListEnd];
          [self setDetails: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ScheduleDto"];
  if (__operatorName_isset) {
    if (__operatorName != nil) {
      [outProtocol writeFieldBeginWithName: @"operatorName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __operatorName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__details_isset) {
    if (__details != nil) {
      [outProtocol writeFieldBeginWithName: @"details" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__details count]];
        int idx120;
        for (idx120 = 0; idx120 < [__details count]; idx120++)
        {
          [[__details objectAtIndex: idx120] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFScheduleDto("];
  [ms appendString: @"operatorName:"];
  [ms appendFormat: @"\"%@\"", __operatorName];
  [ms appendString: @",details:"];
  [ms appendFormat: @"%@", __details];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFStopScheduleDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOperatorName: (NSString *) operatorName stopInfo: (NSString *) stopInfo
{
  self = [super init];
  __operatorName = [operatorName retain_stub];
  __operatorName_isset = YES;
  __stopInfo = [stopInfo retain_stub];
  __stopInfo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"operatorName"])
  {
    __operatorName = [[decoder decodeObjectForKey: @"operatorName"] retain_stub];
    __operatorName_isset = YES;
  }
  if ([decoder containsValueForKey: @"stopInfo"])
  {
    __stopInfo = [[decoder decodeObjectForKey: @"stopInfo"] retain_stub];
    __stopInfo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__operatorName_isset)
  {
    [encoder encodeObject: __operatorName forKey: @"operatorName"];
  }
  if (__stopInfo_isset)
  {
    [encoder encodeObject: __stopInfo forKey: @"stopInfo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __operatorName_isset ? 2654435761 : 0;
  if (__operatorName_isset)
  {
    hash = (hash * 31) ^ [__operatorName hash];
  }
  hash = (hash * 31) ^ __stopInfo_isset ? 2654435761 : 0;
  if (__stopInfo_isset)
  {
    hash = (hash * 31) ^ [__stopInfo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFStopScheduleDto class]]) {
    return NO;
  }
  NXTFStopScheduleDto *other = (NXTFStopScheduleDto *)anObject;
  if ((__operatorName_isset != other->__operatorName_isset) ||
      (__operatorName_isset && ((__operatorName || other->__operatorName) && ![__operatorName isEqual:other->__operatorName]))) {
    return NO;
  }
  if ((__stopInfo_isset != other->__stopInfo_isset) ||
      (__stopInfo_isset && ((__stopInfo || other->__stopInfo) && ![__stopInfo isEqual:other->__stopInfo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__operatorName release_stub];
  [__stopInfo release_stub];
  [super dealloc_stub];
}

- (NSString *) operatorName {
  return [[__operatorName retain_stub] autorelease_stub];
}

- (void) setOperatorName: (NSString *) operatorName {
  [operatorName retain_stub];
  [__operatorName release_stub];
  __operatorName = operatorName;
  __operatorName_isset = YES;
}

- (BOOL) operatorNameIsSet {
  return __operatorName_isset;
}

- (void) unsetOperatorName {
  [__operatorName release_stub];
  __operatorName = nil;
  __operatorName_isset = NO;
}

- (NSString *) stopInfo {
  return [[__stopInfo retain_stub] autorelease_stub];
}

- (void) setStopInfo: (NSString *) stopInfo {
  [stopInfo retain_stub];
  [__stopInfo release_stub];
  __stopInfo = stopInfo;
  __stopInfo_isset = YES;
}

- (BOOL) stopInfoIsSet {
  return __stopInfo_isset;
}

- (void) unsetStopInfo {
  [__stopInfo release_stub];
  __stopInfo = nil;
  __stopInfo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOperatorName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStopInfo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"StopScheduleDto"];
  if (__operatorName_isset) {
    if (__operatorName != nil) {
      [outProtocol writeFieldBeginWithName: @"operatorName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __operatorName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stopInfo_isset) {
    if (__stopInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"stopInfo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __stopInfo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFStopScheduleDto("];
  [ms appendString: @"operatorName:"];
  [ms appendFormat: @"\"%@\"", __operatorName];
  [ms appendString: @",stopInfo:"];
  [ms appendFormat: @"\"%@\"", __stopInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPhysicalReportInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPhysicalDate: (NSString *) physicalDate packagesName: (NSString *) packagesName physicalID: (NSString *) physicalID customerID: (NSString *) customerID reportStatus: (int32_t) reportStatus
{
  self = [super init];
  __physicalDate = [physicalDate retain_stub];
  __physicalDate_isset = YES;
  __packagesName = [packagesName retain_stub];
  __packagesName_isset = YES;
  __physicalID = [physicalID retain_stub];
  __physicalID_isset = YES;
  __customerID = [customerID retain_stub];
  __customerID_isset = YES;
  __reportStatus = reportStatus;
  __reportStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"physicalDate"])
  {
    __physicalDate = [[decoder decodeObjectForKey: @"physicalDate"] retain_stub];
    __physicalDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"packagesName"])
  {
    __packagesName = [[decoder decodeObjectForKey: @"packagesName"] retain_stub];
    __packagesName_isset = YES;
  }
  if ([decoder containsValueForKey: @"physicalID"])
  {
    __physicalID = [[decoder decodeObjectForKey: @"physicalID"] retain_stub];
    __physicalID_isset = YES;
  }
  if ([decoder containsValueForKey: @"customerID"])
  {
    __customerID = [[decoder decodeObjectForKey: @"customerID"] retain_stub];
    __customerID_isset = YES;
  }
  if ([decoder containsValueForKey: @"reportStatus"])
  {
    __reportStatus = [decoder decodeInt32ForKey: @"reportStatus"];
    __reportStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__physicalDate_isset)
  {
    [encoder encodeObject: __physicalDate forKey: @"physicalDate"];
  }
  if (__packagesName_isset)
  {
    [encoder encodeObject: __packagesName forKey: @"packagesName"];
  }
  if (__physicalID_isset)
  {
    [encoder encodeObject: __physicalID forKey: @"physicalID"];
  }
  if (__customerID_isset)
  {
    [encoder encodeObject: __customerID forKey: @"customerID"];
  }
  if (__reportStatus_isset)
  {
    [encoder encodeInt32: __reportStatus forKey: @"reportStatus"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __physicalDate_isset ? 2654435761 : 0;
  if (__physicalDate_isset)
  {
    hash = (hash * 31) ^ [__physicalDate hash];
  }
  hash = (hash * 31) ^ __packagesName_isset ? 2654435761 : 0;
  if (__packagesName_isset)
  {
    hash = (hash * 31) ^ [__packagesName hash];
  }
  hash = (hash * 31) ^ __physicalID_isset ? 2654435761 : 0;
  if (__physicalID_isset)
  {
    hash = (hash * 31) ^ [__physicalID hash];
  }
  hash = (hash * 31) ^ __customerID_isset ? 2654435761 : 0;
  if (__customerID_isset)
  {
    hash = (hash * 31) ^ [__customerID hash];
  }
  hash = (hash * 31) ^ __reportStatus_isset ? 2654435761 : 0;
  if (__reportStatus_isset)
  {
    hash = (hash * 31) ^ [@(__reportStatus) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPhysicalReportInfo class]]) {
    return NO;
  }
  NXTFPhysicalReportInfo *other = (NXTFPhysicalReportInfo *)anObject;
  if ((__physicalDate_isset != other->__physicalDate_isset) ||
      (__physicalDate_isset && ((__physicalDate || other->__physicalDate) && ![__physicalDate isEqual:other->__physicalDate]))) {
    return NO;
  }
  if ((__packagesName_isset != other->__packagesName_isset) ||
      (__packagesName_isset && ((__packagesName || other->__packagesName) && ![__packagesName isEqual:other->__packagesName]))) {
    return NO;
  }
  if ((__physicalID_isset != other->__physicalID_isset) ||
      (__physicalID_isset && ((__physicalID || other->__physicalID) && ![__physicalID isEqual:other->__physicalID]))) {
    return NO;
  }
  if ((__customerID_isset != other->__customerID_isset) ||
      (__customerID_isset && ((__customerID || other->__customerID) && ![__customerID isEqual:other->__customerID]))) {
    return NO;
  }
  if ((__reportStatus_isset != other->__reportStatus_isset) ||
      (__reportStatus_isset && (__reportStatus != other->__reportStatus))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__physicalDate release_stub];
  [__packagesName release_stub];
  [__physicalID release_stub];
  [__customerID release_stub];
  [super dealloc_stub];
}

- (NSString *) physicalDate {
  return [[__physicalDate retain_stub] autorelease_stub];
}

- (void) setPhysicalDate: (NSString *) physicalDate {
  [physicalDate retain_stub];
  [__physicalDate release_stub];
  __physicalDate = physicalDate;
  __physicalDate_isset = YES;
}

- (BOOL) physicalDateIsSet {
  return __physicalDate_isset;
}

- (void) unsetPhysicalDate {
  [__physicalDate release_stub];
  __physicalDate = nil;
  __physicalDate_isset = NO;
}

- (NSString *) packagesName {
  return [[__packagesName retain_stub] autorelease_stub];
}

- (void) setPackagesName: (NSString *) packagesName {
  [packagesName retain_stub];
  [__packagesName release_stub];
  __packagesName = packagesName;
  __packagesName_isset = YES;
}

- (BOOL) packagesNameIsSet {
  return __packagesName_isset;
}

- (void) unsetPackagesName {
  [__packagesName release_stub];
  __packagesName = nil;
  __packagesName_isset = NO;
}

- (NSString *) physicalID {
  return [[__physicalID retain_stub] autorelease_stub];
}

- (void) setPhysicalID: (NSString *) physicalID {
  [physicalID retain_stub];
  [__physicalID release_stub];
  __physicalID = physicalID;
  __physicalID_isset = YES;
}

- (BOOL) physicalIDIsSet {
  return __physicalID_isset;
}

- (void) unsetPhysicalID {
  [__physicalID release_stub];
  __physicalID = nil;
  __physicalID_isset = NO;
}

- (NSString *) customerID {
  return [[__customerID retain_stub] autorelease_stub];
}

- (void) setCustomerID: (NSString *) customerID {
  [customerID retain_stub];
  [__customerID release_stub];
  __customerID = customerID;
  __customerID_isset = YES;
}

- (BOOL) customerIDIsSet {
  return __customerID_isset;
}

- (void) unsetCustomerID {
  [__customerID release_stub];
  __customerID = nil;
  __customerID_isset = NO;
}

- (int32_t) reportStatus {
  return __reportStatus;
}

- (void) setReportStatus: (int32_t) reportStatus {
  __reportStatus = reportStatus;
  __reportStatus_isset = YES;
}

- (BOOL) reportStatusIsSet {
  return __reportStatus_isset;
}

- (void) unsetReportStatus {
  __reportStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhysicalDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPackagesName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhysicalID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCustomerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setReportStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PhysicalReportInfo"];
  if (__physicalDate_isset) {
    if (__physicalDate != nil) {
      [outProtocol writeFieldBeginWithName: @"physicalDate" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __physicalDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__packagesName_isset) {
    if (__packagesName != nil) {
      [outProtocol writeFieldBeginWithName: @"packagesName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __packagesName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__physicalID_isset) {
    if (__physicalID != nil) {
      [outProtocol writeFieldBeginWithName: @"physicalID" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __physicalID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__customerID_isset) {
    if (__customerID != nil) {
      [outProtocol writeFieldBeginWithName: @"customerID" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __customerID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reportStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"reportStatus" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __reportStatus];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPhysicalReportInfo("];
  [ms appendString: @"physicalDate:"];
  [ms appendFormat: @"\"%@\"", __physicalDate];
  [ms appendString: @",packagesName:"];
  [ms appendFormat: @"\"%@\"", __packagesName];
  [ms appendString: @",physicalID:"];
  [ms appendFormat: @"\"%@\"", __physicalID];
  [ms appendString: @",customerID:"];
  [ms appendFormat: @"\"%@\"", __customerID];
  [ms appendString: @",reportStatus:"];
  [ms appendFormat: @"%i", __reportStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPhysicalItemInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithItemName: (NSString *) itemName itemResult: (NSString *) itemResult itemDiag: (NSString *) itemDiag suggName: (NSString *) suggName suggContent: (NSString *) suggContent upValue: (double) upValue downValue: (double) downValue itemUnit: (NSString *) itemUnit itemFlag: (NSString *) itemFlag sort: (int32_t) sort
{
  self = [super init];
  __itemName = [itemName retain_stub];
  __itemName_isset = YES;
  __itemResult = [itemResult retain_stub];
  __itemResult_isset = YES;
  __itemDiag = [itemDiag retain_stub];
  __itemDiag_isset = YES;
  __suggName = [suggName retain_stub];
  __suggName_isset = YES;
  __suggContent = [suggContent retain_stub];
  __suggContent_isset = YES;
  __upValue = upValue;
  __upValue_isset = YES;
  __downValue = downValue;
  __downValue_isset = YES;
  __itemUnit = [itemUnit retain_stub];
  __itemUnit_isset = YES;
  __itemFlag = [itemFlag retain_stub];
  __itemFlag_isset = YES;
  __sort = sort;
  __sort_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"itemName"])
  {
    __itemName = [[decoder decodeObjectForKey: @"itemName"] retain_stub];
    __itemName_isset = YES;
  }
  if ([decoder containsValueForKey: @"itemResult"])
  {
    __itemResult = [[decoder decodeObjectForKey: @"itemResult"] retain_stub];
    __itemResult_isset = YES;
  }
  if ([decoder containsValueForKey: @"itemDiag"])
  {
    __itemDiag = [[decoder decodeObjectForKey: @"itemDiag"] retain_stub];
    __itemDiag_isset = YES;
  }
  if ([decoder containsValueForKey: @"suggName"])
  {
    __suggName = [[decoder decodeObjectForKey: @"suggName"] retain_stub];
    __suggName_isset = YES;
  }
  if ([decoder containsValueForKey: @"suggContent"])
  {
    __suggContent = [[decoder decodeObjectForKey: @"suggContent"] retain_stub];
    __suggContent_isset = YES;
  }
  if ([decoder containsValueForKey: @"upValue"])
  {
    __upValue = [decoder decodeDoubleForKey: @"upValue"];
    __upValue_isset = YES;
  }
  if ([decoder containsValueForKey: @"downValue"])
  {
    __downValue = [decoder decodeDoubleForKey: @"downValue"];
    __downValue_isset = YES;
  }
  if ([decoder containsValueForKey: @"itemUnit"])
  {
    __itemUnit = [[decoder decodeObjectForKey: @"itemUnit"] retain_stub];
    __itemUnit_isset = YES;
  }
  if ([decoder containsValueForKey: @"itemFlag"])
  {
    __itemFlag = [[decoder decodeObjectForKey: @"itemFlag"] retain_stub];
    __itemFlag_isset = YES;
  }
  if ([decoder containsValueForKey: @"sort"])
  {
    __sort = [decoder decodeInt32ForKey: @"sort"];
    __sort_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__itemName_isset)
  {
    [encoder encodeObject: __itemName forKey: @"itemName"];
  }
  if (__itemResult_isset)
  {
    [encoder encodeObject: __itemResult forKey: @"itemResult"];
  }
  if (__itemDiag_isset)
  {
    [encoder encodeObject: __itemDiag forKey: @"itemDiag"];
  }
  if (__suggName_isset)
  {
    [encoder encodeObject: __suggName forKey: @"suggName"];
  }
  if (__suggContent_isset)
  {
    [encoder encodeObject: __suggContent forKey: @"suggContent"];
  }
  if (__upValue_isset)
  {
    [encoder encodeDouble: __upValue forKey: @"upValue"];
  }
  if (__downValue_isset)
  {
    [encoder encodeDouble: __downValue forKey: @"downValue"];
  }
  if (__itemUnit_isset)
  {
    [encoder encodeObject: __itemUnit forKey: @"itemUnit"];
  }
  if (__itemFlag_isset)
  {
    [encoder encodeObject: __itemFlag forKey: @"itemFlag"];
  }
  if (__sort_isset)
  {
    [encoder encodeInt32: __sort forKey: @"sort"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __itemName_isset ? 2654435761 : 0;
  if (__itemName_isset)
  {
    hash = (hash * 31) ^ [__itemName hash];
  }
  hash = (hash * 31) ^ __itemResult_isset ? 2654435761 : 0;
  if (__itemResult_isset)
  {
    hash = (hash * 31) ^ [__itemResult hash];
  }
  hash = (hash * 31) ^ __itemDiag_isset ? 2654435761 : 0;
  if (__itemDiag_isset)
  {
    hash = (hash * 31) ^ [__itemDiag hash];
  }
  hash = (hash * 31) ^ __suggName_isset ? 2654435761 : 0;
  if (__suggName_isset)
  {
    hash = (hash * 31) ^ [__suggName hash];
  }
  hash = (hash * 31) ^ __suggContent_isset ? 2654435761 : 0;
  if (__suggContent_isset)
  {
    hash = (hash * 31) ^ [__suggContent hash];
  }
  hash = (hash * 31) ^ __upValue_isset ? 2654435761 : 0;
  if (__upValue_isset)
  {
    hash = (hash * 31) ^ [@(__upValue) hash];
  }
  hash = (hash * 31) ^ __downValue_isset ? 2654435761 : 0;
  if (__downValue_isset)
  {
    hash = (hash * 31) ^ [@(__downValue) hash];
  }
  hash = (hash * 31) ^ __itemUnit_isset ? 2654435761 : 0;
  if (__itemUnit_isset)
  {
    hash = (hash * 31) ^ [__itemUnit hash];
  }
  hash = (hash * 31) ^ __itemFlag_isset ? 2654435761 : 0;
  if (__itemFlag_isset)
  {
    hash = (hash * 31) ^ [__itemFlag hash];
  }
  hash = (hash * 31) ^ __sort_isset ? 2654435761 : 0;
  if (__sort_isset)
  {
    hash = (hash * 31) ^ [@(__sort) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPhysicalItemInfo class]]) {
    return NO;
  }
  NXTFPhysicalItemInfo *other = (NXTFPhysicalItemInfo *)anObject;
  if ((__itemName_isset != other->__itemName_isset) ||
      (__itemName_isset && ((__itemName || other->__itemName) && ![__itemName isEqual:other->__itemName]))) {
    return NO;
  }
  if ((__itemResult_isset != other->__itemResult_isset) ||
      (__itemResult_isset && ((__itemResult || other->__itemResult) && ![__itemResult isEqual:other->__itemResult]))) {
    return NO;
  }
  if ((__itemDiag_isset != other->__itemDiag_isset) ||
      (__itemDiag_isset && ((__itemDiag || other->__itemDiag) && ![__itemDiag isEqual:other->__itemDiag]))) {
    return NO;
  }
  if ((__suggName_isset != other->__suggName_isset) ||
      (__suggName_isset && ((__suggName || other->__suggName) && ![__suggName isEqual:other->__suggName]))) {
    return NO;
  }
  if ((__suggContent_isset != other->__suggContent_isset) ||
      (__suggContent_isset && ((__suggContent || other->__suggContent) && ![__suggContent isEqual:other->__suggContent]))) {
    return NO;
  }
  if ((__upValue_isset != other->__upValue_isset) ||
      (__upValue_isset && (__upValue != other->__upValue))) {
    return NO;
  }
  if ((__downValue_isset != other->__downValue_isset) ||
      (__downValue_isset && (__downValue != other->__downValue))) {
    return NO;
  }
  if ((__itemUnit_isset != other->__itemUnit_isset) ||
      (__itemUnit_isset && ((__itemUnit || other->__itemUnit) && ![__itemUnit isEqual:other->__itemUnit]))) {
    return NO;
  }
  if ((__itemFlag_isset != other->__itemFlag_isset) ||
      (__itemFlag_isset && ((__itemFlag || other->__itemFlag) && ![__itemFlag isEqual:other->__itemFlag]))) {
    return NO;
  }
  if ((__sort_isset != other->__sort_isset) ||
      (__sort_isset && (__sort != other->__sort))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__itemName release_stub];
  [__itemResult release_stub];
  [__itemDiag release_stub];
  [__suggName release_stub];
  [__suggContent release_stub];
  [__itemUnit release_stub];
  [__itemFlag release_stub];
  [super dealloc_stub];
}

- (NSString *) itemName {
  return [[__itemName retain_stub] autorelease_stub];
}

- (void) setItemName: (NSString *) itemName {
  [itemName retain_stub];
  [__itemName release_stub];
  __itemName = itemName;
  __itemName_isset = YES;
}

- (BOOL) itemNameIsSet {
  return __itemName_isset;
}

- (void) unsetItemName {
  [__itemName release_stub];
  __itemName = nil;
  __itemName_isset = NO;
}

- (NSString *) itemResult {
  return [[__itemResult retain_stub] autorelease_stub];
}

- (void) setItemResult: (NSString *) itemResult {
  [itemResult retain_stub];
  [__itemResult release_stub];
  __itemResult = itemResult;
  __itemResult_isset = YES;
}

- (BOOL) itemResultIsSet {
  return __itemResult_isset;
}

- (void) unsetItemResult {
  [__itemResult release_stub];
  __itemResult = nil;
  __itemResult_isset = NO;
}

- (NSString *) itemDiag {
  return [[__itemDiag retain_stub] autorelease_stub];
}

- (void) setItemDiag: (NSString *) itemDiag {
  [itemDiag retain_stub];
  [__itemDiag release_stub];
  __itemDiag = itemDiag;
  __itemDiag_isset = YES;
}

- (BOOL) itemDiagIsSet {
  return __itemDiag_isset;
}

- (void) unsetItemDiag {
  [__itemDiag release_stub];
  __itemDiag = nil;
  __itemDiag_isset = NO;
}

- (NSString *) suggName {
  return [[__suggName retain_stub] autorelease_stub];
}

- (void) setSuggName: (NSString *) suggName {
  [suggName retain_stub];
  [__suggName release_stub];
  __suggName = suggName;
  __suggName_isset = YES;
}

- (BOOL) suggNameIsSet {
  return __suggName_isset;
}

- (void) unsetSuggName {
  [__suggName release_stub];
  __suggName = nil;
  __suggName_isset = NO;
}

- (NSString *) suggContent {
  return [[__suggContent retain_stub] autorelease_stub];
}

- (void) setSuggContent: (NSString *) suggContent {
  [suggContent retain_stub];
  [__suggContent release_stub];
  __suggContent = suggContent;
  __suggContent_isset = YES;
}

- (BOOL) suggContentIsSet {
  return __suggContent_isset;
}

- (void) unsetSuggContent {
  [__suggContent release_stub];
  __suggContent = nil;
  __suggContent_isset = NO;
}

- (double) upValue {
  return __upValue;
}

- (void) setUpValue: (double) upValue {
  __upValue = upValue;
  __upValue_isset = YES;
}

- (BOOL) upValueIsSet {
  return __upValue_isset;
}

- (void) unsetUpValue {
  __upValue_isset = NO;
}

- (double) downValue {
  return __downValue;
}

- (void) setDownValue: (double) downValue {
  __downValue = downValue;
  __downValue_isset = YES;
}

- (BOOL) downValueIsSet {
  return __downValue_isset;
}

- (void) unsetDownValue {
  __downValue_isset = NO;
}

- (NSString *) itemUnit {
  return [[__itemUnit retain_stub] autorelease_stub];
}

- (void) setItemUnit: (NSString *) itemUnit {
  [itemUnit retain_stub];
  [__itemUnit release_stub];
  __itemUnit = itemUnit;
  __itemUnit_isset = YES;
}

- (BOOL) itemUnitIsSet {
  return __itemUnit_isset;
}

- (void) unsetItemUnit {
  [__itemUnit release_stub];
  __itemUnit = nil;
  __itemUnit_isset = NO;
}

- (NSString *) itemFlag {
  return [[__itemFlag retain_stub] autorelease_stub];
}

- (void) setItemFlag: (NSString *) itemFlag {
  [itemFlag retain_stub];
  [__itemFlag release_stub];
  __itemFlag = itemFlag;
  __itemFlag_isset = YES;
}

- (BOOL) itemFlagIsSet {
  return __itemFlag_isset;
}

- (void) unsetItemFlag {
  [__itemFlag release_stub];
  __itemFlag = nil;
  __itemFlag_isset = NO;
}

- (int32_t) sort {
  return __sort;
}

- (void) setSort: (int32_t) sort {
  __sort = sort;
  __sort_isset = YES;
}

- (BOOL) sortIsSet {
  return __sort_isset;
}

- (void) unsetSort {
  __sort_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setItemName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setItemResult: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setItemDiag: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuggName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuggContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setUpValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setDownValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setItemUnit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setItemFlag: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSort: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PhysicalItemInfo"];
  if (__itemName_isset) {
    if (__itemName != nil) {
      [outProtocol writeFieldBeginWithName: @"itemName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __itemName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__itemResult_isset) {
    if (__itemResult != nil) {
      [outProtocol writeFieldBeginWithName: @"itemResult" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __itemResult];
      [outProtocol writeFieldEnd];
    }
  }
  if (__itemDiag_isset) {
    if (__itemDiag != nil) {
      [outProtocol writeFieldBeginWithName: @"itemDiag" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __itemDiag];
      [outProtocol writeFieldEnd];
    }
  }
  if (__suggName_isset) {
    if (__suggName != nil) {
      [outProtocol writeFieldBeginWithName: @"suggName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __suggName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__suggContent_isset) {
    if (__suggContent != nil) {
      [outProtocol writeFieldBeginWithName: @"suggContent" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __suggContent];
      [outProtocol writeFieldEnd];
    }
  }
  if (__upValue_isset) {
    [outProtocol writeFieldBeginWithName: @"upValue" type: TType_DOUBLE fieldID: 6];
    [outProtocol writeDouble: __upValue];
    [outProtocol writeFieldEnd];
  }
  if (__downValue_isset) {
    [outProtocol writeFieldBeginWithName: @"downValue" type: TType_DOUBLE fieldID: 7];
    [outProtocol writeDouble: __downValue];
    [outProtocol writeFieldEnd];
  }
  if (__itemUnit_isset) {
    if (__itemUnit != nil) {
      [outProtocol writeFieldBeginWithName: @"itemUnit" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __itemUnit];
      [outProtocol writeFieldEnd];
    }
  }
  if (__itemFlag_isset) {
    if (__itemFlag != nil) {
      [outProtocol writeFieldBeginWithName: @"itemFlag" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __itemFlag];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sort_isset) {
    [outProtocol writeFieldBeginWithName: @"sort" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __sort];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPhysicalItemInfo("];
  [ms appendString: @"itemName:"];
  [ms appendFormat: @"\"%@\"", __itemName];
  [ms appendString: @",itemResult:"];
  [ms appendFormat: @"\"%@\"", __itemResult];
  [ms appendString: @",itemDiag:"];
  [ms appendFormat: @"\"%@\"", __itemDiag];
  [ms appendString: @",suggName:"];
  [ms appendFormat: @"\"%@\"", __suggName];
  [ms appendString: @",suggContent:"];
  [ms appendFormat: @"\"%@\"", __suggContent];
  [ms appendString: @",upValue:"];
  [ms appendFormat: @"%f", __upValue];
  [ms appendString: @",downValue:"];
  [ms appendFormat: @"%f", __downValue];
  [ms appendString: @",itemUnit:"];
  [ms appendFormat: @"\"%@\"", __itemUnit];
  [ms appendString: @",itemFlag:"];
  [ms appendFormat: @"\"%@\"", __itemFlag];
  [ms appendString: @",sort:"];
  [ms appendFormat: @"%i", __sort];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPhysicalComboInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.itemInfos = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithReportType: (int32_t) reportType comboName: (NSString *) comboName itemInfos: (NSMutableArray *) itemInfos summary: (NSString *) summary doctName: (NSString *) doctName sort: (int32_t) sort
{
  self = [super init];
  __reportType = reportType;
  __reportType_isset = YES;
  __comboName = [comboName retain_stub];
  __comboName_isset = YES;
  __itemInfos = [itemInfos retain_stub];
  __itemInfos_isset = YES;
  __summary = [summary retain_stub];
  __summary_isset = YES;
  __doctName = [doctName retain_stub];
  __doctName_isset = YES;
  __sort = sort;
  __sort_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"reportType"])
  {
    __reportType = [decoder decodeInt32ForKey: @"reportType"];
    __reportType_isset = YES;
  }
  if ([decoder containsValueForKey: @"comboName"])
  {
    __comboName = [[decoder decodeObjectForKey: @"comboName"] retain_stub];
    __comboName_isset = YES;
  }
  if ([decoder containsValueForKey: @"itemInfos"])
  {
    __itemInfos = [[decoder decodeObjectForKey: @"itemInfos"] retain_stub];
    __itemInfos_isset = YES;
  }
  if ([decoder containsValueForKey: @"summary"])
  {
    __summary = [[decoder decodeObjectForKey: @"summary"] retain_stub];
    __summary_isset = YES;
  }
  if ([decoder containsValueForKey: @"doctName"])
  {
    __doctName = [[decoder decodeObjectForKey: @"doctName"] retain_stub];
    __doctName_isset = YES;
  }
  if ([decoder containsValueForKey: @"sort"])
  {
    __sort = [decoder decodeInt32ForKey: @"sort"];
    __sort_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__reportType_isset)
  {
    [encoder encodeInt32: __reportType forKey: @"reportType"];
  }
  if (__comboName_isset)
  {
    [encoder encodeObject: __comboName forKey: @"comboName"];
  }
  if (__itemInfos_isset)
  {
    [encoder encodeObject: __itemInfos forKey: @"itemInfos"];
  }
  if (__summary_isset)
  {
    [encoder encodeObject: __summary forKey: @"summary"];
  }
  if (__doctName_isset)
  {
    [encoder encodeObject: __doctName forKey: @"doctName"];
  }
  if (__sort_isset)
  {
    [encoder encodeInt32: __sort forKey: @"sort"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __reportType_isset ? 2654435761 : 0;
  if (__reportType_isset)
  {
    hash = (hash * 31) ^ [@(__reportType) hash];
  }
  hash = (hash * 31) ^ __comboName_isset ? 2654435761 : 0;
  if (__comboName_isset)
  {
    hash = (hash * 31) ^ [__comboName hash];
  }
  hash = (hash * 31) ^ __itemInfos_isset ? 2654435761 : 0;
  if (__itemInfos_isset)
  {
    hash = (hash * 31) ^ [__itemInfos hash];
  }
  hash = (hash * 31) ^ __summary_isset ? 2654435761 : 0;
  if (__summary_isset)
  {
    hash = (hash * 31) ^ [__summary hash];
  }
  hash = (hash * 31) ^ __doctName_isset ? 2654435761 : 0;
  if (__doctName_isset)
  {
    hash = (hash * 31) ^ [__doctName hash];
  }
  hash = (hash * 31) ^ __sort_isset ? 2654435761 : 0;
  if (__sort_isset)
  {
    hash = (hash * 31) ^ [@(__sort) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPhysicalComboInfo class]]) {
    return NO;
  }
  NXTFPhysicalComboInfo *other = (NXTFPhysicalComboInfo *)anObject;
  if ((__reportType_isset != other->__reportType_isset) ||
      (__reportType_isset && (__reportType != other->__reportType))) {
    return NO;
  }
  if ((__comboName_isset != other->__comboName_isset) ||
      (__comboName_isset && ((__comboName || other->__comboName) && ![__comboName isEqual:other->__comboName]))) {
    return NO;
  }
  if ((__itemInfos_isset != other->__itemInfos_isset) ||
      (__itemInfos_isset && ((__itemInfos || other->__itemInfos) && ![__itemInfos isEqual:other->__itemInfos]))) {
    return NO;
  }
  if ((__summary_isset != other->__summary_isset) ||
      (__summary_isset && ((__summary || other->__summary) && ![__summary isEqual:other->__summary]))) {
    return NO;
  }
  if ((__doctName_isset != other->__doctName_isset) ||
      (__doctName_isset && ((__doctName || other->__doctName) && ![__doctName isEqual:other->__doctName]))) {
    return NO;
  }
  if ((__sort_isset != other->__sort_isset) ||
      (__sort_isset && (__sort != other->__sort))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__comboName release_stub];
  [__itemInfos release_stub];
  [__summary release_stub];
  [__doctName release_stub];
  [super dealloc_stub];
}

- (int32_t) reportType {
  return __reportType;
}

- (void) setReportType: (int32_t) reportType {
  __reportType = reportType;
  __reportType_isset = YES;
}

- (BOOL) reportTypeIsSet {
  return __reportType_isset;
}

- (void) unsetReportType {
  __reportType_isset = NO;
}

- (NSString *) comboName {
  return [[__comboName retain_stub] autorelease_stub];
}

- (void) setComboName: (NSString *) comboName {
  [comboName retain_stub];
  [__comboName release_stub];
  __comboName = comboName;
  __comboName_isset = YES;
}

- (BOOL) comboNameIsSet {
  return __comboName_isset;
}

- (void) unsetComboName {
  [__comboName release_stub];
  __comboName = nil;
  __comboName_isset = NO;
}

- (NSMutableArray *) itemInfos {
  return [[__itemInfos retain_stub] autorelease_stub];
}

- (void) setItemInfos: (NSMutableArray *) itemInfos {
  [itemInfos retain_stub];
  [__itemInfos release_stub];
  __itemInfos = itemInfos;
  __itemInfos_isset = YES;
}

- (BOOL) itemInfosIsSet {
  return __itemInfos_isset;
}

- (void) unsetItemInfos {
  [__itemInfos release_stub];
  __itemInfos = nil;
  __itemInfos_isset = NO;
}

- (NSString *) summary {
  return [[__summary retain_stub] autorelease_stub];
}

- (void) setSummary: (NSString *) summary {
  [summary retain_stub];
  [__summary release_stub];
  __summary = summary;
  __summary_isset = YES;
}

- (BOOL) summaryIsSet {
  return __summary_isset;
}

- (void) unsetSummary {
  [__summary release_stub];
  __summary = nil;
  __summary_isset = NO;
}

- (NSString *) doctName {
  return [[__doctName retain_stub] autorelease_stub];
}

- (void) setDoctName: (NSString *) doctName {
  [doctName retain_stub];
  [__doctName release_stub];
  __doctName = doctName;
  __doctName_isset = YES;
}

- (BOOL) doctNameIsSet {
  return __doctName_isset;
}

- (void) unsetDoctName {
  [__doctName release_stub];
  __doctName = nil;
  __doctName_isset = NO;
}

- (int32_t) sort {
  return __sort;
}

- (void) setSort: (int32_t) sort {
  __sort = sort;
  __sort_isset = YES;
}

- (BOOL) sortIsSet {
  return __sort_isset;
}

- (void) unsetSort {
  __sort_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setReportType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setComboName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size121;
          [inProtocol readListBeginReturningElementType: NULL size: &_size121];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size121];
          int _i122;
          for (_i122 = 0; _i122 < _size121; ++_i122)
          {
            NXTFPhysicalItemInfo *_elem123 = [[NXTFPhysicalItemInfo alloc] init];
            [_elem123 read: inProtocol];
            [fieldValue addObject: _elem123];
            [_elem123 release_stub];
          }
          [inProtocol readListEnd];
          [self setItemInfos: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSummary: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDoctName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSort: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PhysicalComboInfo"];
  if (__reportType_isset) {
    [outProtocol writeFieldBeginWithName: @"reportType" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __reportType];
    [outProtocol writeFieldEnd];
  }
  if (__comboName_isset) {
    if (__comboName != nil) {
      [outProtocol writeFieldBeginWithName: @"comboName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __comboName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__itemInfos_isset) {
    if (__itemInfos != nil) {
      [outProtocol writeFieldBeginWithName: @"itemInfos" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__itemInfos count]];
        int idx125;
        for (idx125 = 0; idx125 < [__itemInfos count]; idx125++)
        {
          [[__itemInfos objectAtIndex: idx125] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__summary_isset) {
    if (__summary != nil) {
      [outProtocol writeFieldBeginWithName: @"summary" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __summary];
      [outProtocol writeFieldEnd];
    }
  }
  if (__doctName_isset) {
    if (__doctName != nil) {
      [outProtocol writeFieldBeginWithName: @"doctName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __doctName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sort_isset) {
    [outProtocol writeFieldBeginWithName: @"sort" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __sort];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPhysicalComboInfo("];
  [ms appendString: @"reportType:"];
  [ms appendFormat: @"%i", __reportType];
  [ms appendString: @",comboName:"];
  [ms appendFormat: @"\"%@\"", __comboName];
  [ms appendString: @",itemInfos:"];
  [ms appendFormat: @"%@", __itemInfos];
  [ms appendString: @",summary:"];
  [ms appendFormat: @"\"%@\"", __summary];
  [ms appendString: @",doctName:"];
  [ms appendFormat: @"\"%@\"", __doctName];
  [ms appendString: @",sort:"];
  [ms appendFormat: @"%i", __sort];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPhysicalReportDetail

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.comboInfos = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithReportInfo: (NXTFPhysicalReportInfo *) reportInfo checkDoctName: (NSString *) checkDoctName audiDoctName: (NSString *) audiDoctName summary: (NSString *) summary suggestion: (NSString *) suggestion checkTime: (NSString *) checkTime authTime: (NSString *) authTime comboInfos: (NSMutableArray *) comboInfos
{
  self = [super init];
  __reportInfo = [reportInfo retain_stub];
  __reportInfo_isset = YES;
  __checkDoctName = [checkDoctName retain_stub];
  __checkDoctName_isset = YES;
  __audiDoctName = [audiDoctName retain_stub];
  __audiDoctName_isset = YES;
  __summary = [summary retain_stub];
  __summary_isset = YES;
  __suggestion = [suggestion retain_stub];
  __suggestion_isset = YES;
  __checkTime = [checkTime retain_stub];
  __checkTime_isset = YES;
  __authTime = [authTime retain_stub];
  __authTime_isset = YES;
  __comboInfos = [comboInfos retain_stub];
  __comboInfos_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"reportInfo"])
  {
    __reportInfo = [[decoder decodeObjectForKey: @"reportInfo"] retain_stub];
    __reportInfo_isset = YES;
  }
  if ([decoder containsValueForKey: @"checkDoctName"])
  {
    __checkDoctName = [[decoder decodeObjectForKey: @"checkDoctName"] retain_stub];
    __checkDoctName_isset = YES;
  }
  if ([decoder containsValueForKey: @"audiDoctName"])
  {
    __audiDoctName = [[decoder decodeObjectForKey: @"audiDoctName"] retain_stub];
    __audiDoctName_isset = YES;
  }
  if ([decoder containsValueForKey: @"summary"])
  {
    __summary = [[decoder decodeObjectForKey: @"summary"] retain_stub];
    __summary_isset = YES;
  }
  if ([decoder containsValueForKey: @"suggestion"])
  {
    __suggestion = [[decoder decodeObjectForKey: @"suggestion"] retain_stub];
    __suggestion_isset = YES;
  }
  if ([decoder containsValueForKey: @"checkTime"])
  {
    __checkTime = [[decoder decodeObjectForKey: @"checkTime"] retain_stub];
    __checkTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"authTime"])
  {
    __authTime = [[decoder decodeObjectForKey: @"authTime"] retain_stub];
    __authTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"comboInfos"])
  {
    __comboInfos = [[decoder decodeObjectForKey: @"comboInfos"] retain_stub];
    __comboInfos_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__reportInfo_isset)
  {
    [encoder encodeObject: __reportInfo forKey: @"reportInfo"];
  }
  if (__checkDoctName_isset)
  {
    [encoder encodeObject: __checkDoctName forKey: @"checkDoctName"];
  }
  if (__audiDoctName_isset)
  {
    [encoder encodeObject: __audiDoctName forKey: @"audiDoctName"];
  }
  if (__summary_isset)
  {
    [encoder encodeObject: __summary forKey: @"summary"];
  }
  if (__suggestion_isset)
  {
    [encoder encodeObject: __suggestion forKey: @"suggestion"];
  }
  if (__checkTime_isset)
  {
    [encoder encodeObject: __checkTime forKey: @"checkTime"];
  }
  if (__authTime_isset)
  {
    [encoder encodeObject: __authTime forKey: @"authTime"];
  }
  if (__comboInfos_isset)
  {
    [encoder encodeObject: __comboInfos forKey: @"comboInfos"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __reportInfo_isset ? 2654435761 : 0;
  if (__reportInfo_isset)
  {
    hash = (hash * 31) ^ [__reportInfo hash];
  }
  hash = (hash * 31) ^ __checkDoctName_isset ? 2654435761 : 0;
  if (__checkDoctName_isset)
  {
    hash = (hash * 31) ^ [__checkDoctName hash];
  }
  hash = (hash * 31) ^ __audiDoctName_isset ? 2654435761 : 0;
  if (__audiDoctName_isset)
  {
    hash = (hash * 31) ^ [__audiDoctName hash];
  }
  hash = (hash * 31) ^ __summary_isset ? 2654435761 : 0;
  if (__summary_isset)
  {
    hash = (hash * 31) ^ [__summary hash];
  }
  hash = (hash * 31) ^ __suggestion_isset ? 2654435761 : 0;
  if (__suggestion_isset)
  {
    hash = (hash * 31) ^ [__suggestion hash];
  }
  hash = (hash * 31) ^ __checkTime_isset ? 2654435761 : 0;
  if (__checkTime_isset)
  {
    hash = (hash * 31) ^ [__checkTime hash];
  }
  hash = (hash * 31) ^ __authTime_isset ? 2654435761 : 0;
  if (__authTime_isset)
  {
    hash = (hash * 31) ^ [__authTime hash];
  }
  hash = (hash * 31) ^ __comboInfos_isset ? 2654435761 : 0;
  if (__comboInfos_isset)
  {
    hash = (hash * 31) ^ [__comboInfos hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPhysicalReportDetail class]]) {
    return NO;
  }
  NXTFPhysicalReportDetail *other = (NXTFPhysicalReportDetail *)anObject;
  if ((__reportInfo_isset != other->__reportInfo_isset) ||
      (__reportInfo_isset && ((__reportInfo || other->__reportInfo) && ![__reportInfo isEqual:other->__reportInfo]))) {
    return NO;
  }
  if ((__checkDoctName_isset != other->__checkDoctName_isset) ||
      (__checkDoctName_isset && ((__checkDoctName || other->__checkDoctName) && ![__checkDoctName isEqual:other->__checkDoctName]))) {
    return NO;
  }
  if ((__audiDoctName_isset != other->__audiDoctName_isset) ||
      (__audiDoctName_isset && ((__audiDoctName || other->__audiDoctName) && ![__audiDoctName isEqual:other->__audiDoctName]))) {
    return NO;
  }
  if ((__summary_isset != other->__summary_isset) ||
      (__summary_isset && ((__summary || other->__summary) && ![__summary isEqual:other->__summary]))) {
    return NO;
  }
  if ((__suggestion_isset != other->__suggestion_isset) ||
      (__suggestion_isset && ((__suggestion || other->__suggestion) && ![__suggestion isEqual:other->__suggestion]))) {
    return NO;
  }
  if ((__checkTime_isset != other->__checkTime_isset) ||
      (__checkTime_isset && ((__checkTime || other->__checkTime) && ![__checkTime isEqual:other->__checkTime]))) {
    return NO;
  }
  if ((__authTime_isset != other->__authTime_isset) ||
      (__authTime_isset && ((__authTime || other->__authTime) && ![__authTime isEqual:other->__authTime]))) {
    return NO;
  }
  if ((__comboInfos_isset != other->__comboInfos_isset) ||
      (__comboInfos_isset && ((__comboInfos || other->__comboInfos) && ![__comboInfos isEqual:other->__comboInfos]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__reportInfo release_stub];
  [__checkDoctName release_stub];
  [__audiDoctName release_stub];
  [__summary release_stub];
  [__suggestion release_stub];
  [__checkTime release_stub];
  [__authTime release_stub];
  [__comboInfos release_stub];
  [super dealloc_stub];
}

- (NXTFPhysicalReportInfo *) reportInfo {
  return [[__reportInfo retain_stub] autorelease_stub];
}

- (void) setReportInfo: (NXTFPhysicalReportInfo *) reportInfo {
  [reportInfo retain_stub];
  [__reportInfo release_stub];
  __reportInfo = reportInfo;
  __reportInfo_isset = YES;
}

- (BOOL) reportInfoIsSet {
  return __reportInfo_isset;
}

- (void) unsetReportInfo {
  [__reportInfo release_stub];
  __reportInfo = nil;
  __reportInfo_isset = NO;
}

- (NSString *) checkDoctName {
  return [[__checkDoctName retain_stub] autorelease_stub];
}

- (void) setCheckDoctName: (NSString *) checkDoctName {
  [checkDoctName retain_stub];
  [__checkDoctName release_stub];
  __checkDoctName = checkDoctName;
  __checkDoctName_isset = YES;
}

- (BOOL) checkDoctNameIsSet {
  return __checkDoctName_isset;
}

- (void) unsetCheckDoctName {
  [__checkDoctName release_stub];
  __checkDoctName = nil;
  __checkDoctName_isset = NO;
}

- (NSString *) audiDoctName {
  return [[__audiDoctName retain_stub] autorelease_stub];
}

- (void) setAudiDoctName: (NSString *) audiDoctName {
  [audiDoctName retain_stub];
  [__audiDoctName release_stub];
  __audiDoctName = audiDoctName;
  __audiDoctName_isset = YES;
}

- (BOOL) audiDoctNameIsSet {
  return __audiDoctName_isset;
}

- (void) unsetAudiDoctName {
  [__audiDoctName release_stub];
  __audiDoctName = nil;
  __audiDoctName_isset = NO;
}

- (NSString *) summary {
  return [[__summary retain_stub] autorelease_stub];
}

- (void) setSummary: (NSString *) summary {
  [summary retain_stub];
  [__summary release_stub];
  __summary = summary;
  __summary_isset = YES;
}

- (BOOL) summaryIsSet {
  return __summary_isset;
}

- (void) unsetSummary {
  [__summary release_stub];
  __summary = nil;
  __summary_isset = NO;
}

- (NSString *) suggestion {
  return [[__suggestion retain_stub] autorelease_stub];
}

- (void) setSuggestion: (NSString *) suggestion {
  [suggestion retain_stub];
  [__suggestion release_stub];
  __suggestion = suggestion;
  __suggestion_isset = YES;
}

- (BOOL) suggestionIsSet {
  return __suggestion_isset;
}

- (void) unsetSuggestion {
  [__suggestion release_stub];
  __suggestion = nil;
  __suggestion_isset = NO;
}

- (NSString *) checkTime {
  return [[__checkTime retain_stub] autorelease_stub];
}

- (void) setCheckTime: (NSString *) checkTime {
  [checkTime retain_stub];
  [__checkTime release_stub];
  __checkTime = checkTime;
  __checkTime_isset = YES;
}

- (BOOL) checkTimeIsSet {
  return __checkTime_isset;
}

- (void) unsetCheckTime {
  [__checkTime release_stub];
  __checkTime = nil;
  __checkTime_isset = NO;
}

- (NSString *) authTime {
  return [[__authTime retain_stub] autorelease_stub];
}

- (void) setAuthTime: (NSString *) authTime {
  [authTime retain_stub];
  [__authTime release_stub];
  __authTime = authTime;
  __authTime_isset = YES;
}

- (BOOL) authTimeIsSet {
  return __authTime_isset;
}

- (void) unsetAuthTime {
  [__authTime release_stub];
  __authTime = nil;
  __authTime_isset = NO;
}

- (NSMutableArray *) comboInfos {
  return [[__comboInfos retain_stub] autorelease_stub];
}

- (void) setComboInfos: (NSMutableArray *) comboInfos {
  [comboInfos retain_stub];
  [__comboInfos release_stub];
  __comboInfos = comboInfos;
  __comboInfos_isset = YES;
}

- (BOOL) comboInfosIsSet {
  return __comboInfos_isset;
}

- (void) unsetComboInfos {
  [__comboInfos release_stub];
  __comboInfos = nil;
  __comboInfos_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFPhysicalReportInfo *fieldValue = [[NXTFPhysicalReportInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setReportInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCheckDoctName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAudiDoctName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSummary: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuggestion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCheckTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_LIST) {
          int _size126;
          [inProtocol readListBeginReturningElementType: NULL size: &_size126];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size126];
          int _i127;
          for (_i127 = 0; _i127 < _size126; ++_i127)
          {
            NXTFPhysicalComboInfo *_elem128 = [[NXTFPhysicalComboInfo alloc] init];
            [_elem128 read: inProtocol];
            [fieldValue addObject: _elem128];
            [_elem128 release_stub];
          }
          [inProtocol readListEnd];
          [self setComboInfos: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PhysicalReportDetail"];
  if (__reportInfo_isset) {
    if (__reportInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"reportInfo" type: TType_STRUCT fieldID: 1];
      [__reportInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__checkDoctName_isset) {
    if (__checkDoctName != nil) {
      [outProtocol writeFieldBeginWithName: @"checkDoctName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __checkDoctName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__audiDoctName_isset) {
    if (__audiDoctName != nil) {
      [outProtocol writeFieldBeginWithName: @"audiDoctName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __audiDoctName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__summary_isset) {
    if (__summary != nil) {
      [outProtocol writeFieldBeginWithName: @"summary" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __summary];
      [outProtocol writeFieldEnd];
    }
  }
  if (__suggestion_isset) {
    if (__suggestion != nil) {
      [outProtocol writeFieldBeginWithName: @"suggestion" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __suggestion];
      [outProtocol writeFieldEnd];
    }
  }
  if (__checkTime_isset) {
    if (__checkTime != nil) {
      [outProtocol writeFieldBeginWithName: @"checkTime" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __checkTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__authTime_isset) {
    if (__authTime != nil) {
      [outProtocol writeFieldBeginWithName: @"authTime" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __authTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__comboInfos_isset) {
    if (__comboInfos != nil) {
      [outProtocol writeFieldBeginWithName: @"comboInfos" type: TType_LIST fieldID: 8];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__comboInfos count]];
        int idx130;
        for (idx130 = 0; idx130 < [__comboInfos count]; idx130++)
        {
          [[__comboInfos objectAtIndex: idx130] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPhysicalReportDetail("];
  [ms appendString: @"reportInfo:"];
  [ms appendFormat: @"%@", __reportInfo];
  [ms appendString: @",checkDoctName:"];
  [ms appendFormat: @"\"%@\"", __checkDoctName];
  [ms appendString: @",audiDoctName:"];
  [ms appendFormat: @"\"%@\"", __audiDoctName];
  [ms appendString: @",summary:"];
  [ms appendFormat: @"\"%@\"", __summary];
  [ms appendString: @",suggestion:"];
  [ms appendFormat: @"\"%@\"", __suggestion];
  [ms appendString: @",checkTime:"];
  [ms appendFormat: @"\"%@\"", __checkTime];
  [ms appendString: @",authTime:"];
  [ms appendFormat: @"\"%@\"", __authTime];
  [ms appendString: @",comboInfos:"];
  [ms appendFormat: @"%@", __comboInfos];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFBankDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCode: (NSString *) code name: (NSString *) name
{
  self = [super init];
  __code = [code retain_stub];
  __code_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [[decoder decodeObjectForKey: @"code"] retain_stub];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__code_isset)
  {
    [encoder encodeObject: __code forKey: @"code"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __code_isset ? 2654435761 : 0;
  if (__code_isset)
  {
    hash = (hash * 31) ^ [__code hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFBankDto class]]) {
    return NO;
  }
  NXTFBankDto *other = (NXTFBankDto *)anObject;
  if ((__code_isset != other->__code_isset) ||
      (__code_isset && ((__code || other->__code) && ![__code isEqual:other->__code]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__code release_stub];
  [__name release_stub];
  [super dealloc_stub];
}

- (NSString *) code {
  return [[__code retain_stub] autorelease_stub];
}

- (void) setCode: (NSString *) code {
  [code retain_stub];
  [__code release_stub];
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  [__code release_stub];
  __code = nil;
  __code_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BankDto"];
  if (__code_isset) {
    if (__code != nil) {
      [outProtocol writeFieldBeginWithName: @"code" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __code];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFBankDto("];
  [ms appendString: @"code:"];
  [ms appendFormat: @"\"%@\"", __code];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFMyPayDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPayee: (NSString *) payee payMethod: (NSString *) payMethod bankCode: (NSString *) bankCode bankName: (NSString *) bankName accountNum: (NSString *) accountNum
{
  self = [super init];
  __payee = [payee retain_stub];
  __payee_isset = YES;
  __payMethod = [payMethod retain_stub];
  __payMethod_isset = YES;
  __bankCode = [bankCode retain_stub];
  __bankCode_isset = YES;
  __bankName = [bankName retain_stub];
  __bankName_isset = YES;
  __accountNum = [accountNum retain_stub];
  __accountNum_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"payee"])
  {
    __payee = [[decoder decodeObjectForKey: @"payee"] retain_stub];
    __payee_isset = YES;
  }
  if ([decoder containsValueForKey: @"payMethod"])
  {
    __payMethod = [[decoder decodeObjectForKey: @"payMethod"] retain_stub];
    __payMethod_isset = YES;
  }
  if ([decoder containsValueForKey: @"bankCode"])
  {
    __bankCode = [[decoder decodeObjectForKey: @"bankCode"] retain_stub];
    __bankCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"bankName"])
  {
    __bankName = [[decoder decodeObjectForKey: @"bankName"] retain_stub];
    __bankName_isset = YES;
  }
  if ([decoder containsValueForKey: @"accountNum"])
  {
    __accountNum = [[decoder decodeObjectForKey: @"accountNum"] retain_stub];
    __accountNum_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__payee_isset)
  {
    [encoder encodeObject: __payee forKey: @"payee"];
  }
  if (__payMethod_isset)
  {
    [encoder encodeObject: __payMethod forKey: @"payMethod"];
  }
  if (__bankCode_isset)
  {
    [encoder encodeObject: __bankCode forKey: @"bankCode"];
  }
  if (__bankName_isset)
  {
    [encoder encodeObject: __bankName forKey: @"bankName"];
  }
  if (__accountNum_isset)
  {
    [encoder encodeObject: __accountNum forKey: @"accountNum"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __payee_isset ? 2654435761 : 0;
  if (__payee_isset)
  {
    hash = (hash * 31) ^ [__payee hash];
  }
  hash = (hash * 31) ^ __payMethod_isset ? 2654435761 : 0;
  if (__payMethod_isset)
  {
    hash = (hash * 31) ^ [__payMethod hash];
  }
  hash = (hash * 31) ^ __bankCode_isset ? 2654435761 : 0;
  if (__bankCode_isset)
  {
    hash = (hash * 31) ^ [__bankCode hash];
  }
  hash = (hash * 31) ^ __bankName_isset ? 2654435761 : 0;
  if (__bankName_isset)
  {
    hash = (hash * 31) ^ [__bankName hash];
  }
  hash = (hash * 31) ^ __accountNum_isset ? 2654435761 : 0;
  if (__accountNum_isset)
  {
    hash = (hash * 31) ^ [__accountNum hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFMyPayDto class]]) {
    return NO;
  }
  NXTFMyPayDto *other = (NXTFMyPayDto *)anObject;
  if ((__payee_isset != other->__payee_isset) ||
      (__payee_isset && ((__payee || other->__payee) && ![__payee isEqual:other->__payee]))) {
    return NO;
  }
  if ((__payMethod_isset != other->__payMethod_isset) ||
      (__payMethod_isset && ((__payMethod || other->__payMethod) && ![__payMethod isEqual:other->__payMethod]))) {
    return NO;
  }
  if ((__bankCode_isset != other->__bankCode_isset) ||
      (__bankCode_isset && ((__bankCode || other->__bankCode) && ![__bankCode isEqual:other->__bankCode]))) {
    return NO;
  }
  if ((__bankName_isset != other->__bankName_isset) ||
      (__bankName_isset && ((__bankName || other->__bankName) && ![__bankName isEqual:other->__bankName]))) {
    return NO;
  }
  if ((__accountNum_isset != other->__accountNum_isset) ||
      (__accountNum_isset && ((__accountNum || other->__accountNum) && ![__accountNum isEqual:other->__accountNum]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__payee release_stub];
  [__payMethod release_stub];
  [__bankCode release_stub];
  [__bankName release_stub];
  [__accountNum release_stub];
  [super dealloc_stub];
}

- (NSString *) payee {
  return [[__payee retain_stub] autorelease_stub];
}

- (void) setPayee: (NSString *) payee {
  [payee retain_stub];
  [__payee release_stub];
  __payee = payee;
  __payee_isset = YES;
}

- (BOOL) payeeIsSet {
  return __payee_isset;
}

- (void) unsetPayee {
  [__payee release_stub];
  __payee = nil;
  __payee_isset = NO;
}

- (NSString *) payMethod {
  return [[__payMethod retain_stub] autorelease_stub];
}

- (void) setPayMethod: (NSString *) payMethod {
  [payMethod retain_stub];
  [__payMethod release_stub];
  __payMethod = payMethod;
  __payMethod_isset = YES;
}

- (BOOL) payMethodIsSet {
  return __payMethod_isset;
}

- (void) unsetPayMethod {
  [__payMethod release_stub];
  __payMethod = nil;
  __payMethod_isset = NO;
}

- (NSString *) bankCode {
  return [[__bankCode retain_stub] autorelease_stub];
}

- (void) setBankCode: (NSString *) bankCode {
  [bankCode retain_stub];
  [__bankCode release_stub];
  __bankCode = bankCode;
  __bankCode_isset = YES;
}

- (BOOL) bankCodeIsSet {
  return __bankCode_isset;
}

- (void) unsetBankCode {
  [__bankCode release_stub];
  __bankCode = nil;
  __bankCode_isset = NO;
}

- (NSString *) bankName {
  return [[__bankName retain_stub] autorelease_stub];
}

- (void) setBankName: (NSString *) bankName {
  [bankName retain_stub];
  [__bankName release_stub];
  __bankName = bankName;
  __bankName_isset = YES;
}

- (BOOL) bankNameIsSet {
  return __bankName_isset;
}

- (void) unsetBankName {
  [__bankName release_stub];
  __bankName = nil;
  __bankName_isset = NO;
}

- (NSString *) accountNum {
  return [[__accountNum retain_stub] autorelease_stub];
}

- (void) setAccountNum: (NSString *) accountNum {
  [accountNum retain_stub];
  [__accountNum release_stub];
  __accountNum = accountNum;
  __accountNum_isset = YES;
}

- (BOOL) accountNumIsSet {
  return __accountNum_isset;
}

- (void) unsetAccountNum {
  [__accountNum release_stub];
  __accountNum = nil;
  __accountNum_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPayee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPayMethod: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBankCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBankName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccountNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MyPayDto"];
  if (__payee_isset) {
    if (__payee != nil) {
      [outProtocol writeFieldBeginWithName: @"payee" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __payee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__payMethod_isset) {
    if (__payMethod != nil) {
      [outProtocol writeFieldBeginWithName: @"payMethod" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __payMethod];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bankCode_isset) {
    if (__bankCode != nil) {
      [outProtocol writeFieldBeginWithName: @"bankCode" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __bankCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bankName_isset) {
    if (__bankName != nil) {
      [outProtocol writeFieldBeginWithName: @"bankName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __bankName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__accountNum_isset) {
    if (__accountNum != nil) {
      [outProtocol writeFieldBeginWithName: @"accountNum" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __accountNum];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFMyPayDto("];
  [ms appendString: @"payee:"];
  [ms appendFormat: @"\"%@\"", __payee];
  [ms appendString: @",payMethod:"];
  [ms appendFormat: @"\"%@\"", __payMethod];
  [ms appendString: @",bankCode:"];
  [ms appendFormat: @"\"%@\"", __bankCode];
  [ms appendString: @",bankName:"];
  [ms appendFormat: @"\"%@\"", __bankName];
  [ms appendString: @",accountNum:"];
  [ms appendFormat: @"\"%@\"", __accountNum];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFJobPlaceDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHospName: (NSString *) hospName deptName: (NSString *) deptName
{
  self = [super init];
  __hospName = [hospName retain_stub];
  __hospName_isset = YES;
  __deptName = [deptName retain_stub];
  __deptName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"hospName"])
  {
    __hospName = [[decoder decodeObjectForKey: @"hospName"] retain_stub];
    __hospName_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptName"])
  {
    __deptName = [[decoder decodeObjectForKey: @"deptName"] retain_stub];
    __deptName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__hospName_isset)
  {
    [encoder encodeObject: __hospName forKey: @"hospName"];
  }
  if (__deptName_isset)
  {
    [encoder encodeObject: __deptName forKey: @"deptName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __hospName_isset ? 2654435761 : 0;
  if (__hospName_isset)
  {
    hash = (hash * 31) ^ [__hospName hash];
  }
  hash = (hash * 31) ^ __deptName_isset ? 2654435761 : 0;
  if (__deptName_isset)
  {
    hash = (hash * 31) ^ [__deptName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFJobPlaceDto class]]) {
    return NO;
  }
  NXTFJobPlaceDto *other = (NXTFJobPlaceDto *)anObject;
  if ((__hospName_isset != other->__hospName_isset) ||
      (__hospName_isset && ((__hospName || other->__hospName) && ![__hospName isEqual:other->__hospName]))) {
    return NO;
  }
  if ((__deptName_isset != other->__deptName_isset) ||
      (__deptName_isset && ((__deptName || other->__deptName) && ![__deptName isEqual:other->__deptName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__hospName release_stub];
  [__deptName release_stub];
  [super dealloc_stub];
}

- (NSString *) hospName {
  return [[__hospName retain_stub] autorelease_stub];
}

- (void) setHospName: (NSString *) hospName {
  [hospName retain_stub];
  [__hospName release_stub];
  __hospName = hospName;
  __hospName_isset = YES;
}

- (BOOL) hospNameIsSet {
  return __hospName_isset;
}

- (void) unsetHospName {
  [__hospName release_stub];
  __hospName = nil;
  __hospName_isset = NO;
}

- (NSString *) deptName {
  return [[__deptName retain_stub] autorelease_stub];
}

- (void) setDeptName: (NSString *) deptName {
  [deptName retain_stub];
  [__deptName release_stub];
  __deptName = deptName;
  __deptName_isset = YES;
}

- (BOOL) deptNameIsSet {
  return __deptName_isset;
}

- (void) unsetDeptName {
  [__deptName release_stub];
  __deptName = nil;
  __deptName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"JobPlaceDto"];
  if (__hospName_isset) {
    if (__hospName != nil) {
      [outProtocol writeFieldBeginWithName: @"hospName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __hospName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptName_isset) {
    if (__deptName != nil) {
      [outProtocol writeFieldBeginWithName: @"deptName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __deptName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFJobPlaceDto("];
  [ms appendString: @"hospName:"];
  [ms appendFormat: @"\"%@\"", __hospName];
  [ms appendString: @",deptName:"];
  [ms appendFormat: @"\"%@\"", __deptName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFWorkExpDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHospName: (NSString *) hospName deptName: (NSString *) deptName title: (int32_t) title stDate: (NSString *) stDate enDate: (NSString *) enDate
{
  self = [super init];
  __hospName = [hospName retain_stub];
  __hospName_isset = YES;
  __deptName = [deptName retain_stub];
  __deptName_isset = YES;
  __title = title;
  __title_isset = YES;
  __stDate = [stDate retain_stub];
  __stDate_isset = YES;
  __enDate = [enDate retain_stub];
  __enDate_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"hospName"])
  {
    __hospName = [[decoder decodeObjectForKey: @"hospName"] retain_stub];
    __hospName_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptName"])
  {
    __deptName = [[decoder decodeObjectForKey: @"deptName"] retain_stub];
    __deptName_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [decoder decodeInt32ForKey: @"title"];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"stDate"])
  {
    __stDate = [[decoder decodeObjectForKey: @"stDate"] retain_stub];
    __stDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"enDate"])
  {
    __enDate = [[decoder decodeObjectForKey: @"enDate"] retain_stub];
    __enDate_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__hospName_isset)
  {
    [encoder encodeObject: __hospName forKey: @"hospName"];
  }
  if (__deptName_isset)
  {
    [encoder encodeObject: __deptName forKey: @"deptName"];
  }
  if (__title_isset)
  {
    [encoder encodeInt32: __title forKey: @"title"];
  }
  if (__stDate_isset)
  {
    [encoder encodeObject: __stDate forKey: @"stDate"];
  }
  if (__enDate_isset)
  {
    [encoder encodeObject: __enDate forKey: @"enDate"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __hospName_isset ? 2654435761 : 0;
  if (__hospName_isset)
  {
    hash = (hash * 31) ^ [__hospName hash];
  }
  hash = (hash * 31) ^ __deptName_isset ? 2654435761 : 0;
  if (__deptName_isset)
  {
    hash = (hash * 31) ^ [__deptName hash];
  }
  hash = (hash * 31) ^ __title_isset ? 2654435761 : 0;
  if (__title_isset)
  {
    hash = (hash * 31) ^ [@(__title) hash];
  }
  hash = (hash * 31) ^ __stDate_isset ? 2654435761 : 0;
  if (__stDate_isset)
  {
    hash = (hash * 31) ^ [__stDate hash];
  }
  hash = (hash * 31) ^ __enDate_isset ? 2654435761 : 0;
  if (__enDate_isset)
  {
    hash = (hash * 31) ^ [__enDate hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFWorkExpDto class]]) {
    return NO;
  }
  NXTFWorkExpDto *other = (NXTFWorkExpDto *)anObject;
  if ((__hospName_isset != other->__hospName_isset) ||
      (__hospName_isset && ((__hospName || other->__hospName) && ![__hospName isEqual:other->__hospName]))) {
    return NO;
  }
  if ((__deptName_isset != other->__deptName_isset) ||
      (__deptName_isset && ((__deptName || other->__deptName) && ![__deptName isEqual:other->__deptName]))) {
    return NO;
  }
  if ((__title_isset != other->__title_isset) ||
      (__title_isset && (__title != other->__title))) {
    return NO;
  }
  if ((__stDate_isset != other->__stDate_isset) ||
      (__stDate_isset && ((__stDate || other->__stDate) && ![__stDate isEqual:other->__stDate]))) {
    return NO;
  }
  if ((__enDate_isset != other->__enDate_isset) ||
      (__enDate_isset && ((__enDate || other->__enDate) && ![__enDate isEqual:other->__enDate]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__hospName release_stub];
  [__deptName release_stub];
  [__stDate release_stub];
  [__enDate release_stub];
  [super dealloc_stub];
}

- (NSString *) hospName {
  return [[__hospName retain_stub] autorelease_stub];
}

- (void) setHospName: (NSString *) hospName {
  [hospName retain_stub];
  [__hospName release_stub];
  __hospName = hospName;
  __hospName_isset = YES;
}

- (BOOL) hospNameIsSet {
  return __hospName_isset;
}

- (void) unsetHospName {
  [__hospName release_stub];
  __hospName = nil;
  __hospName_isset = NO;
}

- (NSString *) deptName {
  return [[__deptName retain_stub] autorelease_stub];
}

- (void) setDeptName: (NSString *) deptName {
  [deptName retain_stub];
  [__deptName release_stub];
  __deptName = deptName;
  __deptName_isset = YES;
}

- (BOOL) deptNameIsSet {
  return __deptName_isset;
}

- (void) unsetDeptName {
  [__deptName release_stub];
  __deptName = nil;
  __deptName_isset = NO;
}

- (int32_t) title {
  return __title;
}

- (void) setTitle: (int32_t) title {
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  __title_isset = NO;
}

- (NSString *) stDate {
  return [[__stDate retain_stub] autorelease_stub];
}

- (void) setStDate: (NSString *) stDate {
  [stDate retain_stub];
  [__stDate release_stub];
  __stDate = stDate;
  __stDate_isset = YES;
}

- (BOOL) stDateIsSet {
  return __stDate_isset;
}

- (void) unsetStDate {
  [__stDate release_stub];
  __stDate = nil;
  __stDate_isset = NO;
}

- (NSString *) enDate {
  return [[__enDate retain_stub] autorelease_stub];
}

- (void) setEnDate: (NSString *) enDate {
  [enDate retain_stub];
  [__enDate release_stub];
  __enDate = enDate;
  __enDate_isset = YES;
}

- (BOOL) enDateIsSet {
  return __enDate_isset;
}

- (void) unsetEnDate {
  [__enDate release_stub];
  __enDate = nil;
  __enDate_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEnDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"WorkExpDto"];
  if (__hospName_isset) {
    if (__hospName != nil) {
      [outProtocol writeFieldBeginWithName: @"hospName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __hospName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptName_isset) {
    if (__deptName != nil) {
      [outProtocol writeFieldBeginWithName: @"deptName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __deptName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__title_isset) {
    [outProtocol writeFieldBeginWithName: @"title" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __title];
    [outProtocol writeFieldEnd];
  }
  if (__stDate_isset) {
    if (__stDate != nil) {
      [outProtocol writeFieldBeginWithName: @"stDate" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __stDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__enDate_isset) {
    if (__enDate != nil) {
      [outProtocol writeFieldBeginWithName: @"enDate" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __enDate];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFWorkExpDto("];
  [ms appendString: @"hospName:"];
  [ms appendFormat: @"\"%@\"", __hospName];
  [ms appendString: @",deptName:"];
  [ms appendFormat: @"\"%@\"", __deptName];
  [ms appendString: @",title:"];
  [ms appendFormat: @"%i", __title];
  [ms appendString: @",stDate:"];
  [ms appendFormat: @"\"%@\"", __stDate];
  [ms appendString: @",enDate:"];
  [ms appendFormat: @"\"%@\"", __enDate];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFEduExpDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSchool: (NSString *) school major: (NSString *) major degree: (NSString *) degree stDate: (NSString *) stDate enDate: (NSString *) enDate
{
  self = [super init];
  __school = [school retain_stub];
  __school_isset = YES;
  __major = [major retain_stub];
  __major_isset = YES;
  __degree = [degree retain_stub];
  __degree_isset = YES;
  __stDate = [stDate retain_stub];
  __stDate_isset = YES;
  __enDate = [enDate retain_stub];
  __enDate_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"school"])
  {
    __school = [[decoder decodeObjectForKey: @"school"] retain_stub];
    __school_isset = YES;
  }
  if ([decoder containsValueForKey: @"major"])
  {
    __major = [[decoder decodeObjectForKey: @"major"] retain_stub];
    __major_isset = YES;
  }
  if ([decoder containsValueForKey: @"degree"])
  {
    __degree = [[decoder decodeObjectForKey: @"degree"] retain_stub];
    __degree_isset = YES;
  }
  if ([decoder containsValueForKey: @"stDate"])
  {
    __stDate = [[decoder decodeObjectForKey: @"stDate"] retain_stub];
    __stDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"enDate"])
  {
    __enDate = [[decoder decodeObjectForKey: @"enDate"] retain_stub];
    __enDate_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__school_isset)
  {
    [encoder encodeObject: __school forKey: @"school"];
  }
  if (__major_isset)
  {
    [encoder encodeObject: __major forKey: @"major"];
  }
  if (__degree_isset)
  {
    [encoder encodeObject: __degree forKey: @"degree"];
  }
  if (__stDate_isset)
  {
    [encoder encodeObject: __stDate forKey: @"stDate"];
  }
  if (__enDate_isset)
  {
    [encoder encodeObject: __enDate forKey: @"enDate"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __school_isset ? 2654435761 : 0;
  if (__school_isset)
  {
    hash = (hash * 31) ^ [__school hash];
  }
  hash = (hash * 31) ^ __major_isset ? 2654435761 : 0;
  if (__major_isset)
  {
    hash = (hash * 31) ^ [__major hash];
  }
  hash = (hash * 31) ^ __degree_isset ? 2654435761 : 0;
  if (__degree_isset)
  {
    hash = (hash * 31) ^ [__degree hash];
  }
  hash = (hash * 31) ^ __stDate_isset ? 2654435761 : 0;
  if (__stDate_isset)
  {
    hash = (hash * 31) ^ [__stDate hash];
  }
  hash = (hash * 31) ^ __enDate_isset ? 2654435761 : 0;
  if (__enDate_isset)
  {
    hash = (hash * 31) ^ [__enDate hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFEduExpDto class]]) {
    return NO;
  }
  NXTFEduExpDto *other = (NXTFEduExpDto *)anObject;
  if ((__school_isset != other->__school_isset) ||
      (__school_isset && ((__school || other->__school) && ![__school isEqual:other->__school]))) {
    return NO;
  }
  if ((__major_isset != other->__major_isset) ||
      (__major_isset && ((__major || other->__major) && ![__major isEqual:other->__major]))) {
    return NO;
  }
  if ((__degree_isset != other->__degree_isset) ||
      (__degree_isset && ((__degree || other->__degree) && ![__degree isEqual:other->__degree]))) {
    return NO;
  }
  if ((__stDate_isset != other->__stDate_isset) ||
      (__stDate_isset && ((__stDate || other->__stDate) && ![__stDate isEqual:other->__stDate]))) {
    return NO;
  }
  if ((__enDate_isset != other->__enDate_isset) ||
      (__enDate_isset && ((__enDate || other->__enDate) && ![__enDate isEqual:other->__enDate]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__school release_stub];
  [__major release_stub];
  [__degree release_stub];
  [__stDate release_stub];
  [__enDate release_stub];
  [super dealloc_stub];
}

- (NSString *) school {
  return [[__school retain_stub] autorelease_stub];
}

- (void) setSchool: (NSString *) school {
  [school retain_stub];
  [__school release_stub];
  __school = school;
  __school_isset = YES;
}

- (BOOL) schoolIsSet {
  return __school_isset;
}

- (void) unsetSchool {
  [__school release_stub];
  __school = nil;
  __school_isset = NO;
}

- (NSString *) major {
  return [[__major retain_stub] autorelease_stub];
}

- (void) setMajor: (NSString *) major {
  [major retain_stub];
  [__major release_stub];
  __major = major;
  __major_isset = YES;
}

- (BOOL) majorIsSet {
  return __major_isset;
}

- (void) unsetMajor {
  [__major release_stub];
  __major = nil;
  __major_isset = NO;
}

- (NSString *) degree {
  return [[__degree retain_stub] autorelease_stub];
}

- (void) setDegree: (NSString *) degree {
  [degree retain_stub];
  [__degree release_stub];
  __degree = degree;
  __degree_isset = YES;
}

- (BOOL) degreeIsSet {
  return __degree_isset;
}

- (void) unsetDegree {
  [__degree release_stub];
  __degree = nil;
  __degree_isset = NO;
}

- (NSString *) stDate {
  return [[__stDate retain_stub] autorelease_stub];
}

- (void) setStDate: (NSString *) stDate {
  [stDate retain_stub];
  [__stDate release_stub];
  __stDate = stDate;
  __stDate_isset = YES;
}

- (BOOL) stDateIsSet {
  return __stDate_isset;
}

- (void) unsetStDate {
  [__stDate release_stub];
  __stDate = nil;
  __stDate_isset = NO;
}

- (NSString *) enDate {
  return [[__enDate retain_stub] autorelease_stub];
}

- (void) setEnDate: (NSString *) enDate {
  [enDate retain_stub];
  [__enDate release_stub];
  __enDate = enDate;
  __enDate_isset = YES;
}

- (BOOL) enDateIsSet {
  return __enDate_isset;
}

- (void) unsetEnDate {
  [__enDate release_stub];
  __enDate = nil;
  __enDate_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSchool: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMajor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDegree: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEnDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EduExpDto"];
  if (__school_isset) {
    if (__school != nil) {
      [outProtocol writeFieldBeginWithName: @"school" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __school];
      [outProtocol writeFieldEnd];
    }
  }
  if (__major_isset) {
    if (__major != nil) {
      [outProtocol writeFieldBeginWithName: @"major" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __major];
      [outProtocol writeFieldEnd];
    }
  }
  if (__degree_isset) {
    if (__degree != nil) {
      [outProtocol writeFieldBeginWithName: @"degree" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __degree];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stDate_isset) {
    if (__stDate != nil) {
      [outProtocol writeFieldBeginWithName: @"stDate" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __stDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__enDate_isset) {
    if (__enDate != nil) {
      [outProtocol writeFieldBeginWithName: @"enDate" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __enDate];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFEduExpDto("];
  [ms appendString: @"school:"];
  [ms appendFormat: @"\"%@\"", __school];
  [ms appendString: @",major:"];
  [ms appendFormat: @"\"%@\"", __major];
  [ms appendString: @",degree:"];
  [ms appendFormat: @"\"%@\"", __degree];
  [ms appendString: @",stDate:"];
  [ms appendFormat: @"\"%@\"", __stDate];
  [ms appendString: @",enDate:"];
  [ms appendFormat: @"\"%@\"", __enDate];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFServiceDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSrvName: (NSString *) srvName price: (NSString *) price unit: (NSString *) unit status: (NSString *) status srvType: (int32_t) srvType
{
  self = [super init];
  __srvName = [srvName retain_stub];
  __srvName_isset = YES;
  __price = [price retain_stub];
  __price_isset = YES;
  __unit = [unit retain_stub];
  __unit_isset = YES;
  __status = [status retain_stub];
  __status_isset = YES;
  __srvType = srvType;
  __srvType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"srvName"])
  {
    __srvName = [[decoder decodeObjectForKey: @"srvName"] retain_stub];
    __srvName_isset = YES;
  }
  if ([decoder containsValueForKey: @"price"])
  {
    __price = [[decoder decodeObjectForKey: @"price"] retain_stub];
    __price_isset = YES;
  }
  if ([decoder containsValueForKey: @"unit"])
  {
    __unit = [[decoder decodeObjectForKey: @"unit"] retain_stub];
    __unit_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [[decoder decodeObjectForKey: @"status"] retain_stub];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"srvType"])
  {
    __srvType = [decoder decodeInt32ForKey: @"srvType"];
    __srvType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__srvName_isset)
  {
    [encoder encodeObject: __srvName forKey: @"srvName"];
  }
  if (__price_isset)
  {
    [encoder encodeObject: __price forKey: @"price"];
  }
  if (__unit_isset)
  {
    [encoder encodeObject: __unit forKey: @"unit"];
  }
  if (__status_isset)
  {
    [encoder encodeObject: __status forKey: @"status"];
  }
  if (__srvType_isset)
  {
    [encoder encodeInt32: __srvType forKey: @"srvType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __srvName_isset ? 2654435761 : 0;
  if (__srvName_isset)
  {
    hash = (hash * 31) ^ [__srvName hash];
  }
  hash = (hash * 31) ^ __price_isset ? 2654435761 : 0;
  if (__price_isset)
  {
    hash = (hash * 31) ^ [__price hash];
  }
  hash = (hash * 31) ^ __unit_isset ? 2654435761 : 0;
  if (__unit_isset)
  {
    hash = (hash * 31) ^ [__unit hash];
  }
  hash = (hash * 31) ^ __status_isset ? 2654435761 : 0;
  if (__status_isset)
  {
    hash = (hash * 31) ^ [__status hash];
  }
  hash = (hash * 31) ^ __srvType_isset ? 2654435761 : 0;
  if (__srvType_isset)
  {
    hash = (hash * 31) ^ [@(__srvType) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFServiceDto class]]) {
    return NO;
  }
  NXTFServiceDto *other = (NXTFServiceDto *)anObject;
  if ((__srvName_isset != other->__srvName_isset) ||
      (__srvName_isset && ((__srvName || other->__srvName) && ![__srvName isEqual:other->__srvName]))) {
    return NO;
  }
  if ((__price_isset != other->__price_isset) ||
      (__price_isset && ((__price || other->__price) && ![__price isEqual:other->__price]))) {
    return NO;
  }
  if ((__unit_isset != other->__unit_isset) ||
      (__unit_isset && ((__unit || other->__unit) && ![__unit isEqual:other->__unit]))) {
    return NO;
  }
  if ((__status_isset != other->__status_isset) ||
      (__status_isset && ((__status || other->__status) && ![__status isEqual:other->__status]))) {
    return NO;
  }
  if ((__srvType_isset != other->__srvType_isset) ||
      (__srvType_isset && (__srvType != other->__srvType))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__srvName release_stub];
  [__price release_stub];
  [__unit release_stub];
  [__status release_stub];
  [super dealloc_stub];
}

- (NSString *) srvName {
  return [[__srvName retain_stub] autorelease_stub];
}

- (void) setSrvName: (NSString *) srvName {
  [srvName retain_stub];
  [__srvName release_stub];
  __srvName = srvName;
  __srvName_isset = YES;
}

- (BOOL) srvNameIsSet {
  return __srvName_isset;
}

- (void) unsetSrvName {
  [__srvName release_stub];
  __srvName = nil;
  __srvName_isset = NO;
}

- (NSString *) price {
  return [[__price retain_stub] autorelease_stub];
}

- (void) setPrice: (NSString *) price {
  [price retain_stub];
  [__price release_stub];
  __price = price;
  __price_isset = YES;
}

- (BOOL) priceIsSet {
  return __price_isset;
}

- (void) unsetPrice {
  [__price release_stub];
  __price = nil;
  __price_isset = NO;
}

- (NSString *) unit {
  return [[__unit retain_stub] autorelease_stub];
}

- (void) setUnit: (NSString *) unit {
  [unit retain_stub];
  [__unit release_stub];
  __unit = unit;
  __unit_isset = YES;
}

- (BOOL) unitIsSet {
  return __unit_isset;
}

- (void) unsetUnit {
  [__unit release_stub];
  __unit = nil;
  __unit_isset = NO;
}

- (NSString *) status {
  return [[__status retain_stub] autorelease_stub];
}

- (void) setStatus: (NSString *) status {
  [status retain_stub];
  [__status release_stub];
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  [__status release_stub];
  __status = nil;
  __status_isset = NO;
}

- (int32_t) srvType {
  return __srvType;
}

- (void) setSrvType: (int32_t) srvType {
  __srvType = srvType;
  __srvType_isset = YES;
}

- (BOOL) srvTypeIsSet {
  return __srvType_isset;
}

- (void) unsetSrvType {
  __srvType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSrvName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUnit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSrvType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ServiceDto"];
  if (__srvName_isset) {
    if (__srvName != nil) {
      [outProtocol writeFieldBeginWithName: @"srvName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __srvName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__price_isset) {
    if (__price != nil) {
      [outProtocol writeFieldBeginWithName: @"price" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __price];
      [outProtocol writeFieldEnd];
    }
  }
  if (__unit_isset) {
    if (__unit != nil) {
      [outProtocol writeFieldBeginWithName: @"unit" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __unit];
      [outProtocol writeFieldEnd];
    }
  }
  if (__status_isset) {
    if (__status != nil) {
      [outProtocol writeFieldBeginWithName: @"status" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __status];
      [outProtocol writeFieldEnd];
    }
  }
  if (__srvType_isset) {
    [outProtocol writeFieldBeginWithName: @"srvType" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __srvType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFServiceDto("];
  [ms appendString: @"srvName:"];
  [ms appendFormat: @"\"%@\"", __srvName];
  [ms appendString: @",price:"];
  [ms appendFormat: @"\"%@\"", __price];
  [ms appendString: @",unit:"];
  [ms appendFormat: @"\"%@\"", __unit];
  [ms appendString: @",status:"];
  [ms appendFormat: @"\"%@\"", __status];
  [ms appendString: @",srvType:"];
  [ms appendFormat: @"%i", __srvType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFActThumbnailDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithActId: (NSString *) actId title: (NSString *) title sessionNo: (NSString *) sessionNo bgPic: (NSString *) bgPic timeStart: (NSString *) timeStart timeEnd: (NSString *) timeEnd status: (int32_t) status drName: (NSString *) drName drDept: (NSString *) drDept drTitle: (NSString *) drTitle drHead: (NSString *) drHead timeShow: (NSString *) timeShow gender: (NSString *) gender roomId: (int64_t) roomId timId: (NSString *) timId docId: (int64_t) docId hospName: (NSString *) hospName logo: (NSString *) logo
{
  self = [super init];
  __actId = [actId retain_stub];
  __actId_isset = YES;
  __title = [title retain_stub];
  __title_isset = YES;
  __sessionNo = [sessionNo retain_stub];
  __sessionNo_isset = YES;
  __bgPic = [bgPic retain_stub];
  __bgPic_isset = YES;
  __timeStart = [timeStart retain_stub];
  __timeStart_isset = YES;
  __timeEnd = [timeEnd retain_stub];
  __timeEnd_isset = YES;
  __status = status;
  __status_isset = YES;
  __drName = [drName retain_stub];
  __drName_isset = YES;
  __drDept = [drDept retain_stub];
  __drDept_isset = YES;
  __drTitle = [drTitle retain_stub];
  __drTitle_isset = YES;
  __drHead = [drHead retain_stub];
  __drHead_isset = YES;
  __timeShow = [timeShow retain_stub];
  __timeShow_isset = YES;
  __gender = [gender retain_stub];
  __gender_isset = YES;
  __roomId = roomId;
  __roomId_isset = YES;
  __timId = [timId retain_stub];
  __timId_isset = YES;
  __docId = docId;
  __docId_isset = YES;
  __hospName = [hospName retain_stub];
  __hospName_isset = YES;
  __logo = [logo retain_stub];
  __logo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"actId"])
  {
    __actId = [[decoder decodeObjectForKey: @"actId"] retain_stub];
    __actId_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionNo"])
  {
    __sessionNo = [[decoder decodeObjectForKey: @"sessionNo"] retain_stub];
    __sessionNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"bgPic"])
  {
    __bgPic = [[decoder decodeObjectForKey: @"bgPic"] retain_stub];
    __bgPic_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeStart"])
  {
    __timeStart = [[decoder decodeObjectForKey: @"timeStart"] retain_stub];
    __timeStart_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeEnd"])
  {
    __timeEnd = [[decoder decodeObjectForKey: @"timeEnd"] retain_stub];
    __timeEnd_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeInt32ForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"drName"])
  {
    __drName = [[decoder decodeObjectForKey: @"drName"] retain_stub];
    __drName_isset = YES;
  }
  if ([decoder containsValueForKey: @"drDept"])
  {
    __drDept = [[decoder decodeObjectForKey: @"drDept"] retain_stub];
    __drDept_isset = YES;
  }
  if ([decoder containsValueForKey: @"drTitle"])
  {
    __drTitle = [[decoder decodeObjectForKey: @"drTitle"] retain_stub];
    __drTitle_isset = YES;
  }
  if ([decoder containsValueForKey: @"drHead"])
  {
    __drHead = [[decoder decodeObjectForKey: @"drHead"] retain_stub];
    __drHead_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeShow"])
  {
    __timeShow = [[decoder decodeObjectForKey: @"timeShow"] retain_stub];
    __timeShow_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [[decoder decodeObjectForKey: @"gender"] retain_stub];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomId"])
  {
    __roomId = [decoder decodeInt64ForKey: @"roomId"];
    __roomId_isset = YES;
  }
  if ([decoder containsValueForKey: @"timId"])
  {
    __timId = [[decoder decodeObjectForKey: @"timId"] retain_stub];
    __timId_isset = YES;
  }
  if ([decoder containsValueForKey: @"docId"])
  {
    __docId = [decoder decodeInt64ForKey: @"docId"];
    __docId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospName"])
  {
    __hospName = [[decoder decodeObjectForKey: @"hospName"] retain_stub];
    __hospName_isset = YES;
  }
  if ([decoder containsValueForKey: @"logo"])
  {
    __logo = [[decoder decodeObjectForKey: @"logo"] retain_stub];
    __logo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__actId_isset)
  {
    [encoder encodeObject: __actId forKey: @"actId"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__sessionNo_isset)
  {
    [encoder encodeObject: __sessionNo forKey: @"sessionNo"];
  }
  if (__bgPic_isset)
  {
    [encoder encodeObject: __bgPic forKey: @"bgPic"];
  }
  if (__timeStart_isset)
  {
    [encoder encodeObject: __timeStart forKey: @"timeStart"];
  }
  if (__timeEnd_isset)
  {
    [encoder encodeObject: __timeEnd forKey: @"timeEnd"];
  }
  if (__status_isset)
  {
    [encoder encodeInt32: __status forKey: @"status"];
  }
  if (__drName_isset)
  {
    [encoder encodeObject: __drName forKey: @"drName"];
  }
  if (__drDept_isset)
  {
    [encoder encodeObject: __drDept forKey: @"drDept"];
  }
  if (__drTitle_isset)
  {
    [encoder encodeObject: __drTitle forKey: @"drTitle"];
  }
  if (__drHead_isset)
  {
    [encoder encodeObject: __drHead forKey: @"drHead"];
  }
  if (__timeShow_isset)
  {
    [encoder encodeObject: __timeShow forKey: @"timeShow"];
  }
  if (__gender_isset)
  {
    [encoder encodeObject: __gender forKey: @"gender"];
  }
  if (__roomId_isset)
  {
    [encoder encodeInt64: __roomId forKey: @"roomId"];
  }
  if (__timId_isset)
  {
    [encoder encodeObject: __timId forKey: @"timId"];
  }
  if (__docId_isset)
  {
    [encoder encodeInt64: __docId forKey: @"docId"];
  }
  if (__hospName_isset)
  {
    [encoder encodeObject: __hospName forKey: @"hospName"];
  }
  if (__logo_isset)
  {
    [encoder encodeObject: __logo forKey: @"logo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __actId_isset ? 2654435761 : 0;
  if (__actId_isset)
  {
    hash = (hash * 31) ^ [__actId hash];
  }
  hash = (hash * 31) ^ __title_isset ? 2654435761 : 0;
  if (__title_isset)
  {
    hash = (hash * 31) ^ [__title hash];
  }
  hash = (hash * 31) ^ __sessionNo_isset ? 2654435761 : 0;
  if (__sessionNo_isset)
  {
    hash = (hash * 31) ^ [__sessionNo hash];
  }
  hash = (hash * 31) ^ __bgPic_isset ? 2654435761 : 0;
  if (__bgPic_isset)
  {
    hash = (hash * 31) ^ [__bgPic hash];
  }
  hash = (hash * 31) ^ __timeStart_isset ? 2654435761 : 0;
  if (__timeStart_isset)
  {
    hash = (hash * 31) ^ [__timeStart hash];
  }
  hash = (hash * 31) ^ __timeEnd_isset ? 2654435761 : 0;
  if (__timeEnd_isset)
  {
    hash = (hash * 31) ^ [__timeEnd hash];
  }
  hash = (hash * 31) ^ __status_isset ? 2654435761 : 0;
  if (__status_isset)
  {
    hash = (hash * 31) ^ [@(__status) hash];
  }
  hash = (hash * 31) ^ __drName_isset ? 2654435761 : 0;
  if (__drName_isset)
  {
    hash = (hash * 31) ^ [__drName hash];
  }
  hash = (hash * 31) ^ __drDept_isset ? 2654435761 : 0;
  if (__drDept_isset)
  {
    hash = (hash * 31) ^ [__drDept hash];
  }
  hash = (hash * 31) ^ __drTitle_isset ? 2654435761 : 0;
  if (__drTitle_isset)
  {
    hash = (hash * 31) ^ [__drTitle hash];
  }
  hash = (hash * 31) ^ __drHead_isset ? 2654435761 : 0;
  if (__drHead_isset)
  {
    hash = (hash * 31) ^ [__drHead hash];
  }
  hash = (hash * 31) ^ __timeShow_isset ? 2654435761 : 0;
  if (__timeShow_isset)
  {
    hash = (hash * 31) ^ [__timeShow hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [__gender hash];
  }
  hash = (hash * 31) ^ __roomId_isset ? 2654435761 : 0;
  if (__roomId_isset)
  {
    hash = (hash * 31) ^ [@(__roomId) hash];
  }
  hash = (hash * 31) ^ __timId_isset ? 2654435761 : 0;
  if (__timId_isset)
  {
    hash = (hash * 31) ^ [__timId hash];
  }
  hash = (hash * 31) ^ __docId_isset ? 2654435761 : 0;
  if (__docId_isset)
  {
    hash = (hash * 31) ^ [@(__docId) hash];
  }
  hash = (hash * 31) ^ __hospName_isset ? 2654435761 : 0;
  if (__hospName_isset)
  {
    hash = (hash * 31) ^ [__hospName hash];
  }
  hash = (hash * 31) ^ __logo_isset ? 2654435761 : 0;
  if (__logo_isset)
  {
    hash = (hash * 31) ^ [__logo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFActThumbnailDto class]]) {
    return NO;
  }
  NXTFActThumbnailDto *other = (NXTFActThumbnailDto *)anObject;
  if ((__actId_isset != other->__actId_isset) ||
      (__actId_isset && ((__actId || other->__actId) && ![__actId isEqual:other->__actId]))) {
    return NO;
  }
  if ((__title_isset != other->__title_isset) ||
      (__title_isset && ((__title || other->__title) && ![__title isEqual:other->__title]))) {
    return NO;
  }
  if ((__sessionNo_isset != other->__sessionNo_isset) ||
      (__sessionNo_isset && ((__sessionNo || other->__sessionNo) && ![__sessionNo isEqual:other->__sessionNo]))) {
    return NO;
  }
  if ((__bgPic_isset != other->__bgPic_isset) ||
      (__bgPic_isset && ((__bgPic || other->__bgPic) && ![__bgPic isEqual:other->__bgPic]))) {
    return NO;
  }
  if ((__timeStart_isset != other->__timeStart_isset) ||
      (__timeStart_isset && ((__timeStart || other->__timeStart) && ![__timeStart isEqual:other->__timeStart]))) {
    return NO;
  }
  if ((__timeEnd_isset != other->__timeEnd_isset) ||
      (__timeEnd_isset && ((__timeEnd || other->__timeEnd) && ![__timeEnd isEqual:other->__timeEnd]))) {
    return NO;
  }
  if ((__status_isset != other->__status_isset) ||
      (__status_isset && (__status != other->__status))) {
    return NO;
  }
  if ((__drName_isset != other->__drName_isset) ||
      (__drName_isset && ((__drName || other->__drName) && ![__drName isEqual:other->__drName]))) {
    return NO;
  }
  if ((__drDept_isset != other->__drDept_isset) ||
      (__drDept_isset && ((__drDept || other->__drDept) && ![__drDept isEqual:other->__drDept]))) {
    return NO;
  }
  if ((__drTitle_isset != other->__drTitle_isset) ||
      (__drTitle_isset && ((__drTitle || other->__drTitle) && ![__drTitle isEqual:other->__drTitle]))) {
    return NO;
  }
  if ((__drHead_isset != other->__drHead_isset) ||
      (__drHead_isset && ((__drHead || other->__drHead) && ![__drHead isEqual:other->__drHead]))) {
    return NO;
  }
  if ((__timeShow_isset != other->__timeShow_isset) ||
      (__timeShow_isset && ((__timeShow || other->__timeShow) && ![__timeShow isEqual:other->__timeShow]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && ((__gender || other->__gender) && ![__gender isEqual:other->__gender]))) {
    return NO;
  }
  if ((__roomId_isset != other->__roomId_isset) ||
      (__roomId_isset && (__roomId != other->__roomId))) {
    return NO;
  }
  if ((__timId_isset != other->__timId_isset) ||
      (__timId_isset && ((__timId || other->__timId) && ![__timId isEqual:other->__timId]))) {
    return NO;
  }
  if ((__docId_isset != other->__docId_isset) ||
      (__docId_isset && (__docId != other->__docId))) {
    return NO;
  }
  if ((__hospName_isset != other->__hospName_isset) ||
      (__hospName_isset && ((__hospName || other->__hospName) && ![__hospName isEqual:other->__hospName]))) {
    return NO;
  }
  if ((__logo_isset != other->__logo_isset) ||
      (__logo_isset && ((__logo || other->__logo) && ![__logo isEqual:other->__logo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__actId release_stub];
  [__title release_stub];
  [__sessionNo release_stub];
  [__bgPic release_stub];
  [__timeStart release_stub];
  [__timeEnd release_stub];
  [__drName release_stub];
  [__drDept release_stub];
  [__drTitle release_stub];
  [__drHead release_stub];
  [__timeShow release_stub];
  [__gender release_stub];
  [__timId release_stub];
  [__hospName release_stub];
  [__logo release_stub];
  [super dealloc_stub];
}

- (NSString *) actId {
  return [[__actId retain_stub] autorelease_stub];
}

- (void) setActId: (NSString *) actId {
  [actId retain_stub];
  [__actId release_stub];
  __actId = actId;
  __actId_isset = YES;
}

- (BOOL) actIdIsSet {
  return __actId_isset;
}

- (void) unsetActId {
  [__actId release_stub];
  __actId = nil;
  __actId_isset = NO;
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) sessionNo {
  return [[__sessionNo retain_stub] autorelease_stub];
}

- (void) setSessionNo: (NSString *) sessionNo {
  [sessionNo retain_stub];
  [__sessionNo release_stub];
  __sessionNo = sessionNo;
  __sessionNo_isset = YES;
}

- (BOOL) sessionNoIsSet {
  return __sessionNo_isset;
}

- (void) unsetSessionNo {
  [__sessionNo release_stub];
  __sessionNo = nil;
  __sessionNo_isset = NO;
}

- (NSString *) bgPic {
  return [[__bgPic retain_stub] autorelease_stub];
}

- (void) setBgPic: (NSString *) bgPic {
  [bgPic retain_stub];
  [__bgPic release_stub];
  __bgPic = bgPic;
  __bgPic_isset = YES;
}

- (BOOL) bgPicIsSet {
  return __bgPic_isset;
}

- (void) unsetBgPic {
  [__bgPic release_stub];
  __bgPic = nil;
  __bgPic_isset = NO;
}

- (NSString *) timeStart {
  return [[__timeStart retain_stub] autorelease_stub];
}

- (void) setTimeStart: (NSString *) timeStart {
  [timeStart retain_stub];
  [__timeStart release_stub];
  __timeStart = timeStart;
  __timeStart_isset = YES;
}

- (BOOL) timeStartIsSet {
  return __timeStart_isset;
}

- (void) unsetTimeStart {
  [__timeStart release_stub];
  __timeStart = nil;
  __timeStart_isset = NO;
}

- (NSString *) timeEnd {
  return [[__timeEnd retain_stub] autorelease_stub];
}

- (void) setTimeEnd: (NSString *) timeEnd {
  [timeEnd retain_stub];
  [__timeEnd release_stub];
  __timeEnd = timeEnd;
  __timeEnd_isset = YES;
}

- (BOOL) timeEndIsSet {
  return __timeEnd_isset;
}

- (void) unsetTimeEnd {
  [__timeEnd release_stub];
  __timeEnd = nil;
  __timeEnd_isset = NO;
}

- (int32_t) status {
  return __status;
}

- (void) setStatus: (int32_t) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (NSString *) drName {
  return [[__drName retain_stub] autorelease_stub];
}

- (void) setDrName: (NSString *) drName {
  [drName retain_stub];
  [__drName release_stub];
  __drName = drName;
  __drName_isset = YES;
}

- (BOOL) drNameIsSet {
  return __drName_isset;
}

- (void) unsetDrName {
  [__drName release_stub];
  __drName = nil;
  __drName_isset = NO;
}

- (NSString *) drDept {
  return [[__drDept retain_stub] autorelease_stub];
}

- (void) setDrDept: (NSString *) drDept {
  [drDept retain_stub];
  [__drDept release_stub];
  __drDept = drDept;
  __drDept_isset = YES;
}

- (BOOL) drDeptIsSet {
  return __drDept_isset;
}

- (void) unsetDrDept {
  [__drDept release_stub];
  __drDept = nil;
  __drDept_isset = NO;
}

- (NSString *) drTitle {
  return [[__drTitle retain_stub] autorelease_stub];
}

- (void) setDrTitle: (NSString *) drTitle {
  [drTitle retain_stub];
  [__drTitle release_stub];
  __drTitle = drTitle;
  __drTitle_isset = YES;
}

- (BOOL) drTitleIsSet {
  return __drTitle_isset;
}

- (void) unsetDrTitle {
  [__drTitle release_stub];
  __drTitle = nil;
  __drTitle_isset = NO;
}

- (NSString *) drHead {
  return [[__drHead retain_stub] autorelease_stub];
}

- (void) setDrHead: (NSString *) drHead {
  [drHead retain_stub];
  [__drHead release_stub];
  __drHead = drHead;
  __drHead_isset = YES;
}

- (BOOL) drHeadIsSet {
  return __drHead_isset;
}

- (void) unsetDrHead {
  [__drHead release_stub];
  __drHead = nil;
  __drHead_isset = NO;
}

- (NSString *) timeShow {
  return [[__timeShow retain_stub] autorelease_stub];
}

- (void) setTimeShow: (NSString *) timeShow {
  [timeShow retain_stub];
  [__timeShow release_stub];
  __timeShow = timeShow;
  __timeShow_isset = YES;
}

- (BOOL) timeShowIsSet {
  return __timeShow_isset;
}

- (void) unsetTimeShow {
  [__timeShow release_stub];
  __timeShow = nil;
  __timeShow_isset = NO;
}

- (NSString *) gender {
  return [[__gender retain_stub] autorelease_stub];
}

- (void) setGender: (NSString *) gender {
  [gender retain_stub];
  [__gender release_stub];
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  [__gender release_stub];
  __gender = nil;
  __gender_isset = NO;
}

- (int64_t) roomId {
  return __roomId;
}

- (void) setRoomId: (int64_t) roomId {
  __roomId = roomId;
  __roomId_isset = YES;
}

- (BOOL) roomIdIsSet {
  return __roomId_isset;
}

- (void) unsetRoomId {
  __roomId_isset = NO;
}

- (NSString *) timId {
  return [[__timId retain_stub] autorelease_stub];
}

- (void) setTimId: (NSString *) timId {
  [timId retain_stub];
  [__timId release_stub];
  __timId = timId;
  __timId_isset = YES;
}

- (BOOL) timIdIsSet {
  return __timId_isset;
}

- (void) unsetTimId {
  [__timId release_stub];
  __timId = nil;
  __timId_isset = NO;
}

- (int64_t) docId {
  return __docId;
}

- (void) setDocId: (int64_t) docId {
  __docId = docId;
  __docId_isset = YES;
}

- (BOOL) docIdIsSet {
  return __docId_isset;
}

- (void) unsetDocId {
  __docId_isset = NO;
}

- (NSString *) hospName {
  return [[__hospName retain_stub] autorelease_stub];
}

- (void) setHospName: (NSString *) hospName {
  [hospName retain_stub];
  [__hospName release_stub];
  __hospName = hospName;
  __hospName_isset = YES;
}

- (BOOL) hospNameIsSet {
  return __hospName_isset;
}

- (void) unsetHospName {
  [__hospName release_stub];
  __hospName = nil;
  __hospName_isset = NO;
}

- (NSString *) logo {
  return [[__logo retain_stub] autorelease_stub];
}

- (void) setLogo: (NSString *) logo {
  [logo retain_stub];
  [__logo release_stub];
  __logo = logo;
  __logo_isset = YES;
}

- (BOOL) logoIsSet {
  return __logo_isset;
}

- (void) unsetLogo {
  [__logo release_stub];
  __logo = nil;
  __logo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setActId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBgPic: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTimeStart: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTimeEnd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrDept: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrHead: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTimeShow: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRoomId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTimId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDocId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLogo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActThumbnailDto"];
  if (__actId_isset) {
    if (__actId != nil) {
      [outProtocol writeFieldBeginWithName: @"actId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __actId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sessionNo_isset) {
    if (__sessionNo != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionNo" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __sessionNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bgPic_isset) {
    if (__bgPic != nil) {
      [outProtocol writeFieldBeginWithName: @"bgPic" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __bgPic];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timeStart_isset) {
    if (__timeStart != nil) {
      [outProtocol writeFieldBeginWithName: @"timeStart" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __timeStart];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timeEnd_isset) {
    if (__timeEnd != nil) {
      [outProtocol writeFieldBeginWithName: @"timeEnd" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __timeEnd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__drName_isset) {
    if (__drName != nil) {
      [outProtocol writeFieldBeginWithName: @"drName" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __drName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drDept_isset) {
    if (__drDept != nil) {
      [outProtocol writeFieldBeginWithName: @"drDept" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __drDept];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drTitle_isset) {
    if (__drTitle != nil) {
      [outProtocol writeFieldBeginWithName: @"drTitle" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __drTitle];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drHead_isset) {
    if (__drHead != nil) {
      [outProtocol writeFieldBeginWithName: @"drHead" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __drHead];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timeShow_isset) {
    if (__timeShow != nil) {
      [outProtocol writeFieldBeginWithName: @"timeShow" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __timeShow];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    if (__gender != nil) {
      [outProtocol writeFieldBeginWithName: @"gender" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __gender];
      [outProtocol writeFieldEnd];
    }
  }
  if (__roomId_isset) {
    [outProtocol writeFieldBeginWithName: @"roomId" type: TType_I64 fieldID: 14];
    [outProtocol writeI64: __roomId];
    [outProtocol writeFieldEnd];
  }
  if (__timId_isset) {
    if (__timId != nil) {
      [outProtocol writeFieldBeginWithName: @"timId" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __timId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__docId_isset) {
    [outProtocol writeFieldBeginWithName: @"docId" type: TType_I64 fieldID: 16];
    [outProtocol writeI64: __docId];
    [outProtocol writeFieldEnd];
  }
  if (__hospName_isset) {
    if (__hospName != nil) {
      [outProtocol writeFieldBeginWithName: @"hospName" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __hospName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__logo_isset) {
    if (__logo != nil) {
      [outProtocol writeFieldBeginWithName: @"logo" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __logo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFActThumbnailDto("];
  [ms appendString: @"actId:"];
  [ms appendFormat: @"\"%@\"", __actId];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",sessionNo:"];
  [ms appendFormat: @"\"%@\"", __sessionNo];
  [ms appendString: @",bgPic:"];
  [ms appendFormat: @"\"%@\"", __bgPic];
  [ms appendString: @",timeStart:"];
  [ms appendFormat: @"\"%@\"", __timeStart];
  [ms appendString: @",timeEnd:"];
  [ms appendFormat: @"\"%@\"", __timeEnd];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",drName:"];
  [ms appendFormat: @"\"%@\"", __drName];
  [ms appendString: @",drDept:"];
  [ms appendFormat: @"\"%@\"", __drDept];
  [ms appendString: @",drTitle:"];
  [ms appendFormat: @"\"%@\"", __drTitle];
  [ms appendString: @",drHead:"];
  [ms appendFormat: @"\"%@\"", __drHead];
  [ms appendString: @",timeShow:"];
  [ms appendFormat: @"\"%@\"", __timeShow];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"\"%@\"", __gender];
  [ms appendString: @",roomId:"];
  [ms appendFormat: @"%qi", __roomId];
  [ms appendString: @",timId:"];
  [ms appendFormat: @"\"%@\"", __timId];
  [ms appendString: @",docId:"];
  [ms appendFormat: @"%qi", __docId];
  [ms appendString: @",hospName:"];
  [ms appendFormat: @"\"%@\"", __hospName];
  [ms appendString: @",logo:"];
  [ms appendFormat: @"\"%@\"", __logo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFUserInfoDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAccountId: (NSString *) accountId phoneNo: (NSString *) phoneNo
{
  self = [super init];
  __accountId = [accountId retain_stub];
  __accountId_isset = YES;
  __phoneNo = [phoneNo retain_stub];
  __phoneNo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"accountId"])
  {
    __accountId = [[decoder decodeObjectForKey: @"accountId"] retain_stub];
    __accountId_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneNo"])
  {
    __phoneNo = [[decoder decodeObjectForKey: @"phoneNo"] retain_stub];
    __phoneNo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__accountId_isset)
  {
    [encoder encodeObject: __accountId forKey: @"accountId"];
  }
  if (__phoneNo_isset)
  {
    [encoder encodeObject: __phoneNo forKey: @"phoneNo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __accountId_isset ? 2654435761 : 0;
  if (__accountId_isset)
  {
    hash = (hash * 31) ^ [__accountId hash];
  }
  hash = (hash * 31) ^ __phoneNo_isset ? 2654435761 : 0;
  if (__phoneNo_isset)
  {
    hash = (hash * 31) ^ [__phoneNo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFUserInfoDto class]]) {
    return NO;
  }
  NXTFUserInfoDto *other = (NXTFUserInfoDto *)anObject;
  if ((__accountId_isset != other->__accountId_isset) ||
      (__accountId_isset && ((__accountId || other->__accountId) && ![__accountId isEqual:other->__accountId]))) {
    return NO;
  }
  if ((__phoneNo_isset != other->__phoneNo_isset) ||
      (__phoneNo_isset && ((__phoneNo || other->__phoneNo) && ![__phoneNo isEqual:other->__phoneNo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__accountId release_stub];
  [__phoneNo release_stub];
  [super dealloc_stub];
}

- (NSString *) accountId {
  return [[__accountId retain_stub] autorelease_stub];
}

- (void) setAccountId: (NSString *) accountId {
  [accountId retain_stub];
  [__accountId release_stub];
  __accountId = accountId;
  __accountId_isset = YES;
}

- (BOOL) accountIdIsSet {
  return __accountId_isset;
}

- (void) unsetAccountId {
  [__accountId release_stub];
  __accountId = nil;
  __accountId_isset = NO;
}

- (NSString *) phoneNo {
  return [[__phoneNo retain_stub] autorelease_stub];
}

- (void) setPhoneNo: (NSString *) phoneNo {
  [phoneNo retain_stub];
  [__phoneNo release_stub];
  __phoneNo = phoneNo;
  __phoneNo_isset = YES;
}

- (BOOL) phoneNoIsSet {
  return __phoneNo_isset;
}

- (void) unsetPhoneNo {
  [__phoneNo release_stub];
  __phoneNo = nil;
  __phoneNo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccountId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoneNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserInfoDto"];
  if (__accountId_isset) {
    if (__accountId != nil) {
      [outProtocol writeFieldBeginWithName: @"accountId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __accountId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phoneNo_isset) {
    if (__phoneNo != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __phoneNo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFUserInfoDto("];
  [ms appendString: @"accountId:"];
  [ms appendFormat: @"\"%@\"", __accountId];
  [ms appendString: @",phoneNo:"];
  [ms appendFormat: @"\"%@\"", __phoneNo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFActivityDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithActId: (NSString *) actId title: (NSString *) title desc: (NSString *) desc sessionNo: (int32_t) sessionNo drName: (NSString *) drName drTitle: (NSString *) drTitle drDept: (NSString *) drDept dcDrId: (NSString *) dcDrId drId: (NSString *) drId drSpecialty: (NSString *) drSpecialty timeStart: (NSString *) timeStart timeEnd: (NSString *) timeEnd roomId: (NSString *) roomId bgPic: (NSString *) bgPic attendees: (NSMutableArray *) attendees suitPeople: (NSString *) suitPeople model: (NSString *) model drHead: (NSString *) drHead timeshow: (NSString *) timeshow gender: (NSString *) gender hospName: (NSString *) hospName language: (NSString *) language timId: (NSString *) timId videoUrl: (NSString *) videoUrl logo: (NSString *) logo
{
  self = [super init];
  __actId = [actId retain_stub];
  __actId_isset = YES;
  __title = [title retain_stub];
  __title_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __sessionNo = sessionNo;
  __sessionNo_isset = YES;
  __drName = [drName retain_stub];
  __drName_isset = YES;
  __drTitle = [drTitle retain_stub];
  __drTitle_isset = YES;
  __drDept = [drDept retain_stub];
  __drDept_isset = YES;
  __dcDrId = [dcDrId retain_stub];
  __dcDrId_isset = YES;
  __drId = [drId retain_stub];
  __drId_isset = YES;
  __drSpecialty = [drSpecialty retain_stub];
  __drSpecialty_isset = YES;
  __timeStart = [timeStart retain_stub];
  __timeStart_isset = YES;
  __timeEnd = [timeEnd retain_stub];
  __timeEnd_isset = YES;
  __roomId = [roomId retain_stub];
  __roomId_isset = YES;
  __bgPic = [bgPic retain_stub];
  __bgPic_isset = YES;
  __attendees = [attendees retain_stub];
  __attendees_isset = YES;
  __suitPeople = [suitPeople retain_stub];
  __suitPeople_isset = YES;
  __model = [model retain_stub];
  __model_isset = YES;
  __drHead = [drHead retain_stub];
  __drHead_isset = YES;
  __timeshow = [timeshow retain_stub];
  __timeshow_isset = YES;
  __gender = [gender retain_stub];
  __gender_isset = YES;
  __hospName = [hospName retain_stub];
  __hospName_isset = YES;
  __language = [language retain_stub];
  __language_isset = YES;
  __timId = [timId retain_stub];
  __timId_isset = YES;
  __videoUrl = [videoUrl retain_stub];
  __videoUrl_isset = YES;
  __logo = [logo retain_stub];
  __logo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"actId"])
  {
    __actId = [[decoder decodeObjectForKey: @"actId"] retain_stub];
    __actId_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionNo"])
  {
    __sessionNo = [decoder decodeInt32ForKey: @"sessionNo"];
    __sessionNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"drName"])
  {
    __drName = [[decoder decodeObjectForKey: @"drName"] retain_stub];
    __drName_isset = YES;
  }
  if ([decoder containsValueForKey: @"drTitle"])
  {
    __drTitle = [[decoder decodeObjectForKey: @"drTitle"] retain_stub];
    __drTitle_isset = YES;
  }
  if ([decoder containsValueForKey: @"drDept"])
  {
    __drDept = [[decoder decodeObjectForKey: @"drDept"] retain_stub];
    __drDept_isset = YES;
  }
  if ([decoder containsValueForKey: @"dcDrId"])
  {
    __dcDrId = [[decoder decodeObjectForKey: @"dcDrId"] retain_stub];
    __dcDrId_isset = YES;
  }
  if ([decoder containsValueForKey: @"drId"])
  {
    __drId = [[decoder decodeObjectForKey: @"drId"] retain_stub];
    __drId_isset = YES;
  }
  if ([decoder containsValueForKey: @"drSpecialty"])
  {
    __drSpecialty = [[decoder decodeObjectForKey: @"drSpecialty"] retain_stub];
    __drSpecialty_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeStart"])
  {
    __timeStart = [[decoder decodeObjectForKey: @"timeStart"] retain_stub];
    __timeStart_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeEnd"])
  {
    __timeEnd = [[decoder decodeObjectForKey: @"timeEnd"] retain_stub];
    __timeEnd_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomId"])
  {
    __roomId = [[decoder decodeObjectForKey: @"roomId"] retain_stub];
    __roomId_isset = YES;
  }
  if ([decoder containsValueForKey: @"bgPic"])
  {
    __bgPic = [[decoder decodeObjectForKey: @"bgPic"] retain_stub];
    __bgPic_isset = YES;
  }
  if ([decoder containsValueForKey: @"attendees"])
  {
    __attendees = [[decoder decodeObjectForKey: @"attendees"] retain_stub];
    __attendees_isset = YES;
  }
  if ([decoder containsValueForKey: @"suitPeople"])
  {
    __suitPeople = [[decoder decodeObjectForKey: @"suitPeople"] retain_stub];
    __suitPeople_isset = YES;
  }
  if ([decoder containsValueForKey: @"model"])
  {
    __model = [[decoder decodeObjectForKey: @"model"] retain_stub];
    __model_isset = YES;
  }
  if ([decoder containsValueForKey: @"drHead"])
  {
    __drHead = [[decoder decodeObjectForKey: @"drHead"] retain_stub];
    __drHead_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeshow"])
  {
    __timeshow = [[decoder decodeObjectForKey: @"timeshow"] retain_stub];
    __timeshow_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [[decoder decodeObjectForKey: @"gender"] retain_stub];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospName"])
  {
    __hospName = [[decoder decodeObjectForKey: @"hospName"] retain_stub];
    __hospName_isset = YES;
  }
  if ([decoder containsValueForKey: @"language"])
  {
    __language = [[decoder decodeObjectForKey: @"language"] retain_stub];
    __language_isset = YES;
  }
  if ([decoder containsValueForKey: @"timId"])
  {
    __timId = [[decoder decodeObjectForKey: @"timId"] retain_stub];
    __timId_isset = YES;
  }
  if ([decoder containsValueForKey: @"videoUrl"])
  {
    __videoUrl = [[decoder decodeObjectForKey: @"videoUrl"] retain_stub];
    __videoUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"logo"])
  {
    __logo = [[decoder decodeObjectForKey: @"logo"] retain_stub];
    __logo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__actId_isset)
  {
    [encoder encodeObject: __actId forKey: @"actId"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__sessionNo_isset)
  {
    [encoder encodeInt32: __sessionNo forKey: @"sessionNo"];
  }
  if (__drName_isset)
  {
    [encoder encodeObject: __drName forKey: @"drName"];
  }
  if (__drTitle_isset)
  {
    [encoder encodeObject: __drTitle forKey: @"drTitle"];
  }
  if (__drDept_isset)
  {
    [encoder encodeObject: __drDept forKey: @"drDept"];
  }
  if (__dcDrId_isset)
  {
    [encoder encodeObject: __dcDrId forKey: @"dcDrId"];
  }
  if (__drId_isset)
  {
    [encoder encodeObject: __drId forKey: @"drId"];
  }
  if (__drSpecialty_isset)
  {
    [encoder encodeObject: __drSpecialty forKey: @"drSpecialty"];
  }
  if (__timeStart_isset)
  {
    [encoder encodeObject: __timeStart forKey: @"timeStart"];
  }
  if (__timeEnd_isset)
  {
    [encoder encodeObject: __timeEnd forKey: @"timeEnd"];
  }
  if (__roomId_isset)
  {
    [encoder encodeObject: __roomId forKey: @"roomId"];
  }
  if (__bgPic_isset)
  {
    [encoder encodeObject: __bgPic forKey: @"bgPic"];
  }
  if (__attendees_isset)
  {
    [encoder encodeObject: __attendees forKey: @"attendees"];
  }
  if (__suitPeople_isset)
  {
    [encoder encodeObject: __suitPeople forKey: @"suitPeople"];
  }
  if (__model_isset)
  {
    [encoder encodeObject: __model forKey: @"model"];
  }
  if (__drHead_isset)
  {
    [encoder encodeObject: __drHead forKey: @"drHead"];
  }
  if (__timeshow_isset)
  {
    [encoder encodeObject: __timeshow forKey: @"timeshow"];
  }
  if (__gender_isset)
  {
    [encoder encodeObject: __gender forKey: @"gender"];
  }
  if (__hospName_isset)
  {
    [encoder encodeObject: __hospName forKey: @"hospName"];
  }
  if (__language_isset)
  {
    [encoder encodeObject: __language forKey: @"language"];
  }
  if (__timId_isset)
  {
    [encoder encodeObject: __timId forKey: @"timId"];
  }
  if (__videoUrl_isset)
  {
    [encoder encodeObject: __videoUrl forKey: @"videoUrl"];
  }
  if (__logo_isset)
  {
    [encoder encodeObject: __logo forKey: @"logo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __actId_isset ? 2654435761 : 0;
  if (__actId_isset)
  {
    hash = (hash * 31) ^ [__actId hash];
  }
  hash = (hash * 31) ^ __title_isset ? 2654435761 : 0;
  if (__title_isset)
  {
    hash = (hash * 31) ^ [__title hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __sessionNo_isset ? 2654435761 : 0;
  if (__sessionNo_isset)
  {
    hash = (hash * 31) ^ [@(__sessionNo) hash];
  }
  hash = (hash * 31) ^ __drName_isset ? 2654435761 : 0;
  if (__drName_isset)
  {
    hash = (hash * 31) ^ [__drName hash];
  }
  hash = (hash * 31) ^ __drTitle_isset ? 2654435761 : 0;
  if (__drTitle_isset)
  {
    hash = (hash * 31) ^ [__drTitle hash];
  }
  hash = (hash * 31) ^ __drDept_isset ? 2654435761 : 0;
  if (__drDept_isset)
  {
    hash = (hash * 31) ^ [__drDept hash];
  }
  hash = (hash * 31) ^ __dcDrId_isset ? 2654435761 : 0;
  if (__dcDrId_isset)
  {
    hash = (hash * 31) ^ [__dcDrId hash];
  }
  hash = (hash * 31) ^ __drId_isset ? 2654435761 : 0;
  if (__drId_isset)
  {
    hash = (hash * 31) ^ [__drId hash];
  }
  hash = (hash * 31) ^ __drSpecialty_isset ? 2654435761 : 0;
  if (__drSpecialty_isset)
  {
    hash = (hash * 31) ^ [__drSpecialty hash];
  }
  hash = (hash * 31) ^ __timeStart_isset ? 2654435761 : 0;
  if (__timeStart_isset)
  {
    hash = (hash * 31) ^ [__timeStart hash];
  }
  hash = (hash * 31) ^ __timeEnd_isset ? 2654435761 : 0;
  if (__timeEnd_isset)
  {
    hash = (hash * 31) ^ [__timeEnd hash];
  }
  hash = (hash * 31) ^ __roomId_isset ? 2654435761 : 0;
  if (__roomId_isset)
  {
    hash = (hash * 31) ^ [__roomId hash];
  }
  hash = (hash * 31) ^ __bgPic_isset ? 2654435761 : 0;
  if (__bgPic_isset)
  {
    hash = (hash * 31) ^ [__bgPic hash];
  }
  hash = (hash * 31) ^ __attendees_isset ? 2654435761 : 0;
  if (__attendees_isset)
  {
    hash = (hash * 31) ^ [__attendees hash];
  }
  hash = (hash * 31) ^ __suitPeople_isset ? 2654435761 : 0;
  if (__suitPeople_isset)
  {
    hash = (hash * 31) ^ [__suitPeople hash];
  }
  hash = (hash * 31) ^ __model_isset ? 2654435761 : 0;
  if (__model_isset)
  {
    hash = (hash * 31) ^ [__model hash];
  }
  hash = (hash * 31) ^ __drHead_isset ? 2654435761 : 0;
  if (__drHead_isset)
  {
    hash = (hash * 31) ^ [__drHead hash];
  }
  hash = (hash * 31) ^ __timeshow_isset ? 2654435761 : 0;
  if (__timeshow_isset)
  {
    hash = (hash * 31) ^ [__timeshow hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [__gender hash];
  }
  hash = (hash * 31) ^ __hospName_isset ? 2654435761 : 0;
  if (__hospName_isset)
  {
    hash = (hash * 31) ^ [__hospName hash];
  }
  hash = (hash * 31) ^ __language_isset ? 2654435761 : 0;
  if (__language_isset)
  {
    hash = (hash * 31) ^ [__language hash];
  }
  hash = (hash * 31) ^ __timId_isset ? 2654435761 : 0;
  if (__timId_isset)
  {
    hash = (hash * 31) ^ [__timId hash];
  }
  hash = (hash * 31) ^ __videoUrl_isset ? 2654435761 : 0;
  if (__videoUrl_isset)
  {
    hash = (hash * 31) ^ [__videoUrl hash];
  }
  hash = (hash * 31) ^ __logo_isset ? 2654435761 : 0;
  if (__logo_isset)
  {
    hash = (hash * 31) ^ [__logo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFActivityDto class]]) {
    return NO;
  }
  NXTFActivityDto *other = (NXTFActivityDto *)anObject;
  if ((__actId_isset != other->__actId_isset) ||
      (__actId_isset && ((__actId || other->__actId) && ![__actId isEqual:other->__actId]))) {
    return NO;
  }
  if ((__title_isset != other->__title_isset) ||
      (__title_isset && ((__title || other->__title) && ![__title isEqual:other->__title]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__sessionNo_isset != other->__sessionNo_isset) ||
      (__sessionNo_isset && (__sessionNo != other->__sessionNo))) {
    return NO;
  }
  if ((__drName_isset != other->__drName_isset) ||
      (__drName_isset && ((__drName || other->__drName) && ![__drName isEqual:other->__drName]))) {
    return NO;
  }
  if ((__drTitle_isset != other->__drTitle_isset) ||
      (__drTitle_isset && ((__drTitle || other->__drTitle) && ![__drTitle isEqual:other->__drTitle]))) {
    return NO;
  }
  if ((__drDept_isset != other->__drDept_isset) ||
      (__drDept_isset && ((__drDept || other->__drDept) && ![__drDept isEqual:other->__drDept]))) {
    return NO;
  }
  if ((__dcDrId_isset != other->__dcDrId_isset) ||
      (__dcDrId_isset && ((__dcDrId || other->__dcDrId) && ![__dcDrId isEqual:other->__dcDrId]))) {
    return NO;
  }
  if ((__drId_isset != other->__drId_isset) ||
      (__drId_isset && ((__drId || other->__drId) && ![__drId isEqual:other->__drId]))) {
    return NO;
  }
  if ((__drSpecialty_isset != other->__drSpecialty_isset) ||
      (__drSpecialty_isset && ((__drSpecialty || other->__drSpecialty) && ![__drSpecialty isEqual:other->__drSpecialty]))) {
    return NO;
  }
  if ((__timeStart_isset != other->__timeStart_isset) ||
      (__timeStart_isset && ((__timeStart || other->__timeStart) && ![__timeStart isEqual:other->__timeStart]))) {
    return NO;
  }
  if ((__timeEnd_isset != other->__timeEnd_isset) ||
      (__timeEnd_isset && ((__timeEnd || other->__timeEnd) && ![__timeEnd isEqual:other->__timeEnd]))) {
    return NO;
  }
  if ((__roomId_isset != other->__roomId_isset) ||
      (__roomId_isset && ((__roomId || other->__roomId) && ![__roomId isEqual:other->__roomId]))) {
    return NO;
  }
  if ((__bgPic_isset != other->__bgPic_isset) ||
      (__bgPic_isset && ((__bgPic || other->__bgPic) && ![__bgPic isEqual:other->__bgPic]))) {
    return NO;
  }
  if ((__attendees_isset != other->__attendees_isset) ||
      (__attendees_isset && ((__attendees || other->__attendees) && ![__attendees isEqual:other->__attendees]))) {
    return NO;
  }
  if ((__suitPeople_isset != other->__suitPeople_isset) ||
      (__suitPeople_isset && ((__suitPeople || other->__suitPeople) && ![__suitPeople isEqual:other->__suitPeople]))) {
    return NO;
  }
  if ((__model_isset != other->__model_isset) ||
      (__model_isset && ((__model || other->__model) && ![__model isEqual:other->__model]))) {
    return NO;
  }
  if ((__drHead_isset != other->__drHead_isset) ||
      (__drHead_isset && ((__drHead || other->__drHead) && ![__drHead isEqual:other->__drHead]))) {
    return NO;
  }
  if ((__timeshow_isset != other->__timeshow_isset) ||
      (__timeshow_isset && ((__timeshow || other->__timeshow) && ![__timeshow isEqual:other->__timeshow]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && ((__gender || other->__gender) && ![__gender isEqual:other->__gender]))) {
    return NO;
  }
  if ((__hospName_isset != other->__hospName_isset) ||
      (__hospName_isset && ((__hospName || other->__hospName) && ![__hospName isEqual:other->__hospName]))) {
    return NO;
  }
  if ((__language_isset != other->__language_isset) ||
      (__language_isset && ((__language || other->__language) && ![__language isEqual:other->__language]))) {
    return NO;
  }
  if ((__timId_isset != other->__timId_isset) ||
      (__timId_isset && ((__timId || other->__timId) && ![__timId isEqual:other->__timId]))) {
    return NO;
  }
  if ((__videoUrl_isset != other->__videoUrl_isset) ||
      (__videoUrl_isset && ((__videoUrl || other->__videoUrl) && ![__videoUrl isEqual:other->__videoUrl]))) {
    return NO;
  }
  if ((__logo_isset != other->__logo_isset) ||
      (__logo_isset && ((__logo || other->__logo) && ![__logo isEqual:other->__logo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__actId release_stub];
  [__title release_stub];
  [__desc release_stub];
  [__drName release_stub];
  [__drTitle release_stub];
  [__drDept release_stub];
  [__dcDrId release_stub];
  [__drId release_stub];
  [__drSpecialty release_stub];
  [__timeStart release_stub];
  [__timeEnd release_stub];
  [__roomId release_stub];
  [__bgPic release_stub];
  [__attendees release_stub];
  [__suitPeople release_stub];
  [__model release_stub];
  [__drHead release_stub];
  [__timeshow release_stub];
  [__gender release_stub];
  [__hospName release_stub];
  [__language release_stub];
  [__timId release_stub];
  [__videoUrl release_stub];
  [__logo release_stub];
  [super dealloc_stub];
}

- (NSString *) actId {
  return [[__actId retain_stub] autorelease_stub];
}

- (void) setActId: (NSString *) actId {
  [actId retain_stub];
  [__actId release_stub];
  __actId = actId;
  __actId_isset = YES;
}

- (BOOL) actIdIsSet {
  return __actId_isset;
}

- (void) unsetActId {
  [__actId release_stub];
  __actId = nil;
  __actId_isset = NO;
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (int32_t) sessionNo {
  return __sessionNo;
}

- (void) setSessionNo: (int32_t) sessionNo {
  __sessionNo = sessionNo;
  __sessionNo_isset = YES;
}

- (BOOL) sessionNoIsSet {
  return __sessionNo_isset;
}

- (void) unsetSessionNo {
  __sessionNo_isset = NO;
}

- (NSString *) drName {
  return [[__drName retain_stub] autorelease_stub];
}

- (void) setDrName: (NSString *) drName {
  [drName retain_stub];
  [__drName release_stub];
  __drName = drName;
  __drName_isset = YES;
}

- (BOOL) drNameIsSet {
  return __drName_isset;
}

- (void) unsetDrName {
  [__drName release_stub];
  __drName = nil;
  __drName_isset = NO;
}

- (NSString *) drTitle {
  return [[__drTitle retain_stub] autorelease_stub];
}

- (void) setDrTitle: (NSString *) drTitle {
  [drTitle retain_stub];
  [__drTitle release_stub];
  __drTitle = drTitle;
  __drTitle_isset = YES;
}

- (BOOL) drTitleIsSet {
  return __drTitle_isset;
}

- (void) unsetDrTitle {
  [__drTitle release_stub];
  __drTitle = nil;
  __drTitle_isset = NO;
}

- (NSString *) drDept {
  return [[__drDept retain_stub] autorelease_stub];
}

- (void) setDrDept: (NSString *) drDept {
  [drDept retain_stub];
  [__drDept release_stub];
  __drDept = drDept;
  __drDept_isset = YES;
}

- (BOOL) drDeptIsSet {
  return __drDept_isset;
}

- (void) unsetDrDept {
  [__drDept release_stub];
  __drDept = nil;
  __drDept_isset = NO;
}

- (NSString *) dcDrId {
  return [[__dcDrId retain_stub] autorelease_stub];
}

- (void) setDcDrId: (NSString *) dcDrId {
  [dcDrId retain_stub];
  [__dcDrId release_stub];
  __dcDrId = dcDrId;
  __dcDrId_isset = YES;
}

- (BOOL) dcDrIdIsSet {
  return __dcDrId_isset;
}

- (void) unsetDcDrId {
  [__dcDrId release_stub];
  __dcDrId = nil;
  __dcDrId_isset = NO;
}

- (NSString *) drId {
  return [[__drId retain_stub] autorelease_stub];
}

- (void) setDrId: (NSString *) drId {
  [drId retain_stub];
  [__drId release_stub];
  __drId = drId;
  __drId_isset = YES;
}

- (BOOL) drIdIsSet {
  return __drId_isset;
}

- (void) unsetDrId {
  [__drId release_stub];
  __drId = nil;
  __drId_isset = NO;
}

- (NSString *) drSpecialty {
  return [[__drSpecialty retain_stub] autorelease_stub];
}

- (void) setDrSpecialty: (NSString *) drSpecialty {
  [drSpecialty retain_stub];
  [__drSpecialty release_stub];
  __drSpecialty = drSpecialty;
  __drSpecialty_isset = YES;
}

- (BOOL) drSpecialtyIsSet {
  return __drSpecialty_isset;
}

- (void) unsetDrSpecialty {
  [__drSpecialty release_stub];
  __drSpecialty = nil;
  __drSpecialty_isset = NO;
}

- (NSString *) timeStart {
  return [[__timeStart retain_stub] autorelease_stub];
}

- (void) setTimeStart: (NSString *) timeStart {
  [timeStart retain_stub];
  [__timeStart release_stub];
  __timeStart = timeStart;
  __timeStart_isset = YES;
}

- (BOOL) timeStartIsSet {
  return __timeStart_isset;
}

- (void) unsetTimeStart {
  [__timeStart release_stub];
  __timeStart = nil;
  __timeStart_isset = NO;
}

- (NSString *) timeEnd {
  return [[__timeEnd retain_stub] autorelease_stub];
}

- (void) setTimeEnd: (NSString *) timeEnd {
  [timeEnd retain_stub];
  [__timeEnd release_stub];
  __timeEnd = timeEnd;
  __timeEnd_isset = YES;
}

- (BOOL) timeEndIsSet {
  return __timeEnd_isset;
}

- (void) unsetTimeEnd {
  [__timeEnd release_stub];
  __timeEnd = nil;
  __timeEnd_isset = NO;
}

- (NSString *) roomId {
  return [[__roomId retain_stub] autorelease_stub];
}

- (void) setRoomId: (NSString *) roomId {
  [roomId retain_stub];
  [__roomId release_stub];
  __roomId = roomId;
  __roomId_isset = YES;
}

- (BOOL) roomIdIsSet {
  return __roomId_isset;
}

- (void) unsetRoomId {
  [__roomId release_stub];
  __roomId = nil;
  __roomId_isset = NO;
}

- (NSString *) bgPic {
  return [[__bgPic retain_stub] autorelease_stub];
}

- (void) setBgPic: (NSString *) bgPic {
  [bgPic retain_stub];
  [__bgPic release_stub];
  __bgPic = bgPic;
  __bgPic_isset = YES;
}

- (BOOL) bgPicIsSet {
  return __bgPic_isset;
}

- (void) unsetBgPic {
  [__bgPic release_stub];
  __bgPic = nil;
  __bgPic_isset = NO;
}

- (NSMutableArray *) attendees {
  return [[__attendees retain_stub] autorelease_stub];
}

- (void) setAttendees: (NSMutableArray *) attendees {
  [attendees retain_stub];
  [__attendees release_stub];
  __attendees = attendees;
  __attendees_isset = YES;
}

- (BOOL) attendeesIsSet {
  return __attendees_isset;
}

- (void) unsetAttendees {
  [__attendees release_stub];
  __attendees = nil;
  __attendees_isset = NO;
}

- (NSString *) suitPeople {
  return [[__suitPeople retain_stub] autorelease_stub];
}

- (void) setSuitPeople: (NSString *) suitPeople {
  [suitPeople retain_stub];
  [__suitPeople release_stub];
  __suitPeople = suitPeople;
  __suitPeople_isset = YES;
}

- (BOOL) suitPeopleIsSet {
  return __suitPeople_isset;
}

- (void) unsetSuitPeople {
  [__suitPeople release_stub];
  __suitPeople = nil;
  __suitPeople_isset = NO;
}

- (NSString *) model {
  return [[__model retain_stub] autorelease_stub];
}

- (void) setModel: (NSString *) model {
  [model retain_stub];
  [__model release_stub];
  __model = model;
  __model_isset = YES;
}

- (BOOL) modelIsSet {
  return __model_isset;
}

- (void) unsetModel {
  [__model release_stub];
  __model = nil;
  __model_isset = NO;
}

- (NSString *) drHead {
  return [[__drHead retain_stub] autorelease_stub];
}

- (void) setDrHead: (NSString *) drHead {
  [drHead retain_stub];
  [__drHead release_stub];
  __drHead = drHead;
  __drHead_isset = YES;
}

- (BOOL) drHeadIsSet {
  return __drHead_isset;
}

- (void) unsetDrHead {
  [__drHead release_stub];
  __drHead = nil;
  __drHead_isset = NO;
}

- (NSString *) timeshow {
  return [[__timeshow retain_stub] autorelease_stub];
}

- (void) setTimeshow: (NSString *) timeshow {
  [timeshow retain_stub];
  [__timeshow release_stub];
  __timeshow = timeshow;
  __timeshow_isset = YES;
}

- (BOOL) timeshowIsSet {
  return __timeshow_isset;
}

- (void) unsetTimeshow {
  [__timeshow release_stub];
  __timeshow = nil;
  __timeshow_isset = NO;
}

- (NSString *) gender {
  return [[__gender retain_stub] autorelease_stub];
}

- (void) setGender: (NSString *) gender {
  [gender retain_stub];
  [__gender release_stub];
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  [__gender release_stub];
  __gender = nil;
  __gender_isset = NO;
}

- (NSString *) hospName {
  return [[__hospName retain_stub] autorelease_stub];
}

- (void) setHospName: (NSString *) hospName {
  [hospName retain_stub];
  [__hospName release_stub];
  __hospName = hospName;
  __hospName_isset = YES;
}

- (BOOL) hospNameIsSet {
  return __hospName_isset;
}

- (void) unsetHospName {
  [__hospName release_stub];
  __hospName = nil;
  __hospName_isset = NO;
}

- (NSString *) language {
  return [[__language retain_stub] autorelease_stub];
}

- (void) setLanguage: (NSString *) language {
  [language retain_stub];
  [__language release_stub];
  __language = language;
  __language_isset = YES;
}

- (BOOL) languageIsSet {
  return __language_isset;
}

- (void) unsetLanguage {
  [__language release_stub];
  __language = nil;
  __language_isset = NO;
}

- (NSString *) timId {
  return [[__timId retain_stub] autorelease_stub];
}

- (void) setTimId: (NSString *) timId {
  [timId retain_stub];
  [__timId release_stub];
  __timId = timId;
  __timId_isset = YES;
}

- (BOOL) timIdIsSet {
  return __timId_isset;
}

- (void) unsetTimId {
  [__timId release_stub];
  __timId = nil;
  __timId_isset = NO;
}

- (NSString *) videoUrl {
  return [[__videoUrl retain_stub] autorelease_stub];
}

- (void) setVideoUrl: (NSString *) videoUrl {
  [videoUrl retain_stub];
  [__videoUrl release_stub];
  __videoUrl = videoUrl;
  __videoUrl_isset = YES;
}

- (BOOL) videoUrlIsSet {
  return __videoUrl_isset;
}

- (void) unsetVideoUrl {
  [__videoUrl release_stub];
  __videoUrl = nil;
  __videoUrl_isset = NO;
}

- (NSString *) logo {
  return [[__logo retain_stub] autorelease_stub];
}

- (void) setLogo: (NSString *) logo {
  [logo retain_stub];
  [__logo release_stub];
  __logo = logo;
  __logo_isset = YES;
}

- (BOOL) logoIsSet {
  return __logo_isset;
}

- (void) unsetLogo {
  [__logo release_stub];
  __logo = nil;
  __logo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setActId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSessionNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrDept: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDcDrId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrSpecialty: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTimeStart: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTimeEnd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRoomId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBgPic: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_LIST) {
          int _size131;
          [inProtocol readListBeginReturningElementType: NULL size: &_size131];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size131];
          int _i132;
          for (_i132 = 0; _i132 < _size131; ++_i132)
          {
            NXTFUserInfoDto *_elem133 = [[NXTFUserInfoDto alloc] init];
            [_elem133 read: inProtocol];
            [fieldValue addObject: _elem133];
            [_elem133 release_stub];
          }
          [inProtocol readListEnd];
          [self setAttendees: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuitPeople: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setModel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrHead: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTimeshow: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTimId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVideoUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLogo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActivityDto"];
  if (__actId_isset) {
    if (__actId != nil) {
      [outProtocol writeFieldBeginWithName: @"actId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __actId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sessionNo_isset) {
    [outProtocol writeFieldBeginWithName: @"sessionNo" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __sessionNo];
    [outProtocol writeFieldEnd];
  }
  if (__drName_isset) {
    if (__drName != nil) {
      [outProtocol writeFieldBeginWithName: @"drName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __drName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drTitle_isset) {
    if (__drTitle != nil) {
      [outProtocol writeFieldBeginWithName: @"drTitle" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __drTitle];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drDept_isset) {
    if (__drDept != nil) {
      [outProtocol writeFieldBeginWithName: @"drDept" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __drDept];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dcDrId_isset) {
    if (__dcDrId != nil) {
      [outProtocol writeFieldBeginWithName: @"dcDrId" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __dcDrId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drId_isset) {
    if (__drId != nil) {
      [outProtocol writeFieldBeginWithName: @"drId" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __drId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drSpecialty_isset) {
    if (__drSpecialty != nil) {
      [outProtocol writeFieldBeginWithName: @"drSpecialty" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __drSpecialty];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timeStart_isset) {
    if (__timeStart != nil) {
      [outProtocol writeFieldBeginWithName: @"timeStart" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __timeStart];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timeEnd_isset) {
    if (__timeEnd != nil) {
      [outProtocol writeFieldBeginWithName: @"timeEnd" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __timeEnd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__roomId_isset) {
    if (__roomId != nil) {
      [outProtocol writeFieldBeginWithName: @"roomId" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __roomId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bgPic_isset) {
    if (__bgPic != nil) {
      [outProtocol writeFieldBeginWithName: @"bgPic" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __bgPic];
      [outProtocol writeFieldEnd];
    }
  }
  if (__attendees_isset) {
    if (__attendees != nil) {
      [outProtocol writeFieldBeginWithName: @"attendees" type: TType_LIST fieldID: 15];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__attendees count]];
        int idx135;
        for (idx135 = 0; idx135 < [__attendees count]; idx135++)
        {
          [[__attendees objectAtIndex: idx135] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__suitPeople_isset) {
    if (__suitPeople != nil) {
      [outProtocol writeFieldBeginWithName: @"suitPeople" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __suitPeople];
      [outProtocol writeFieldEnd];
    }
  }
  if (__model_isset) {
    if (__model != nil) {
      [outProtocol writeFieldBeginWithName: @"model" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __model];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drHead_isset) {
    if (__drHead != nil) {
      [outProtocol writeFieldBeginWithName: @"drHead" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __drHead];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timeshow_isset) {
    if (__timeshow != nil) {
      [outProtocol writeFieldBeginWithName: @"timeshow" type: TType_STRING fieldID: 19];
      [outProtocol writeString: __timeshow];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    if (__gender != nil) {
      [outProtocol writeFieldBeginWithName: @"gender" type: TType_STRING fieldID: 20];
      [outProtocol writeString: __gender];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospName_isset) {
    if (__hospName != nil) {
      [outProtocol writeFieldBeginWithName: @"hospName" type: TType_STRING fieldID: 21];
      [outProtocol writeString: __hospName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__language_isset) {
    if (__language != nil) {
      [outProtocol writeFieldBeginWithName: @"language" type: TType_STRING fieldID: 22];
      [outProtocol writeString: __language];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timId_isset) {
    if (__timId != nil) {
      [outProtocol writeFieldBeginWithName: @"timId" type: TType_STRING fieldID: 23];
      [outProtocol writeString: __timId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__videoUrl_isset) {
    if (__videoUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"videoUrl" type: TType_STRING fieldID: 24];
      [outProtocol writeString: __videoUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__logo_isset) {
    if (__logo != nil) {
      [outProtocol writeFieldBeginWithName: @"logo" type: TType_STRING fieldID: 25];
      [outProtocol writeString: __logo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFActivityDto("];
  [ms appendString: @"actId:"];
  [ms appendFormat: @"\"%@\"", __actId];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",sessionNo:"];
  [ms appendFormat: @"%i", __sessionNo];
  [ms appendString: @",drName:"];
  [ms appendFormat: @"\"%@\"", __drName];
  [ms appendString: @",drTitle:"];
  [ms appendFormat: @"\"%@\"", __drTitle];
  [ms appendString: @",drDept:"];
  [ms appendFormat: @"\"%@\"", __drDept];
  [ms appendString: @",dcDrId:"];
  [ms appendFormat: @"\"%@\"", __dcDrId];
  [ms appendString: @",drId:"];
  [ms appendFormat: @"\"%@\"", __drId];
  [ms appendString: @",drSpecialty:"];
  [ms appendFormat: @"\"%@\"", __drSpecialty];
  [ms appendString: @",timeStart:"];
  [ms appendFormat: @"\"%@\"", __timeStart];
  [ms appendString: @",timeEnd:"];
  [ms appendFormat: @"\"%@\"", __timeEnd];
  [ms appendString: @",roomId:"];
  [ms appendFormat: @"\"%@\"", __roomId];
  [ms appendString: @",bgPic:"];
  [ms appendFormat: @"\"%@\"", __bgPic];
  [ms appendString: @",attendees:"];
  [ms appendFormat: @"%@", __attendees];
  [ms appendString: @",suitPeople:"];
  [ms appendFormat: @"\"%@\"", __suitPeople];
  [ms appendString: @",model:"];
  [ms appendFormat: @"\"%@\"", __model];
  [ms appendString: @",drHead:"];
  [ms appendFormat: @"\"%@\"", __drHead];
  [ms appendString: @",timeshow:"];
  [ms appendFormat: @"\"%@\"", __timeshow];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"\"%@\"", __gender];
  [ms appendString: @",hospName:"];
  [ms appendFormat: @"\"%@\"", __hospName];
  [ms appendString: @",language:"];
  [ms appendFormat: @"\"%@\"", __language];
  [ms appendString: @",timId:"];
  [ms appendFormat: @"\"%@\"", __timId];
  [ms appendString: @",videoUrl:"];
  [ms appendFormat: @"\"%@\"", __videoUrl];
  [ms appendString: @",logo:"];
  [ms appendFormat: @"\"%@\"", __logo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFConDocDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDrId: (int64_t) drId drName: (NSString *) drName gender: (int32_t) gender deptName: (NSString *) deptName headImg: (NSString *) headImg
{
  self = [super init];
  __drId = drId;
  __drId_isset = YES;
  __drName = [drName retain_stub];
  __drName_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __deptName = [deptName retain_stub];
  __deptName_isset = YES;
  __headImg = [headImg retain_stub];
  __headImg_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"drId"])
  {
    __drId = [decoder decodeInt64ForKey: @"drId"];
    __drId_isset = YES;
  }
  if ([decoder containsValueForKey: @"drName"])
  {
    __drName = [[decoder decodeObjectForKey: @"drName"] retain_stub];
    __drName_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeInt32ForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptName"])
  {
    __deptName = [[decoder decodeObjectForKey: @"deptName"] retain_stub];
    __deptName_isset = YES;
  }
  if ([decoder containsValueForKey: @"headImg"])
  {
    __headImg = [[decoder decodeObjectForKey: @"headImg"] retain_stub];
    __headImg_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__drId_isset)
  {
    [encoder encodeInt64: __drId forKey: @"drId"];
  }
  if (__drName_isset)
  {
    [encoder encodeObject: __drName forKey: @"drName"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt32: __gender forKey: @"gender"];
  }
  if (__deptName_isset)
  {
    [encoder encodeObject: __deptName forKey: @"deptName"];
  }
  if (__headImg_isset)
  {
    [encoder encodeObject: __headImg forKey: @"headImg"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __drId_isset ? 2654435761 : 0;
  if (__drId_isset)
  {
    hash = (hash * 31) ^ [@(__drId) hash];
  }
  hash = (hash * 31) ^ __drName_isset ? 2654435761 : 0;
  if (__drName_isset)
  {
    hash = (hash * 31) ^ [__drName hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [@(__gender) hash];
  }
  hash = (hash * 31) ^ __deptName_isset ? 2654435761 : 0;
  if (__deptName_isset)
  {
    hash = (hash * 31) ^ [__deptName hash];
  }
  hash = (hash * 31) ^ __headImg_isset ? 2654435761 : 0;
  if (__headImg_isset)
  {
    hash = (hash * 31) ^ [__headImg hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFConDocDto class]]) {
    return NO;
  }
  NXTFConDocDto *other = (NXTFConDocDto *)anObject;
  if ((__drId_isset != other->__drId_isset) ||
      (__drId_isset && (__drId != other->__drId))) {
    return NO;
  }
  if ((__drName_isset != other->__drName_isset) ||
      (__drName_isset && ((__drName || other->__drName) && ![__drName isEqual:other->__drName]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && (__gender != other->__gender))) {
    return NO;
  }
  if ((__deptName_isset != other->__deptName_isset) ||
      (__deptName_isset && ((__deptName || other->__deptName) && ![__deptName isEqual:other->__deptName]))) {
    return NO;
  }
  if ((__headImg_isset != other->__headImg_isset) ||
      (__headImg_isset && ((__headImg || other->__headImg) && ![__headImg isEqual:other->__headImg]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__drName release_stub];
  [__deptName release_stub];
  [__headImg release_stub];
  [super dealloc_stub];
}

- (int64_t) drId {
  return __drId;
}

- (void) setDrId: (int64_t) drId {
  __drId = drId;
  __drId_isset = YES;
}

- (BOOL) drIdIsSet {
  return __drId_isset;
}

- (void) unsetDrId {
  __drId_isset = NO;
}

- (NSString *) drName {
  return [[__drName retain_stub] autorelease_stub];
}

- (void) setDrName: (NSString *) drName {
  [drName retain_stub];
  [__drName release_stub];
  __drName = drName;
  __drName_isset = YES;
}

- (BOOL) drNameIsSet {
  return __drName_isset;
}

- (void) unsetDrName {
  [__drName release_stub];
  __drName = nil;
  __drName_isset = NO;
}

- (int32_t) gender {
  return __gender;
}

- (void) setGender: (int32_t) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (NSString *) deptName {
  return [[__deptName retain_stub] autorelease_stub];
}

- (void) setDeptName: (NSString *) deptName {
  [deptName retain_stub];
  [__deptName release_stub];
  __deptName = deptName;
  __deptName_isset = YES;
}

- (BOOL) deptNameIsSet {
  return __deptName_isset;
}

- (void) unsetDeptName {
  [__deptName release_stub];
  __deptName = nil;
  __deptName_isset = NO;
}

- (NSString *) headImg {
  return [[__headImg retain_stub] autorelease_stub];
}

- (void) setHeadImg: (NSString *) headImg {
  [headImg retain_stub];
  [__headImg release_stub];
  __headImg = headImg;
  __headImg_isset = YES;
}

- (BOOL) headImgIsSet {
  return __headImg_isset;
}

- (void) unsetHeadImg {
  [__headImg release_stub];
  __headImg = nil;
  __headImg_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDrId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHeadImg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ConDocDto"];
  if (__drId_isset) {
    [outProtocol writeFieldBeginWithName: @"drId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __drId];
    [outProtocol writeFieldEnd];
  }
  if (__drName_isset) {
    if (__drName != nil) {
      [outProtocol writeFieldBeginWithName: @"drName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __drName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__deptName_isset) {
    if (__deptName != nil) {
      [outProtocol writeFieldBeginWithName: @"deptName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __deptName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__headImg_isset) {
    if (__headImg != nil) {
      [outProtocol writeFieldBeginWithName: @"headImg" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __headImg];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFConDocDto("];
  [ms appendString: @"drId:"];
  [ms appendFormat: @"%qi", __drId];
  [ms appendString: @",drName:"];
  [ms appendFormat: @"\"%@\"", __drName];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @",deptName:"];
  [ms appendFormat: @"\"%@\"", __deptName];
  [ms appendString: @",headImg:"];
  [ms appendFormat: @"\"%@\"", __headImg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFBannerDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBanId: (NSString *) banId banType: (int32_t) banType link: (NSString *) link funcCode: (NSString *) funcCode image: (NSString *) image bizId: (NSString *) bizId
{
  self = [super init];
  __banId = [banId retain_stub];
  __banId_isset = YES;
  __banType = banType;
  __banType_isset = YES;
  __link = [link retain_stub];
  __link_isset = YES;
  __funcCode = [funcCode retain_stub];
  __funcCode_isset = YES;
  __image = [image retain_stub];
  __image_isset = YES;
  __bizId = [bizId retain_stub];
  __bizId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"banId"])
  {
    __banId = [[decoder decodeObjectForKey: @"banId"] retain_stub];
    __banId_isset = YES;
  }
  if ([decoder containsValueForKey: @"banType"])
  {
    __banType = [decoder decodeInt32ForKey: @"banType"];
    __banType_isset = YES;
  }
  if ([decoder containsValueForKey: @"link"])
  {
    __link = [[decoder decodeObjectForKey: @"link"] retain_stub];
    __link_isset = YES;
  }
  if ([decoder containsValueForKey: @"funcCode"])
  {
    __funcCode = [[decoder decodeObjectForKey: @"funcCode"] retain_stub];
    __funcCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"image"])
  {
    __image = [[decoder decodeObjectForKey: @"image"] retain_stub];
    __image_isset = YES;
  }
  if ([decoder containsValueForKey: @"bizId"])
  {
    __bizId = [[decoder decodeObjectForKey: @"bizId"] retain_stub];
    __bizId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__banId_isset)
  {
    [encoder encodeObject: __banId forKey: @"banId"];
  }
  if (__banType_isset)
  {
    [encoder encodeInt32: __banType forKey: @"banType"];
  }
  if (__link_isset)
  {
    [encoder encodeObject: __link forKey: @"link"];
  }
  if (__funcCode_isset)
  {
    [encoder encodeObject: __funcCode forKey: @"funcCode"];
  }
  if (__image_isset)
  {
    [encoder encodeObject: __image forKey: @"image"];
  }
  if (__bizId_isset)
  {
    [encoder encodeObject: __bizId forKey: @"bizId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __banId_isset ? 2654435761 : 0;
  if (__banId_isset)
  {
    hash = (hash * 31) ^ [__banId hash];
  }
  hash = (hash * 31) ^ __banType_isset ? 2654435761 : 0;
  if (__banType_isset)
  {
    hash = (hash * 31) ^ [@(__banType) hash];
  }
  hash = (hash * 31) ^ __link_isset ? 2654435761 : 0;
  if (__link_isset)
  {
    hash = (hash * 31) ^ [__link hash];
  }
  hash = (hash * 31) ^ __funcCode_isset ? 2654435761 : 0;
  if (__funcCode_isset)
  {
    hash = (hash * 31) ^ [__funcCode hash];
  }
  hash = (hash * 31) ^ __image_isset ? 2654435761 : 0;
  if (__image_isset)
  {
    hash = (hash * 31) ^ [__image hash];
  }
  hash = (hash * 31) ^ __bizId_isset ? 2654435761 : 0;
  if (__bizId_isset)
  {
    hash = (hash * 31) ^ [__bizId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFBannerDto class]]) {
    return NO;
  }
  NXTFBannerDto *other = (NXTFBannerDto *)anObject;
  if ((__banId_isset != other->__banId_isset) ||
      (__banId_isset && ((__banId || other->__banId) && ![__banId isEqual:other->__banId]))) {
    return NO;
  }
  if ((__banType_isset != other->__banType_isset) ||
      (__banType_isset && (__banType != other->__banType))) {
    return NO;
  }
  if ((__link_isset != other->__link_isset) ||
      (__link_isset && ((__link || other->__link) && ![__link isEqual:other->__link]))) {
    return NO;
  }
  if ((__funcCode_isset != other->__funcCode_isset) ||
      (__funcCode_isset && ((__funcCode || other->__funcCode) && ![__funcCode isEqual:other->__funcCode]))) {
    return NO;
  }
  if ((__image_isset != other->__image_isset) ||
      (__image_isset && ((__image || other->__image) && ![__image isEqual:other->__image]))) {
    return NO;
  }
  if ((__bizId_isset != other->__bizId_isset) ||
      (__bizId_isset && ((__bizId || other->__bizId) && ![__bizId isEqual:other->__bizId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__banId release_stub];
  [__link release_stub];
  [__funcCode release_stub];
  [__image release_stub];
  [__bizId release_stub];
  [super dealloc_stub];
}

- (NSString *) banId {
  return [[__banId retain_stub] autorelease_stub];
}

- (void) setBanId: (NSString *) banId {
  [banId retain_stub];
  [__banId release_stub];
  __banId = banId;
  __banId_isset = YES;
}

- (BOOL) banIdIsSet {
  return __banId_isset;
}

- (void) unsetBanId {
  [__banId release_stub];
  __banId = nil;
  __banId_isset = NO;
}

- (int32_t) banType {
  return __banType;
}

- (void) setBanType: (int32_t) banType {
  __banType = banType;
  __banType_isset = YES;
}

- (BOOL) banTypeIsSet {
  return __banType_isset;
}

- (void) unsetBanType {
  __banType_isset = NO;
}

- (NSString *) link {
  return [[__link retain_stub] autorelease_stub];
}

- (void) setLink: (NSString *) link {
  [link retain_stub];
  [__link release_stub];
  __link = link;
  __link_isset = YES;
}

- (BOOL) linkIsSet {
  return __link_isset;
}

- (void) unsetLink {
  [__link release_stub];
  __link = nil;
  __link_isset = NO;
}

- (NSString *) funcCode {
  return [[__funcCode retain_stub] autorelease_stub];
}

- (void) setFuncCode: (NSString *) funcCode {
  [funcCode retain_stub];
  [__funcCode release_stub];
  __funcCode = funcCode;
  __funcCode_isset = YES;
}

- (BOOL) funcCodeIsSet {
  return __funcCode_isset;
}

- (void) unsetFuncCode {
  [__funcCode release_stub];
  __funcCode = nil;
  __funcCode_isset = NO;
}

- (NSString *) image {
  return [[__image retain_stub] autorelease_stub];
}

- (void) setImage: (NSString *) image {
  [image retain_stub];
  [__image release_stub];
  __image = image;
  __image_isset = YES;
}

- (BOOL) imageIsSet {
  return __image_isset;
}

- (void) unsetImage {
  [__image release_stub];
  __image = nil;
  __image_isset = NO;
}

- (NSString *) bizId {
  return [[__bizId retain_stub] autorelease_stub];
}

- (void) setBizId: (NSString *) bizId {
  [bizId retain_stub];
  [__bizId release_stub];
  __bizId = bizId;
  __bizId_isset = YES;
}

- (BOOL) bizIdIsSet {
  return __bizId_isset;
}

- (void) unsetBizId {
  [__bizId release_stub];
  __bizId = nil;
  __bizId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBanId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBanType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLink: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFuncCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBizId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BannerDto"];
  if (__banId_isset) {
    if (__banId != nil) {
      [outProtocol writeFieldBeginWithName: @"banId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __banId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__banType_isset) {
    [outProtocol writeFieldBeginWithName: @"banType" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __banType];
    [outProtocol writeFieldEnd];
  }
  if (__link_isset) {
    if (__link != nil) {
      [outProtocol writeFieldBeginWithName: @"link" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __link];
      [outProtocol writeFieldEnd];
    }
  }
  if (__funcCode_isset) {
    if (__funcCode != nil) {
      [outProtocol writeFieldBeginWithName: @"funcCode" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __funcCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__image_isset) {
    if (__image != nil) {
      [outProtocol writeFieldBeginWithName: @"image" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __image];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bizId_isset) {
    if (__bizId != nil) {
      [outProtocol writeFieldBeginWithName: @"bizId" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __bizId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFBannerDto("];
  [ms appendString: @"banId:"];
  [ms appendFormat: @"\"%@\"", __banId];
  [ms appendString: @",banType:"];
  [ms appendFormat: @"%i", __banType];
  [ms appendString: @",link:"];
  [ms appendFormat: @"\"%@\"", __link];
  [ms appendString: @",funcCode:"];
  [ms appendFormat: @"\"%@\"", __funcCode];
  [ms appendString: @",image:"];
  [ms appendFormat: @"\"%@\"", __image];
  [ms appendString: @",bizId:"];
  [ms appendFormat: @"\"%@\"", __bizId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFConsultationDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDocName: (NSString *) docName docId: (NSString *) docId patientId: (int64_t) patientId serviceType: (int32_t) serviceType tImId: (NSString *) tImId roomId: (int32_t) roomId consultTime: (NSString *) consultTime fee: (NSString *) fee deptName: (NSString *) deptName patientName: (NSString *) patientName patientHead: (NSString *) patientHead gender: (int32_t) gender status: (int32_t) status consultationId: (NSString *) consultationId evalStatus: (int32_t) evalStatus drId: (NSString *) drId drTImId: (NSString *) drTImId
{
  self = [super init];
  __docName = [docName retain_stub];
  __docName_isset = YES;
  __docId = [docId retain_stub];
  __docId_isset = YES;
  __patientId = patientId;
  __patientId_isset = YES;
  __serviceType = serviceType;
  __serviceType_isset = YES;
  __tImId = [tImId retain_stub];
  __tImId_isset = YES;
  __roomId = roomId;
  __roomId_isset = YES;
  __consultTime = [consultTime retain_stub];
  __consultTime_isset = YES;
  __fee = [fee retain_stub];
  __fee_isset = YES;
  __deptName = [deptName retain_stub];
  __deptName_isset = YES;
  __patientName = [patientName retain_stub];
  __patientName_isset = YES;
  __patientHead = [patientHead retain_stub];
  __patientHead_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __status = status;
  __status_isset = YES;
  __consultationId = [consultationId retain_stub];
  __consultationId_isset = YES;
  __evalStatus = evalStatus;
  __evalStatus_isset = YES;
  __drId = [drId retain_stub];
  __drId_isset = YES;
  __drTImId = [drTImId retain_stub];
  __drTImId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"docName"])
  {
    __docName = [[decoder decodeObjectForKey: @"docName"] retain_stub];
    __docName_isset = YES;
  }
  if ([decoder containsValueForKey: @"docId"])
  {
    __docId = [[decoder decodeObjectForKey: @"docId"] retain_stub];
    __docId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [decoder decodeInt64ForKey: @"patientId"];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceType"])
  {
    __serviceType = [decoder decodeInt32ForKey: @"serviceType"];
    __serviceType_isset = YES;
  }
  if ([decoder containsValueForKey: @"tImId"])
  {
    __tImId = [[decoder decodeObjectForKey: @"tImId"] retain_stub];
    __tImId_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomId"])
  {
    __roomId = [decoder decodeInt32ForKey: @"roomId"];
    __roomId_isset = YES;
  }
  if ([decoder containsValueForKey: @"consultTime"])
  {
    __consultTime = [[decoder decodeObjectForKey: @"consultTime"] retain_stub];
    __consultTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"fee"])
  {
    __fee = [[decoder decodeObjectForKey: @"fee"] retain_stub];
    __fee_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptName"])
  {
    __deptName = [[decoder decodeObjectForKey: @"deptName"] retain_stub];
    __deptName_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientName"])
  {
    __patientName = [[decoder decodeObjectForKey: @"patientName"] retain_stub];
    __patientName_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientHead"])
  {
    __patientHead = [[decoder decodeObjectForKey: @"patientHead"] retain_stub];
    __patientHead_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeInt32ForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeInt32ForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"consultationId"])
  {
    __consultationId = [[decoder decodeObjectForKey: @"consultationId"] retain_stub];
    __consultationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"evalStatus"])
  {
    __evalStatus = [decoder decodeInt32ForKey: @"evalStatus"];
    __evalStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"drId"])
  {
    __drId = [[decoder decodeObjectForKey: @"drId"] retain_stub];
    __drId_isset = YES;
  }
  if ([decoder containsValueForKey: @"drTImId"])
  {
    __drTImId = [[decoder decodeObjectForKey: @"drTImId"] retain_stub];
    __drTImId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__docName_isset)
  {
    [encoder encodeObject: __docName forKey: @"docName"];
  }
  if (__docId_isset)
  {
    [encoder encodeObject: __docId forKey: @"docId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeInt64: __patientId forKey: @"patientId"];
  }
  if (__serviceType_isset)
  {
    [encoder encodeInt32: __serviceType forKey: @"serviceType"];
  }
  if (__tImId_isset)
  {
    [encoder encodeObject: __tImId forKey: @"tImId"];
  }
  if (__roomId_isset)
  {
    [encoder encodeInt32: __roomId forKey: @"roomId"];
  }
  if (__consultTime_isset)
  {
    [encoder encodeObject: __consultTime forKey: @"consultTime"];
  }
  if (__fee_isset)
  {
    [encoder encodeObject: __fee forKey: @"fee"];
  }
  if (__deptName_isset)
  {
    [encoder encodeObject: __deptName forKey: @"deptName"];
  }
  if (__patientName_isset)
  {
    [encoder encodeObject: __patientName forKey: @"patientName"];
  }
  if (__patientHead_isset)
  {
    [encoder encodeObject: __patientHead forKey: @"patientHead"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt32: __gender forKey: @"gender"];
  }
  if (__status_isset)
  {
    [encoder encodeInt32: __status forKey: @"status"];
  }
  if (__consultationId_isset)
  {
    [encoder encodeObject: __consultationId forKey: @"consultationId"];
  }
  if (__evalStatus_isset)
  {
    [encoder encodeInt32: __evalStatus forKey: @"evalStatus"];
  }
  if (__drId_isset)
  {
    [encoder encodeObject: __drId forKey: @"drId"];
  }
  if (__drTImId_isset)
  {
    [encoder encodeObject: __drTImId forKey: @"drTImId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __docName_isset ? 2654435761 : 0;
  if (__docName_isset)
  {
    hash = (hash * 31) ^ [__docName hash];
  }
  hash = (hash * 31) ^ __docId_isset ? 2654435761 : 0;
  if (__docId_isset)
  {
    hash = (hash * 31) ^ [__docId hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [@(__patientId) hash];
  }
  hash = (hash * 31) ^ __serviceType_isset ? 2654435761 : 0;
  if (__serviceType_isset)
  {
    hash = (hash * 31) ^ [@(__serviceType) hash];
  }
  hash = (hash * 31) ^ __tImId_isset ? 2654435761 : 0;
  if (__tImId_isset)
  {
    hash = (hash * 31) ^ [__tImId hash];
  }
  hash = (hash * 31) ^ __roomId_isset ? 2654435761 : 0;
  if (__roomId_isset)
  {
    hash = (hash * 31) ^ [@(__roomId) hash];
  }
  hash = (hash * 31) ^ __consultTime_isset ? 2654435761 : 0;
  if (__consultTime_isset)
  {
    hash = (hash * 31) ^ [__consultTime hash];
  }
  hash = (hash * 31) ^ __fee_isset ? 2654435761 : 0;
  if (__fee_isset)
  {
    hash = (hash * 31) ^ [__fee hash];
  }
  hash = (hash * 31) ^ __deptName_isset ? 2654435761 : 0;
  if (__deptName_isset)
  {
    hash = (hash * 31) ^ [__deptName hash];
  }
  hash = (hash * 31) ^ __patientName_isset ? 2654435761 : 0;
  if (__patientName_isset)
  {
    hash = (hash * 31) ^ [__patientName hash];
  }
  hash = (hash * 31) ^ __patientHead_isset ? 2654435761 : 0;
  if (__patientHead_isset)
  {
    hash = (hash * 31) ^ [__patientHead hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [@(__gender) hash];
  }
  hash = (hash * 31) ^ __status_isset ? 2654435761 : 0;
  if (__status_isset)
  {
    hash = (hash * 31) ^ [@(__status) hash];
  }
  hash = (hash * 31) ^ __consultationId_isset ? 2654435761 : 0;
  if (__consultationId_isset)
  {
    hash = (hash * 31) ^ [__consultationId hash];
  }
  hash = (hash * 31) ^ __evalStatus_isset ? 2654435761 : 0;
  if (__evalStatus_isset)
  {
    hash = (hash * 31) ^ [@(__evalStatus) hash];
  }
  hash = (hash * 31) ^ __drId_isset ? 2654435761 : 0;
  if (__drId_isset)
  {
    hash = (hash * 31) ^ [__drId hash];
  }
  hash = (hash * 31) ^ __drTImId_isset ? 2654435761 : 0;
  if (__drTImId_isset)
  {
    hash = (hash * 31) ^ [__drTImId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFConsultationDto class]]) {
    return NO;
  }
  NXTFConsultationDto *other = (NXTFConsultationDto *)anObject;
  if ((__docName_isset != other->__docName_isset) ||
      (__docName_isset && ((__docName || other->__docName) && ![__docName isEqual:other->__docName]))) {
    return NO;
  }
  if ((__docId_isset != other->__docId_isset) ||
      (__docId_isset && ((__docId || other->__docId) && ![__docId isEqual:other->__docId]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && (__patientId != other->__patientId))) {
    return NO;
  }
  if ((__serviceType_isset != other->__serviceType_isset) ||
      (__serviceType_isset && (__serviceType != other->__serviceType))) {
    return NO;
  }
  if ((__tImId_isset != other->__tImId_isset) ||
      (__tImId_isset && ((__tImId || other->__tImId) && ![__tImId isEqual:other->__tImId]))) {
    return NO;
  }
  if ((__roomId_isset != other->__roomId_isset) ||
      (__roomId_isset && (__roomId != other->__roomId))) {
    return NO;
  }
  if ((__consultTime_isset != other->__consultTime_isset) ||
      (__consultTime_isset && ((__consultTime || other->__consultTime) && ![__consultTime isEqual:other->__consultTime]))) {
    return NO;
  }
  if ((__fee_isset != other->__fee_isset) ||
      (__fee_isset && ((__fee || other->__fee) && ![__fee isEqual:other->__fee]))) {
    return NO;
  }
  if ((__deptName_isset != other->__deptName_isset) ||
      (__deptName_isset && ((__deptName || other->__deptName) && ![__deptName isEqual:other->__deptName]))) {
    return NO;
  }
  if ((__patientName_isset != other->__patientName_isset) ||
      (__patientName_isset && ((__patientName || other->__patientName) && ![__patientName isEqual:other->__patientName]))) {
    return NO;
  }
  if ((__patientHead_isset != other->__patientHead_isset) ||
      (__patientHead_isset && ((__patientHead || other->__patientHead) && ![__patientHead isEqual:other->__patientHead]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && (__gender != other->__gender))) {
    return NO;
  }
  if ((__status_isset != other->__status_isset) ||
      (__status_isset && (__status != other->__status))) {
    return NO;
  }
  if ((__consultationId_isset != other->__consultationId_isset) ||
      (__consultationId_isset && ((__consultationId || other->__consultationId) && ![__consultationId isEqual:other->__consultationId]))) {
    return NO;
  }
  if ((__evalStatus_isset != other->__evalStatus_isset) ||
      (__evalStatus_isset && (__evalStatus != other->__evalStatus))) {
    return NO;
  }
  if ((__drId_isset != other->__drId_isset) ||
      (__drId_isset && ((__drId || other->__drId) && ![__drId isEqual:other->__drId]))) {
    return NO;
  }
  if ((__drTImId_isset != other->__drTImId_isset) ||
      (__drTImId_isset && ((__drTImId || other->__drTImId) && ![__drTImId isEqual:other->__drTImId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__docName release_stub];
  [__docId release_stub];
  [__tImId release_stub];
  [__consultTime release_stub];
  [__fee release_stub];
  [__deptName release_stub];
  [__patientName release_stub];
  [__patientHead release_stub];
  [__consultationId release_stub];
  [__drId release_stub];
  [__drTImId release_stub];
  [super dealloc_stub];
}

- (NSString *) docName {
  return [[__docName retain_stub] autorelease_stub];
}

- (void) setDocName: (NSString *) docName {
  [docName retain_stub];
  [__docName release_stub];
  __docName = docName;
  __docName_isset = YES;
}

- (BOOL) docNameIsSet {
  return __docName_isset;
}

- (void) unsetDocName {
  [__docName release_stub];
  __docName = nil;
  __docName_isset = NO;
}

- (NSString *) docId {
  return [[__docId retain_stub] autorelease_stub];
}

- (void) setDocId: (NSString *) docId {
  [docId retain_stub];
  [__docId release_stub];
  __docId = docId;
  __docId_isset = YES;
}

- (BOOL) docIdIsSet {
  return __docId_isset;
}

- (void) unsetDocId {
  [__docId release_stub];
  __docId = nil;
  __docId_isset = NO;
}

- (int64_t) patientId {
  return __patientId;
}

- (void) setPatientId: (int64_t) patientId {
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  __patientId_isset = NO;
}

- (int32_t) serviceType {
  return __serviceType;
}

- (void) setServiceType: (int32_t) serviceType {
  __serviceType = serviceType;
  __serviceType_isset = YES;
}

- (BOOL) serviceTypeIsSet {
  return __serviceType_isset;
}

- (void) unsetServiceType {
  __serviceType_isset = NO;
}

- (NSString *) tImId {
  return [[__tImId retain_stub] autorelease_stub];
}

- (void) setTImId: (NSString *) tImId {
  [tImId retain_stub];
  [__tImId release_stub];
  __tImId = tImId;
  __tImId_isset = YES;
}

- (BOOL) tImIdIsSet {
  return __tImId_isset;
}

- (void) unsetTImId {
  [__tImId release_stub];
  __tImId = nil;
  __tImId_isset = NO;
}

- (int32_t) roomId {
  return __roomId;
}

- (void) setRoomId: (int32_t) roomId {
  __roomId = roomId;
  __roomId_isset = YES;
}

- (BOOL) roomIdIsSet {
  return __roomId_isset;
}

- (void) unsetRoomId {
  __roomId_isset = NO;
}

- (NSString *) consultTime {
  return [[__consultTime retain_stub] autorelease_stub];
}

- (void) setConsultTime: (NSString *) consultTime {
  [consultTime retain_stub];
  [__consultTime release_stub];
  __consultTime = consultTime;
  __consultTime_isset = YES;
}

- (BOOL) consultTimeIsSet {
  return __consultTime_isset;
}

- (void) unsetConsultTime {
  [__consultTime release_stub];
  __consultTime = nil;
  __consultTime_isset = NO;
}

- (NSString *) fee {
  return [[__fee retain_stub] autorelease_stub];
}

- (void) setFee: (NSString *) fee {
  [fee retain_stub];
  [__fee release_stub];
  __fee = fee;
  __fee_isset = YES;
}

- (BOOL) feeIsSet {
  return __fee_isset;
}

- (void) unsetFee {
  [__fee release_stub];
  __fee = nil;
  __fee_isset = NO;
}

- (NSString *) deptName {
  return [[__deptName retain_stub] autorelease_stub];
}

- (void) setDeptName: (NSString *) deptName {
  [deptName retain_stub];
  [__deptName release_stub];
  __deptName = deptName;
  __deptName_isset = YES;
}

- (BOOL) deptNameIsSet {
  return __deptName_isset;
}

- (void) unsetDeptName {
  [__deptName release_stub];
  __deptName = nil;
  __deptName_isset = NO;
}

- (NSString *) patientName {
  return [[__patientName retain_stub] autorelease_stub];
}

- (void) setPatientName: (NSString *) patientName {
  [patientName retain_stub];
  [__patientName release_stub];
  __patientName = patientName;
  __patientName_isset = YES;
}

- (BOOL) patientNameIsSet {
  return __patientName_isset;
}

- (void) unsetPatientName {
  [__patientName release_stub];
  __patientName = nil;
  __patientName_isset = NO;
}

- (NSString *) patientHead {
  return [[__patientHead retain_stub] autorelease_stub];
}

- (void) setPatientHead: (NSString *) patientHead {
  [patientHead retain_stub];
  [__patientHead release_stub];
  __patientHead = patientHead;
  __patientHead_isset = YES;
}

- (BOOL) patientHeadIsSet {
  return __patientHead_isset;
}

- (void) unsetPatientHead {
  [__patientHead release_stub];
  __patientHead = nil;
  __patientHead_isset = NO;
}

- (int32_t) gender {
  return __gender;
}

- (void) setGender: (int32_t) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (int32_t) status {
  return __status;
}

- (void) setStatus: (int32_t) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (NSString *) consultationId {
  return [[__consultationId retain_stub] autorelease_stub];
}

- (void) setConsultationId: (NSString *) consultationId {
  [consultationId retain_stub];
  [__consultationId release_stub];
  __consultationId = consultationId;
  __consultationId_isset = YES;
}

- (BOOL) consultationIdIsSet {
  return __consultationId_isset;
}

- (void) unsetConsultationId {
  [__consultationId release_stub];
  __consultationId = nil;
  __consultationId_isset = NO;
}

- (int32_t) evalStatus {
  return __evalStatus;
}

- (void) setEvalStatus: (int32_t) evalStatus {
  __evalStatus = evalStatus;
  __evalStatus_isset = YES;
}

- (BOOL) evalStatusIsSet {
  return __evalStatus_isset;
}

- (void) unsetEvalStatus {
  __evalStatus_isset = NO;
}

- (NSString *) drId {
  return [[__drId retain_stub] autorelease_stub];
}

- (void) setDrId: (NSString *) drId {
  [drId retain_stub];
  [__drId release_stub];
  __drId = drId;
  __drId_isset = YES;
}

- (BOOL) drIdIsSet {
  return __drId_isset;
}

- (void) unsetDrId {
  [__drId release_stub];
  __drId = nil;
  __drId_isset = NO;
}

- (NSString *) drTImId {
  return [[__drTImId retain_stub] autorelease_stub];
}

- (void) setDrTImId: (NSString *) drTImId {
  [drTImId retain_stub];
  [__drTImId release_stub];
  __drTImId = drTImId;
  __drTImId_isset = YES;
}

- (BOOL) drTImIdIsSet {
  return __drTImId_isset;
}

- (void) unsetDrTImId {
  [__drTImId release_stub];
  __drTImId = nil;
  __drTImId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDocName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDocId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setServiceType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTImId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRoomId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConsultTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientHead: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConsultationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setEvalStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrTImId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ConsultationDto"];
  if (__docName_isset) {
    if (__docName != nil) {
      [outProtocol writeFieldBeginWithName: @"docName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __docName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__docId_isset) {
    if (__docId != nil) {
      [outProtocol writeFieldBeginWithName: @"docId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __docId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    [outProtocol writeFieldBeginWithName: @"patientId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __patientId];
    [outProtocol writeFieldEnd];
  }
  if (__serviceType_isset) {
    [outProtocol writeFieldBeginWithName: @"serviceType" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __serviceType];
    [outProtocol writeFieldEnd];
  }
  if (__tImId_isset) {
    if (__tImId != nil) {
      [outProtocol writeFieldBeginWithName: @"tImId" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __tImId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__roomId_isset) {
    [outProtocol writeFieldBeginWithName: @"roomId" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __roomId];
    [outProtocol writeFieldEnd];
  }
  if (__consultTime_isset) {
    if (__consultTime != nil) {
      [outProtocol writeFieldBeginWithName: @"consultTime" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __consultTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fee_isset) {
    if (__fee != nil) {
      [outProtocol writeFieldBeginWithName: @"fee" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __fee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptName_isset) {
    if (__deptName != nil) {
      [outProtocol writeFieldBeginWithName: @"deptName" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __deptName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientName_isset) {
    if (__patientName != nil) {
      [outProtocol writeFieldBeginWithName: @"patientName" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __patientName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientHead_isset) {
    if (__patientHead != nil) {
      [outProtocol writeFieldBeginWithName: @"patientHead" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __patientHead];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 13];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__consultationId_isset) {
    if (__consultationId != nil) {
      [outProtocol writeFieldBeginWithName: @"consultationId" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __consultationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__evalStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"evalStatus" type: TType_I32 fieldID: 15];
    [outProtocol writeI32: __evalStatus];
    [outProtocol writeFieldEnd];
  }
  if (__drId_isset) {
    if (__drId != nil) {
      [outProtocol writeFieldBeginWithName: @"drId" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __drId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drTImId_isset) {
    if (__drTImId != nil) {
      [outProtocol writeFieldBeginWithName: @"drTImId" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __drTImId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFConsultationDto("];
  [ms appendString: @"docName:"];
  [ms appendFormat: @"\"%@\"", __docName];
  [ms appendString: @",docId:"];
  [ms appendFormat: @"\"%@\"", __docId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"%qi", __patientId];
  [ms appendString: @",serviceType:"];
  [ms appendFormat: @"%i", __serviceType];
  [ms appendString: @",tImId:"];
  [ms appendFormat: @"\"%@\"", __tImId];
  [ms appendString: @",roomId:"];
  [ms appendFormat: @"%i", __roomId];
  [ms appendString: @",consultTime:"];
  [ms appendFormat: @"\"%@\"", __consultTime];
  [ms appendString: @",fee:"];
  [ms appendFormat: @"\"%@\"", __fee];
  [ms appendString: @",deptName:"];
  [ms appendFormat: @"\"%@\"", __deptName];
  [ms appendString: @",patientName:"];
  [ms appendFormat: @"\"%@\"", __patientName];
  [ms appendString: @",patientHead:"];
  [ms appendFormat: @"\"%@\"", __patientHead];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",consultationId:"];
  [ms appendFormat: @"\"%@\"", __consultationId];
  [ms appendString: @",evalStatus:"];
  [ms appendFormat: @"%i", __evalStatus];
  [ms appendString: @",drId:"];
  [ms appendFormat: @"\"%@\"", __drId];
  [ms appendString: @",drTImId:"];
  [ms appendFormat: @"\"%@\"", __drTImId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFVisitRecordDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDocName: (NSString *) docName visitType: (int32_t) visitType visitDate: (NSString *) visitDate visitDateNext: (NSString *) visitDateNext visitUnit: (NSString *) visitUnit chid: (NSString *) chid hospId: (NSString *) hospId
{
  self = [super init];
  __docName = [docName retain_stub];
  __docName_isset = YES;
  __visitType = visitType;
  __visitType_isset = YES;
  __visitDate = [visitDate retain_stub];
  __visitDate_isset = YES;
  __visitDateNext = [visitDateNext retain_stub];
  __visitDateNext_isset = YES;
  __visitUnit = [visitUnit retain_stub];
  __visitUnit_isset = YES;
  __chid = [chid retain_stub];
  __chid_isset = YES;
  __hospId = [hospId retain_stub];
  __hospId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"docName"])
  {
    __docName = [[decoder decodeObjectForKey: @"docName"] retain_stub];
    __docName_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitType"])
  {
    __visitType = [decoder decodeInt32ForKey: @"visitType"];
    __visitType_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitDate"])
  {
    __visitDate = [[decoder decodeObjectForKey: @"visitDate"] retain_stub];
    __visitDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitDateNext"])
  {
    __visitDateNext = [[decoder decodeObjectForKey: @"visitDateNext"] retain_stub];
    __visitDateNext_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitUnit"])
  {
    __visitUnit = [[decoder decodeObjectForKey: @"visitUnit"] retain_stub];
    __visitUnit_isset = YES;
  }
  if ([decoder containsValueForKey: @"chid"])
  {
    __chid = [[decoder decodeObjectForKey: @"chid"] retain_stub];
    __chid_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [[decoder decodeObjectForKey: @"hospId"] retain_stub];
    __hospId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__docName_isset)
  {
    [encoder encodeObject: __docName forKey: @"docName"];
  }
  if (__visitType_isset)
  {
    [encoder encodeInt32: __visitType forKey: @"visitType"];
  }
  if (__visitDate_isset)
  {
    [encoder encodeObject: __visitDate forKey: @"visitDate"];
  }
  if (__visitDateNext_isset)
  {
    [encoder encodeObject: __visitDateNext forKey: @"visitDateNext"];
  }
  if (__visitUnit_isset)
  {
    [encoder encodeObject: __visitUnit forKey: @"visitUnit"];
  }
  if (__chid_isset)
  {
    [encoder encodeObject: __chid forKey: @"chid"];
  }
  if (__hospId_isset)
  {
    [encoder encodeObject: __hospId forKey: @"hospId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __docName_isset ? 2654435761 : 0;
  if (__docName_isset)
  {
    hash = (hash * 31) ^ [__docName hash];
  }
  hash = (hash * 31) ^ __visitType_isset ? 2654435761 : 0;
  if (__visitType_isset)
  {
    hash = (hash * 31) ^ [@(__visitType) hash];
  }
  hash = (hash * 31) ^ __visitDate_isset ? 2654435761 : 0;
  if (__visitDate_isset)
  {
    hash = (hash * 31) ^ [__visitDate hash];
  }
  hash = (hash * 31) ^ __visitDateNext_isset ? 2654435761 : 0;
  if (__visitDateNext_isset)
  {
    hash = (hash * 31) ^ [__visitDateNext hash];
  }
  hash = (hash * 31) ^ __visitUnit_isset ? 2654435761 : 0;
  if (__visitUnit_isset)
  {
    hash = (hash * 31) ^ [__visitUnit hash];
  }
  hash = (hash * 31) ^ __chid_isset ? 2654435761 : 0;
  if (__chid_isset)
  {
    hash = (hash * 31) ^ [__chid hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [__hospId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFVisitRecordDto class]]) {
    return NO;
  }
  NXTFVisitRecordDto *other = (NXTFVisitRecordDto *)anObject;
  if ((__docName_isset != other->__docName_isset) ||
      (__docName_isset && ((__docName || other->__docName) && ![__docName isEqual:other->__docName]))) {
    return NO;
  }
  if ((__visitType_isset != other->__visitType_isset) ||
      (__visitType_isset && (__visitType != other->__visitType))) {
    return NO;
  }
  if ((__visitDate_isset != other->__visitDate_isset) ||
      (__visitDate_isset && ((__visitDate || other->__visitDate) && ![__visitDate isEqual:other->__visitDate]))) {
    return NO;
  }
  if ((__visitDateNext_isset != other->__visitDateNext_isset) ||
      (__visitDateNext_isset && ((__visitDateNext || other->__visitDateNext) && ![__visitDateNext isEqual:other->__visitDateNext]))) {
    return NO;
  }
  if ((__visitUnit_isset != other->__visitUnit_isset) ||
      (__visitUnit_isset && ((__visitUnit || other->__visitUnit) && ![__visitUnit isEqual:other->__visitUnit]))) {
    return NO;
  }
  if ((__chid_isset != other->__chid_isset) ||
      (__chid_isset && ((__chid || other->__chid) && ![__chid isEqual:other->__chid]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && ((__hospId || other->__hospId) && ![__hospId isEqual:other->__hospId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__docName release_stub];
  [__visitDate release_stub];
  [__visitDateNext release_stub];
  [__visitUnit release_stub];
  [__chid release_stub];
  [__hospId release_stub];
  [super dealloc_stub];
}

- (NSString *) docName {
  return [[__docName retain_stub] autorelease_stub];
}

- (void) setDocName: (NSString *) docName {
  [docName retain_stub];
  [__docName release_stub];
  __docName = docName;
  __docName_isset = YES;
}

- (BOOL) docNameIsSet {
  return __docName_isset;
}

- (void) unsetDocName {
  [__docName release_stub];
  __docName = nil;
  __docName_isset = NO;
}

- (int32_t) visitType {
  return __visitType;
}

- (void) setVisitType: (int32_t) visitType {
  __visitType = visitType;
  __visitType_isset = YES;
}

- (BOOL) visitTypeIsSet {
  return __visitType_isset;
}

- (void) unsetVisitType {
  __visitType_isset = NO;
}

- (NSString *) visitDate {
  return [[__visitDate retain_stub] autorelease_stub];
}

- (void) setVisitDate: (NSString *) visitDate {
  [visitDate retain_stub];
  [__visitDate release_stub];
  __visitDate = visitDate;
  __visitDate_isset = YES;
}

- (BOOL) visitDateIsSet {
  return __visitDate_isset;
}

- (void) unsetVisitDate {
  [__visitDate release_stub];
  __visitDate = nil;
  __visitDate_isset = NO;
}

- (NSString *) visitDateNext {
  return [[__visitDateNext retain_stub] autorelease_stub];
}

- (void) setVisitDateNext: (NSString *) visitDateNext {
  [visitDateNext retain_stub];
  [__visitDateNext release_stub];
  __visitDateNext = visitDateNext;
  __visitDateNext_isset = YES;
}

- (BOOL) visitDateNextIsSet {
  return __visitDateNext_isset;
}

- (void) unsetVisitDateNext {
  [__visitDateNext release_stub];
  __visitDateNext = nil;
  __visitDateNext_isset = NO;
}

- (NSString *) visitUnit {
  return [[__visitUnit retain_stub] autorelease_stub];
}

- (void) setVisitUnit: (NSString *) visitUnit {
  [visitUnit retain_stub];
  [__visitUnit release_stub];
  __visitUnit = visitUnit;
  __visitUnit_isset = YES;
}

- (BOOL) visitUnitIsSet {
  return __visitUnit_isset;
}

- (void) unsetVisitUnit {
  [__visitUnit release_stub];
  __visitUnit = nil;
  __visitUnit_isset = NO;
}

- (NSString *) chid {
  return [[__chid retain_stub] autorelease_stub];
}

- (void) setChid: (NSString *) chid {
  [chid retain_stub];
  [__chid release_stub];
  __chid = chid;
  __chid_isset = YES;
}

- (BOOL) chidIsSet {
  return __chid_isset;
}

- (void) unsetChid {
  [__chid release_stub];
  __chid = nil;
  __chid_isset = NO;
}

- (NSString *) hospId {
  return [[__hospId retain_stub] autorelease_stub];
}

- (void) setHospId: (NSString *) hospId {
  [hospId retain_stub];
  [__hospId release_stub];
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  [__hospId release_stub];
  __hospId = nil;
  __hospId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDocName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setVisitType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVisitDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVisitDateNext: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVisitUnit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setChid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VisitRecordDto"];
  if (__docName_isset) {
    if (__docName != nil) {
      [outProtocol writeFieldBeginWithName: @"docName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __docName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__visitType_isset) {
    [outProtocol writeFieldBeginWithName: @"visitType" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __visitType];
    [outProtocol writeFieldEnd];
  }
  if (__visitDate_isset) {
    if (__visitDate != nil) {
      [outProtocol writeFieldBeginWithName: @"visitDate" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __visitDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__visitDateNext_isset) {
    if (__visitDateNext != nil) {
      [outProtocol writeFieldBeginWithName: @"visitDateNext" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __visitDateNext];
      [outProtocol writeFieldEnd];
    }
  }
  if (__visitUnit_isset) {
    if (__visitUnit != nil) {
      [outProtocol writeFieldBeginWithName: @"visitUnit" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __visitUnit];
      [outProtocol writeFieldEnd];
    }
  }
  if (__chid_isset) {
    if (__chid != nil) {
      [outProtocol writeFieldBeginWithName: @"chid" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __chid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    if (__hospId != nil) {
      [outProtocol writeFieldBeginWithName: @"hospId" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __hospId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFVisitRecordDto("];
  [ms appendString: @"docName:"];
  [ms appendFormat: @"\"%@\"", __docName];
  [ms appendString: @",visitType:"];
  [ms appendFormat: @"%i", __visitType];
  [ms appendString: @",visitDate:"];
  [ms appendFormat: @"\"%@\"", __visitDate];
  [ms appendString: @",visitDateNext:"];
  [ms appendFormat: @"\"%@\"", __visitDateNext];
  [ms appendString: @",visitUnit:"];
  [ms appendFormat: @"\"%@\"", __visitUnit];
  [ms appendString: @",chid:"];
  [ms appendFormat: @"\"%@\"", __chid];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"\"%@\"", __hospId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFVisitDetailDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMedicineName: (NSString *) medicineName medicineMethod: (NSString *) medicineMethod medicineDosage: (NSString *) medicineDosage medicineUnit: (NSString *) medicineUnit remarks: (NSString *) remarks
{
  self = [super init];
  __medicineName = [medicineName retain_stub];
  __medicineName_isset = YES;
  __medicineMethod = [medicineMethod retain_stub];
  __medicineMethod_isset = YES;
  __medicineDosage = [medicineDosage retain_stub];
  __medicineDosage_isset = YES;
  __medicineUnit = [medicineUnit retain_stub];
  __medicineUnit_isset = YES;
  __remarks = [remarks retain_stub];
  __remarks_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"medicineName"])
  {
    __medicineName = [[decoder decodeObjectForKey: @"medicineName"] retain_stub];
    __medicineName_isset = YES;
  }
  if ([decoder containsValueForKey: @"medicineMethod"])
  {
    __medicineMethod = [[decoder decodeObjectForKey: @"medicineMethod"] retain_stub];
    __medicineMethod_isset = YES;
  }
  if ([decoder containsValueForKey: @"medicineDosage"])
  {
    __medicineDosage = [[decoder decodeObjectForKey: @"medicineDosage"] retain_stub];
    __medicineDosage_isset = YES;
  }
  if ([decoder containsValueForKey: @"medicineUnit"])
  {
    __medicineUnit = [[decoder decodeObjectForKey: @"medicineUnit"] retain_stub];
    __medicineUnit_isset = YES;
  }
  if ([decoder containsValueForKey: @"remarks"])
  {
    __remarks = [[decoder decodeObjectForKey: @"remarks"] retain_stub];
    __remarks_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__medicineName_isset)
  {
    [encoder encodeObject: __medicineName forKey: @"medicineName"];
  }
  if (__medicineMethod_isset)
  {
    [encoder encodeObject: __medicineMethod forKey: @"medicineMethod"];
  }
  if (__medicineDosage_isset)
  {
    [encoder encodeObject: __medicineDosage forKey: @"medicineDosage"];
  }
  if (__medicineUnit_isset)
  {
    [encoder encodeObject: __medicineUnit forKey: @"medicineUnit"];
  }
  if (__remarks_isset)
  {
    [encoder encodeObject: __remarks forKey: @"remarks"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __medicineName_isset ? 2654435761 : 0;
  if (__medicineName_isset)
  {
    hash = (hash * 31) ^ [__medicineName hash];
  }
  hash = (hash * 31) ^ __medicineMethod_isset ? 2654435761 : 0;
  if (__medicineMethod_isset)
  {
    hash = (hash * 31) ^ [__medicineMethod hash];
  }
  hash = (hash * 31) ^ __medicineDosage_isset ? 2654435761 : 0;
  if (__medicineDosage_isset)
  {
    hash = (hash * 31) ^ [__medicineDosage hash];
  }
  hash = (hash * 31) ^ __medicineUnit_isset ? 2654435761 : 0;
  if (__medicineUnit_isset)
  {
    hash = (hash * 31) ^ [__medicineUnit hash];
  }
  hash = (hash * 31) ^ __remarks_isset ? 2654435761 : 0;
  if (__remarks_isset)
  {
    hash = (hash * 31) ^ [__remarks hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFVisitDetailDto class]]) {
    return NO;
  }
  NXTFVisitDetailDto *other = (NXTFVisitDetailDto *)anObject;
  if ((__medicineName_isset != other->__medicineName_isset) ||
      (__medicineName_isset && ((__medicineName || other->__medicineName) && ![__medicineName isEqual:other->__medicineName]))) {
    return NO;
  }
  if ((__medicineMethod_isset != other->__medicineMethod_isset) ||
      (__medicineMethod_isset && ((__medicineMethod || other->__medicineMethod) && ![__medicineMethod isEqual:other->__medicineMethod]))) {
    return NO;
  }
  if ((__medicineDosage_isset != other->__medicineDosage_isset) ||
      (__medicineDosage_isset && ((__medicineDosage || other->__medicineDosage) && ![__medicineDosage isEqual:other->__medicineDosage]))) {
    return NO;
  }
  if ((__medicineUnit_isset != other->__medicineUnit_isset) ||
      (__medicineUnit_isset && ((__medicineUnit || other->__medicineUnit) && ![__medicineUnit isEqual:other->__medicineUnit]))) {
    return NO;
  }
  if ((__remarks_isset != other->__remarks_isset) ||
      (__remarks_isset && ((__remarks || other->__remarks) && ![__remarks isEqual:other->__remarks]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__medicineName release_stub];
  [__medicineMethod release_stub];
  [__medicineDosage release_stub];
  [__medicineUnit release_stub];
  [__remarks release_stub];
  [super dealloc_stub];
}

- (NSString *) medicineName {
  return [[__medicineName retain_stub] autorelease_stub];
}

- (void) setMedicineName: (NSString *) medicineName {
  [medicineName retain_stub];
  [__medicineName release_stub];
  __medicineName = medicineName;
  __medicineName_isset = YES;
}

- (BOOL) medicineNameIsSet {
  return __medicineName_isset;
}

- (void) unsetMedicineName {
  [__medicineName release_stub];
  __medicineName = nil;
  __medicineName_isset = NO;
}

- (NSString *) medicineMethod {
  return [[__medicineMethod retain_stub] autorelease_stub];
}

- (void) setMedicineMethod: (NSString *) medicineMethod {
  [medicineMethod retain_stub];
  [__medicineMethod release_stub];
  __medicineMethod = medicineMethod;
  __medicineMethod_isset = YES;
}

- (BOOL) medicineMethodIsSet {
  return __medicineMethod_isset;
}

- (void) unsetMedicineMethod {
  [__medicineMethod release_stub];
  __medicineMethod = nil;
  __medicineMethod_isset = NO;
}

- (NSString *) medicineDosage {
  return [[__medicineDosage retain_stub] autorelease_stub];
}

- (void) setMedicineDosage: (NSString *) medicineDosage {
  [medicineDosage retain_stub];
  [__medicineDosage release_stub];
  __medicineDosage = medicineDosage;
  __medicineDosage_isset = YES;
}

- (BOOL) medicineDosageIsSet {
  return __medicineDosage_isset;
}

- (void) unsetMedicineDosage {
  [__medicineDosage release_stub];
  __medicineDosage = nil;
  __medicineDosage_isset = NO;
}

- (NSString *) medicineUnit {
  return [[__medicineUnit retain_stub] autorelease_stub];
}

- (void) setMedicineUnit: (NSString *) medicineUnit {
  [medicineUnit retain_stub];
  [__medicineUnit release_stub];
  __medicineUnit = medicineUnit;
  __medicineUnit_isset = YES;
}

- (BOOL) medicineUnitIsSet {
  return __medicineUnit_isset;
}

- (void) unsetMedicineUnit {
  [__medicineUnit release_stub];
  __medicineUnit = nil;
  __medicineUnit_isset = NO;
}

- (NSString *) remarks {
  return [[__remarks retain_stub] autorelease_stub];
}

- (void) setRemarks: (NSString *) remarks {
  [remarks retain_stub];
  [__remarks release_stub];
  __remarks = remarks;
  __remarks_isset = YES;
}

- (BOOL) remarksIsSet {
  return __remarks_isset;
}

- (void) unsetRemarks {
  [__remarks release_stub];
  __remarks = nil;
  __remarks_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMedicineName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMedicineMethod: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMedicineDosage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMedicineUnit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemarks: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VisitDetailDto"];
  if (__medicineName_isset) {
    if (__medicineName != nil) {
      [outProtocol writeFieldBeginWithName: @"medicineName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __medicineName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__medicineMethod_isset) {
    if (__medicineMethod != nil) {
      [outProtocol writeFieldBeginWithName: @"medicineMethod" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __medicineMethod];
      [outProtocol writeFieldEnd];
    }
  }
  if (__medicineDosage_isset) {
    if (__medicineDosage != nil) {
      [outProtocol writeFieldBeginWithName: @"medicineDosage" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __medicineDosage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__medicineUnit_isset) {
    if (__medicineUnit != nil) {
      [outProtocol writeFieldBeginWithName: @"medicineUnit" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __medicineUnit];
      [outProtocol writeFieldEnd];
    }
  }
  if (__remarks_isset) {
    if (__remarks != nil) {
      [outProtocol writeFieldBeginWithName: @"remarks" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __remarks];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFVisitDetailDto("];
  [ms appendString: @"medicineName:"];
  [ms appendFormat: @"\"%@\"", __medicineName];
  [ms appendString: @",medicineMethod:"];
  [ms appendFormat: @"\"%@\"", __medicineMethod];
  [ms appendString: @",medicineDosage:"];
  [ms appendFormat: @"\"%@\"", __medicineDosage];
  [ms appendString: @",medicineUnit:"];
  [ms appendFormat: @"\"%@\"", __medicineUnit];
  [ms appendString: @",remarks:"];
  [ms appendFormat: @"\"%@\"", __remarks];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFHBVisitDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCode: (NSString *) code card: (NSString *) card lastFlag: (NSString *) lastFlag visitDate: (NSString *) visitDate visitTypeCode: (NSString *) visitTypeCode symptom: (NSMutableArray *) symptom symptomCode: (NSMutableArray *) symptomCode symptomOther: (NSString *) symptomOther diastolic: (int32_t) diastolic systolic: (int32_t) systolic height: (NSString *) height weight: (NSString *) weight weightAdv: (NSString *) weightAdv heartRate: (NSString *) heartRate signsOther: (NSString *) signsOther smoke: (int32_t) smoke smokeAdv: (int32_t) smokeAdv drink: (NSString *) drink drinkAdv: (NSString *) drinkAdv sportWeekly: (int32_t) sportWeekly sportEverytime: (int32_t) sportEverytime sportWeeklyAdv: (int32_t) sportWeeklyAdv sportEverytimeAdv: (int32_t) sportEverytimeAdv saltCode: (NSString *) saltCode saltAdvCode: (NSString *) saltAdvCode adjustmentCode: (NSString *) adjustmentCode atmedicalCode: (NSString *) atmedicalCode auxiliary: (NSString *) auxiliary atmedicationCode: (NSString *) atmedicationCode effectYNCode: (NSString *) effectYNCode effect: (NSString *) effect transOrgReason: (NSString *) transOrgReason transOrg: (NSString *) transOrg transDepartment: (NSString *) transDepartment managementYNCode: (NSString *) managementYNCode management: (NSString *) management visitDoctor: (NSString *) visitDoctor visitDoctorCode: (NSString *) visitDoctorCode visitDateNext: (NSString *) visitDateNext planStart: (NSString *) planStart planEnd: (NSString *) planEnd planStatus: (NSString *) planStatus visitDoCode: (NSString *) visitDoCode visitDetails: (NSMutableArray *) visitDetails healthTemplate: (NSString *) healthTemplate hospId: (int32_t) hospId
{
  self = [super init];
  __code = [code retain_stub];
  __code_isset = YES;
  __card = [card retain_stub];
  __card_isset = YES;
  __lastFlag = [lastFlag retain_stub];
  __lastFlag_isset = YES;
  __visitDate = [visitDate retain_stub];
  __visitDate_isset = YES;
  __visitTypeCode = [visitTypeCode retain_stub];
  __visitTypeCode_isset = YES;
  __symptom = [symptom retain_stub];
  __symptom_isset = YES;
  __symptomCode = [symptomCode retain_stub];
  __symptomCode_isset = YES;
  __symptomOther = [symptomOther retain_stub];
  __symptomOther_isset = YES;
  __diastolic = diastolic;
  __diastolic_isset = YES;
  __systolic = systolic;
  __systolic_isset = YES;
  __height = [height retain_stub];
  __height_isset = YES;
  __weight = [weight retain_stub];
  __weight_isset = YES;
  __weightAdv = [weightAdv retain_stub];
  __weightAdv_isset = YES;
  __heartRate = [heartRate retain_stub];
  __heartRate_isset = YES;
  __signsOther = [signsOther retain_stub];
  __signsOther_isset = YES;
  __smoke = smoke;
  __smoke_isset = YES;
  __smokeAdv = smokeAdv;
  __smokeAdv_isset = YES;
  __drink = [drink retain_stub];
  __drink_isset = YES;
  __drinkAdv = [drinkAdv retain_stub];
  __drinkAdv_isset = YES;
  __sportWeekly = sportWeekly;
  __sportWeekly_isset = YES;
  __sportEverytime = sportEverytime;
  __sportEverytime_isset = YES;
  __sportWeeklyAdv = sportWeeklyAdv;
  __sportWeeklyAdv_isset = YES;
  __sportEverytimeAdv = sportEverytimeAdv;
  __sportEverytimeAdv_isset = YES;
  __saltCode = [saltCode retain_stub];
  __saltCode_isset = YES;
  __saltAdvCode = [saltAdvCode retain_stub];
  __saltAdvCode_isset = YES;
  __adjustmentCode = [adjustmentCode retain_stub];
  __adjustmentCode_isset = YES;
  __atmedicalCode = [atmedicalCode retain_stub];
  __atmedicalCode_isset = YES;
  __auxiliary = [auxiliary retain_stub];
  __auxiliary_isset = YES;
  __atmedicationCode = [atmedicationCode retain_stub];
  __atmedicationCode_isset = YES;
  __effectYNCode = [effectYNCode retain_stub];
  __effectYNCode_isset = YES;
  __effect = [effect retain_stub];
  __effect_isset = YES;
  __transOrgReason = [transOrgReason retain_stub];
  __transOrgReason_isset = YES;
  __transOrg = [transOrg retain_stub];
  __transOrg_isset = YES;
  __transDepartment = [transDepartment retain_stub];
  __transDepartment_isset = YES;
  __managementYNCode = [managementYNCode retain_stub];
  __managementYNCode_isset = YES;
  __management = [management retain_stub];
  __management_isset = YES;
  __visitDoctor = [visitDoctor retain_stub];
  __visitDoctor_isset = YES;
  __visitDoctorCode = [visitDoctorCode retain_stub];
  __visitDoctorCode_isset = YES;
  __visitDateNext = [visitDateNext retain_stub];
  __visitDateNext_isset = YES;
  __planStart = [planStart retain_stub];
  __planStart_isset = YES;
  __planEnd = [planEnd retain_stub];
  __planEnd_isset = YES;
  __planStatus = [planStatus retain_stub];
  __planStatus_isset = YES;
  __visitDoCode = [visitDoCode retain_stub];
  __visitDoCode_isset = YES;
  __visitDetails = [visitDetails retain_stub];
  __visitDetails_isset = YES;
  __healthTemplate = [healthTemplate retain_stub];
  __healthTemplate_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [[decoder decodeObjectForKey: @"code"] retain_stub];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"card"])
  {
    __card = [[decoder decodeObjectForKey: @"card"] retain_stub];
    __card_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastFlag"])
  {
    __lastFlag = [[decoder decodeObjectForKey: @"lastFlag"] retain_stub];
    __lastFlag_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitDate"])
  {
    __visitDate = [[decoder decodeObjectForKey: @"visitDate"] retain_stub];
    __visitDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitTypeCode"])
  {
    __visitTypeCode = [[decoder decodeObjectForKey: @"visitTypeCode"] retain_stub];
    __visitTypeCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"symptom"])
  {
    __symptom = [[decoder decodeObjectForKey: @"symptom"] retain_stub];
    __symptom_isset = YES;
  }
  if ([decoder containsValueForKey: @"symptomCode"])
  {
    __symptomCode = [[decoder decodeObjectForKey: @"symptomCode"] retain_stub];
    __symptomCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"symptomOther"])
  {
    __symptomOther = [[decoder decodeObjectForKey: @"symptomOther"] retain_stub];
    __symptomOther_isset = YES;
  }
  if ([decoder containsValueForKey: @"diastolic"])
  {
    __diastolic = [decoder decodeInt32ForKey: @"diastolic"];
    __diastolic_isset = YES;
  }
  if ([decoder containsValueForKey: @"systolic"])
  {
    __systolic = [decoder decodeInt32ForKey: @"systolic"];
    __systolic_isset = YES;
  }
  if ([decoder containsValueForKey: @"height"])
  {
    __height = [[decoder decodeObjectForKey: @"height"] retain_stub];
    __height_isset = YES;
  }
  if ([decoder containsValueForKey: @"weight"])
  {
    __weight = [[decoder decodeObjectForKey: @"weight"] retain_stub];
    __weight_isset = YES;
  }
  if ([decoder containsValueForKey: @"weightAdv"])
  {
    __weightAdv = [[decoder decodeObjectForKey: @"weightAdv"] retain_stub];
    __weightAdv_isset = YES;
  }
  if ([decoder containsValueForKey: @"heartRate"])
  {
    __heartRate = [[decoder decodeObjectForKey: @"heartRate"] retain_stub];
    __heartRate_isset = YES;
  }
  if ([decoder containsValueForKey: @"signsOther"])
  {
    __signsOther = [[decoder decodeObjectForKey: @"signsOther"] retain_stub];
    __signsOther_isset = YES;
  }
  if ([decoder containsValueForKey: @"smoke"])
  {
    __smoke = [decoder decodeInt32ForKey: @"smoke"];
    __smoke_isset = YES;
  }
  if ([decoder containsValueForKey: @"smokeAdv"])
  {
    __smokeAdv = [decoder decodeInt32ForKey: @"smokeAdv"];
    __smokeAdv_isset = YES;
  }
  if ([decoder containsValueForKey: @"drink"])
  {
    __drink = [[decoder decodeObjectForKey: @"drink"] retain_stub];
    __drink_isset = YES;
  }
  if ([decoder containsValueForKey: @"drinkAdv"])
  {
    __drinkAdv = [[decoder decodeObjectForKey: @"drinkAdv"] retain_stub];
    __drinkAdv_isset = YES;
  }
  if ([decoder containsValueForKey: @"sportWeekly"])
  {
    __sportWeekly = [decoder decodeInt32ForKey: @"sportWeekly"];
    __sportWeekly_isset = YES;
  }
  if ([decoder containsValueForKey: @"sportEverytime"])
  {
    __sportEverytime = [decoder decodeInt32ForKey: @"sportEverytime"];
    __sportEverytime_isset = YES;
  }
  if ([decoder containsValueForKey: @"sportWeeklyAdv"])
  {
    __sportWeeklyAdv = [decoder decodeInt32ForKey: @"sportWeeklyAdv"];
    __sportWeeklyAdv_isset = YES;
  }
  if ([decoder containsValueForKey: @"sportEverytimeAdv"])
  {
    __sportEverytimeAdv = [decoder decodeInt32ForKey: @"sportEverytimeAdv"];
    __sportEverytimeAdv_isset = YES;
  }
  if ([decoder containsValueForKey: @"saltCode"])
  {
    __saltCode = [[decoder decodeObjectForKey: @"saltCode"] retain_stub];
    __saltCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"saltAdvCode"])
  {
    __saltAdvCode = [[decoder decodeObjectForKey: @"saltAdvCode"] retain_stub];
    __saltAdvCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"adjustmentCode"])
  {
    __adjustmentCode = [[decoder decodeObjectForKey: @"adjustmentCode"] retain_stub];
    __adjustmentCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"atmedicalCode"])
  {
    __atmedicalCode = [[decoder decodeObjectForKey: @"atmedicalCode"] retain_stub];
    __atmedicalCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"auxiliary"])
  {
    __auxiliary = [[decoder decodeObjectForKey: @"auxiliary"] retain_stub];
    __auxiliary_isset = YES;
  }
  if ([decoder containsValueForKey: @"atmedicationCode"])
  {
    __atmedicationCode = [[decoder decodeObjectForKey: @"atmedicationCode"] retain_stub];
    __atmedicationCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"effectYNCode"])
  {
    __effectYNCode = [[decoder decodeObjectForKey: @"effectYNCode"] retain_stub];
    __effectYNCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"effect"])
  {
    __effect = [[decoder decodeObjectForKey: @"effect"] retain_stub];
    __effect_isset = YES;
  }
  if ([decoder containsValueForKey: @"transOrgReason"])
  {
    __transOrgReason = [[decoder decodeObjectForKey: @"transOrgReason"] retain_stub];
    __transOrgReason_isset = YES;
  }
  if ([decoder containsValueForKey: @"transOrg"])
  {
    __transOrg = [[decoder decodeObjectForKey: @"transOrg"] retain_stub];
    __transOrg_isset = YES;
  }
  if ([decoder containsValueForKey: @"transDepartment"])
  {
    __transDepartment = [[decoder decodeObjectForKey: @"transDepartment"] retain_stub];
    __transDepartment_isset = YES;
  }
  if ([decoder containsValueForKey: @"managementYNCode"])
  {
    __managementYNCode = [[decoder decodeObjectForKey: @"managementYNCode"] retain_stub];
    __managementYNCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"management"])
  {
    __management = [[decoder decodeObjectForKey: @"management"] retain_stub];
    __management_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitDoctor"])
  {
    __visitDoctor = [[decoder decodeObjectForKey: @"visitDoctor"] retain_stub];
    __visitDoctor_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitDoctorCode"])
  {
    __visitDoctorCode = [[decoder decodeObjectForKey: @"visitDoctorCode"] retain_stub];
    __visitDoctorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitDateNext"])
  {
    __visitDateNext = [[decoder decodeObjectForKey: @"visitDateNext"] retain_stub];
    __visitDateNext_isset = YES;
  }
  if ([decoder containsValueForKey: @"planStart"])
  {
    __planStart = [[decoder decodeObjectForKey: @"planStart"] retain_stub];
    __planStart_isset = YES;
  }
  if ([decoder containsValueForKey: @"planEnd"])
  {
    __planEnd = [[decoder decodeObjectForKey: @"planEnd"] retain_stub];
    __planEnd_isset = YES;
  }
  if ([decoder containsValueForKey: @"planStatus"])
  {
    __planStatus = [[decoder decodeObjectForKey: @"planStatus"] retain_stub];
    __planStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitDoCode"])
  {
    __visitDoCode = [[decoder decodeObjectForKey: @"visitDoCode"] retain_stub];
    __visitDoCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitDetails"])
  {
    __visitDetails = [[decoder decodeObjectForKey: @"visitDetails"] retain_stub];
    __visitDetails_isset = YES;
  }
  if ([decoder containsValueForKey: @"healthTemplate"])
  {
    __healthTemplate = [[decoder decodeObjectForKey: @"healthTemplate"] retain_stub];
    __healthTemplate_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__code_isset)
  {
    [encoder encodeObject: __code forKey: @"code"];
  }
  if (__card_isset)
  {
    [encoder encodeObject: __card forKey: @"card"];
  }
  if (__lastFlag_isset)
  {
    [encoder encodeObject: __lastFlag forKey: @"lastFlag"];
  }
  if (__visitDate_isset)
  {
    [encoder encodeObject: __visitDate forKey: @"visitDate"];
  }
  if (__visitTypeCode_isset)
  {
    [encoder encodeObject: __visitTypeCode forKey: @"visitTypeCode"];
  }
  if (__symptom_isset)
  {
    [encoder encodeObject: __symptom forKey: @"symptom"];
  }
  if (__symptomCode_isset)
  {
    [encoder encodeObject: __symptomCode forKey: @"symptomCode"];
  }
  if (__symptomOther_isset)
  {
    [encoder encodeObject: __symptomOther forKey: @"symptomOther"];
  }
  if (__diastolic_isset)
  {
    [encoder encodeInt32: __diastolic forKey: @"diastolic"];
  }
  if (__systolic_isset)
  {
    [encoder encodeInt32: __systolic forKey: @"systolic"];
  }
  if (__height_isset)
  {
    [encoder encodeObject: __height forKey: @"height"];
  }
  if (__weight_isset)
  {
    [encoder encodeObject: __weight forKey: @"weight"];
  }
  if (__weightAdv_isset)
  {
    [encoder encodeObject: __weightAdv forKey: @"weightAdv"];
  }
  if (__heartRate_isset)
  {
    [encoder encodeObject: __heartRate forKey: @"heartRate"];
  }
  if (__signsOther_isset)
  {
    [encoder encodeObject: __signsOther forKey: @"signsOther"];
  }
  if (__smoke_isset)
  {
    [encoder encodeInt32: __smoke forKey: @"smoke"];
  }
  if (__smokeAdv_isset)
  {
    [encoder encodeInt32: __smokeAdv forKey: @"smokeAdv"];
  }
  if (__drink_isset)
  {
    [encoder encodeObject: __drink forKey: @"drink"];
  }
  if (__drinkAdv_isset)
  {
    [encoder encodeObject: __drinkAdv forKey: @"drinkAdv"];
  }
  if (__sportWeekly_isset)
  {
    [encoder encodeInt32: __sportWeekly forKey: @"sportWeekly"];
  }
  if (__sportEverytime_isset)
  {
    [encoder encodeInt32: __sportEverytime forKey: @"sportEverytime"];
  }
  if (__sportWeeklyAdv_isset)
  {
    [encoder encodeInt32: __sportWeeklyAdv forKey: @"sportWeeklyAdv"];
  }
  if (__sportEverytimeAdv_isset)
  {
    [encoder encodeInt32: __sportEverytimeAdv forKey: @"sportEverytimeAdv"];
  }
  if (__saltCode_isset)
  {
    [encoder encodeObject: __saltCode forKey: @"saltCode"];
  }
  if (__saltAdvCode_isset)
  {
    [encoder encodeObject: __saltAdvCode forKey: @"saltAdvCode"];
  }
  if (__adjustmentCode_isset)
  {
    [encoder encodeObject: __adjustmentCode forKey: @"adjustmentCode"];
  }
  if (__atmedicalCode_isset)
  {
    [encoder encodeObject: __atmedicalCode forKey: @"atmedicalCode"];
  }
  if (__auxiliary_isset)
  {
    [encoder encodeObject: __auxiliary forKey: @"auxiliary"];
  }
  if (__atmedicationCode_isset)
  {
    [encoder encodeObject: __atmedicationCode forKey: @"atmedicationCode"];
  }
  if (__effectYNCode_isset)
  {
    [encoder encodeObject: __effectYNCode forKey: @"effectYNCode"];
  }
  if (__effect_isset)
  {
    [encoder encodeObject: __effect forKey: @"effect"];
  }
  if (__transOrgReason_isset)
  {
    [encoder encodeObject: __transOrgReason forKey: @"transOrgReason"];
  }
  if (__transOrg_isset)
  {
    [encoder encodeObject: __transOrg forKey: @"transOrg"];
  }
  if (__transDepartment_isset)
  {
    [encoder encodeObject: __transDepartment forKey: @"transDepartment"];
  }
  if (__managementYNCode_isset)
  {
    [encoder encodeObject: __managementYNCode forKey: @"managementYNCode"];
  }
  if (__management_isset)
  {
    [encoder encodeObject: __management forKey: @"management"];
  }
  if (__visitDoctor_isset)
  {
    [encoder encodeObject: __visitDoctor forKey: @"visitDoctor"];
  }
  if (__visitDoctorCode_isset)
  {
    [encoder encodeObject: __visitDoctorCode forKey: @"visitDoctorCode"];
  }
  if (__visitDateNext_isset)
  {
    [encoder encodeObject: __visitDateNext forKey: @"visitDateNext"];
  }
  if (__planStart_isset)
  {
    [encoder encodeObject: __planStart forKey: @"planStart"];
  }
  if (__planEnd_isset)
  {
    [encoder encodeObject: __planEnd forKey: @"planEnd"];
  }
  if (__planStatus_isset)
  {
    [encoder encodeObject: __planStatus forKey: @"planStatus"];
  }
  if (__visitDoCode_isset)
  {
    [encoder encodeObject: __visitDoCode forKey: @"visitDoCode"];
  }
  if (__visitDetails_isset)
  {
    [encoder encodeObject: __visitDetails forKey: @"visitDetails"];
  }
  if (__healthTemplate_isset)
  {
    [encoder encodeObject: __healthTemplate forKey: @"healthTemplate"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __code_isset ? 2654435761 : 0;
  if (__code_isset)
  {
    hash = (hash * 31) ^ [__code hash];
  }
  hash = (hash * 31) ^ __card_isset ? 2654435761 : 0;
  if (__card_isset)
  {
    hash = (hash * 31) ^ [__card hash];
  }
  hash = (hash * 31) ^ __lastFlag_isset ? 2654435761 : 0;
  if (__lastFlag_isset)
  {
    hash = (hash * 31) ^ [__lastFlag hash];
  }
  hash = (hash * 31) ^ __visitDate_isset ? 2654435761 : 0;
  if (__visitDate_isset)
  {
    hash = (hash * 31) ^ [__visitDate hash];
  }
  hash = (hash * 31) ^ __visitTypeCode_isset ? 2654435761 : 0;
  if (__visitTypeCode_isset)
  {
    hash = (hash * 31) ^ [__visitTypeCode hash];
  }
  hash = (hash * 31) ^ __symptom_isset ? 2654435761 : 0;
  if (__symptom_isset)
  {
    hash = (hash * 31) ^ [__symptom hash];
  }
  hash = (hash * 31) ^ __symptomCode_isset ? 2654435761 : 0;
  if (__symptomCode_isset)
  {
    hash = (hash * 31) ^ [__symptomCode hash];
  }
  hash = (hash * 31) ^ __symptomOther_isset ? 2654435761 : 0;
  if (__symptomOther_isset)
  {
    hash = (hash * 31) ^ [__symptomOther hash];
  }
  hash = (hash * 31) ^ __diastolic_isset ? 2654435761 : 0;
  if (__diastolic_isset)
  {
    hash = (hash * 31) ^ [@(__diastolic) hash];
  }
  hash = (hash * 31) ^ __systolic_isset ? 2654435761 : 0;
  if (__systolic_isset)
  {
    hash = (hash * 31) ^ [@(__systolic) hash];
  }
  hash = (hash * 31) ^ __height_isset ? 2654435761 : 0;
  if (__height_isset)
  {
    hash = (hash * 31) ^ [__height hash];
  }
  hash = (hash * 31) ^ __weight_isset ? 2654435761 : 0;
  if (__weight_isset)
  {
    hash = (hash * 31) ^ [__weight hash];
  }
  hash = (hash * 31) ^ __weightAdv_isset ? 2654435761 : 0;
  if (__weightAdv_isset)
  {
    hash = (hash * 31) ^ [__weightAdv hash];
  }
  hash = (hash * 31) ^ __heartRate_isset ? 2654435761 : 0;
  if (__heartRate_isset)
  {
    hash = (hash * 31) ^ [__heartRate hash];
  }
  hash = (hash * 31) ^ __signsOther_isset ? 2654435761 : 0;
  if (__signsOther_isset)
  {
    hash = (hash * 31) ^ [__signsOther hash];
  }
  hash = (hash * 31) ^ __smoke_isset ? 2654435761 : 0;
  if (__smoke_isset)
  {
    hash = (hash * 31) ^ [@(__smoke) hash];
  }
  hash = (hash * 31) ^ __smokeAdv_isset ? 2654435761 : 0;
  if (__smokeAdv_isset)
  {
    hash = (hash * 31) ^ [@(__smokeAdv) hash];
  }
  hash = (hash * 31) ^ __drink_isset ? 2654435761 : 0;
  if (__drink_isset)
  {
    hash = (hash * 31) ^ [__drink hash];
  }
  hash = (hash * 31) ^ __drinkAdv_isset ? 2654435761 : 0;
  if (__drinkAdv_isset)
  {
    hash = (hash * 31) ^ [__drinkAdv hash];
  }
  hash = (hash * 31) ^ __sportWeekly_isset ? 2654435761 : 0;
  if (__sportWeekly_isset)
  {
    hash = (hash * 31) ^ [@(__sportWeekly) hash];
  }
  hash = (hash * 31) ^ __sportEverytime_isset ? 2654435761 : 0;
  if (__sportEverytime_isset)
  {
    hash = (hash * 31) ^ [@(__sportEverytime) hash];
  }
  hash = (hash * 31) ^ __sportWeeklyAdv_isset ? 2654435761 : 0;
  if (__sportWeeklyAdv_isset)
  {
    hash = (hash * 31) ^ [@(__sportWeeklyAdv) hash];
  }
  hash = (hash * 31) ^ __sportEverytimeAdv_isset ? 2654435761 : 0;
  if (__sportEverytimeAdv_isset)
  {
    hash = (hash * 31) ^ [@(__sportEverytimeAdv) hash];
  }
  hash = (hash * 31) ^ __saltCode_isset ? 2654435761 : 0;
  if (__saltCode_isset)
  {
    hash = (hash * 31) ^ [__saltCode hash];
  }
  hash = (hash * 31) ^ __saltAdvCode_isset ? 2654435761 : 0;
  if (__saltAdvCode_isset)
  {
    hash = (hash * 31) ^ [__saltAdvCode hash];
  }
  hash = (hash * 31) ^ __adjustmentCode_isset ? 2654435761 : 0;
  if (__adjustmentCode_isset)
  {
    hash = (hash * 31) ^ [__adjustmentCode hash];
  }
  hash = (hash * 31) ^ __atmedicalCode_isset ? 2654435761 : 0;
  if (__atmedicalCode_isset)
  {
    hash = (hash * 31) ^ [__atmedicalCode hash];
  }
  hash = (hash * 31) ^ __auxiliary_isset ? 2654435761 : 0;
  if (__auxiliary_isset)
  {
    hash = (hash * 31) ^ [__auxiliary hash];
  }
  hash = (hash * 31) ^ __atmedicationCode_isset ? 2654435761 : 0;
  if (__atmedicationCode_isset)
  {
    hash = (hash * 31) ^ [__atmedicationCode hash];
  }
  hash = (hash * 31) ^ __effectYNCode_isset ? 2654435761 : 0;
  if (__effectYNCode_isset)
  {
    hash = (hash * 31) ^ [__effectYNCode hash];
  }
  hash = (hash * 31) ^ __effect_isset ? 2654435761 : 0;
  if (__effect_isset)
  {
    hash = (hash * 31) ^ [__effect hash];
  }
  hash = (hash * 31) ^ __transOrgReason_isset ? 2654435761 : 0;
  if (__transOrgReason_isset)
  {
    hash = (hash * 31) ^ [__transOrgReason hash];
  }
  hash = (hash * 31) ^ __transOrg_isset ? 2654435761 : 0;
  if (__transOrg_isset)
  {
    hash = (hash * 31) ^ [__transOrg hash];
  }
  hash = (hash * 31) ^ __transDepartment_isset ? 2654435761 : 0;
  if (__transDepartment_isset)
  {
    hash = (hash * 31) ^ [__transDepartment hash];
  }
  hash = (hash * 31) ^ __managementYNCode_isset ? 2654435761 : 0;
  if (__managementYNCode_isset)
  {
    hash = (hash * 31) ^ [__managementYNCode hash];
  }
  hash = (hash * 31) ^ __management_isset ? 2654435761 : 0;
  if (__management_isset)
  {
    hash = (hash * 31) ^ [__management hash];
  }
  hash = (hash * 31) ^ __visitDoctor_isset ? 2654435761 : 0;
  if (__visitDoctor_isset)
  {
    hash = (hash * 31) ^ [__visitDoctor hash];
  }
  hash = (hash * 31) ^ __visitDoctorCode_isset ? 2654435761 : 0;
  if (__visitDoctorCode_isset)
  {
    hash = (hash * 31) ^ [__visitDoctorCode hash];
  }
  hash = (hash * 31) ^ __visitDateNext_isset ? 2654435761 : 0;
  if (__visitDateNext_isset)
  {
    hash = (hash * 31) ^ [__visitDateNext hash];
  }
  hash = (hash * 31) ^ __planStart_isset ? 2654435761 : 0;
  if (__planStart_isset)
  {
    hash = (hash * 31) ^ [__planStart hash];
  }
  hash = (hash * 31) ^ __planEnd_isset ? 2654435761 : 0;
  if (__planEnd_isset)
  {
    hash = (hash * 31) ^ [__planEnd hash];
  }
  hash = (hash * 31) ^ __planStatus_isset ? 2654435761 : 0;
  if (__planStatus_isset)
  {
    hash = (hash * 31) ^ [__planStatus hash];
  }
  hash = (hash * 31) ^ __visitDoCode_isset ? 2654435761 : 0;
  if (__visitDoCode_isset)
  {
    hash = (hash * 31) ^ [__visitDoCode hash];
  }
  hash = (hash * 31) ^ __visitDetails_isset ? 2654435761 : 0;
  if (__visitDetails_isset)
  {
    hash = (hash * 31) ^ [__visitDetails hash];
  }
  hash = (hash * 31) ^ __healthTemplate_isset ? 2654435761 : 0;
  if (__healthTemplate_isset)
  {
    hash = (hash * 31) ^ [__healthTemplate hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFHBVisitDto class]]) {
    return NO;
  }
  NXTFFHBVisitDto *other = (NXTFFHBVisitDto *)anObject;
  if ((__code_isset != other->__code_isset) ||
      (__code_isset && ((__code || other->__code) && ![__code isEqual:other->__code]))) {
    return NO;
  }
  if ((__card_isset != other->__card_isset) ||
      (__card_isset && ((__card || other->__card) && ![__card isEqual:other->__card]))) {
    return NO;
  }
  if ((__lastFlag_isset != other->__lastFlag_isset) ||
      (__lastFlag_isset && ((__lastFlag || other->__lastFlag) && ![__lastFlag isEqual:other->__lastFlag]))) {
    return NO;
  }
  if ((__visitDate_isset != other->__visitDate_isset) ||
      (__visitDate_isset && ((__visitDate || other->__visitDate) && ![__visitDate isEqual:other->__visitDate]))) {
    return NO;
  }
  if ((__visitTypeCode_isset != other->__visitTypeCode_isset) ||
      (__visitTypeCode_isset && ((__visitTypeCode || other->__visitTypeCode) && ![__visitTypeCode isEqual:other->__visitTypeCode]))) {
    return NO;
  }
  if ((__symptom_isset != other->__symptom_isset) ||
      (__symptom_isset && ((__symptom || other->__symptom) && ![__symptom isEqual:other->__symptom]))) {
    return NO;
  }
  if ((__symptomCode_isset != other->__symptomCode_isset) ||
      (__symptomCode_isset && ((__symptomCode || other->__symptomCode) && ![__symptomCode isEqual:other->__symptomCode]))) {
    return NO;
  }
  if ((__symptomOther_isset != other->__symptomOther_isset) ||
      (__symptomOther_isset && ((__symptomOther || other->__symptomOther) && ![__symptomOther isEqual:other->__symptomOther]))) {
    return NO;
  }
  if ((__diastolic_isset != other->__diastolic_isset) ||
      (__diastolic_isset && (__diastolic != other->__diastolic))) {
    return NO;
  }
  if ((__systolic_isset != other->__systolic_isset) ||
      (__systolic_isset && (__systolic != other->__systolic))) {
    return NO;
  }
  if ((__height_isset != other->__height_isset) ||
      (__height_isset && ((__height || other->__height) && ![__height isEqual:other->__height]))) {
    return NO;
  }
  if ((__weight_isset != other->__weight_isset) ||
      (__weight_isset && ((__weight || other->__weight) && ![__weight isEqual:other->__weight]))) {
    return NO;
  }
  if ((__weightAdv_isset != other->__weightAdv_isset) ||
      (__weightAdv_isset && ((__weightAdv || other->__weightAdv) && ![__weightAdv isEqual:other->__weightAdv]))) {
    return NO;
  }
  if ((__heartRate_isset != other->__heartRate_isset) ||
      (__heartRate_isset && ((__heartRate || other->__heartRate) && ![__heartRate isEqual:other->__heartRate]))) {
    return NO;
  }
  if ((__signsOther_isset != other->__signsOther_isset) ||
      (__signsOther_isset && ((__signsOther || other->__signsOther) && ![__signsOther isEqual:other->__signsOther]))) {
    return NO;
  }
  if ((__smoke_isset != other->__smoke_isset) ||
      (__smoke_isset && (__smoke != other->__smoke))) {
    return NO;
  }
  if ((__smokeAdv_isset != other->__smokeAdv_isset) ||
      (__smokeAdv_isset && (__smokeAdv != other->__smokeAdv))) {
    return NO;
  }
  if ((__drink_isset != other->__drink_isset) ||
      (__drink_isset && ((__drink || other->__drink) && ![__drink isEqual:other->__drink]))) {
    return NO;
  }
  if ((__drinkAdv_isset != other->__drinkAdv_isset) ||
      (__drinkAdv_isset && ((__drinkAdv || other->__drinkAdv) && ![__drinkAdv isEqual:other->__drinkAdv]))) {
    return NO;
  }
  if ((__sportWeekly_isset != other->__sportWeekly_isset) ||
      (__sportWeekly_isset && (__sportWeekly != other->__sportWeekly))) {
    return NO;
  }
  if ((__sportEverytime_isset != other->__sportEverytime_isset) ||
      (__sportEverytime_isset && (__sportEverytime != other->__sportEverytime))) {
    return NO;
  }
  if ((__sportWeeklyAdv_isset != other->__sportWeeklyAdv_isset) ||
      (__sportWeeklyAdv_isset && (__sportWeeklyAdv != other->__sportWeeklyAdv))) {
    return NO;
  }
  if ((__sportEverytimeAdv_isset != other->__sportEverytimeAdv_isset) ||
      (__sportEverytimeAdv_isset && (__sportEverytimeAdv != other->__sportEverytimeAdv))) {
    return NO;
  }
  if ((__saltCode_isset != other->__saltCode_isset) ||
      (__saltCode_isset && ((__saltCode || other->__saltCode) && ![__saltCode isEqual:other->__saltCode]))) {
    return NO;
  }
  if ((__saltAdvCode_isset != other->__saltAdvCode_isset) ||
      (__saltAdvCode_isset && ((__saltAdvCode || other->__saltAdvCode) && ![__saltAdvCode isEqual:other->__saltAdvCode]))) {
    return NO;
  }
  if ((__adjustmentCode_isset != other->__adjustmentCode_isset) ||
      (__adjustmentCode_isset && ((__adjustmentCode || other->__adjustmentCode) && ![__adjustmentCode isEqual:other->__adjustmentCode]))) {
    return NO;
  }
  if ((__atmedicalCode_isset != other->__atmedicalCode_isset) ||
      (__atmedicalCode_isset && ((__atmedicalCode || other->__atmedicalCode) && ![__atmedicalCode isEqual:other->__atmedicalCode]))) {
    return NO;
  }
  if ((__auxiliary_isset != other->__auxiliary_isset) ||
      (__auxiliary_isset && ((__auxiliary || other->__auxiliary) && ![__auxiliary isEqual:other->__auxiliary]))) {
    return NO;
  }
  if ((__atmedicationCode_isset != other->__atmedicationCode_isset) ||
      (__atmedicationCode_isset && ((__atmedicationCode || other->__atmedicationCode) && ![__atmedicationCode isEqual:other->__atmedicationCode]))) {
    return NO;
  }
  if ((__effectYNCode_isset != other->__effectYNCode_isset) ||
      (__effectYNCode_isset && ((__effectYNCode || other->__effectYNCode) && ![__effectYNCode isEqual:other->__effectYNCode]))) {
    return NO;
  }
  if ((__effect_isset != other->__effect_isset) ||
      (__effect_isset && ((__effect || other->__effect) && ![__effect isEqual:other->__effect]))) {
    return NO;
  }
  if ((__transOrgReason_isset != other->__transOrgReason_isset) ||
      (__transOrgReason_isset && ((__transOrgReason || other->__transOrgReason) && ![__transOrgReason isEqual:other->__transOrgReason]))) {
    return NO;
  }
  if ((__transOrg_isset != other->__transOrg_isset) ||
      (__transOrg_isset && ((__transOrg || other->__transOrg) && ![__transOrg isEqual:other->__transOrg]))) {
    return NO;
  }
  if ((__transDepartment_isset != other->__transDepartment_isset) ||
      (__transDepartment_isset && ((__transDepartment || other->__transDepartment) && ![__transDepartment isEqual:other->__transDepartment]))) {
    return NO;
  }
  if ((__managementYNCode_isset != other->__managementYNCode_isset) ||
      (__managementYNCode_isset && ((__managementYNCode || other->__managementYNCode) && ![__managementYNCode isEqual:other->__managementYNCode]))) {
    return NO;
  }
  if ((__management_isset != other->__management_isset) ||
      (__management_isset && ((__management || other->__management) && ![__management isEqual:other->__management]))) {
    return NO;
  }
  if ((__visitDoctor_isset != other->__visitDoctor_isset) ||
      (__visitDoctor_isset && ((__visitDoctor || other->__visitDoctor) && ![__visitDoctor isEqual:other->__visitDoctor]))) {
    return NO;
  }
  if ((__visitDoctorCode_isset != other->__visitDoctorCode_isset) ||
      (__visitDoctorCode_isset && ((__visitDoctorCode || other->__visitDoctorCode) && ![__visitDoctorCode isEqual:other->__visitDoctorCode]))) {
    return NO;
  }
  if ((__visitDateNext_isset != other->__visitDateNext_isset) ||
      (__visitDateNext_isset && ((__visitDateNext || other->__visitDateNext) && ![__visitDateNext isEqual:other->__visitDateNext]))) {
    return NO;
  }
  if ((__planStart_isset != other->__planStart_isset) ||
      (__planStart_isset && ((__planStart || other->__planStart) && ![__planStart isEqual:other->__planStart]))) {
    return NO;
  }
  if ((__planEnd_isset != other->__planEnd_isset) ||
      (__planEnd_isset && ((__planEnd || other->__planEnd) && ![__planEnd isEqual:other->__planEnd]))) {
    return NO;
  }
  if ((__planStatus_isset != other->__planStatus_isset) ||
      (__planStatus_isset && ((__planStatus || other->__planStatus) && ![__planStatus isEqual:other->__planStatus]))) {
    return NO;
  }
  if ((__visitDoCode_isset != other->__visitDoCode_isset) ||
      (__visitDoCode_isset && ((__visitDoCode || other->__visitDoCode) && ![__visitDoCode isEqual:other->__visitDoCode]))) {
    return NO;
  }
  if ((__visitDetails_isset != other->__visitDetails_isset) ||
      (__visitDetails_isset && ((__visitDetails || other->__visitDetails) && ![__visitDetails isEqual:other->__visitDetails]))) {
    return NO;
  }
  if ((__healthTemplate_isset != other->__healthTemplate_isset) ||
      (__healthTemplate_isset && ((__healthTemplate || other->__healthTemplate) && ![__healthTemplate isEqual:other->__healthTemplate]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__code release_stub];
  [__card release_stub];
  [__lastFlag release_stub];
  [__visitDate release_stub];
  [__visitTypeCode release_stub];
  [__symptom release_stub];
  [__symptomCode release_stub];
  [__symptomOther release_stub];
  [__height release_stub];
  [__weight release_stub];
  [__weightAdv release_stub];
  [__heartRate release_stub];
  [__signsOther release_stub];
  [__drink release_stub];
  [__drinkAdv release_stub];
  [__saltCode release_stub];
  [__saltAdvCode release_stub];
  [__adjustmentCode release_stub];
  [__atmedicalCode release_stub];
  [__auxiliary release_stub];
  [__atmedicationCode release_stub];
  [__effectYNCode release_stub];
  [__effect release_stub];
  [__transOrgReason release_stub];
  [__transOrg release_stub];
  [__transDepartment release_stub];
  [__managementYNCode release_stub];
  [__management release_stub];
  [__visitDoctor release_stub];
  [__visitDoctorCode release_stub];
  [__visitDateNext release_stub];
  [__planStart release_stub];
  [__planEnd release_stub];
  [__planStatus release_stub];
  [__visitDoCode release_stub];
  [__visitDetails release_stub];
  [__healthTemplate release_stub];
  [super dealloc_stub];
}

- (NSString *) code {
  return [[__code retain_stub] autorelease_stub];
}

- (void) setCode: (NSString *) code {
  [code retain_stub];
  [__code release_stub];
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  [__code release_stub];
  __code = nil;
  __code_isset = NO;
}

- (NSString *) card {
  return [[__card retain_stub] autorelease_stub];
}

- (void) setCard: (NSString *) card {
  [card retain_stub];
  [__card release_stub];
  __card = card;
  __card_isset = YES;
}

- (BOOL) cardIsSet {
  return __card_isset;
}

- (void) unsetCard {
  [__card release_stub];
  __card = nil;
  __card_isset = NO;
}

- (NSString *) lastFlag {
  return [[__lastFlag retain_stub] autorelease_stub];
}

- (void) setLastFlag: (NSString *) lastFlag {
  [lastFlag retain_stub];
  [__lastFlag release_stub];
  __lastFlag = lastFlag;
  __lastFlag_isset = YES;
}

- (BOOL) lastFlagIsSet {
  return __lastFlag_isset;
}

- (void) unsetLastFlag {
  [__lastFlag release_stub];
  __lastFlag = nil;
  __lastFlag_isset = NO;
}

- (NSString *) visitDate {
  return [[__visitDate retain_stub] autorelease_stub];
}

- (void) setVisitDate: (NSString *) visitDate {
  [visitDate retain_stub];
  [__visitDate release_stub];
  __visitDate = visitDate;
  __visitDate_isset = YES;
}

- (BOOL) visitDateIsSet {
  return __visitDate_isset;
}

- (void) unsetVisitDate {
  [__visitDate release_stub];
  __visitDate = nil;
  __visitDate_isset = NO;
}

- (NSString *) visitTypeCode {
  return [[__visitTypeCode retain_stub] autorelease_stub];
}

- (void) setVisitTypeCode: (NSString *) visitTypeCode {
  [visitTypeCode retain_stub];
  [__visitTypeCode release_stub];
  __visitTypeCode = visitTypeCode;
  __visitTypeCode_isset = YES;
}

- (BOOL) visitTypeCodeIsSet {
  return __visitTypeCode_isset;
}

- (void) unsetVisitTypeCode {
  [__visitTypeCode release_stub];
  __visitTypeCode = nil;
  __visitTypeCode_isset = NO;
}

- (NSMutableArray *) symptom {
  return [[__symptom retain_stub] autorelease_stub];
}

- (void) setSymptom: (NSMutableArray *) symptom {
  [symptom retain_stub];
  [__symptom release_stub];
  __symptom = symptom;
  __symptom_isset = YES;
}

- (BOOL) symptomIsSet {
  return __symptom_isset;
}

- (void) unsetSymptom {
  [__symptom release_stub];
  __symptom = nil;
  __symptom_isset = NO;
}

- (NSMutableArray *) symptomCode {
  return [[__symptomCode retain_stub] autorelease_stub];
}

- (void) setSymptomCode: (NSMutableArray *) symptomCode {
  [symptomCode retain_stub];
  [__symptomCode release_stub];
  __symptomCode = symptomCode;
  __symptomCode_isset = YES;
}

- (BOOL) symptomCodeIsSet {
  return __symptomCode_isset;
}

- (void) unsetSymptomCode {
  [__symptomCode release_stub];
  __symptomCode = nil;
  __symptomCode_isset = NO;
}

- (NSString *) symptomOther {
  return [[__symptomOther retain_stub] autorelease_stub];
}

- (void) setSymptomOther: (NSString *) symptomOther {
  [symptomOther retain_stub];
  [__symptomOther release_stub];
  __symptomOther = symptomOther;
  __symptomOther_isset = YES;
}

- (BOOL) symptomOtherIsSet {
  return __symptomOther_isset;
}

- (void) unsetSymptomOther {
  [__symptomOther release_stub];
  __symptomOther = nil;
  __symptomOther_isset = NO;
}

- (int32_t) diastolic {
  return __diastolic;
}

- (void) setDiastolic: (int32_t) diastolic {
  __diastolic = diastolic;
  __diastolic_isset = YES;
}

- (BOOL) diastolicIsSet {
  return __diastolic_isset;
}

- (void) unsetDiastolic {
  __diastolic_isset = NO;
}

- (int32_t) systolic {
  return __systolic;
}

- (void) setSystolic: (int32_t) systolic {
  __systolic = systolic;
  __systolic_isset = YES;
}

- (BOOL) systolicIsSet {
  return __systolic_isset;
}

- (void) unsetSystolic {
  __systolic_isset = NO;
}

- (NSString *) height {
  return [[__height retain_stub] autorelease_stub];
}

- (void) setHeight: (NSString *) height {
  [height retain_stub];
  [__height release_stub];
  __height = height;
  __height_isset = YES;
}

- (BOOL) heightIsSet {
  return __height_isset;
}

- (void) unsetHeight {
  [__height release_stub];
  __height = nil;
  __height_isset = NO;
}

- (NSString *) weight {
  return [[__weight retain_stub] autorelease_stub];
}

- (void) setWeight: (NSString *) weight {
  [weight retain_stub];
  [__weight release_stub];
  __weight = weight;
  __weight_isset = YES;
}

- (BOOL) weightIsSet {
  return __weight_isset;
}

- (void) unsetWeight {
  [__weight release_stub];
  __weight = nil;
  __weight_isset = NO;
}

- (NSString *) weightAdv {
  return [[__weightAdv retain_stub] autorelease_stub];
}

- (void) setWeightAdv: (NSString *) weightAdv {
  [weightAdv retain_stub];
  [__weightAdv release_stub];
  __weightAdv = weightAdv;
  __weightAdv_isset = YES;
}

- (BOOL) weightAdvIsSet {
  return __weightAdv_isset;
}

- (void) unsetWeightAdv {
  [__weightAdv release_stub];
  __weightAdv = nil;
  __weightAdv_isset = NO;
}

- (NSString *) heartRate {
  return [[__heartRate retain_stub] autorelease_stub];
}

- (void) setHeartRate: (NSString *) heartRate {
  [heartRate retain_stub];
  [__heartRate release_stub];
  __heartRate = heartRate;
  __heartRate_isset = YES;
}

- (BOOL) heartRateIsSet {
  return __heartRate_isset;
}

- (void) unsetHeartRate {
  [__heartRate release_stub];
  __heartRate = nil;
  __heartRate_isset = NO;
}

- (NSString *) signsOther {
  return [[__signsOther retain_stub] autorelease_stub];
}

- (void) setSignsOther: (NSString *) signsOther {
  [signsOther retain_stub];
  [__signsOther release_stub];
  __signsOther = signsOther;
  __signsOther_isset = YES;
}

- (BOOL) signsOtherIsSet {
  return __signsOther_isset;
}

- (void) unsetSignsOther {
  [__signsOther release_stub];
  __signsOther = nil;
  __signsOther_isset = NO;
}

- (int32_t) smoke {
  return __smoke;
}

- (void) setSmoke: (int32_t) smoke {
  __smoke = smoke;
  __smoke_isset = YES;
}

- (BOOL) smokeIsSet {
  return __smoke_isset;
}

- (void) unsetSmoke {
  __smoke_isset = NO;
}

- (int32_t) smokeAdv {
  return __smokeAdv;
}

- (void) setSmokeAdv: (int32_t) smokeAdv {
  __smokeAdv = smokeAdv;
  __smokeAdv_isset = YES;
}

- (BOOL) smokeAdvIsSet {
  return __smokeAdv_isset;
}

- (void) unsetSmokeAdv {
  __smokeAdv_isset = NO;
}

- (NSString *) drink {
  return [[__drink retain_stub] autorelease_stub];
}

- (void) setDrink: (NSString *) drink {
  [drink retain_stub];
  [__drink release_stub];
  __drink = drink;
  __drink_isset = YES;
}

- (BOOL) drinkIsSet {
  return __drink_isset;
}

- (void) unsetDrink {
  [__drink release_stub];
  __drink = nil;
  __drink_isset = NO;
}

- (NSString *) drinkAdv {
  return [[__drinkAdv retain_stub] autorelease_stub];
}

- (void) setDrinkAdv: (NSString *) drinkAdv {
  [drinkAdv retain_stub];
  [__drinkAdv release_stub];
  __drinkAdv = drinkAdv;
  __drinkAdv_isset = YES;
}

- (BOOL) drinkAdvIsSet {
  return __drinkAdv_isset;
}

- (void) unsetDrinkAdv {
  [__drinkAdv release_stub];
  __drinkAdv = nil;
  __drinkAdv_isset = NO;
}

- (int32_t) sportWeekly {
  return __sportWeekly;
}

- (void) setSportWeekly: (int32_t) sportWeekly {
  __sportWeekly = sportWeekly;
  __sportWeekly_isset = YES;
}

- (BOOL) sportWeeklyIsSet {
  return __sportWeekly_isset;
}

- (void) unsetSportWeekly {
  __sportWeekly_isset = NO;
}

- (int32_t) sportEverytime {
  return __sportEverytime;
}

- (void) setSportEverytime: (int32_t) sportEverytime {
  __sportEverytime = sportEverytime;
  __sportEverytime_isset = YES;
}

- (BOOL) sportEverytimeIsSet {
  return __sportEverytime_isset;
}

- (void) unsetSportEverytime {
  __sportEverytime_isset = NO;
}

- (int32_t) sportWeeklyAdv {
  return __sportWeeklyAdv;
}

- (void) setSportWeeklyAdv: (int32_t) sportWeeklyAdv {
  __sportWeeklyAdv = sportWeeklyAdv;
  __sportWeeklyAdv_isset = YES;
}

- (BOOL) sportWeeklyAdvIsSet {
  return __sportWeeklyAdv_isset;
}

- (void) unsetSportWeeklyAdv {
  __sportWeeklyAdv_isset = NO;
}

- (int32_t) sportEverytimeAdv {
  return __sportEverytimeAdv;
}

- (void) setSportEverytimeAdv: (int32_t) sportEverytimeAdv {
  __sportEverytimeAdv = sportEverytimeAdv;
  __sportEverytimeAdv_isset = YES;
}

- (BOOL) sportEverytimeAdvIsSet {
  return __sportEverytimeAdv_isset;
}

- (void) unsetSportEverytimeAdv {
  __sportEverytimeAdv_isset = NO;
}

- (NSString *) saltCode {
  return [[__saltCode retain_stub] autorelease_stub];
}

- (void) setSaltCode: (NSString *) saltCode {
  [saltCode retain_stub];
  [__saltCode release_stub];
  __saltCode = saltCode;
  __saltCode_isset = YES;
}

- (BOOL) saltCodeIsSet {
  return __saltCode_isset;
}

- (void) unsetSaltCode {
  [__saltCode release_stub];
  __saltCode = nil;
  __saltCode_isset = NO;
}

- (NSString *) saltAdvCode {
  return [[__saltAdvCode retain_stub] autorelease_stub];
}

- (void) setSaltAdvCode: (NSString *) saltAdvCode {
  [saltAdvCode retain_stub];
  [__saltAdvCode release_stub];
  __saltAdvCode = saltAdvCode;
  __saltAdvCode_isset = YES;
}

- (BOOL) saltAdvCodeIsSet {
  return __saltAdvCode_isset;
}

- (void) unsetSaltAdvCode {
  [__saltAdvCode release_stub];
  __saltAdvCode = nil;
  __saltAdvCode_isset = NO;
}

- (NSString *) adjustmentCode {
  return [[__adjustmentCode retain_stub] autorelease_stub];
}

- (void) setAdjustmentCode: (NSString *) adjustmentCode {
  [adjustmentCode retain_stub];
  [__adjustmentCode release_stub];
  __adjustmentCode = adjustmentCode;
  __adjustmentCode_isset = YES;
}

- (BOOL) adjustmentCodeIsSet {
  return __adjustmentCode_isset;
}

- (void) unsetAdjustmentCode {
  [__adjustmentCode release_stub];
  __adjustmentCode = nil;
  __adjustmentCode_isset = NO;
}

- (NSString *) atmedicalCode {
  return [[__atmedicalCode retain_stub] autorelease_stub];
}

- (void) setAtmedicalCode: (NSString *) atmedicalCode {
  [atmedicalCode retain_stub];
  [__atmedicalCode release_stub];
  __atmedicalCode = atmedicalCode;
  __atmedicalCode_isset = YES;
}

- (BOOL) atmedicalCodeIsSet {
  return __atmedicalCode_isset;
}

- (void) unsetAtmedicalCode {
  [__atmedicalCode release_stub];
  __atmedicalCode = nil;
  __atmedicalCode_isset = NO;
}

- (NSString *) auxiliary {
  return [[__auxiliary retain_stub] autorelease_stub];
}

- (void) setAuxiliary: (NSString *) auxiliary {
  [auxiliary retain_stub];
  [__auxiliary release_stub];
  __auxiliary = auxiliary;
  __auxiliary_isset = YES;
}

- (BOOL) auxiliaryIsSet {
  return __auxiliary_isset;
}

- (void) unsetAuxiliary {
  [__auxiliary release_stub];
  __auxiliary = nil;
  __auxiliary_isset = NO;
}

- (NSString *) atmedicationCode {
  return [[__atmedicationCode retain_stub] autorelease_stub];
}

- (void) setAtmedicationCode: (NSString *) atmedicationCode {
  [atmedicationCode retain_stub];
  [__atmedicationCode release_stub];
  __atmedicationCode = atmedicationCode;
  __atmedicationCode_isset = YES;
}

- (BOOL) atmedicationCodeIsSet {
  return __atmedicationCode_isset;
}

- (void) unsetAtmedicationCode {
  [__atmedicationCode release_stub];
  __atmedicationCode = nil;
  __atmedicationCode_isset = NO;
}

- (NSString *) effectYNCode {
  return [[__effectYNCode retain_stub] autorelease_stub];
}

- (void) setEffectYNCode: (NSString *) effectYNCode {
  [effectYNCode retain_stub];
  [__effectYNCode release_stub];
  __effectYNCode = effectYNCode;
  __effectYNCode_isset = YES;
}

- (BOOL) effectYNCodeIsSet {
  return __effectYNCode_isset;
}

- (void) unsetEffectYNCode {
  [__effectYNCode release_stub];
  __effectYNCode = nil;
  __effectYNCode_isset = NO;
}

- (NSString *) effect {
  return [[__effect retain_stub] autorelease_stub];
}

- (void) setEffect: (NSString *) effect {
  [effect retain_stub];
  [__effect release_stub];
  __effect = effect;
  __effect_isset = YES;
}

- (BOOL) effectIsSet {
  return __effect_isset;
}

- (void) unsetEffect {
  [__effect release_stub];
  __effect = nil;
  __effect_isset = NO;
}

- (NSString *) transOrgReason {
  return [[__transOrgReason retain_stub] autorelease_stub];
}

- (void) setTransOrgReason: (NSString *) transOrgReason {
  [transOrgReason retain_stub];
  [__transOrgReason release_stub];
  __transOrgReason = transOrgReason;
  __transOrgReason_isset = YES;
}

- (BOOL) transOrgReasonIsSet {
  return __transOrgReason_isset;
}

- (void) unsetTransOrgReason {
  [__transOrgReason release_stub];
  __transOrgReason = nil;
  __transOrgReason_isset = NO;
}

- (NSString *) transOrg {
  return [[__transOrg retain_stub] autorelease_stub];
}

- (void) setTransOrg: (NSString *) transOrg {
  [transOrg retain_stub];
  [__transOrg release_stub];
  __transOrg = transOrg;
  __transOrg_isset = YES;
}

- (BOOL) transOrgIsSet {
  return __transOrg_isset;
}

- (void) unsetTransOrg {
  [__transOrg release_stub];
  __transOrg = nil;
  __transOrg_isset = NO;
}

- (NSString *) transDepartment {
  return [[__transDepartment retain_stub] autorelease_stub];
}

- (void) setTransDepartment: (NSString *) transDepartment {
  [transDepartment retain_stub];
  [__transDepartment release_stub];
  __transDepartment = transDepartment;
  __transDepartment_isset = YES;
}

- (BOOL) transDepartmentIsSet {
  return __transDepartment_isset;
}

- (void) unsetTransDepartment {
  [__transDepartment release_stub];
  __transDepartment = nil;
  __transDepartment_isset = NO;
}

- (NSString *) managementYNCode {
  return [[__managementYNCode retain_stub] autorelease_stub];
}

- (void) setManagementYNCode: (NSString *) managementYNCode {
  [managementYNCode retain_stub];
  [__managementYNCode release_stub];
  __managementYNCode = managementYNCode;
  __managementYNCode_isset = YES;
}

- (BOOL) managementYNCodeIsSet {
  return __managementYNCode_isset;
}

- (void) unsetManagementYNCode {
  [__managementYNCode release_stub];
  __managementYNCode = nil;
  __managementYNCode_isset = NO;
}

- (NSString *) management {
  return [[__management retain_stub] autorelease_stub];
}

- (void) setManagement: (NSString *) management {
  [management retain_stub];
  [__management release_stub];
  __management = management;
  __management_isset = YES;
}

- (BOOL) managementIsSet {
  return __management_isset;
}

- (void) unsetManagement {
  [__management release_stub];
  __management = nil;
  __management_isset = NO;
}

- (NSString *) visitDoctor {
  return [[__visitDoctor retain_stub] autorelease_stub];
}

- (void) setVisitDoctor: (NSString *) visitDoctor {
  [visitDoctor retain_stub];
  [__visitDoctor release_stub];
  __visitDoctor = visitDoctor;
  __visitDoctor_isset = YES;
}

- (BOOL) visitDoctorIsSet {
  return __visitDoctor_isset;
}

- (void) unsetVisitDoctor {
  [__visitDoctor release_stub];
  __visitDoctor = nil;
  __visitDoctor_isset = NO;
}

- (NSString *) visitDoctorCode {
  return [[__visitDoctorCode retain_stub] autorelease_stub];
}

- (void) setVisitDoctorCode: (NSString *) visitDoctorCode {
  [visitDoctorCode retain_stub];
  [__visitDoctorCode release_stub];
  __visitDoctorCode = visitDoctorCode;
  __visitDoctorCode_isset = YES;
}

- (BOOL) visitDoctorCodeIsSet {
  return __visitDoctorCode_isset;
}

- (void) unsetVisitDoctorCode {
  [__visitDoctorCode release_stub];
  __visitDoctorCode = nil;
  __visitDoctorCode_isset = NO;
}

- (NSString *) visitDateNext {
  return [[__visitDateNext retain_stub] autorelease_stub];
}

- (void) setVisitDateNext: (NSString *) visitDateNext {
  [visitDateNext retain_stub];
  [__visitDateNext release_stub];
  __visitDateNext = visitDateNext;
  __visitDateNext_isset = YES;
}

- (BOOL) visitDateNextIsSet {
  return __visitDateNext_isset;
}

- (void) unsetVisitDateNext {
  [__visitDateNext release_stub];
  __visitDateNext = nil;
  __visitDateNext_isset = NO;
}

- (NSString *) planStart {
  return [[__planStart retain_stub] autorelease_stub];
}

- (void) setPlanStart: (NSString *) planStart {
  [planStart retain_stub];
  [__planStart release_stub];
  __planStart = planStart;
  __planStart_isset = YES;
}

- (BOOL) planStartIsSet {
  return __planStart_isset;
}

- (void) unsetPlanStart {
  [__planStart release_stub];
  __planStart = nil;
  __planStart_isset = NO;
}

- (NSString *) planEnd {
  return [[__planEnd retain_stub] autorelease_stub];
}

- (void) setPlanEnd: (NSString *) planEnd {
  [planEnd retain_stub];
  [__planEnd release_stub];
  __planEnd = planEnd;
  __planEnd_isset = YES;
}

- (BOOL) planEndIsSet {
  return __planEnd_isset;
}

- (void) unsetPlanEnd {
  [__planEnd release_stub];
  __planEnd = nil;
  __planEnd_isset = NO;
}

- (NSString *) planStatus {
  return [[__planStatus retain_stub] autorelease_stub];
}

- (void) setPlanStatus: (NSString *) planStatus {
  [planStatus retain_stub];
  [__planStatus release_stub];
  __planStatus = planStatus;
  __planStatus_isset = YES;
}

- (BOOL) planStatusIsSet {
  return __planStatus_isset;
}

- (void) unsetPlanStatus {
  [__planStatus release_stub];
  __planStatus = nil;
  __planStatus_isset = NO;
}

- (NSString *) visitDoCode {
  return [[__visitDoCode retain_stub] autorelease_stub];
}

- (void) setVisitDoCode: (NSString *) visitDoCode {
  [visitDoCode retain_stub];
  [__visitDoCode release_stub];
  __visitDoCode = visitDoCode;
  __visitDoCode_isset = YES;
}

- (BOOL) visitDoCodeIsSet {
  return __visitDoCode_isset;
}

- (void) unsetVisitDoCode {
  [__visitDoCode release_stub];
  __visitDoCode = nil;
  __visitDoCode_isset = NO;
}

- (NSMutableArray *) visitDetails {
  return [[__visitDetails retain_stub] autorelease_stub];
}

- (void) setVisitDetails: (NSMutableArray *) visitDetails {
  [visitDetails retain_stub];
  [__visitDetails release_stub];
  __visitDetails = visitDetails;
  __visitDetails_isset = YES;
}

- (BOOL) visitDetailsIsSet {
  return __visitDetails_isset;
}

- (void) unsetVisitDetails {
  [__visitDetails release_stub];
  __visitDetails = nil;
  __visitDetails_isset = NO;
}

- (NSString *) healthTemplate {
  return [[__healthTemplate retain_stub] autorelease_stub];
}

- (void) setHealthTemplate: (NSString *) healthTemplate {
  [healthTemplate retain_stub];
  [__healthTemplate release_stub];
  __healthTemplate = healthTemplate;
  __healthTemplate_isset = YES;
}

- (BOOL) healthTemplateIsSet {
  return __healthTemplate_isset;
}

- (void) unsetHealthTemplate {
  [__healthTemplate release_stub];
  __healthTemplate = nil;
  __healthTemplate_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCard: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLastFlag: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVisitDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVisitTypeCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_LIST) {
          int _size136;
          [inProtocol readListBeginReturningElementType: NULL size: &_size136];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size136];
          int _i137;
          for (_i137 = 0; _i137 < _size136; ++_i137)
          {
            NSString * _elem138 = [inProtocol readString];
            [fieldValue addObject: _elem138];
          }
          [inProtocol readListEnd];
          [self setSymptom: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_LIST) {
          int _size139;
          [inProtocol readListBeginReturningElementType: NULL size: &_size139];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size139];
          int _i140;
          for (_i140 = 0; _i140 < _size139; ++_i140)
          {
            NSString * _elem141 = [inProtocol readString];
            [fieldValue addObject: _elem141];
          }
          [inProtocol readListEnd];
          [self setSymptomCode: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSymptomOther: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDiastolic: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSystolic: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHeight: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWeight: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWeightAdv: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHeartRate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSignsOther: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSmoke: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSmokeAdv: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrink: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrinkAdv: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSportWeekly: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSportEverytime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSportWeeklyAdv: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSportEverytimeAdv: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSaltCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSaltAdvCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 26:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAdjustmentCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 27:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAtmedicalCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 28:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuxiliary: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 29:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAtmedicationCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 30:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEffectYNCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 31:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEffect: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 32:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTransOrgReason: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 33:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTransOrg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 34:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTransDepartment: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 35:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setManagementYNCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 36:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setManagement: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 37:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVisitDoctor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 38:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVisitDoctorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 39:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVisitDateNext: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 40:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPlanStart: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 41:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPlanEnd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 42:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPlanStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 43:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVisitDoCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 44:
        if (fieldType == TType_LIST) {
          int _size142;
          [inProtocol readListBeginReturningElementType: NULL size: &_size142];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size142];
          int _i143;
          for (_i143 = 0; _i143 < _size142; ++_i143)
          {
            NXTFVisitDetailDto *_elem144 = [[NXTFVisitDetailDto alloc] init];
            [_elem144 read: inProtocol];
            [fieldValue addObject: _elem144];
            [_elem144 release_stub];
          }
          [inProtocol readListEnd];
          [self setVisitDetails: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 45:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHealthTemplate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 46:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FHBVisitDto"];
  if (__code_isset) {
    if (__code != nil) {
      [outProtocol writeFieldBeginWithName: @"code" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __code];
      [outProtocol writeFieldEnd];
    }
  }
  if (__card_isset) {
    if (__card != nil) {
      [outProtocol writeFieldBeginWithName: @"card" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __card];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastFlag_isset) {
    if (__lastFlag != nil) {
      [outProtocol writeFieldBeginWithName: @"lastFlag" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __lastFlag];
      [outProtocol writeFieldEnd];
    }
  }
  if (__visitDate_isset) {
    if (__visitDate != nil) {
      [outProtocol writeFieldBeginWithName: @"visitDate" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __visitDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__visitTypeCode_isset) {
    if (__visitTypeCode != nil) {
      [outProtocol writeFieldBeginWithName: @"visitTypeCode" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __visitTypeCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__symptom_isset) {
    if (__symptom != nil) {
      [outProtocol writeFieldBeginWithName: @"symptom" type: TType_LIST fieldID: 6];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__symptom count]];
        int idx146;
        for (idx146 = 0; idx146 < [__symptom count]; idx146++)
        {
          [outProtocol writeString: [__symptom objectAtIndex: idx146]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__symptomCode_isset) {
    if (__symptomCode != nil) {
      [outProtocol writeFieldBeginWithName: @"symptomCode" type: TType_LIST fieldID: 7];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__symptomCode count]];
        int idx148;
        for (idx148 = 0; idx148 < [__symptomCode count]; idx148++)
        {
          [outProtocol writeString: [__symptomCode objectAtIndex: idx148]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__symptomOther_isset) {
    if (__symptomOther != nil) {
      [outProtocol writeFieldBeginWithName: @"symptomOther" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __symptomOther];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diastolic_isset) {
    [outProtocol writeFieldBeginWithName: @"diastolic" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __diastolic];
    [outProtocol writeFieldEnd];
  }
  if (__systolic_isset) {
    [outProtocol writeFieldBeginWithName: @"systolic" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __systolic];
    [outProtocol writeFieldEnd];
  }
  if (__height_isset) {
    if (__height != nil) {
      [outProtocol writeFieldBeginWithName: @"height" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __height];
      [outProtocol writeFieldEnd];
    }
  }
  if (__weight_isset) {
    if (__weight != nil) {
      [outProtocol writeFieldBeginWithName: @"weight" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __weight];
      [outProtocol writeFieldEnd];
    }
  }
  if (__weightAdv_isset) {
    if (__weightAdv != nil) {
      [outProtocol writeFieldBeginWithName: @"weightAdv" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __weightAdv];
      [outProtocol writeFieldEnd];
    }
  }
  if (__heartRate_isset) {
    if (__heartRate != nil) {
      [outProtocol writeFieldBeginWithName: @"heartRate" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __heartRate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__signsOther_isset) {
    if (__signsOther != nil) {
      [outProtocol writeFieldBeginWithName: @"signsOther" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __signsOther];
      [outProtocol writeFieldEnd];
    }
  }
  if (__smoke_isset) {
    [outProtocol writeFieldBeginWithName: @"smoke" type: TType_I32 fieldID: 16];
    [outProtocol writeI32: __smoke];
    [outProtocol writeFieldEnd];
  }
  if (__smokeAdv_isset) {
    [outProtocol writeFieldBeginWithName: @"smokeAdv" type: TType_I32 fieldID: 17];
    [outProtocol writeI32: __smokeAdv];
    [outProtocol writeFieldEnd];
  }
  if (__drink_isset) {
    if (__drink != nil) {
      [outProtocol writeFieldBeginWithName: @"drink" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __drink];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drinkAdv_isset) {
    if (__drinkAdv != nil) {
      [outProtocol writeFieldBeginWithName: @"drinkAdv" type: TType_STRING fieldID: 19];
      [outProtocol writeString: __drinkAdv];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sportWeekly_isset) {
    [outProtocol writeFieldBeginWithName: @"sportWeekly" type: TType_I32 fieldID: 20];
    [outProtocol writeI32: __sportWeekly];
    [outProtocol writeFieldEnd];
  }
  if (__sportEverytime_isset) {
    [outProtocol writeFieldBeginWithName: @"sportEverytime" type: TType_I32 fieldID: 21];
    [outProtocol writeI32: __sportEverytime];
    [outProtocol writeFieldEnd];
  }
  if (__sportWeeklyAdv_isset) {
    [outProtocol writeFieldBeginWithName: @"sportWeeklyAdv" type: TType_I32 fieldID: 22];
    [outProtocol writeI32: __sportWeeklyAdv];
    [outProtocol writeFieldEnd];
  }
  if (__sportEverytimeAdv_isset) {
    [outProtocol writeFieldBeginWithName: @"sportEverytimeAdv" type: TType_I32 fieldID: 23];
    [outProtocol writeI32: __sportEverytimeAdv];
    [outProtocol writeFieldEnd];
  }
  if (__saltCode_isset) {
    if (__saltCode != nil) {
      [outProtocol writeFieldBeginWithName: @"saltCode" type: TType_STRING fieldID: 24];
      [outProtocol writeString: __saltCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__saltAdvCode_isset) {
    if (__saltAdvCode != nil) {
      [outProtocol writeFieldBeginWithName: @"saltAdvCode" type: TType_STRING fieldID: 25];
      [outProtocol writeString: __saltAdvCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__adjustmentCode_isset) {
    if (__adjustmentCode != nil) {
      [outProtocol writeFieldBeginWithName: @"adjustmentCode" type: TType_STRING fieldID: 26];
      [outProtocol writeString: __adjustmentCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__atmedicalCode_isset) {
    if (__atmedicalCode != nil) {
      [outProtocol writeFieldBeginWithName: @"atmedicalCode" type: TType_STRING fieldID: 27];
      [outProtocol writeString: __atmedicalCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__auxiliary_isset) {
    if (__auxiliary != nil) {
      [outProtocol writeFieldBeginWithName: @"auxiliary" type: TType_STRING fieldID: 28];
      [outProtocol writeString: __auxiliary];
      [outProtocol writeFieldEnd];
    }
  }
  if (__atmedicationCode_isset) {
    if (__atmedicationCode != nil) {
      [outProtocol writeFieldBeginWithName: @"atmedicationCode" type: TType_STRING fieldID: 29];
      [outProtocol writeString: __atmedicationCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__effectYNCode_isset) {
    if (__effectYNCode != nil) {
      [outProtocol writeFieldBeginWithName: @"effectYNCode" type: TType_STRING fieldID: 30];
      [outProtocol writeString: __effectYNCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__effect_isset) {
    if (__effect != nil) {
      [outProtocol writeFieldBeginWithName: @"effect" type: TType_STRING fieldID: 31];
      [outProtocol writeString: __effect];
      [outProtocol writeFieldEnd];
    }
  }
  if (__transOrgReason_isset) {
    if (__transOrgReason != nil) {
      [outProtocol writeFieldBeginWithName: @"transOrgReason" type: TType_STRING fieldID: 32];
      [outProtocol writeString: __transOrgReason];
      [outProtocol writeFieldEnd];
    }
  }
  if (__transOrg_isset) {
    if (__transOrg != nil) {
      [outProtocol writeFieldBeginWithName: @"transOrg" type: TType_STRING fieldID: 33];
      [outProtocol writeString: __transOrg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__transDepartment_isset) {
    if (__transDepartment != nil) {
      [outProtocol writeFieldBeginWithName: @"transDepartment" type: TType_STRING fieldID: 34];
      [outProtocol writeString: __transDepartment];
      [outProtocol writeFieldEnd];
    }
  }
  if (__managementYNCode_isset) {
    if (__managementYNCode != nil) {
      [outProtocol writeFieldBeginWithName: @"managementYNCode" type: TType_STRING fieldID: 35];
      [outProtocol writeString: __managementYNCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__management_isset) {
    if (__management != nil) {
      [outProtocol writeFieldBeginWithName: @"management" type: TType_STRING fieldID: 36];
      [outProtocol writeString: __management];
      [outProtocol writeFieldEnd];
    }
  }
  if (__visitDoctor_isset) {
    if (__visitDoctor != nil) {
      [outProtocol writeFieldBeginWithName: @"visitDoctor" type: TType_STRING fieldID: 37];
      [outProtocol writeString: __visitDoctor];
      [outProtocol writeFieldEnd];
    }
  }
  if (__visitDoctorCode_isset) {
    if (__visitDoctorCode != nil) {
      [outProtocol writeFieldBeginWithName: @"visitDoctorCode" type: TType_STRING fieldID: 38];
      [outProtocol writeString: __visitDoctorCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__visitDateNext_isset) {
    if (__visitDateNext != nil) {
      [outProtocol writeFieldBeginWithName: @"visitDateNext" type: TType_STRING fieldID: 39];
      [outProtocol writeString: __visitDateNext];
      [outProtocol writeFieldEnd];
    }
  }
  if (__planStart_isset) {
    if (__planStart != nil) {
      [outProtocol writeFieldBeginWithName: @"planStart" type: TType_STRING fieldID: 40];
      [outProtocol writeString: __planStart];
      [outProtocol writeFieldEnd];
    }
  }
  if (__planEnd_isset) {
    if (__planEnd != nil) {
      [outProtocol writeFieldBeginWithName: @"planEnd" type: TType_STRING fieldID: 41];
      [outProtocol writeString: __planEnd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__planStatus_isset) {
    if (__planStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"planStatus" type: TType_STRING fieldID: 42];
      [outProtocol writeString: __planStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__visitDoCode_isset) {
    if (__visitDoCode != nil) {
      [outProtocol writeFieldBeginWithName: @"visitDoCode" type: TType_STRING fieldID: 43];
      [outProtocol writeString: __visitDoCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__visitDetails_isset) {
    if (__visitDetails != nil) {
      [outProtocol writeFieldBeginWithName: @"visitDetails" type: TType_LIST fieldID: 44];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__visitDetails count]];
        int idx150;
        for (idx150 = 0; idx150 < [__visitDetails count]; idx150++)
        {
          [[__visitDetails objectAtIndex: idx150] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__healthTemplate_isset) {
    if (__healthTemplate != nil) {
      [outProtocol writeFieldBeginWithName: @"healthTemplate" type: TType_STRING fieldID: 45];
      [outProtocol writeString: __healthTemplate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 46];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFHBVisitDto("];
  [ms appendString: @"code:"];
  [ms appendFormat: @"\"%@\"", __code];
  [ms appendString: @",card:"];
  [ms appendFormat: @"\"%@\"", __card];
  [ms appendString: @",lastFlag:"];
  [ms appendFormat: @"\"%@\"", __lastFlag];
  [ms appendString: @",visitDate:"];
  [ms appendFormat: @"\"%@\"", __visitDate];
  [ms appendString: @",visitTypeCode:"];
  [ms appendFormat: @"\"%@\"", __visitTypeCode];
  [ms appendString: @",symptom:"];
  [ms appendFormat: @"%@", __symptom];
  [ms appendString: @",symptomCode:"];
  [ms appendFormat: @"%@", __symptomCode];
  [ms appendString: @",symptomOther:"];
  [ms appendFormat: @"\"%@\"", __symptomOther];
  [ms appendString: @",diastolic:"];
  [ms appendFormat: @"%i", __diastolic];
  [ms appendString: @",systolic:"];
  [ms appendFormat: @"%i", __systolic];
  [ms appendString: @",height:"];
  [ms appendFormat: @"\"%@\"", __height];
  [ms appendString: @",weight:"];
  [ms appendFormat: @"\"%@\"", __weight];
  [ms appendString: @",weightAdv:"];
  [ms appendFormat: @"\"%@\"", __weightAdv];
  [ms appendString: @",heartRate:"];
  [ms appendFormat: @"\"%@\"", __heartRate];
  [ms appendString: @",signsOther:"];
  [ms appendFormat: @"\"%@\"", __signsOther];
  [ms appendString: @",smoke:"];
  [ms appendFormat: @"%i", __smoke];
  [ms appendString: @",smokeAdv:"];
  [ms appendFormat: @"%i", __smokeAdv];
  [ms appendString: @",drink:"];
  [ms appendFormat: @"\"%@\"", __drink];
  [ms appendString: @",drinkAdv:"];
  [ms appendFormat: @"\"%@\"", __drinkAdv];
  [ms appendString: @",sportWeekly:"];
  [ms appendFormat: @"%i", __sportWeekly];
  [ms appendString: @",sportEverytime:"];
  [ms appendFormat: @"%i", __sportEverytime];
  [ms appendString: @",sportWeeklyAdv:"];
  [ms appendFormat: @"%i", __sportWeeklyAdv];
  [ms appendString: @",sportEverytimeAdv:"];
  [ms appendFormat: @"%i", __sportEverytimeAdv];
  [ms appendString: @",saltCode:"];
  [ms appendFormat: @"\"%@\"", __saltCode];
  [ms appendString: @",saltAdvCode:"];
  [ms appendFormat: @"\"%@\"", __saltAdvCode];
  [ms appendString: @",adjustmentCode:"];
  [ms appendFormat: @"\"%@\"", __adjustmentCode];
  [ms appendString: @",atmedicalCode:"];
  [ms appendFormat: @"\"%@\"", __atmedicalCode];
  [ms appendString: @",auxiliary:"];
  [ms appendFormat: @"\"%@\"", __auxiliary];
  [ms appendString: @",atmedicationCode:"];
  [ms appendFormat: @"\"%@\"", __atmedicationCode];
  [ms appendString: @",effectYNCode:"];
  [ms appendFormat: @"\"%@\"", __effectYNCode];
  [ms appendString: @",effect:"];
  [ms appendFormat: @"\"%@\"", __effect];
  [ms appendString: @",transOrgReason:"];
  [ms appendFormat: @"\"%@\"", __transOrgReason];
  [ms appendString: @",transOrg:"];
  [ms appendFormat: @"\"%@\"", __transOrg];
  [ms appendString: @",transDepartment:"];
  [ms appendFormat: @"\"%@\"", __transDepartment];
  [ms appendString: @",managementYNCode:"];
  [ms appendFormat: @"\"%@\"", __managementYNCode];
  [ms appendString: @",management:"];
  [ms appendFormat: @"\"%@\"", __management];
  [ms appendString: @",visitDoctor:"];
  [ms appendFormat: @"\"%@\"", __visitDoctor];
  [ms appendString: @",visitDoctorCode:"];
  [ms appendFormat: @"\"%@\"", __visitDoctorCode];
  [ms appendString: @",visitDateNext:"];
  [ms appendFormat: @"\"%@\"", __visitDateNext];
  [ms appendString: @",planStart:"];
  [ms appendFormat: @"\"%@\"", __planStart];
  [ms appendString: @",planEnd:"];
  [ms appendFormat: @"\"%@\"", __planEnd];
  [ms appendString: @",planStatus:"];
  [ms appendFormat: @"\"%@\"", __planStatus];
  [ms appendString: @",visitDoCode:"];
  [ms appendFormat: @"\"%@\"", __visitDoCode];
  [ms appendString: @",visitDetails:"];
  [ms appendFormat: @"%@", __visitDetails];
  [ms appendString: @",healthTemplate:"];
  [ms appendFormat: @"\"%@\"", __healthTemplate];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFHDVisitDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCode: (NSString *) code card: (NSString *) card lastFlag: (NSString *) lastFlag visitDate: (NSString *) visitDate visitTypeCode: (NSString *) visitTypeCode symptom: (NSMutableArray *) symptom symptomCode: (NSMutableArray *) symptomCode symptomOther: (NSString *) symptomOther diastolic: (int32_t) diastolic systolic: (int32_t) systolic height: (NSString *) height weight: (NSString *) weight weightAdv: (NSString *) weightAdv footBeat: (NSString *) footBeat footBeatCode: (NSString *) footBeatCode signsOther: (NSString *) signsOther smoke: (int32_t) smoke smokeAdv: (int32_t) smokeAdv drink: (NSString *) drink drinkAdv: (NSString *) drinkAdv sportWeekly: (int32_t) sportWeekly sportEveryTime: (int32_t) sportEveryTime sportWeeklyAdv: (int32_t) sportWeeklyAdv sportEveryTimeDav: (int32_t) sportEveryTimeDav stapleFood: (int32_t) stapleFood stapleFoodAdv: (int32_t) stapleFoodAdv adjustmentCode: (NSString *) adjustmentCode atMedicalCode: (NSString *) atMedicalCode fastingGlucose: (NSString *) fastingGlucose hemoglobin: (NSString *) hemoglobin checkDate: (NSString *) checkDate checkOther: (NSString *) checkOther atMedicationCode: (NSString *) atMedicationCode effectYNCode: (NSString *) effectYNCode effect: (NSString *) effect hypoglycemiaCode: (NSString *) hypoglycemiaCode transOrgReason: (NSString *) transOrgReason transOrg: (NSString *) transOrg transDepartment: (NSString *) transDepartment managementYNCode: (NSString *) managementYNCode management: (NSString *) management visitDoctor: (NSString *) visitDoctor visitDoctorCode: (NSString *) visitDoctorCode visitDateNext: (NSString *) visitDateNext planStart: (NSString *) planStart planEnd: (NSString *) planEnd planStatus: (NSString *) planStatus visitDoCode: (NSString *) visitDoCode visitDetails: (NSMutableArray *) visitDetails vegaFood: (NSString *) vegaFood vegaFoodAdv: (NSString *) vegaFoodAdv fruitFood: (NSString *) fruitFood fruitFoodAdv: (NSString *) fruitFoodAdv beanFood: (NSString *) beanFood beanFoodAdv: (NSString *) beanFoodAdv milkFood: (NSString *) milkFood milkFoodAdv: (NSString *) milkFoodAdv fishFood: (NSString *) fishFood fishFoodAdv: (NSString *) fishFoodAdv oilFood: (NSString *) oilFood oilFoodAdv: (NSString *) oilFoodAdv totalCalories: (NSString *) totalCalories totalCaloriesAdv: (NSString *) totalCaloriesAdv insulin: (NSString *) insulin insulinMethod: (NSString *) insulinMethod healthTemplate: (NSString *) healthTemplate physicalActivity: (NSString *) physicalActivity shape: (NSString *) shape auxiiliary: (NSString *) auxiiliary saltCode: (NSString *) saltCode heartRate: (NSString *) heartRate hospId: (int32_t) hospId
{
  self = [super init];
  __code = [code retain_stub];
  __code_isset = YES;
  __card = [card retain_stub];
  __card_isset = YES;
  __lastFlag = [lastFlag retain_stub];
  __lastFlag_isset = YES;
  __visitDate = [visitDate retain_stub];
  __visitDate_isset = YES;
  __visitTypeCode = [visitTypeCode retain_stub];
  __visitTypeCode_isset = YES;
  __symptom = [symptom retain_stub];
  __symptom_isset = YES;
  __symptomCode = [symptomCode retain_stub];
  __symptomCode_isset = YES;
  __symptomOther = [symptomOther retain_stub];
  __symptomOther_isset = YES;
  __diastolic = diastolic;
  __diastolic_isset = YES;
  __systolic = systolic;
  __systolic_isset = YES;
  __height = [height retain_stub];
  __height_isset = YES;
  __weight = [weight retain_stub];
  __weight_isset = YES;
  __weightAdv = [weightAdv retain_stub];
  __weightAdv_isset = YES;
  __footBeat = [footBeat retain_stub];
  __footBeat_isset = YES;
  __footBeatCode = [footBeatCode retain_stub];
  __footBeatCode_isset = YES;
  __signsOther = [signsOther retain_stub];
  __signsOther_isset = YES;
  __smoke = smoke;
  __smoke_isset = YES;
  __smokeAdv = smokeAdv;
  __smokeAdv_isset = YES;
  __drink = [drink retain_stub];
  __drink_isset = YES;
  __drinkAdv = [drinkAdv retain_stub];
  __drinkAdv_isset = YES;
  __sportWeekly = sportWeekly;
  __sportWeekly_isset = YES;
  __sportEveryTime = sportEveryTime;
  __sportEveryTime_isset = YES;
  __sportWeeklyAdv = sportWeeklyAdv;
  __sportWeeklyAdv_isset = YES;
  __sportEveryTimeDav = sportEveryTimeDav;
  __sportEveryTimeDav_isset = YES;
  __stapleFood = stapleFood;
  __stapleFood_isset = YES;
  __stapleFoodAdv = stapleFoodAdv;
  __stapleFoodAdv_isset = YES;
  __adjustmentCode = [adjustmentCode retain_stub];
  __adjustmentCode_isset = YES;
  __atMedicalCode = [atMedicalCode retain_stub];
  __atMedicalCode_isset = YES;
  __fastingGlucose = [fastingGlucose retain_stub];
  __fastingGlucose_isset = YES;
  __hemoglobin = [hemoglobin retain_stub];
  __hemoglobin_isset = YES;
  __checkDate = [checkDate retain_stub];
  __checkDate_isset = YES;
  __checkOther = [checkOther retain_stub];
  __checkOther_isset = YES;
  __atMedicationCode = [atMedicationCode retain_stub];
  __atMedicationCode_isset = YES;
  __effectYNCode = [effectYNCode retain_stub];
  __effectYNCode_isset = YES;
  __effect = [effect retain_stub];
  __effect_isset = YES;
  __hypoglycemiaCode = [hypoglycemiaCode retain_stub];
  __hypoglycemiaCode_isset = YES;
  __transOrgReason = [transOrgReason retain_stub];
  __transOrgReason_isset = YES;
  __transOrg = [transOrg retain_stub];
  __transOrg_isset = YES;
  __transDepartment = [transDepartment retain_stub];
  __transDepartment_isset = YES;
  __managementYNCode = [managementYNCode retain_stub];
  __managementYNCode_isset = YES;
  __management = [management retain_stub];
  __management_isset = YES;
  __visitDoctor = [visitDoctor retain_stub];
  __visitDoctor_isset = YES;
  __visitDoctorCode = [visitDoctorCode retain_stub];
  __visitDoctorCode_isset = YES;
  __visitDateNext = [visitDateNext retain_stub];
  __visitDateNext_isset = YES;
  __planStart = [planStart retain_stub];
  __planStart_isset = YES;
  __planEnd = [planEnd retain_stub];
  __planEnd_isset = YES;
  __planStatus = [planStatus retain_stub];
  __planStatus_isset = YES;
  __visitDoCode = [visitDoCode retain_stub];
  __visitDoCode_isset = YES;
  __visitDetails = [visitDetails retain_stub];
  __visitDetails_isset = YES;
  __vegaFood = [vegaFood retain_stub];
  __vegaFood_isset = YES;
  __vegaFoodAdv = [vegaFoodAdv retain_stub];
  __vegaFoodAdv_isset = YES;
  __fruitFood = [fruitFood retain_stub];
  __fruitFood_isset = YES;
  __fruitFoodAdv = [fruitFoodAdv retain_stub];
  __fruitFoodAdv_isset = YES;
  __beanFood = [beanFood retain_stub];
  __beanFood_isset = YES;
  __beanFoodAdv = [beanFoodAdv retain_stub];
  __beanFoodAdv_isset = YES;
  __milkFood = [milkFood retain_stub];
  __milkFood_isset = YES;
  __milkFoodAdv = [milkFoodAdv retain_stub];
  __milkFoodAdv_isset = YES;
  __fishFood = [fishFood retain_stub];
  __fishFood_isset = YES;
  __fishFoodAdv = [fishFoodAdv retain_stub];
  __fishFoodAdv_isset = YES;
  __oilFood = [oilFood retain_stub];
  __oilFood_isset = YES;
  __oilFoodAdv = [oilFoodAdv retain_stub];
  __oilFoodAdv_isset = YES;
  __totalCalories = [totalCalories retain_stub];
  __totalCalories_isset = YES;
  __totalCaloriesAdv = [totalCaloriesAdv retain_stub];
  __totalCaloriesAdv_isset = YES;
  __insulin = [insulin retain_stub];
  __insulin_isset = YES;
  __insulinMethod = [insulinMethod retain_stub];
  __insulinMethod_isset = YES;
  __healthTemplate = [healthTemplate retain_stub];
  __healthTemplate_isset = YES;
  __physicalActivity = [physicalActivity retain_stub];
  __physicalActivity_isset = YES;
  __shape = [shape retain_stub];
  __shape_isset = YES;
  __auxiiliary = [auxiiliary retain_stub];
  __auxiiliary_isset = YES;
  __saltCode = [saltCode retain_stub];
  __saltCode_isset = YES;
  __heartRate = [heartRate retain_stub];
  __heartRate_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [[decoder decodeObjectForKey: @"code"] retain_stub];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"card"])
  {
    __card = [[decoder decodeObjectForKey: @"card"] retain_stub];
    __card_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastFlag"])
  {
    __lastFlag = [[decoder decodeObjectForKey: @"lastFlag"] retain_stub];
    __lastFlag_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitDate"])
  {
    __visitDate = [[decoder decodeObjectForKey: @"visitDate"] retain_stub];
    __visitDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitTypeCode"])
  {
    __visitTypeCode = [[decoder decodeObjectForKey: @"visitTypeCode"] retain_stub];
    __visitTypeCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"symptom"])
  {
    __symptom = [[decoder decodeObjectForKey: @"symptom"] retain_stub];
    __symptom_isset = YES;
  }
  if ([decoder containsValueForKey: @"symptomCode"])
  {
    __symptomCode = [[decoder decodeObjectForKey: @"symptomCode"] retain_stub];
    __symptomCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"symptomOther"])
  {
    __symptomOther = [[decoder decodeObjectForKey: @"symptomOther"] retain_stub];
    __symptomOther_isset = YES;
  }
  if ([decoder containsValueForKey: @"diastolic"])
  {
    __diastolic = [decoder decodeInt32ForKey: @"diastolic"];
    __diastolic_isset = YES;
  }
  if ([decoder containsValueForKey: @"systolic"])
  {
    __systolic = [decoder decodeInt32ForKey: @"systolic"];
    __systolic_isset = YES;
  }
  if ([decoder containsValueForKey: @"height"])
  {
    __height = [[decoder decodeObjectForKey: @"height"] retain_stub];
    __height_isset = YES;
  }
  if ([decoder containsValueForKey: @"weight"])
  {
    __weight = [[decoder decodeObjectForKey: @"weight"] retain_stub];
    __weight_isset = YES;
  }
  if ([decoder containsValueForKey: @"weightAdv"])
  {
    __weightAdv = [[decoder decodeObjectForKey: @"weightAdv"] retain_stub];
    __weightAdv_isset = YES;
  }
  if ([decoder containsValueForKey: @"footBeat"])
  {
    __footBeat = [[decoder decodeObjectForKey: @"footBeat"] retain_stub];
    __footBeat_isset = YES;
  }
  if ([decoder containsValueForKey: @"footBeatCode"])
  {
    __footBeatCode = [[decoder decodeObjectForKey: @"footBeatCode"] retain_stub];
    __footBeatCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"signsOther"])
  {
    __signsOther = [[decoder decodeObjectForKey: @"signsOther"] retain_stub];
    __signsOther_isset = YES;
  }
  if ([decoder containsValueForKey: @"smoke"])
  {
    __smoke = [decoder decodeInt32ForKey: @"smoke"];
    __smoke_isset = YES;
  }
  if ([decoder containsValueForKey: @"smokeAdv"])
  {
    __smokeAdv = [decoder decodeInt32ForKey: @"smokeAdv"];
    __smokeAdv_isset = YES;
  }
  if ([decoder containsValueForKey: @"drink"])
  {
    __drink = [[decoder decodeObjectForKey: @"drink"] retain_stub];
    __drink_isset = YES;
  }
  if ([decoder containsValueForKey: @"drinkAdv"])
  {
    __drinkAdv = [[decoder decodeObjectForKey: @"drinkAdv"] retain_stub];
    __drinkAdv_isset = YES;
  }
  if ([decoder containsValueForKey: @"sportWeekly"])
  {
    __sportWeekly = [decoder decodeInt32ForKey: @"sportWeekly"];
    __sportWeekly_isset = YES;
  }
  if ([decoder containsValueForKey: @"sportEveryTime"])
  {
    __sportEveryTime = [decoder decodeInt32ForKey: @"sportEveryTime"];
    __sportEveryTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"sportWeeklyAdv"])
  {
    __sportWeeklyAdv = [decoder decodeInt32ForKey: @"sportWeeklyAdv"];
    __sportWeeklyAdv_isset = YES;
  }
  if ([decoder containsValueForKey: @"sportEveryTimeDav"])
  {
    __sportEveryTimeDav = [decoder decodeInt32ForKey: @"sportEveryTimeDav"];
    __sportEveryTimeDav_isset = YES;
  }
  if ([decoder containsValueForKey: @"stapleFood"])
  {
    __stapleFood = [decoder decodeInt32ForKey: @"stapleFood"];
    __stapleFood_isset = YES;
  }
  if ([decoder containsValueForKey: @"stapleFoodAdv"])
  {
    __stapleFoodAdv = [decoder decodeInt32ForKey: @"stapleFoodAdv"];
    __stapleFoodAdv_isset = YES;
  }
  if ([decoder containsValueForKey: @"adjustmentCode"])
  {
    __adjustmentCode = [[decoder decodeObjectForKey: @"adjustmentCode"] retain_stub];
    __adjustmentCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"atMedicalCode"])
  {
    __atMedicalCode = [[decoder decodeObjectForKey: @"atMedicalCode"] retain_stub];
    __atMedicalCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"fastingGlucose"])
  {
    __fastingGlucose = [[decoder decodeObjectForKey: @"fastingGlucose"] retain_stub];
    __fastingGlucose_isset = YES;
  }
  if ([decoder containsValueForKey: @"hemoglobin"])
  {
    __hemoglobin = [[decoder decodeObjectForKey: @"hemoglobin"] retain_stub];
    __hemoglobin_isset = YES;
  }
  if ([decoder containsValueForKey: @"checkDate"])
  {
    __checkDate = [[decoder decodeObjectForKey: @"checkDate"] retain_stub];
    __checkDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"checkOther"])
  {
    __checkOther = [[decoder decodeObjectForKey: @"checkOther"] retain_stub];
    __checkOther_isset = YES;
  }
  if ([decoder containsValueForKey: @"atMedicationCode"])
  {
    __atMedicationCode = [[decoder decodeObjectForKey: @"atMedicationCode"] retain_stub];
    __atMedicationCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"effectYNCode"])
  {
    __effectYNCode = [[decoder decodeObjectForKey: @"effectYNCode"] retain_stub];
    __effectYNCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"effect"])
  {
    __effect = [[decoder decodeObjectForKey: @"effect"] retain_stub];
    __effect_isset = YES;
  }
  if ([decoder containsValueForKey: @"hypoglycemiaCode"])
  {
    __hypoglycemiaCode = [[decoder decodeObjectForKey: @"hypoglycemiaCode"] retain_stub];
    __hypoglycemiaCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"transOrgReason"])
  {
    __transOrgReason = [[decoder decodeObjectForKey: @"transOrgReason"] retain_stub];
    __transOrgReason_isset = YES;
  }
  if ([decoder containsValueForKey: @"transOrg"])
  {
    __transOrg = [[decoder decodeObjectForKey: @"transOrg"] retain_stub];
    __transOrg_isset = YES;
  }
  if ([decoder containsValueForKey: @"transDepartment"])
  {
    __transDepartment = [[decoder decodeObjectForKey: @"transDepartment"] retain_stub];
    __transDepartment_isset = YES;
  }
  if ([decoder containsValueForKey: @"managementYNCode"])
  {
    __managementYNCode = [[decoder decodeObjectForKey: @"managementYNCode"] retain_stub];
    __managementYNCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"management"])
  {
    __management = [[decoder decodeObjectForKey: @"management"] retain_stub];
    __management_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitDoctor"])
  {
    __visitDoctor = [[decoder decodeObjectForKey: @"visitDoctor"] retain_stub];
    __visitDoctor_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitDoctorCode"])
  {
    __visitDoctorCode = [[decoder decodeObjectForKey: @"visitDoctorCode"] retain_stub];
    __visitDoctorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitDateNext"])
  {
    __visitDateNext = [[decoder decodeObjectForKey: @"visitDateNext"] retain_stub];
    __visitDateNext_isset = YES;
  }
  if ([decoder containsValueForKey: @"planStart"])
  {
    __planStart = [[decoder decodeObjectForKey: @"planStart"] retain_stub];
    __planStart_isset = YES;
  }
  if ([decoder containsValueForKey: @"planEnd"])
  {
    __planEnd = [[decoder decodeObjectForKey: @"planEnd"] retain_stub];
    __planEnd_isset = YES;
  }
  if ([decoder containsValueForKey: @"planStatus"])
  {
    __planStatus = [[decoder decodeObjectForKey: @"planStatus"] retain_stub];
    __planStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitDoCode"])
  {
    __visitDoCode = [[decoder decodeObjectForKey: @"visitDoCode"] retain_stub];
    __visitDoCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitDetails"])
  {
    __visitDetails = [[decoder decodeObjectForKey: @"visitDetails"] retain_stub];
    __visitDetails_isset = YES;
  }
  if ([decoder containsValueForKey: @"vegaFood"])
  {
    __vegaFood = [[decoder decodeObjectForKey: @"vegaFood"] retain_stub];
    __vegaFood_isset = YES;
  }
  if ([decoder containsValueForKey: @"vegaFoodAdv"])
  {
    __vegaFoodAdv = [[decoder decodeObjectForKey: @"vegaFoodAdv"] retain_stub];
    __vegaFoodAdv_isset = YES;
  }
  if ([decoder containsValueForKey: @"fruitFood"])
  {
    __fruitFood = [[decoder decodeObjectForKey: @"fruitFood"] retain_stub];
    __fruitFood_isset = YES;
  }
  if ([decoder containsValueForKey: @"fruitFoodAdv"])
  {
    __fruitFoodAdv = [[decoder decodeObjectForKey: @"fruitFoodAdv"] retain_stub];
    __fruitFoodAdv_isset = YES;
  }
  if ([decoder containsValueForKey: @"beanFood"])
  {
    __beanFood = [[decoder decodeObjectForKey: @"beanFood"] retain_stub];
    __beanFood_isset = YES;
  }
  if ([decoder containsValueForKey: @"beanFoodAdv"])
  {
    __beanFoodAdv = [[decoder decodeObjectForKey: @"beanFoodAdv"] retain_stub];
    __beanFoodAdv_isset = YES;
  }
  if ([decoder containsValueForKey: @"milkFood"])
  {
    __milkFood = [[decoder decodeObjectForKey: @"milkFood"] retain_stub];
    __milkFood_isset = YES;
  }
  if ([decoder containsValueForKey: @"milkFoodAdv"])
  {
    __milkFoodAdv = [[decoder decodeObjectForKey: @"milkFoodAdv"] retain_stub];
    __milkFoodAdv_isset = YES;
  }
  if ([decoder containsValueForKey: @"fishFood"])
  {
    __fishFood = [[decoder decodeObjectForKey: @"fishFood"] retain_stub];
    __fishFood_isset = YES;
  }
  if ([decoder containsValueForKey: @"fishFoodAdv"])
  {
    __fishFoodAdv = [[decoder decodeObjectForKey: @"fishFoodAdv"] retain_stub];
    __fishFoodAdv_isset = YES;
  }
  if ([decoder containsValueForKey: @"oilFood"])
  {
    __oilFood = [[decoder decodeObjectForKey: @"oilFood"] retain_stub];
    __oilFood_isset = YES;
  }
  if ([decoder containsValueForKey: @"oilFoodAdv"])
  {
    __oilFoodAdv = [[decoder decodeObjectForKey: @"oilFoodAdv"] retain_stub];
    __oilFoodAdv_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalCalories"])
  {
    __totalCalories = [[decoder decodeObjectForKey: @"totalCalories"] retain_stub];
    __totalCalories_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalCaloriesAdv"])
  {
    __totalCaloriesAdv = [[decoder decodeObjectForKey: @"totalCaloriesAdv"] retain_stub];
    __totalCaloriesAdv_isset = YES;
  }
  if ([decoder containsValueForKey: @"insulin"])
  {
    __insulin = [[decoder decodeObjectForKey: @"insulin"] retain_stub];
    __insulin_isset = YES;
  }
  if ([decoder containsValueForKey: @"insulinMethod"])
  {
    __insulinMethod = [[decoder decodeObjectForKey: @"insulinMethod"] retain_stub];
    __insulinMethod_isset = YES;
  }
  if ([decoder containsValueForKey: @"healthTemplate"])
  {
    __healthTemplate = [[decoder decodeObjectForKey: @"healthTemplate"] retain_stub];
    __healthTemplate_isset = YES;
  }
  if ([decoder containsValueForKey: @"physicalActivity"])
  {
    __physicalActivity = [[decoder decodeObjectForKey: @"physicalActivity"] retain_stub];
    __physicalActivity_isset = YES;
  }
  if ([decoder containsValueForKey: @"shape"])
  {
    __shape = [[decoder decodeObjectForKey: @"shape"] retain_stub];
    __shape_isset = YES;
  }
  if ([decoder containsValueForKey: @"auxiiliary"])
  {
    __auxiiliary = [[decoder decodeObjectForKey: @"auxiiliary"] retain_stub];
    __auxiiliary_isset = YES;
  }
  if ([decoder containsValueForKey: @"saltCode"])
  {
    __saltCode = [[decoder decodeObjectForKey: @"saltCode"] retain_stub];
    __saltCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"heartRate"])
  {
    __heartRate = [[decoder decodeObjectForKey: @"heartRate"] retain_stub];
    __heartRate_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__code_isset)
  {
    [encoder encodeObject: __code forKey: @"code"];
  }
  if (__card_isset)
  {
    [encoder encodeObject: __card forKey: @"card"];
  }
  if (__lastFlag_isset)
  {
    [encoder encodeObject: __lastFlag forKey: @"lastFlag"];
  }
  if (__visitDate_isset)
  {
    [encoder encodeObject: __visitDate forKey: @"visitDate"];
  }
  if (__visitTypeCode_isset)
  {
    [encoder encodeObject: __visitTypeCode forKey: @"visitTypeCode"];
  }
  if (__symptom_isset)
  {
    [encoder encodeObject: __symptom forKey: @"symptom"];
  }
  if (__symptomCode_isset)
  {
    [encoder encodeObject: __symptomCode forKey: @"symptomCode"];
  }
  if (__symptomOther_isset)
  {
    [encoder encodeObject: __symptomOther forKey: @"symptomOther"];
  }
  if (__diastolic_isset)
  {
    [encoder encodeInt32: __diastolic forKey: @"diastolic"];
  }
  if (__systolic_isset)
  {
    [encoder encodeInt32: __systolic forKey: @"systolic"];
  }
  if (__height_isset)
  {
    [encoder encodeObject: __height forKey: @"height"];
  }
  if (__weight_isset)
  {
    [encoder encodeObject: __weight forKey: @"weight"];
  }
  if (__weightAdv_isset)
  {
    [encoder encodeObject: __weightAdv forKey: @"weightAdv"];
  }
  if (__footBeat_isset)
  {
    [encoder encodeObject: __footBeat forKey: @"footBeat"];
  }
  if (__footBeatCode_isset)
  {
    [encoder encodeObject: __footBeatCode forKey: @"footBeatCode"];
  }
  if (__signsOther_isset)
  {
    [encoder encodeObject: __signsOther forKey: @"signsOther"];
  }
  if (__smoke_isset)
  {
    [encoder encodeInt32: __smoke forKey: @"smoke"];
  }
  if (__smokeAdv_isset)
  {
    [encoder encodeInt32: __smokeAdv forKey: @"smokeAdv"];
  }
  if (__drink_isset)
  {
    [encoder encodeObject: __drink forKey: @"drink"];
  }
  if (__drinkAdv_isset)
  {
    [encoder encodeObject: __drinkAdv forKey: @"drinkAdv"];
  }
  if (__sportWeekly_isset)
  {
    [encoder encodeInt32: __sportWeekly forKey: @"sportWeekly"];
  }
  if (__sportEveryTime_isset)
  {
    [encoder encodeInt32: __sportEveryTime forKey: @"sportEveryTime"];
  }
  if (__sportWeeklyAdv_isset)
  {
    [encoder encodeInt32: __sportWeeklyAdv forKey: @"sportWeeklyAdv"];
  }
  if (__sportEveryTimeDav_isset)
  {
    [encoder encodeInt32: __sportEveryTimeDav forKey: @"sportEveryTimeDav"];
  }
  if (__stapleFood_isset)
  {
    [encoder encodeInt32: __stapleFood forKey: @"stapleFood"];
  }
  if (__stapleFoodAdv_isset)
  {
    [encoder encodeInt32: __stapleFoodAdv forKey: @"stapleFoodAdv"];
  }
  if (__adjustmentCode_isset)
  {
    [encoder encodeObject: __adjustmentCode forKey: @"adjustmentCode"];
  }
  if (__atMedicalCode_isset)
  {
    [encoder encodeObject: __atMedicalCode forKey: @"atMedicalCode"];
  }
  if (__fastingGlucose_isset)
  {
    [encoder encodeObject: __fastingGlucose forKey: @"fastingGlucose"];
  }
  if (__hemoglobin_isset)
  {
    [encoder encodeObject: __hemoglobin forKey: @"hemoglobin"];
  }
  if (__checkDate_isset)
  {
    [encoder encodeObject: __checkDate forKey: @"checkDate"];
  }
  if (__checkOther_isset)
  {
    [encoder encodeObject: __checkOther forKey: @"checkOther"];
  }
  if (__atMedicationCode_isset)
  {
    [encoder encodeObject: __atMedicationCode forKey: @"atMedicationCode"];
  }
  if (__effectYNCode_isset)
  {
    [encoder encodeObject: __effectYNCode forKey: @"effectYNCode"];
  }
  if (__effect_isset)
  {
    [encoder encodeObject: __effect forKey: @"effect"];
  }
  if (__hypoglycemiaCode_isset)
  {
    [encoder encodeObject: __hypoglycemiaCode forKey: @"hypoglycemiaCode"];
  }
  if (__transOrgReason_isset)
  {
    [encoder encodeObject: __transOrgReason forKey: @"transOrgReason"];
  }
  if (__transOrg_isset)
  {
    [encoder encodeObject: __transOrg forKey: @"transOrg"];
  }
  if (__transDepartment_isset)
  {
    [encoder encodeObject: __transDepartment forKey: @"transDepartment"];
  }
  if (__managementYNCode_isset)
  {
    [encoder encodeObject: __managementYNCode forKey: @"managementYNCode"];
  }
  if (__management_isset)
  {
    [encoder encodeObject: __management forKey: @"management"];
  }
  if (__visitDoctor_isset)
  {
    [encoder encodeObject: __visitDoctor forKey: @"visitDoctor"];
  }
  if (__visitDoctorCode_isset)
  {
    [encoder encodeObject: __visitDoctorCode forKey: @"visitDoctorCode"];
  }
  if (__visitDateNext_isset)
  {
    [encoder encodeObject: __visitDateNext forKey: @"visitDateNext"];
  }
  if (__planStart_isset)
  {
    [encoder encodeObject: __planStart forKey: @"planStart"];
  }
  if (__planEnd_isset)
  {
    [encoder encodeObject: __planEnd forKey: @"planEnd"];
  }
  if (__planStatus_isset)
  {
    [encoder encodeObject: __planStatus forKey: @"planStatus"];
  }
  if (__visitDoCode_isset)
  {
    [encoder encodeObject: __visitDoCode forKey: @"visitDoCode"];
  }
  if (__visitDetails_isset)
  {
    [encoder encodeObject: __visitDetails forKey: @"visitDetails"];
  }
  if (__vegaFood_isset)
  {
    [encoder encodeObject: __vegaFood forKey: @"vegaFood"];
  }
  if (__vegaFoodAdv_isset)
  {
    [encoder encodeObject: __vegaFoodAdv forKey: @"vegaFoodAdv"];
  }
  if (__fruitFood_isset)
  {
    [encoder encodeObject: __fruitFood forKey: @"fruitFood"];
  }
  if (__fruitFoodAdv_isset)
  {
    [encoder encodeObject: __fruitFoodAdv forKey: @"fruitFoodAdv"];
  }
  if (__beanFood_isset)
  {
    [encoder encodeObject: __beanFood forKey: @"beanFood"];
  }
  if (__beanFoodAdv_isset)
  {
    [encoder encodeObject: __beanFoodAdv forKey: @"beanFoodAdv"];
  }
  if (__milkFood_isset)
  {
    [encoder encodeObject: __milkFood forKey: @"milkFood"];
  }
  if (__milkFoodAdv_isset)
  {
    [encoder encodeObject: __milkFoodAdv forKey: @"milkFoodAdv"];
  }
  if (__fishFood_isset)
  {
    [encoder encodeObject: __fishFood forKey: @"fishFood"];
  }
  if (__fishFoodAdv_isset)
  {
    [encoder encodeObject: __fishFoodAdv forKey: @"fishFoodAdv"];
  }
  if (__oilFood_isset)
  {
    [encoder encodeObject: __oilFood forKey: @"oilFood"];
  }
  if (__oilFoodAdv_isset)
  {
    [encoder encodeObject: __oilFoodAdv forKey: @"oilFoodAdv"];
  }
  if (__totalCalories_isset)
  {
    [encoder encodeObject: __totalCalories forKey: @"totalCalories"];
  }
  if (__totalCaloriesAdv_isset)
  {
    [encoder encodeObject: __totalCaloriesAdv forKey: @"totalCaloriesAdv"];
  }
  if (__insulin_isset)
  {
    [encoder encodeObject: __insulin forKey: @"insulin"];
  }
  if (__insulinMethod_isset)
  {
    [encoder encodeObject: __insulinMethod forKey: @"insulinMethod"];
  }
  if (__healthTemplate_isset)
  {
    [encoder encodeObject: __healthTemplate forKey: @"healthTemplate"];
  }
  if (__physicalActivity_isset)
  {
    [encoder encodeObject: __physicalActivity forKey: @"physicalActivity"];
  }
  if (__shape_isset)
  {
    [encoder encodeObject: __shape forKey: @"shape"];
  }
  if (__auxiiliary_isset)
  {
    [encoder encodeObject: __auxiiliary forKey: @"auxiiliary"];
  }
  if (__saltCode_isset)
  {
    [encoder encodeObject: __saltCode forKey: @"saltCode"];
  }
  if (__heartRate_isset)
  {
    [encoder encodeObject: __heartRate forKey: @"heartRate"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __code_isset ? 2654435761 : 0;
  if (__code_isset)
  {
    hash = (hash * 31) ^ [__code hash];
  }
  hash = (hash * 31) ^ __card_isset ? 2654435761 : 0;
  if (__card_isset)
  {
    hash = (hash * 31) ^ [__card hash];
  }
  hash = (hash * 31) ^ __lastFlag_isset ? 2654435761 : 0;
  if (__lastFlag_isset)
  {
    hash = (hash * 31) ^ [__lastFlag hash];
  }
  hash = (hash * 31) ^ __visitDate_isset ? 2654435761 : 0;
  if (__visitDate_isset)
  {
    hash = (hash * 31) ^ [__visitDate hash];
  }
  hash = (hash * 31) ^ __visitTypeCode_isset ? 2654435761 : 0;
  if (__visitTypeCode_isset)
  {
    hash = (hash * 31) ^ [__visitTypeCode hash];
  }
  hash = (hash * 31) ^ __symptom_isset ? 2654435761 : 0;
  if (__symptom_isset)
  {
    hash = (hash * 31) ^ [__symptom hash];
  }
  hash = (hash * 31) ^ __symptomCode_isset ? 2654435761 : 0;
  if (__symptomCode_isset)
  {
    hash = (hash * 31) ^ [__symptomCode hash];
  }
  hash = (hash * 31) ^ __symptomOther_isset ? 2654435761 : 0;
  if (__symptomOther_isset)
  {
    hash = (hash * 31) ^ [__symptomOther hash];
  }
  hash = (hash * 31) ^ __diastolic_isset ? 2654435761 : 0;
  if (__diastolic_isset)
  {
    hash = (hash * 31) ^ [@(__diastolic) hash];
  }
  hash = (hash * 31) ^ __systolic_isset ? 2654435761 : 0;
  if (__systolic_isset)
  {
    hash = (hash * 31) ^ [@(__systolic) hash];
  }
  hash = (hash * 31) ^ __height_isset ? 2654435761 : 0;
  if (__height_isset)
  {
    hash = (hash * 31) ^ [__height hash];
  }
  hash = (hash * 31) ^ __weight_isset ? 2654435761 : 0;
  if (__weight_isset)
  {
    hash = (hash * 31) ^ [__weight hash];
  }
  hash = (hash * 31) ^ __weightAdv_isset ? 2654435761 : 0;
  if (__weightAdv_isset)
  {
    hash = (hash * 31) ^ [__weightAdv hash];
  }
  hash = (hash * 31) ^ __footBeat_isset ? 2654435761 : 0;
  if (__footBeat_isset)
  {
    hash = (hash * 31) ^ [__footBeat hash];
  }
  hash = (hash * 31) ^ __footBeatCode_isset ? 2654435761 : 0;
  if (__footBeatCode_isset)
  {
    hash = (hash * 31) ^ [__footBeatCode hash];
  }
  hash = (hash * 31) ^ __signsOther_isset ? 2654435761 : 0;
  if (__signsOther_isset)
  {
    hash = (hash * 31) ^ [__signsOther hash];
  }
  hash = (hash * 31) ^ __smoke_isset ? 2654435761 : 0;
  if (__smoke_isset)
  {
    hash = (hash * 31) ^ [@(__smoke) hash];
  }
  hash = (hash * 31) ^ __smokeAdv_isset ? 2654435761 : 0;
  if (__smokeAdv_isset)
  {
    hash = (hash * 31) ^ [@(__smokeAdv) hash];
  }
  hash = (hash * 31) ^ __drink_isset ? 2654435761 : 0;
  if (__drink_isset)
  {
    hash = (hash * 31) ^ [__drink hash];
  }
  hash = (hash * 31) ^ __drinkAdv_isset ? 2654435761 : 0;
  if (__drinkAdv_isset)
  {
    hash = (hash * 31) ^ [__drinkAdv hash];
  }
  hash = (hash * 31) ^ __sportWeekly_isset ? 2654435761 : 0;
  if (__sportWeekly_isset)
  {
    hash = (hash * 31) ^ [@(__sportWeekly) hash];
  }
  hash = (hash * 31) ^ __sportEveryTime_isset ? 2654435761 : 0;
  if (__sportEveryTime_isset)
  {
    hash = (hash * 31) ^ [@(__sportEveryTime) hash];
  }
  hash = (hash * 31) ^ __sportWeeklyAdv_isset ? 2654435761 : 0;
  if (__sportWeeklyAdv_isset)
  {
    hash = (hash * 31) ^ [@(__sportWeeklyAdv) hash];
  }
  hash = (hash * 31) ^ __sportEveryTimeDav_isset ? 2654435761 : 0;
  if (__sportEveryTimeDav_isset)
  {
    hash = (hash * 31) ^ [@(__sportEveryTimeDav) hash];
  }
  hash = (hash * 31) ^ __stapleFood_isset ? 2654435761 : 0;
  if (__stapleFood_isset)
  {
    hash = (hash * 31) ^ [@(__stapleFood) hash];
  }
  hash = (hash * 31) ^ __stapleFoodAdv_isset ? 2654435761 : 0;
  if (__stapleFoodAdv_isset)
  {
    hash = (hash * 31) ^ [@(__stapleFoodAdv) hash];
  }
  hash = (hash * 31) ^ __adjustmentCode_isset ? 2654435761 : 0;
  if (__adjustmentCode_isset)
  {
    hash = (hash * 31) ^ [__adjustmentCode hash];
  }
  hash = (hash * 31) ^ __atMedicalCode_isset ? 2654435761 : 0;
  if (__atMedicalCode_isset)
  {
    hash = (hash * 31) ^ [__atMedicalCode hash];
  }
  hash = (hash * 31) ^ __fastingGlucose_isset ? 2654435761 : 0;
  if (__fastingGlucose_isset)
  {
    hash = (hash * 31) ^ [__fastingGlucose hash];
  }
  hash = (hash * 31) ^ __hemoglobin_isset ? 2654435761 : 0;
  if (__hemoglobin_isset)
  {
    hash = (hash * 31) ^ [__hemoglobin hash];
  }
  hash = (hash * 31) ^ __checkDate_isset ? 2654435761 : 0;
  if (__checkDate_isset)
  {
    hash = (hash * 31) ^ [__checkDate hash];
  }
  hash = (hash * 31) ^ __checkOther_isset ? 2654435761 : 0;
  if (__checkOther_isset)
  {
    hash = (hash * 31) ^ [__checkOther hash];
  }
  hash = (hash * 31) ^ __atMedicationCode_isset ? 2654435761 : 0;
  if (__atMedicationCode_isset)
  {
    hash = (hash * 31) ^ [__atMedicationCode hash];
  }
  hash = (hash * 31) ^ __effectYNCode_isset ? 2654435761 : 0;
  if (__effectYNCode_isset)
  {
    hash = (hash * 31) ^ [__effectYNCode hash];
  }
  hash = (hash * 31) ^ __effect_isset ? 2654435761 : 0;
  if (__effect_isset)
  {
    hash = (hash * 31) ^ [__effect hash];
  }
  hash = (hash * 31) ^ __hypoglycemiaCode_isset ? 2654435761 : 0;
  if (__hypoglycemiaCode_isset)
  {
    hash = (hash * 31) ^ [__hypoglycemiaCode hash];
  }
  hash = (hash * 31) ^ __transOrgReason_isset ? 2654435761 : 0;
  if (__transOrgReason_isset)
  {
    hash = (hash * 31) ^ [__transOrgReason hash];
  }
  hash = (hash * 31) ^ __transOrg_isset ? 2654435761 : 0;
  if (__transOrg_isset)
  {
    hash = (hash * 31) ^ [__transOrg hash];
  }
  hash = (hash * 31) ^ __transDepartment_isset ? 2654435761 : 0;
  if (__transDepartment_isset)
  {
    hash = (hash * 31) ^ [__transDepartment hash];
  }
  hash = (hash * 31) ^ __managementYNCode_isset ? 2654435761 : 0;
  if (__managementYNCode_isset)
  {
    hash = (hash * 31) ^ [__managementYNCode hash];
  }
  hash = (hash * 31) ^ __management_isset ? 2654435761 : 0;
  if (__management_isset)
  {
    hash = (hash * 31) ^ [__management hash];
  }
  hash = (hash * 31) ^ __visitDoctor_isset ? 2654435761 : 0;
  if (__visitDoctor_isset)
  {
    hash = (hash * 31) ^ [__visitDoctor hash];
  }
  hash = (hash * 31) ^ __visitDoctorCode_isset ? 2654435761 : 0;
  if (__visitDoctorCode_isset)
  {
    hash = (hash * 31) ^ [__visitDoctorCode hash];
  }
  hash = (hash * 31) ^ __visitDateNext_isset ? 2654435761 : 0;
  if (__visitDateNext_isset)
  {
    hash = (hash * 31) ^ [__visitDateNext hash];
  }
  hash = (hash * 31) ^ __planStart_isset ? 2654435761 : 0;
  if (__planStart_isset)
  {
    hash = (hash * 31) ^ [__planStart hash];
  }
  hash = (hash * 31) ^ __planEnd_isset ? 2654435761 : 0;
  if (__planEnd_isset)
  {
    hash = (hash * 31) ^ [__planEnd hash];
  }
  hash = (hash * 31) ^ __planStatus_isset ? 2654435761 : 0;
  if (__planStatus_isset)
  {
    hash = (hash * 31) ^ [__planStatus hash];
  }
  hash = (hash * 31) ^ __visitDoCode_isset ? 2654435761 : 0;
  if (__visitDoCode_isset)
  {
    hash = (hash * 31) ^ [__visitDoCode hash];
  }
  hash = (hash * 31) ^ __visitDetails_isset ? 2654435761 : 0;
  if (__visitDetails_isset)
  {
    hash = (hash * 31) ^ [__visitDetails hash];
  }
  hash = (hash * 31) ^ __vegaFood_isset ? 2654435761 : 0;
  if (__vegaFood_isset)
  {
    hash = (hash * 31) ^ [__vegaFood hash];
  }
  hash = (hash * 31) ^ __vegaFoodAdv_isset ? 2654435761 : 0;
  if (__vegaFoodAdv_isset)
  {
    hash = (hash * 31) ^ [__vegaFoodAdv hash];
  }
  hash = (hash * 31) ^ __fruitFood_isset ? 2654435761 : 0;
  if (__fruitFood_isset)
  {
    hash = (hash * 31) ^ [__fruitFood hash];
  }
  hash = (hash * 31) ^ __fruitFoodAdv_isset ? 2654435761 : 0;
  if (__fruitFoodAdv_isset)
  {
    hash = (hash * 31) ^ [__fruitFoodAdv hash];
  }
  hash = (hash * 31) ^ __beanFood_isset ? 2654435761 : 0;
  if (__beanFood_isset)
  {
    hash = (hash * 31) ^ [__beanFood hash];
  }
  hash = (hash * 31) ^ __beanFoodAdv_isset ? 2654435761 : 0;
  if (__beanFoodAdv_isset)
  {
    hash = (hash * 31) ^ [__beanFoodAdv hash];
  }
  hash = (hash * 31) ^ __milkFood_isset ? 2654435761 : 0;
  if (__milkFood_isset)
  {
    hash = (hash * 31) ^ [__milkFood hash];
  }
  hash = (hash * 31) ^ __milkFoodAdv_isset ? 2654435761 : 0;
  if (__milkFoodAdv_isset)
  {
    hash = (hash * 31) ^ [__milkFoodAdv hash];
  }
  hash = (hash * 31) ^ __fishFood_isset ? 2654435761 : 0;
  if (__fishFood_isset)
  {
    hash = (hash * 31) ^ [__fishFood hash];
  }
  hash = (hash * 31) ^ __fishFoodAdv_isset ? 2654435761 : 0;
  if (__fishFoodAdv_isset)
  {
    hash = (hash * 31) ^ [__fishFoodAdv hash];
  }
  hash = (hash * 31) ^ __oilFood_isset ? 2654435761 : 0;
  if (__oilFood_isset)
  {
    hash = (hash * 31) ^ [__oilFood hash];
  }
  hash = (hash * 31) ^ __oilFoodAdv_isset ? 2654435761 : 0;
  if (__oilFoodAdv_isset)
  {
    hash = (hash * 31) ^ [__oilFoodAdv hash];
  }
  hash = (hash * 31) ^ __totalCalories_isset ? 2654435761 : 0;
  if (__totalCalories_isset)
  {
    hash = (hash * 31) ^ [__totalCalories hash];
  }
  hash = (hash * 31) ^ __totalCaloriesAdv_isset ? 2654435761 : 0;
  if (__totalCaloriesAdv_isset)
  {
    hash = (hash * 31) ^ [__totalCaloriesAdv hash];
  }
  hash = (hash * 31) ^ __insulin_isset ? 2654435761 : 0;
  if (__insulin_isset)
  {
    hash = (hash * 31) ^ [__insulin hash];
  }
  hash = (hash * 31) ^ __insulinMethod_isset ? 2654435761 : 0;
  if (__insulinMethod_isset)
  {
    hash = (hash * 31) ^ [__insulinMethod hash];
  }
  hash = (hash * 31) ^ __healthTemplate_isset ? 2654435761 : 0;
  if (__healthTemplate_isset)
  {
    hash = (hash * 31) ^ [__healthTemplate hash];
  }
  hash = (hash * 31) ^ __physicalActivity_isset ? 2654435761 : 0;
  if (__physicalActivity_isset)
  {
    hash = (hash * 31) ^ [__physicalActivity hash];
  }
  hash = (hash * 31) ^ __shape_isset ? 2654435761 : 0;
  if (__shape_isset)
  {
    hash = (hash * 31) ^ [__shape hash];
  }
  hash = (hash * 31) ^ __auxiiliary_isset ? 2654435761 : 0;
  if (__auxiiliary_isset)
  {
    hash = (hash * 31) ^ [__auxiiliary hash];
  }
  hash = (hash * 31) ^ __saltCode_isset ? 2654435761 : 0;
  if (__saltCode_isset)
  {
    hash = (hash * 31) ^ [__saltCode hash];
  }
  hash = (hash * 31) ^ __heartRate_isset ? 2654435761 : 0;
  if (__heartRate_isset)
  {
    hash = (hash * 31) ^ [__heartRate hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFHDVisitDto class]]) {
    return NO;
  }
  NXTFFHDVisitDto *other = (NXTFFHDVisitDto *)anObject;
  if ((__code_isset != other->__code_isset) ||
      (__code_isset && ((__code || other->__code) && ![__code isEqual:other->__code]))) {
    return NO;
  }
  if ((__card_isset != other->__card_isset) ||
      (__card_isset && ((__card || other->__card) && ![__card isEqual:other->__card]))) {
    return NO;
  }
  if ((__lastFlag_isset != other->__lastFlag_isset) ||
      (__lastFlag_isset && ((__lastFlag || other->__lastFlag) && ![__lastFlag isEqual:other->__lastFlag]))) {
    return NO;
  }
  if ((__visitDate_isset != other->__visitDate_isset) ||
      (__visitDate_isset && ((__visitDate || other->__visitDate) && ![__visitDate isEqual:other->__visitDate]))) {
    return NO;
  }
  if ((__visitTypeCode_isset != other->__visitTypeCode_isset) ||
      (__visitTypeCode_isset && ((__visitTypeCode || other->__visitTypeCode) && ![__visitTypeCode isEqual:other->__visitTypeCode]))) {
    return NO;
  }
  if ((__symptom_isset != other->__symptom_isset) ||
      (__symptom_isset && ((__symptom || other->__symptom) && ![__symptom isEqual:other->__symptom]))) {
    return NO;
  }
  if ((__symptomCode_isset != other->__symptomCode_isset) ||
      (__symptomCode_isset && ((__symptomCode || other->__symptomCode) && ![__symptomCode isEqual:other->__symptomCode]))) {
    return NO;
  }
  if ((__symptomOther_isset != other->__symptomOther_isset) ||
      (__symptomOther_isset && ((__symptomOther || other->__symptomOther) && ![__symptomOther isEqual:other->__symptomOther]))) {
    return NO;
  }
  if ((__diastolic_isset != other->__diastolic_isset) ||
      (__diastolic_isset && (__diastolic != other->__diastolic))) {
    return NO;
  }
  if ((__systolic_isset != other->__systolic_isset) ||
      (__systolic_isset && (__systolic != other->__systolic))) {
    return NO;
  }
  if ((__height_isset != other->__height_isset) ||
      (__height_isset && ((__height || other->__height) && ![__height isEqual:other->__height]))) {
    return NO;
  }
  if ((__weight_isset != other->__weight_isset) ||
      (__weight_isset && ((__weight || other->__weight) && ![__weight isEqual:other->__weight]))) {
    return NO;
  }
  if ((__weightAdv_isset != other->__weightAdv_isset) ||
      (__weightAdv_isset && ((__weightAdv || other->__weightAdv) && ![__weightAdv isEqual:other->__weightAdv]))) {
    return NO;
  }
  if ((__footBeat_isset != other->__footBeat_isset) ||
      (__footBeat_isset && ((__footBeat || other->__footBeat) && ![__footBeat isEqual:other->__footBeat]))) {
    return NO;
  }
  if ((__footBeatCode_isset != other->__footBeatCode_isset) ||
      (__footBeatCode_isset && ((__footBeatCode || other->__footBeatCode) && ![__footBeatCode isEqual:other->__footBeatCode]))) {
    return NO;
  }
  if ((__signsOther_isset != other->__signsOther_isset) ||
      (__signsOther_isset && ((__signsOther || other->__signsOther) && ![__signsOther isEqual:other->__signsOther]))) {
    return NO;
  }
  if ((__smoke_isset != other->__smoke_isset) ||
      (__smoke_isset && (__smoke != other->__smoke))) {
    return NO;
  }
  if ((__smokeAdv_isset != other->__smokeAdv_isset) ||
      (__smokeAdv_isset && (__smokeAdv != other->__smokeAdv))) {
    return NO;
  }
  if ((__drink_isset != other->__drink_isset) ||
      (__drink_isset && ((__drink || other->__drink) && ![__drink isEqual:other->__drink]))) {
    return NO;
  }
  if ((__drinkAdv_isset != other->__drinkAdv_isset) ||
      (__drinkAdv_isset && ((__drinkAdv || other->__drinkAdv) && ![__drinkAdv isEqual:other->__drinkAdv]))) {
    return NO;
  }
  if ((__sportWeekly_isset != other->__sportWeekly_isset) ||
      (__sportWeekly_isset && (__sportWeekly != other->__sportWeekly))) {
    return NO;
  }
  if ((__sportEveryTime_isset != other->__sportEveryTime_isset) ||
      (__sportEveryTime_isset && (__sportEveryTime != other->__sportEveryTime))) {
    return NO;
  }
  if ((__sportWeeklyAdv_isset != other->__sportWeeklyAdv_isset) ||
      (__sportWeeklyAdv_isset && (__sportWeeklyAdv != other->__sportWeeklyAdv))) {
    return NO;
  }
  if ((__sportEveryTimeDav_isset != other->__sportEveryTimeDav_isset) ||
      (__sportEveryTimeDav_isset && (__sportEveryTimeDav != other->__sportEveryTimeDav))) {
    return NO;
  }
  if ((__stapleFood_isset != other->__stapleFood_isset) ||
      (__stapleFood_isset && (__stapleFood != other->__stapleFood))) {
    return NO;
  }
  if ((__stapleFoodAdv_isset != other->__stapleFoodAdv_isset) ||
      (__stapleFoodAdv_isset && (__stapleFoodAdv != other->__stapleFoodAdv))) {
    return NO;
  }
  if ((__adjustmentCode_isset != other->__adjustmentCode_isset) ||
      (__adjustmentCode_isset && ((__adjustmentCode || other->__adjustmentCode) && ![__adjustmentCode isEqual:other->__adjustmentCode]))) {
    return NO;
  }
  if ((__atMedicalCode_isset != other->__atMedicalCode_isset) ||
      (__atMedicalCode_isset && ((__atMedicalCode || other->__atMedicalCode) && ![__atMedicalCode isEqual:other->__atMedicalCode]))) {
    return NO;
  }
  if ((__fastingGlucose_isset != other->__fastingGlucose_isset) ||
      (__fastingGlucose_isset && ((__fastingGlucose || other->__fastingGlucose) && ![__fastingGlucose isEqual:other->__fastingGlucose]))) {
    return NO;
  }
  if ((__hemoglobin_isset != other->__hemoglobin_isset) ||
      (__hemoglobin_isset && ((__hemoglobin || other->__hemoglobin) && ![__hemoglobin isEqual:other->__hemoglobin]))) {
    return NO;
  }
  if ((__checkDate_isset != other->__checkDate_isset) ||
      (__checkDate_isset && ((__checkDate || other->__checkDate) && ![__checkDate isEqual:other->__checkDate]))) {
    return NO;
  }
  if ((__checkOther_isset != other->__checkOther_isset) ||
      (__checkOther_isset && ((__checkOther || other->__checkOther) && ![__checkOther isEqual:other->__checkOther]))) {
    return NO;
  }
  if ((__atMedicationCode_isset != other->__atMedicationCode_isset) ||
      (__atMedicationCode_isset && ((__atMedicationCode || other->__atMedicationCode) && ![__atMedicationCode isEqual:other->__atMedicationCode]))) {
    return NO;
  }
  if ((__effectYNCode_isset != other->__effectYNCode_isset) ||
      (__effectYNCode_isset && ((__effectYNCode || other->__effectYNCode) && ![__effectYNCode isEqual:other->__effectYNCode]))) {
    return NO;
  }
  if ((__effect_isset != other->__effect_isset) ||
      (__effect_isset && ((__effect || other->__effect) && ![__effect isEqual:other->__effect]))) {
    return NO;
  }
  if ((__hypoglycemiaCode_isset != other->__hypoglycemiaCode_isset) ||
      (__hypoglycemiaCode_isset && ((__hypoglycemiaCode || other->__hypoglycemiaCode) && ![__hypoglycemiaCode isEqual:other->__hypoglycemiaCode]))) {
    return NO;
  }
  if ((__transOrgReason_isset != other->__transOrgReason_isset) ||
      (__transOrgReason_isset && ((__transOrgReason || other->__transOrgReason) && ![__transOrgReason isEqual:other->__transOrgReason]))) {
    return NO;
  }
  if ((__transOrg_isset != other->__transOrg_isset) ||
      (__transOrg_isset && ((__transOrg || other->__transOrg) && ![__transOrg isEqual:other->__transOrg]))) {
    return NO;
  }
  if ((__transDepartment_isset != other->__transDepartment_isset) ||
      (__transDepartment_isset && ((__transDepartment || other->__transDepartment) && ![__transDepartment isEqual:other->__transDepartment]))) {
    return NO;
  }
  if ((__managementYNCode_isset != other->__managementYNCode_isset) ||
      (__managementYNCode_isset && ((__managementYNCode || other->__managementYNCode) && ![__managementYNCode isEqual:other->__managementYNCode]))) {
    return NO;
  }
  if ((__management_isset != other->__management_isset) ||
      (__management_isset && ((__management || other->__management) && ![__management isEqual:other->__management]))) {
    return NO;
  }
  if ((__visitDoctor_isset != other->__visitDoctor_isset) ||
      (__visitDoctor_isset && ((__visitDoctor || other->__visitDoctor) && ![__visitDoctor isEqual:other->__visitDoctor]))) {
    return NO;
  }
  if ((__visitDoctorCode_isset != other->__visitDoctorCode_isset) ||
      (__visitDoctorCode_isset && ((__visitDoctorCode || other->__visitDoctorCode) && ![__visitDoctorCode isEqual:other->__visitDoctorCode]))) {
    return NO;
  }
  if ((__visitDateNext_isset != other->__visitDateNext_isset) ||
      (__visitDateNext_isset && ((__visitDateNext || other->__visitDateNext) && ![__visitDateNext isEqual:other->__visitDateNext]))) {
    return NO;
  }
  if ((__planStart_isset != other->__planStart_isset) ||
      (__planStart_isset && ((__planStart || other->__planStart) && ![__planStart isEqual:other->__planStart]))) {
    return NO;
  }
  if ((__planEnd_isset != other->__planEnd_isset) ||
      (__planEnd_isset && ((__planEnd || other->__planEnd) && ![__planEnd isEqual:other->__planEnd]))) {
    return NO;
  }
  if ((__planStatus_isset != other->__planStatus_isset) ||
      (__planStatus_isset && ((__planStatus || other->__planStatus) && ![__planStatus isEqual:other->__planStatus]))) {
    return NO;
  }
  if ((__visitDoCode_isset != other->__visitDoCode_isset) ||
      (__visitDoCode_isset && ((__visitDoCode || other->__visitDoCode) && ![__visitDoCode isEqual:other->__visitDoCode]))) {
    return NO;
  }
  if ((__visitDetails_isset != other->__visitDetails_isset) ||
      (__visitDetails_isset && ((__visitDetails || other->__visitDetails) && ![__visitDetails isEqual:other->__visitDetails]))) {
    return NO;
  }
  if ((__vegaFood_isset != other->__vegaFood_isset) ||
      (__vegaFood_isset && ((__vegaFood || other->__vegaFood) && ![__vegaFood isEqual:other->__vegaFood]))) {
    return NO;
  }
  if ((__vegaFoodAdv_isset != other->__vegaFoodAdv_isset) ||
      (__vegaFoodAdv_isset && ((__vegaFoodAdv || other->__vegaFoodAdv) && ![__vegaFoodAdv isEqual:other->__vegaFoodAdv]))) {
    return NO;
  }
  if ((__fruitFood_isset != other->__fruitFood_isset) ||
      (__fruitFood_isset && ((__fruitFood || other->__fruitFood) && ![__fruitFood isEqual:other->__fruitFood]))) {
    return NO;
  }
  if ((__fruitFoodAdv_isset != other->__fruitFoodAdv_isset) ||
      (__fruitFoodAdv_isset && ((__fruitFoodAdv || other->__fruitFoodAdv) && ![__fruitFoodAdv isEqual:other->__fruitFoodAdv]))) {
    return NO;
  }
  if ((__beanFood_isset != other->__beanFood_isset) ||
      (__beanFood_isset && ((__beanFood || other->__beanFood) && ![__beanFood isEqual:other->__beanFood]))) {
    return NO;
  }
  if ((__beanFoodAdv_isset != other->__beanFoodAdv_isset) ||
      (__beanFoodAdv_isset && ((__beanFoodAdv || other->__beanFoodAdv) && ![__beanFoodAdv isEqual:other->__beanFoodAdv]))) {
    return NO;
  }
  if ((__milkFood_isset != other->__milkFood_isset) ||
      (__milkFood_isset && ((__milkFood || other->__milkFood) && ![__milkFood isEqual:other->__milkFood]))) {
    return NO;
  }
  if ((__milkFoodAdv_isset != other->__milkFoodAdv_isset) ||
      (__milkFoodAdv_isset && ((__milkFoodAdv || other->__milkFoodAdv) && ![__milkFoodAdv isEqual:other->__milkFoodAdv]))) {
    return NO;
  }
  if ((__fishFood_isset != other->__fishFood_isset) ||
      (__fishFood_isset && ((__fishFood || other->__fishFood) && ![__fishFood isEqual:other->__fishFood]))) {
    return NO;
  }
  if ((__fishFoodAdv_isset != other->__fishFoodAdv_isset) ||
      (__fishFoodAdv_isset && ((__fishFoodAdv || other->__fishFoodAdv) && ![__fishFoodAdv isEqual:other->__fishFoodAdv]))) {
    return NO;
  }
  if ((__oilFood_isset != other->__oilFood_isset) ||
      (__oilFood_isset && ((__oilFood || other->__oilFood) && ![__oilFood isEqual:other->__oilFood]))) {
    return NO;
  }
  if ((__oilFoodAdv_isset != other->__oilFoodAdv_isset) ||
      (__oilFoodAdv_isset && ((__oilFoodAdv || other->__oilFoodAdv) && ![__oilFoodAdv isEqual:other->__oilFoodAdv]))) {
    return NO;
  }
  if ((__totalCalories_isset != other->__totalCalories_isset) ||
      (__totalCalories_isset && ((__totalCalories || other->__totalCalories) && ![__totalCalories isEqual:other->__totalCalories]))) {
    return NO;
  }
  if ((__totalCaloriesAdv_isset != other->__totalCaloriesAdv_isset) ||
      (__totalCaloriesAdv_isset && ((__totalCaloriesAdv || other->__totalCaloriesAdv) && ![__totalCaloriesAdv isEqual:other->__totalCaloriesAdv]))) {
    return NO;
  }
  if ((__insulin_isset != other->__insulin_isset) ||
      (__insulin_isset && ((__insulin || other->__insulin) && ![__insulin isEqual:other->__insulin]))) {
    return NO;
  }
  if ((__insulinMethod_isset != other->__insulinMethod_isset) ||
      (__insulinMethod_isset && ((__insulinMethod || other->__insulinMethod) && ![__insulinMethod isEqual:other->__insulinMethod]))) {
    return NO;
  }
  if ((__healthTemplate_isset != other->__healthTemplate_isset) ||
      (__healthTemplate_isset && ((__healthTemplate || other->__healthTemplate) && ![__healthTemplate isEqual:other->__healthTemplate]))) {
    return NO;
  }
  if ((__physicalActivity_isset != other->__physicalActivity_isset) ||
      (__physicalActivity_isset && ((__physicalActivity || other->__physicalActivity) && ![__physicalActivity isEqual:other->__physicalActivity]))) {
    return NO;
  }
  if ((__shape_isset != other->__shape_isset) ||
      (__shape_isset && ((__shape || other->__shape) && ![__shape isEqual:other->__shape]))) {
    return NO;
  }
  if ((__auxiiliary_isset != other->__auxiiliary_isset) ||
      (__auxiiliary_isset && ((__auxiiliary || other->__auxiiliary) && ![__auxiiliary isEqual:other->__auxiiliary]))) {
    return NO;
  }
  if ((__saltCode_isset != other->__saltCode_isset) ||
      (__saltCode_isset && ((__saltCode || other->__saltCode) && ![__saltCode isEqual:other->__saltCode]))) {
    return NO;
  }
  if ((__heartRate_isset != other->__heartRate_isset) ||
      (__heartRate_isset && ((__heartRate || other->__heartRate) && ![__heartRate isEqual:other->__heartRate]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__code release_stub];
  [__card release_stub];
  [__lastFlag release_stub];
  [__visitDate release_stub];
  [__visitTypeCode release_stub];
  [__symptom release_stub];
  [__symptomCode release_stub];
  [__symptomOther release_stub];
  [__height release_stub];
  [__weight release_stub];
  [__weightAdv release_stub];
  [__footBeat release_stub];
  [__footBeatCode release_stub];
  [__signsOther release_stub];
  [__drink release_stub];
  [__drinkAdv release_stub];
  [__adjustmentCode release_stub];
  [__atMedicalCode release_stub];
  [__fastingGlucose release_stub];
  [__hemoglobin release_stub];
  [__checkDate release_stub];
  [__checkOther release_stub];
  [__atMedicationCode release_stub];
  [__effectYNCode release_stub];
  [__effect release_stub];
  [__hypoglycemiaCode release_stub];
  [__transOrgReason release_stub];
  [__transOrg release_stub];
  [__transDepartment release_stub];
  [__managementYNCode release_stub];
  [__management release_stub];
  [__visitDoctor release_stub];
  [__visitDoctorCode release_stub];
  [__visitDateNext release_stub];
  [__planStart release_stub];
  [__planEnd release_stub];
  [__planStatus release_stub];
  [__visitDoCode release_stub];
  [__visitDetails release_stub];
  [__vegaFood release_stub];
  [__vegaFoodAdv release_stub];
  [__fruitFood release_stub];
  [__fruitFoodAdv release_stub];
  [__beanFood release_stub];
  [__beanFoodAdv release_stub];
  [__milkFood release_stub];
  [__milkFoodAdv release_stub];
  [__fishFood release_stub];
  [__fishFoodAdv release_stub];
  [__oilFood release_stub];
  [__oilFoodAdv release_stub];
  [__totalCalories release_stub];
  [__totalCaloriesAdv release_stub];
  [__insulin release_stub];
  [__insulinMethod release_stub];
  [__healthTemplate release_stub];
  [__physicalActivity release_stub];
  [__shape release_stub];
  [__auxiiliary release_stub];
  [__saltCode release_stub];
  [__heartRate release_stub];
  [super dealloc_stub];
}

- (NSString *) code {
  return [[__code retain_stub] autorelease_stub];
}

- (void) setCode: (NSString *) code {
  [code retain_stub];
  [__code release_stub];
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  [__code release_stub];
  __code = nil;
  __code_isset = NO;
}

- (NSString *) card {
  return [[__card retain_stub] autorelease_stub];
}

- (void) setCard: (NSString *) card {
  [card retain_stub];
  [__card release_stub];
  __card = card;
  __card_isset = YES;
}

- (BOOL) cardIsSet {
  return __card_isset;
}

- (void) unsetCard {
  [__card release_stub];
  __card = nil;
  __card_isset = NO;
}

- (NSString *) lastFlag {
  return [[__lastFlag retain_stub] autorelease_stub];
}

- (void) setLastFlag: (NSString *) lastFlag {
  [lastFlag retain_stub];
  [__lastFlag release_stub];
  __lastFlag = lastFlag;
  __lastFlag_isset = YES;
}

- (BOOL) lastFlagIsSet {
  return __lastFlag_isset;
}

- (void) unsetLastFlag {
  [__lastFlag release_stub];
  __lastFlag = nil;
  __lastFlag_isset = NO;
}

- (NSString *) visitDate {
  return [[__visitDate retain_stub] autorelease_stub];
}

- (void) setVisitDate: (NSString *) visitDate {
  [visitDate retain_stub];
  [__visitDate release_stub];
  __visitDate = visitDate;
  __visitDate_isset = YES;
}

- (BOOL) visitDateIsSet {
  return __visitDate_isset;
}

- (void) unsetVisitDate {
  [__visitDate release_stub];
  __visitDate = nil;
  __visitDate_isset = NO;
}

- (NSString *) visitTypeCode {
  return [[__visitTypeCode retain_stub] autorelease_stub];
}

- (void) setVisitTypeCode: (NSString *) visitTypeCode {
  [visitTypeCode retain_stub];
  [__visitTypeCode release_stub];
  __visitTypeCode = visitTypeCode;
  __visitTypeCode_isset = YES;
}

- (BOOL) visitTypeCodeIsSet {
  return __visitTypeCode_isset;
}

- (void) unsetVisitTypeCode {
  [__visitTypeCode release_stub];
  __visitTypeCode = nil;
  __visitTypeCode_isset = NO;
}

- (NSMutableArray *) symptom {
  return [[__symptom retain_stub] autorelease_stub];
}

- (void) setSymptom: (NSMutableArray *) symptom {
  [symptom retain_stub];
  [__symptom release_stub];
  __symptom = symptom;
  __symptom_isset = YES;
}

- (BOOL) symptomIsSet {
  return __symptom_isset;
}

- (void) unsetSymptom {
  [__symptom release_stub];
  __symptom = nil;
  __symptom_isset = NO;
}

- (NSMutableArray *) symptomCode {
  return [[__symptomCode retain_stub] autorelease_stub];
}

- (void) setSymptomCode: (NSMutableArray *) symptomCode {
  [symptomCode retain_stub];
  [__symptomCode release_stub];
  __symptomCode = symptomCode;
  __symptomCode_isset = YES;
}

- (BOOL) symptomCodeIsSet {
  return __symptomCode_isset;
}

- (void) unsetSymptomCode {
  [__symptomCode release_stub];
  __symptomCode = nil;
  __symptomCode_isset = NO;
}

- (NSString *) symptomOther {
  return [[__symptomOther retain_stub] autorelease_stub];
}

- (void) setSymptomOther: (NSString *) symptomOther {
  [symptomOther retain_stub];
  [__symptomOther release_stub];
  __symptomOther = symptomOther;
  __symptomOther_isset = YES;
}

- (BOOL) symptomOtherIsSet {
  return __symptomOther_isset;
}

- (void) unsetSymptomOther {
  [__symptomOther release_stub];
  __symptomOther = nil;
  __symptomOther_isset = NO;
}

- (int32_t) diastolic {
  return __diastolic;
}

- (void) setDiastolic: (int32_t) diastolic {
  __diastolic = diastolic;
  __diastolic_isset = YES;
}

- (BOOL) diastolicIsSet {
  return __diastolic_isset;
}

- (void) unsetDiastolic {
  __diastolic_isset = NO;
}

- (int32_t) systolic {
  return __systolic;
}

- (void) setSystolic: (int32_t) systolic {
  __systolic = systolic;
  __systolic_isset = YES;
}

- (BOOL) systolicIsSet {
  return __systolic_isset;
}

- (void) unsetSystolic {
  __systolic_isset = NO;
}

- (NSString *) height {
  return [[__height retain_stub] autorelease_stub];
}

- (void) setHeight: (NSString *) height {
  [height retain_stub];
  [__height release_stub];
  __height = height;
  __height_isset = YES;
}

- (BOOL) heightIsSet {
  return __height_isset;
}

- (void) unsetHeight {
  [__height release_stub];
  __height = nil;
  __height_isset = NO;
}

- (NSString *) weight {
  return [[__weight retain_stub] autorelease_stub];
}

- (void) setWeight: (NSString *) weight {
  [weight retain_stub];
  [__weight release_stub];
  __weight = weight;
  __weight_isset = YES;
}

- (BOOL) weightIsSet {
  return __weight_isset;
}

- (void) unsetWeight {
  [__weight release_stub];
  __weight = nil;
  __weight_isset = NO;
}

- (NSString *) weightAdv {
  return [[__weightAdv retain_stub] autorelease_stub];
}

- (void) setWeightAdv: (NSString *) weightAdv {
  [weightAdv retain_stub];
  [__weightAdv release_stub];
  __weightAdv = weightAdv;
  __weightAdv_isset = YES;
}

- (BOOL) weightAdvIsSet {
  return __weightAdv_isset;
}

- (void) unsetWeightAdv {
  [__weightAdv release_stub];
  __weightAdv = nil;
  __weightAdv_isset = NO;
}

- (NSString *) footBeat {
  return [[__footBeat retain_stub] autorelease_stub];
}

- (void) setFootBeat: (NSString *) footBeat {
  [footBeat retain_stub];
  [__footBeat release_stub];
  __footBeat = footBeat;
  __footBeat_isset = YES;
}

- (BOOL) footBeatIsSet {
  return __footBeat_isset;
}

- (void) unsetFootBeat {
  [__footBeat release_stub];
  __footBeat = nil;
  __footBeat_isset = NO;
}

- (NSString *) footBeatCode {
  return [[__footBeatCode retain_stub] autorelease_stub];
}

- (void) setFootBeatCode: (NSString *) footBeatCode {
  [footBeatCode retain_stub];
  [__footBeatCode release_stub];
  __footBeatCode = footBeatCode;
  __footBeatCode_isset = YES;
}

- (BOOL) footBeatCodeIsSet {
  return __footBeatCode_isset;
}

- (void) unsetFootBeatCode {
  [__footBeatCode release_stub];
  __footBeatCode = nil;
  __footBeatCode_isset = NO;
}

- (NSString *) signsOther {
  return [[__signsOther retain_stub] autorelease_stub];
}

- (void) setSignsOther: (NSString *) signsOther {
  [signsOther retain_stub];
  [__signsOther release_stub];
  __signsOther = signsOther;
  __signsOther_isset = YES;
}

- (BOOL) signsOtherIsSet {
  return __signsOther_isset;
}

- (void) unsetSignsOther {
  [__signsOther release_stub];
  __signsOther = nil;
  __signsOther_isset = NO;
}

- (int32_t) smoke {
  return __smoke;
}

- (void) setSmoke: (int32_t) smoke {
  __smoke = smoke;
  __smoke_isset = YES;
}

- (BOOL) smokeIsSet {
  return __smoke_isset;
}

- (void) unsetSmoke {
  __smoke_isset = NO;
}

- (int32_t) smokeAdv {
  return __smokeAdv;
}

- (void) setSmokeAdv: (int32_t) smokeAdv {
  __smokeAdv = smokeAdv;
  __smokeAdv_isset = YES;
}

- (BOOL) smokeAdvIsSet {
  return __smokeAdv_isset;
}

- (void) unsetSmokeAdv {
  __smokeAdv_isset = NO;
}

- (NSString *) drink {
  return [[__drink retain_stub] autorelease_stub];
}

- (void) setDrink: (NSString *) drink {
  [drink retain_stub];
  [__drink release_stub];
  __drink = drink;
  __drink_isset = YES;
}

- (BOOL) drinkIsSet {
  return __drink_isset;
}

- (void) unsetDrink {
  [__drink release_stub];
  __drink = nil;
  __drink_isset = NO;
}

- (NSString *) drinkAdv {
  return [[__drinkAdv retain_stub] autorelease_stub];
}

- (void) setDrinkAdv: (NSString *) drinkAdv {
  [drinkAdv retain_stub];
  [__drinkAdv release_stub];
  __drinkAdv = drinkAdv;
  __drinkAdv_isset = YES;
}

- (BOOL) drinkAdvIsSet {
  return __drinkAdv_isset;
}

- (void) unsetDrinkAdv {
  [__drinkAdv release_stub];
  __drinkAdv = nil;
  __drinkAdv_isset = NO;
}

- (int32_t) sportWeekly {
  return __sportWeekly;
}

- (void) setSportWeekly: (int32_t) sportWeekly {
  __sportWeekly = sportWeekly;
  __sportWeekly_isset = YES;
}

- (BOOL) sportWeeklyIsSet {
  return __sportWeekly_isset;
}

- (void) unsetSportWeekly {
  __sportWeekly_isset = NO;
}

- (int32_t) sportEveryTime {
  return __sportEveryTime;
}

- (void) setSportEveryTime: (int32_t) sportEveryTime {
  __sportEveryTime = sportEveryTime;
  __sportEveryTime_isset = YES;
}

- (BOOL) sportEveryTimeIsSet {
  return __sportEveryTime_isset;
}

- (void) unsetSportEveryTime {
  __sportEveryTime_isset = NO;
}

- (int32_t) sportWeeklyAdv {
  return __sportWeeklyAdv;
}

- (void) setSportWeeklyAdv: (int32_t) sportWeeklyAdv {
  __sportWeeklyAdv = sportWeeklyAdv;
  __sportWeeklyAdv_isset = YES;
}

- (BOOL) sportWeeklyAdvIsSet {
  return __sportWeeklyAdv_isset;
}

- (void) unsetSportWeeklyAdv {
  __sportWeeklyAdv_isset = NO;
}

- (int32_t) sportEveryTimeDav {
  return __sportEveryTimeDav;
}

- (void) setSportEveryTimeDav: (int32_t) sportEveryTimeDav {
  __sportEveryTimeDav = sportEveryTimeDav;
  __sportEveryTimeDav_isset = YES;
}

- (BOOL) sportEveryTimeDavIsSet {
  return __sportEveryTimeDav_isset;
}

- (void) unsetSportEveryTimeDav {
  __sportEveryTimeDav_isset = NO;
}

- (int32_t) stapleFood {
  return __stapleFood;
}

- (void) setStapleFood: (int32_t) stapleFood {
  __stapleFood = stapleFood;
  __stapleFood_isset = YES;
}

- (BOOL) stapleFoodIsSet {
  return __stapleFood_isset;
}

- (void) unsetStapleFood {
  __stapleFood_isset = NO;
}

- (int32_t) stapleFoodAdv {
  return __stapleFoodAdv;
}

- (void) setStapleFoodAdv: (int32_t) stapleFoodAdv {
  __stapleFoodAdv = stapleFoodAdv;
  __stapleFoodAdv_isset = YES;
}

- (BOOL) stapleFoodAdvIsSet {
  return __stapleFoodAdv_isset;
}

- (void) unsetStapleFoodAdv {
  __stapleFoodAdv_isset = NO;
}

- (NSString *) adjustmentCode {
  return [[__adjustmentCode retain_stub] autorelease_stub];
}

- (void) setAdjustmentCode: (NSString *) adjustmentCode {
  [adjustmentCode retain_stub];
  [__adjustmentCode release_stub];
  __adjustmentCode = adjustmentCode;
  __adjustmentCode_isset = YES;
}

- (BOOL) adjustmentCodeIsSet {
  return __adjustmentCode_isset;
}

- (void) unsetAdjustmentCode {
  [__adjustmentCode release_stub];
  __adjustmentCode = nil;
  __adjustmentCode_isset = NO;
}

- (NSString *) atMedicalCode {
  return [[__atMedicalCode retain_stub] autorelease_stub];
}

- (void) setAtMedicalCode: (NSString *) atMedicalCode {
  [atMedicalCode retain_stub];
  [__atMedicalCode release_stub];
  __atMedicalCode = atMedicalCode;
  __atMedicalCode_isset = YES;
}

- (BOOL) atMedicalCodeIsSet {
  return __atMedicalCode_isset;
}

- (void) unsetAtMedicalCode {
  [__atMedicalCode release_stub];
  __atMedicalCode = nil;
  __atMedicalCode_isset = NO;
}

- (NSString *) fastingGlucose {
  return [[__fastingGlucose retain_stub] autorelease_stub];
}

- (void) setFastingGlucose: (NSString *) fastingGlucose {
  [fastingGlucose retain_stub];
  [__fastingGlucose release_stub];
  __fastingGlucose = fastingGlucose;
  __fastingGlucose_isset = YES;
}

- (BOOL) fastingGlucoseIsSet {
  return __fastingGlucose_isset;
}

- (void) unsetFastingGlucose {
  [__fastingGlucose release_stub];
  __fastingGlucose = nil;
  __fastingGlucose_isset = NO;
}

- (NSString *) hemoglobin {
  return [[__hemoglobin retain_stub] autorelease_stub];
}

- (void) setHemoglobin: (NSString *) hemoglobin {
  [hemoglobin retain_stub];
  [__hemoglobin release_stub];
  __hemoglobin = hemoglobin;
  __hemoglobin_isset = YES;
}

- (BOOL) hemoglobinIsSet {
  return __hemoglobin_isset;
}

- (void) unsetHemoglobin {
  [__hemoglobin release_stub];
  __hemoglobin = nil;
  __hemoglobin_isset = NO;
}

- (NSString *) checkDate {
  return [[__checkDate retain_stub] autorelease_stub];
}

- (void) setCheckDate: (NSString *) checkDate {
  [checkDate retain_stub];
  [__checkDate release_stub];
  __checkDate = checkDate;
  __checkDate_isset = YES;
}

- (BOOL) checkDateIsSet {
  return __checkDate_isset;
}

- (void) unsetCheckDate {
  [__checkDate release_stub];
  __checkDate = nil;
  __checkDate_isset = NO;
}

- (NSString *) checkOther {
  return [[__checkOther retain_stub] autorelease_stub];
}

- (void) setCheckOther: (NSString *) checkOther {
  [checkOther retain_stub];
  [__checkOther release_stub];
  __checkOther = checkOther;
  __checkOther_isset = YES;
}

- (BOOL) checkOtherIsSet {
  return __checkOther_isset;
}

- (void) unsetCheckOther {
  [__checkOther release_stub];
  __checkOther = nil;
  __checkOther_isset = NO;
}

- (NSString *) atMedicationCode {
  return [[__atMedicationCode retain_stub] autorelease_stub];
}

- (void) setAtMedicationCode: (NSString *) atMedicationCode {
  [atMedicationCode retain_stub];
  [__atMedicationCode release_stub];
  __atMedicationCode = atMedicationCode;
  __atMedicationCode_isset = YES;
}

- (BOOL) atMedicationCodeIsSet {
  return __atMedicationCode_isset;
}

- (void) unsetAtMedicationCode {
  [__atMedicationCode release_stub];
  __atMedicationCode = nil;
  __atMedicationCode_isset = NO;
}

- (NSString *) effectYNCode {
  return [[__effectYNCode retain_stub] autorelease_stub];
}

- (void) setEffectYNCode: (NSString *) effectYNCode {
  [effectYNCode retain_stub];
  [__effectYNCode release_stub];
  __effectYNCode = effectYNCode;
  __effectYNCode_isset = YES;
}

- (BOOL) effectYNCodeIsSet {
  return __effectYNCode_isset;
}

- (void) unsetEffectYNCode {
  [__effectYNCode release_stub];
  __effectYNCode = nil;
  __effectYNCode_isset = NO;
}

- (NSString *) effect {
  return [[__effect retain_stub] autorelease_stub];
}

- (void) setEffect: (NSString *) effect {
  [effect retain_stub];
  [__effect release_stub];
  __effect = effect;
  __effect_isset = YES;
}

- (BOOL) effectIsSet {
  return __effect_isset;
}

- (void) unsetEffect {
  [__effect release_stub];
  __effect = nil;
  __effect_isset = NO;
}

- (NSString *) hypoglycemiaCode {
  return [[__hypoglycemiaCode retain_stub] autorelease_stub];
}

- (void) setHypoglycemiaCode: (NSString *) hypoglycemiaCode {
  [hypoglycemiaCode retain_stub];
  [__hypoglycemiaCode release_stub];
  __hypoglycemiaCode = hypoglycemiaCode;
  __hypoglycemiaCode_isset = YES;
}

- (BOOL) hypoglycemiaCodeIsSet {
  return __hypoglycemiaCode_isset;
}

- (void) unsetHypoglycemiaCode {
  [__hypoglycemiaCode release_stub];
  __hypoglycemiaCode = nil;
  __hypoglycemiaCode_isset = NO;
}

- (NSString *) transOrgReason {
  return [[__transOrgReason retain_stub] autorelease_stub];
}

- (void) setTransOrgReason: (NSString *) transOrgReason {
  [transOrgReason retain_stub];
  [__transOrgReason release_stub];
  __transOrgReason = transOrgReason;
  __transOrgReason_isset = YES;
}

- (BOOL) transOrgReasonIsSet {
  return __transOrgReason_isset;
}

- (void) unsetTransOrgReason {
  [__transOrgReason release_stub];
  __transOrgReason = nil;
  __transOrgReason_isset = NO;
}

- (NSString *) transOrg {
  return [[__transOrg retain_stub] autorelease_stub];
}

- (void) setTransOrg: (NSString *) transOrg {
  [transOrg retain_stub];
  [__transOrg release_stub];
  __transOrg = transOrg;
  __transOrg_isset = YES;
}

- (BOOL) transOrgIsSet {
  return __transOrg_isset;
}

- (void) unsetTransOrg {
  [__transOrg release_stub];
  __transOrg = nil;
  __transOrg_isset = NO;
}

- (NSString *) transDepartment {
  return [[__transDepartment retain_stub] autorelease_stub];
}

- (void) setTransDepartment: (NSString *) transDepartment {
  [transDepartment retain_stub];
  [__transDepartment release_stub];
  __transDepartment = transDepartment;
  __transDepartment_isset = YES;
}

- (BOOL) transDepartmentIsSet {
  return __transDepartment_isset;
}

- (void) unsetTransDepartment {
  [__transDepartment release_stub];
  __transDepartment = nil;
  __transDepartment_isset = NO;
}

- (NSString *) managementYNCode {
  return [[__managementYNCode retain_stub] autorelease_stub];
}

- (void) setManagementYNCode: (NSString *) managementYNCode {
  [managementYNCode retain_stub];
  [__managementYNCode release_stub];
  __managementYNCode = managementYNCode;
  __managementYNCode_isset = YES;
}

- (BOOL) managementYNCodeIsSet {
  return __managementYNCode_isset;
}

- (void) unsetManagementYNCode {
  [__managementYNCode release_stub];
  __managementYNCode = nil;
  __managementYNCode_isset = NO;
}

- (NSString *) management {
  return [[__management retain_stub] autorelease_stub];
}

- (void) setManagement: (NSString *) management {
  [management retain_stub];
  [__management release_stub];
  __management = management;
  __management_isset = YES;
}

- (BOOL) managementIsSet {
  return __management_isset;
}

- (void) unsetManagement {
  [__management release_stub];
  __management = nil;
  __management_isset = NO;
}

- (NSString *) visitDoctor {
  return [[__visitDoctor retain_stub] autorelease_stub];
}

- (void) setVisitDoctor: (NSString *) visitDoctor {
  [visitDoctor retain_stub];
  [__visitDoctor release_stub];
  __visitDoctor = visitDoctor;
  __visitDoctor_isset = YES;
}

- (BOOL) visitDoctorIsSet {
  return __visitDoctor_isset;
}

- (void) unsetVisitDoctor {
  [__visitDoctor release_stub];
  __visitDoctor = nil;
  __visitDoctor_isset = NO;
}

- (NSString *) visitDoctorCode {
  return [[__visitDoctorCode retain_stub] autorelease_stub];
}

- (void) setVisitDoctorCode: (NSString *) visitDoctorCode {
  [visitDoctorCode retain_stub];
  [__visitDoctorCode release_stub];
  __visitDoctorCode = visitDoctorCode;
  __visitDoctorCode_isset = YES;
}

- (BOOL) visitDoctorCodeIsSet {
  return __visitDoctorCode_isset;
}

- (void) unsetVisitDoctorCode {
  [__visitDoctorCode release_stub];
  __visitDoctorCode = nil;
  __visitDoctorCode_isset = NO;
}

- (NSString *) visitDateNext {
  return [[__visitDateNext retain_stub] autorelease_stub];
}

- (void) setVisitDateNext: (NSString *) visitDateNext {
  [visitDateNext retain_stub];
  [__visitDateNext release_stub];
  __visitDateNext = visitDateNext;
  __visitDateNext_isset = YES;
}

- (BOOL) visitDateNextIsSet {
  return __visitDateNext_isset;
}

- (void) unsetVisitDateNext {
  [__visitDateNext release_stub];
  __visitDateNext = nil;
  __visitDateNext_isset = NO;
}

- (NSString *) planStart {
  return [[__planStart retain_stub] autorelease_stub];
}

- (void) setPlanStart: (NSString *) planStart {
  [planStart retain_stub];
  [__planStart release_stub];
  __planStart = planStart;
  __planStart_isset = YES;
}

- (BOOL) planStartIsSet {
  return __planStart_isset;
}

- (void) unsetPlanStart {
  [__planStart release_stub];
  __planStart = nil;
  __planStart_isset = NO;
}

- (NSString *) planEnd {
  return [[__planEnd retain_stub] autorelease_stub];
}

- (void) setPlanEnd: (NSString *) planEnd {
  [planEnd retain_stub];
  [__planEnd release_stub];
  __planEnd = planEnd;
  __planEnd_isset = YES;
}

- (BOOL) planEndIsSet {
  return __planEnd_isset;
}

- (void) unsetPlanEnd {
  [__planEnd release_stub];
  __planEnd = nil;
  __planEnd_isset = NO;
}

- (NSString *) planStatus {
  return [[__planStatus retain_stub] autorelease_stub];
}

- (void) setPlanStatus: (NSString *) planStatus {
  [planStatus retain_stub];
  [__planStatus release_stub];
  __planStatus = planStatus;
  __planStatus_isset = YES;
}

- (BOOL) planStatusIsSet {
  return __planStatus_isset;
}

- (void) unsetPlanStatus {
  [__planStatus release_stub];
  __planStatus = nil;
  __planStatus_isset = NO;
}

- (NSString *) visitDoCode {
  return [[__visitDoCode retain_stub] autorelease_stub];
}

- (void) setVisitDoCode: (NSString *) visitDoCode {
  [visitDoCode retain_stub];
  [__visitDoCode release_stub];
  __visitDoCode = visitDoCode;
  __visitDoCode_isset = YES;
}

- (BOOL) visitDoCodeIsSet {
  return __visitDoCode_isset;
}

- (void) unsetVisitDoCode {
  [__visitDoCode release_stub];
  __visitDoCode = nil;
  __visitDoCode_isset = NO;
}

- (NSMutableArray *) visitDetails {
  return [[__visitDetails retain_stub] autorelease_stub];
}

- (void) setVisitDetails: (NSMutableArray *) visitDetails {
  [visitDetails retain_stub];
  [__visitDetails release_stub];
  __visitDetails = visitDetails;
  __visitDetails_isset = YES;
}

- (BOOL) visitDetailsIsSet {
  return __visitDetails_isset;
}

- (void) unsetVisitDetails {
  [__visitDetails release_stub];
  __visitDetails = nil;
  __visitDetails_isset = NO;
}

- (NSString *) vegaFood {
  return [[__vegaFood retain_stub] autorelease_stub];
}

- (void) setVegaFood: (NSString *) vegaFood {
  [vegaFood retain_stub];
  [__vegaFood release_stub];
  __vegaFood = vegaFood;
  __vegaFood_isset = YES;
}

- (BOOL) vegaFoodIsSet {
  return __vegaFood_isset;
}

- (void) unsetVegaFood {
  [__vegaFood release_stub];
  __vegaFood = nil;
  __vegaFood_isset = NO;
}

- (NSString *) vegaFoodAdv {
  return [[__vegaFoodAdv retain_stub] autorelease_stub];
}

- (void) setVegaFoodAdv: (NSString *) vegaFoodAdv {
  [vegaFoodAdv retain_stub];
  [__vegaFoodAdv release_stub];
  __vegaFoodAdv = vegaFoodAdv;
  __vegaFoodAdv_isset = YES;
}

- (BOOL) vegaFoodAdvIsSet {
  return __vegaFoodAdv_isset;
}

- (void) unsetVegaFoodAdv {
  [__vegaFoodAdv release_stub];
  __vegaFoodAdv = nil;
  __vegaFoodAdv_isset = NO;
}

- (NSString *) fruitFood {
  return [[__fruitFood retain_stub] autorelease_stub];
}

- (void) setFruitFood: (NSString *) fruitFood {
  [fruitFood retain_stub];
  [__fruitFood release_stub];
  __fruitFood = fruitFood;
  __fruitFood_isset = YES;
}

- (BOOL) fruitFoodIsSet {
  return __fruitFood_isset;
}

- (void) unsetFruitFood {
  [__fruitFood release_stub];
  __fruitFood = nil;
  __fruitFood_isset = NO;
}

- (NSString *) fruitFoodAdv {
  return [[__fruitFoodAdv retain_stub] autorelease_stub];
}

- (void) setFruitFoodAdv: (NSString *) fruitFoodAdv {
  [fruitFoodAdv retain_stub];
  [__fruitFoodAdv release_stub];
  __fruitFoodAdv = fruitFoodAdv;
  __fruitFoodAdv_isset = YES;
}

- (BOOL) fruitFoodAdvIsSet {
  return __fruitFoodAdv_isset;
}

- (void) unsetFruitFoodAdv {
  [__fruitFoodAdv release_stub];
  __fruitFoodAdv = nil;
  __fruitFoodAdv_isset = NO;
}

- (NSString *) beanFood {
  return [[__beanFood retain_stub] autorelease_stub];
}

- (void) setBeanFood: (NSString *) beanFood {
  [beanFood retain_stub];
  [__beanFood release_stub];
  __beanFood = beanFood;
  __beanFood_isset = YES;
}

- (BOOL) beanFoodIsSet {
  return __beanFood_isset;
}

- (void) unsetBeanFood {
  [__beanFood release_stub];
  __beanFood = nil;
  __beanFood_isset = NO;
}

- (NSString *) beanFoodAdv {
  return [[__beanFoodAdv retain_stub] autorelease_stub];
}

- (void) setBeanFoodAdv: (NSString *) beanFoodAdv {
  [beanFoodAdv retain_stub];
  [__beanFoodAdv release_stub];
  __beanFoodAdv = beanFoodAdv;
  __beanFoodAdv_isset = YES;
}

- (BOOL) beanFoodAdvIsSet {
  return __beanFoodAdv_isset;
}

- (void) unsetBeanFoodAdv {
  [__beanFoodAdv release_stub];
  __beanFoodAdv = nil;
  __beanFoodAdv_isset = NO;
}

- (NSString *) milkFood {
  return [[__milkFood retain_stub] autorelease_stub];
}

- (void) setMilkFood: (NSString *) milkFood {
  [milkFood retain_stub];
  [__milkFood release_stub];
  __milkFood = milkFood;
  __milkFood_isset = YES;
}

- (BOOL) milkFoodIsSet {
  return __milkFood_isset;
}

- (void) unsetMilkFood {
  [__milkFood release_stub];
  __milkFood = nil;
  __milkFood_isset = NO;
}

- (NSString *) milkFoodAdv {
  return [[__milkFoodAdv retain_stub] autorelease_stub];
}

- (void) setMilkFoodAdv: (NSString *) milkFoodAdv {
  [milkFoodAdv retain_stub];
  [__milkFoodAdv release_stub];
  __milkFoodAdv = milkFoodAdv;
  __milkFoodAdv_isset = YES;
}

- (BOOL) milkFoodAdvIsSet {
  return __milkFoodAdv_isset;
}

- (void) unsetMilkFoodAdv {
  [__milkFoodAdv release_stub];
  __milkFoodAdv = nil;
  __milkFoodAdv_isset = NO;
}

- (NSString *) fishFood {
  return [[__fishFood retain_stub] autorelease_stub];
}

- (void) setFishFood: (NSString *) fishFood {
  [fishFood retain_stub];
  [__fishFood release_stub];
  __fishFood = fishFood;
  __fishFood_isset = YES;
}

- (BOOL) fishFoodIsSet {
  return __fishFood_isset;
}

- (void) unsetFishFood {
  [__fishFood release_stub];
  __fishFood = nil;
  __fishFood_isset = NO;
}

- (NSString *) fishFoodAdv {
  return [[__fishFoodAdv retain_stub] autorelease_stub];
}

- (void) setFishFoodAdv: (NSString *) fishFoodAdv {
  [fishFoodAdv retain_stub];
  [__fishFoodAdv release_stub];
  __fishFoodAdv = fishFoodAdv;
  __fishFoodAdv_isset = YES;
}

- (BOOL) fishFoodAdvIsSet {
  return __fishFoodAdv_isset;
}

- (void) unsetFishFoodAdv {
  [__fishFoodAdv release_stub];
  __fishFoodAdv = nil;
  __fishFoodAdv_isset = NO;
}

- (NSString *) oilFood {
  return [[__oilFood retain_stub] autorelease_stub];
}

- (void) setOilFood: (NSString *) oilFood {
  [oilFood retain_stub];
  [__oilFood release_stub];
  __oilFood = oilFood;
  __oilFood_isset = YES;
}

- (BOOL) oilFoodIsSet {
  return __oilFood_isset;
}

- (void) unsetOilFood {
  [__oilFood release_stub];
  __oilFood = nil;
  __oilFood_isset = NO;
}

- (NSString *) oilFoodAdv {
  return [[__oilFoodAdv retain_stub] autorelease_stub];
}

- (void) setOilFoodAdv: (NSString *) oilFoodAdv {
  [oilFoodAdv retain_stub];
  [__oilFoodAdv release_stub];
  __oilFoodAdv = oilFoodAdv;
  __oilFoodAdv_isset = YES;
}

- (BOOL) oilFoodAdvIsSet {
  return __oilFoodAdv_isset;
}

- (void) unsetOilFoodAdv {
  [__oilFoodAdv release_stub];
  __oilFoodAdv = nil;
  __oilFoodAdv_isset = NO;
}

- (NSString *) totalCalories {
  return [[__totalCalories retain_stub] autorelease_stub];
}

- (void) setTotalCalories: (NSString *) totalCalories {
  [totalCalories retain_stub];
  [__totalCalories release_stub];
  __totalCalories = totalCalories;
  __totalCalories_isset = YES;
}

- (BOOL) totalCaloriesIsSet {
  return __totalCalories_isset;
}

- (void) unsetTotalCalories {
  [__totalCalories release_stub];
  __totalCalories = nil;
  __totalCalories_isset = NO;
}

- (NSString *) totalCaloriesAdv {
  return [[__totalCaloriesAdv retain_stub] autorelease_stub];
}

- (void) setTotalCaloriesAdv: (NSString *) totalCaloriesAdv {
  [totalCaloriesAdv retain_stub];
  [__totalCaloriesAdv release_stub];
  __totalCaloriesAdv = totalCaloriesAdv;
  __totalCaloriesAdv_isset = YES;
}

- (BOOL) totalCaloriesAdvIsSet {
  return __totalCaloriesAdv_isset;
}

- (void) unsetTotalCaloriesAdv {
  [__totalCaloriesAdv release_stub];
  __totalCaloriesAdv = nil;
  __totalCaloriesAdv_isset = NO;
}

- (NSString *) insulin {
  return [[__insulin retain_stub] autorelease_stub];
}

- (void) setInsulin: (NSString *) insulin {
  [insulin retain_stub];
  [__insulin release_stub];
  __insulin = insulin;
  __insulin_isset = YES;
}

- (BOOL) insulinIsSet {
  return __insulin_isset;
}

- (void) unsetInsulin {
  [__insulin release_stub];
  __insulin = nil;
  __insulin_isset = NO;
}

- (NSString *) insulinMethod {
  return [[__insulinMethod retain_stub] autorelease_stub];
}

- (void) setInsulinMethod: (NSString *) insulinMethod {
  [insulinMethod retain_stub];
  [__insulinMethod release_stub];
  __insulinMethod = insulinMethod;
  __insulinMethod_isset = YES;
}

- (BOOL) insulinMethodIsSet {
  return __insulinMethod_isset;
}

- (void) unsetInsulinMethod {
  [__insulinMethod release_stub];
  __insulinMethod = nil;
  __insulinMethod_isset = NO;
}

- (NSString *) healthTemplate {
  return [[__healthTemplate retain_stub] autorelease_stub];
}

- (void) setHealthTemplate: (NSString *) healthTemplate {
  [healthTemplate retain_stub];
  [__healthTemplate release_stub];
  __healthTemplate = healthTemplate;
  __healthTemplate_isset = YES;
}

- (BOOL) healthTemplateIsSet {
  return __healthTemplate_isset;
}

- (void) unsetHealthTemplate {
  [__healthTemplate release_stub];
  __healthTemplate = nil;
  __healthTemplate_isset = NO;
}

- (NSString *) physicalActivity {
  return [[__physicalActivity retain_stub] autorelease_stub];
}

- (void) setPhysicalActivity: (NSString *) physicalActivity {
  [physicalActivity retain_stub];
  [__physicalActivity release_stub];
  __physicalActivity = physicalActivity;
  __physicalActivity_isset = YES;
}

- (BOOL) physicalActivityIsSet {
  return __physicalActivity_isset;
}

- (void) unsetPhysicalActivity {
  [__physicalActivity release_stub];
  __physicalActivity = nil;
  __physicalActivity_isset = NO;
}

- (NSString *) shape {
  return [[__shape retain_stub] autorelease_stub];
}

- (void) setShape: (NSString *) shape {
  [shape retain_stub];
  [__shape release_stub];
  __shape = shape;
  __shape_isset = YES;
}

- (BOOL) shapeIsSet {
  return __shape_isset;
}

- (void) unsetShape {
  [__shape release_stub];
  __shape = nil;
  __shape_isset = NO;
}

- (NSString *) auxiiliary {
  return [[__auxiiliary retain_stub] autorelease_stub];
}

- (void) setAuxiiliary: (NSString *) auxiiliary {
  [auxiiliary retain_stub];
  [__auxiiliary release_stub];
  __auxiiliary = auxiiliary;
  __auxiiliary_isset = YES;
}

- (BOOL) auxiiliaryIsSet {
  return __auxiiliary_isset;
}

- (void) unsetAuxiiliary {
  [__auxiiliary release_stub];
  __auxiiliary = nil;
  __auxiiliary_isset = NO;
}

- (NSString *) saltCode {
  return [[__saltCode retain_stub] autorelease_stub];
}

- (void) setSaltCode: (NSString *) saltCode {
  [saltCode retain_stub];
  [__saltCode release_stub];
  __saltCode = saltCode;
  __saltCode_isset = YES;
}

- (BOOL) saltCodeIsSet {
  return __saltCode_isset;
}

- (void) unsetSaltCode {
  [__saltCode release_stub];
  __saltCode = nil;
  __saltCode_isset = NO;
}

- (NSString *) heartRate {
  return [[__heartRate retain_stub] autorelease_stub];
}

- (void) setHeartRate: (NSString *) heartRate {
  [heartRate retain_stub];
  [__heartRate release_stub];
  __heartRate = heartRate;
  __heartRate_isset = YES;
}

- (BOOL) heartRateIsSet {
  return __heartRate_isset;
}

- (void) unsetHeartRate {
  [__heartRate release_stub];
  __heartRate = nil;
  __heartRate_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCard: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLastFlag: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVisitDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVisitTypeCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_LIST) {
          int _size151;
          [inProtocol readListBeginReturningElementType: NULL size: &_size151];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size151];
          int _i152;
          for (_i152 = 0; _i152 < _size151; ++_i152)
          {
            NSString * _elem153 = [inProtocol readString];
            [fieldValue addObject: _elem153];
          }
          [inProtocol readListEnd];
          [self setSymptom: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_LIST) {
          int _size154;
          [inProtocol readListBeginReturningElementType: NULL size: &_size154];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size154];
          int _i155;
          for (_i155 = 0; _i155 < _size154; ++_i155)
          {
            NSString * _elem156 = [inProtocol readString];
            [fieldValue addObject: _elem156];
          }
          [inProtocol readListEnd];
          [self setSymptomCode: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSymptomOther: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDiastolic: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSystolic: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHeight: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWeight: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWeightAdv: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFootBeat: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFootBeatCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSignsOther: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSmoke: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSmokeAdv: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrink: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrinkAdv: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSportWeekly: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSportEveryTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSportWeeklyAdv: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSportEveryTimeDav: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStapleFood: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 26:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStapleFoodAdv: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 27:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAdjustmentCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 28:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAtMedicalCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 29:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFastingGlucose: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 30:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHemoglobin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 31:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCheckDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 32:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCheckOther: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 33:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAtMedicationCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 34:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEffectYNCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 35:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEffect: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 36:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHypoglycemiaCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 37:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTransOrgReason: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 38:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTransOrg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 39:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTransDepartment: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 40:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setManagementYNCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 41:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setManagement: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 42:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVisitDoctor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 43:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVisitDoctorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 44:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVisitDateNext: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 45:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPlanStart: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 46:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPlanEnd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 47:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPlanStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 48:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVisitDoCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 49:
        if (fieldType == TType_LIST) {
          int _size157;
          [inProtocol readListBeginReturningElementType: NULL size: &_size157];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size157];
          int _i158;
          for (_i158 = 0; _i158 < _size157; ++_i158)
          {
            NXTFVisitDetailDto *_elem159 = [[NXTFVisitDetailDto alloc] init];
            [_elem159 read: inProtocol];
            [fieldValue addObject: _elem159];
            [_elem159 release_stub];
          }
          [inProtocol readListEnd];
          [self setVisitDetails: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 50:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVegaFood: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 51:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVegaFoodAdv: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 52:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFruitFood: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 53:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFruitFoodAdv: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 54:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBeanFood: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 55:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBeanFoodAdv: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 56:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMilkFood: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 57:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMilkFoodAdv: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 58:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFishFood: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 59:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFishFoodAdv: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 60:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOilFood: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 61:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOilFoodAdv: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 62:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTotalCalories: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 63:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTotalCaloriesAdv: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 64:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInsulin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 65:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInsulinMethod: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 66:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHealthTemplate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 67:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhysicalActivity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 68:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setShape: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 69:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuxiiliary: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 70:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSaltCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 71:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHeartRate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 72:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FHDVisitDto"];
  if (__code_isset) {
    if (__code != nil) {
      [outProtocol writeFieldBeginWithName: @"code" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __code];
      [outProtocol writeFieldEnd];
    }
  }
  if (__card_isset) {
    if (__card != nil) {
      [outProtocol writeFieldBeginWithName: @"card" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __card];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastFlag_isset) {
    if (__lastFlag != nil) {
      [outProtocol writeFieldBeginWithName: @"lastFlag" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __lastFlag];
      [outProtocol writeFieldEnd];
    }
  }
  if (__visitDate_isset) {
    if (__visitDate != nil) {
      [outProtocol writeFieldBeginWithName: @"visitDate" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __visitDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__visitTypeCode_isset) {
    if (__visitTypeCode != nil) {
      [outProtocol writeFieldBeginWithName: @"visitTypeCode" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __visitTypeCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__symptom_isset) {
    if (__symptom != nil) {
      [outProtocol writeFieldBeginWithName: @"symptom" type: TType_LIST fieldID: 6];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__symptom count]];
        int idx161;
        for (idx161 = 0; idx161 < [__symptom count]; idx161++)
        {
          [outProtocol writeString: [__symptom objectAtIndex: idx161]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__symptomCode_isset) {
    if (__symptomCode != nil) {
      [outProtocol writeFieldBeginWithName: @"symptomCode" type: TType_LIST fieldID: 7];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__symptomCode count]];
        int idx163;
        for (idx163 = 0; idx163 < [__symptomCode count]; idx163++)
        {
          [outProtocol writeString: [__symptomCode objectAtIndex: idx163]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__symptomOther_isset) {
    if (__symptomOther != nil) {
      [outProtocol writeFieldBeginWithName: @"symptomOther" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __symptomOther];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diastolic_isset) {
    [outProtocol writeFieldBeginWithName: @"diastolic" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __diastolic];
    [outProtocol writeFieldEnd];
  }
  if (__systolic_isset) {
    [outProtocol writeFieldBeginWithName: @"systolic" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __systolic];
    [outProtocol writeFieldEnd];
  }
  if (__height_isset) {
    if (__height != nil) {
      [outProtocol writeFieldBeginWithName: @"height" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __height];
      [outProtocol writeFieldEnd];
    }
  }
  if (__weight_isset) {
    if (__weight != nil) {
      [outProtocol writeFieldBeginWithName: @"weight" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __weight];
      [outProtocol writeFieldEnd];
    }
  }
  if (__weightAdv_isset) {
    if (__weightAdv != nil) {
      [outProtocol writeFieldBeginWithName: @"weightAdv" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __weightAdv];
      [outProtocol writeFieldEnd];
    }
  }
  if (__footBeat_isset) {
    if (__footBeat != nil) {
      [outProtocol writeFieldBeginWithName: @"footBeat" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __footBeat];
      [outProtocol writeFieldEnd];
    }
  }
  if (__footBeatCode_isset) {
    if (__footBeatCode != nil) {
      [outProtocol writeFieldBeginWithName: @"footBeatCode" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __footBeatCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__signsOther_isset) {
    if (__signsOther != nil) {
      [outProtocol writeFieldBeginWithName: @"signsOther" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __signsOther];
      [outProtocol writeFieldEnd];
    }
  }
  if (__smoke_isset) {
    [outProtocol writeFieldBeginWithName: @"smoke" type: TType_I32 fieldID: 17];
    [outProtocol writeI32: __smoke];
    [outProtocol writeFieldEnd];
  }
  if (__smokeAdv_isset) {
    [outProtocol writeFieldBeginWithName: @"smokeAdv" type: TType_I32 fieldID: 18];
    [outProtocol writeI32: __smokeAdv];
    [outProtocol writeFieldEnd];
  }
  if (__drink_isset) {
    if (__drink != nil) {
      [outProtocol writeFieldBeginWithName: @"drink" type: TType_STRING fieldID: 19];
      [outProtocol writeString: __drink];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drinkAdv_isset) {
    if (__drinkAdv != nil) {
      [outProtocol writeFieldBeginWithName: @"drinkAdv" type: TType_STRING fieldID: 20];
      [outProtocol writeString: __drinkAdv];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sportWeekly_isset) {
    [outProtocol writeFieldBeginWithName: @"sportWeekly" type: TType_I32 fieldID: 21];
    [outProtocol writeI32: __sportWeekly];
    [outProtocol writeFieldEnd];
  }
  if (__sportEveryTime_isset) {
    [outProtocol writeFieldBeginWithName: @"sportEveryTime" type: TType_I32 fieldID: 22];
    [outProtocol writeI32: __sportEveryTime];
    [outProtocol writeFieldEnd];
  }
  if (__sportWeeklyAdv_isset) {
    [outProtocol writeFieldBeginWithName: @"sportWeeklyAdv" type: TType_I32 fieldID: 23];
    [outProtocol writeI32: __sportWeeklyAdv];
    [outProtocol writeFieldEnd];
  }
  if (__sportEveryTimeDav_isset) {
    [outProtocol writeFieldBeginWithName: @"sportEveryTimeDav" type: TType_I32 fieldID: 24];
    [outProtocol writeI32: __sportEveryTimeDav];
    [outProtocol writeFieldEnd];
  }
  if (__stapleFood_isset) {
    [outProtocol writeFieldBeginWithName: @"stapleFood" type: TType_I32 fieldID: 25];
    [outProtocol writeI32: __stapleFood];
    [outProtocol writeFieldEnd];
  }
  if (__stapleFoodAdv_isset) {
    [outProtocol writeFieldBeginWithName: @"stapleFoodAdv" type: TType_I32 fieldID: 26];
    [outProtocol writeI32: __stapleFoodAdv];
    [outProtocol writeFieldEnd];
  }
  if (__adjustmentCode_isset) {
    if (__adjustmentCode != nil) {
      [outProtocol writeFieldBeginWithName: @"adjustmentCode" type: TType_STRING fieldID: 27];
      [outProtocol writeString: __adjustmentCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__atMedicalCode_isset) {
    if (__atMedicalCode != nil) {
      [outProtocol writeFieldBeginWithName: @"atMedicalCode" type: TType_STRING fieldID: 28];
      [outProtocol writeString: __atMedicalCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fastingGlucose_isset) {
    if (__fastingGlucose != nil) {
      [outProtocol writeFieldBeginWithName: @"fastingGlucose" type: TType_STRING fieldID: 29];
      [outProtocol writeString: __fastingGlucose];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hemoglobin_isset) {
    if (__hemoglobin != nil) {
      [outProtocol writeFieldBeginWithName: @"hemoglobin" type: TType_STRING fieldID: 30];
      [outProtocol writeString: __hemoglobin];
      [outProtocol writeFieldEnd];
    }
  }
  if (__checkDate_isset) {
    if (__checkDate != nil) {
      [outProtocol writeFieldBeginWithName: @"checkDate" type: TType_STRING fieldID: 31];
      [outProtocol writeString: __checkDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__checkOther_isset) {
    if (__checkOther != nil) {
      [outProtocol writeFieldBeginWithName: @"checkOther" type: TType_STRING fieldID: 32];
      [outProtocol writeString: __checkOther];
      [outProtocol writeFieldEnd];
    }
  }
  if (__atMedicationCode_isset) {
    if (__atMedicationCode != nil) {
      [outProtocol writeFieldBeginWithName: @"atMedicationCode" type: TType_STRING fieldID: 33];
      [outProtocol writeString: __atMedicationCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__effectYNCode_isset) {
    if (__effectYNCode != nil) {
      [outProtocol writeFieldBeginWithName: @"effectYNCode" type: TType_STRING fieldID: 34];
      [outProtocol writeString: __effectYNCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__effect_isset) {
    if (__effect != nil) {
      [outProtocol writeFieldBeginWithName: @"effect" type: TType_STRING fieldID: 35];
      [outProtocol writeString: __effect];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hypoglycemiaCode_isset) {
    if (__hypoglycemiaCode != nil) {
      [outProtocol writeFieldBeginWithName: @"hypoglycemiaCode" type: TType_STRING fieldID: 36];
      [outProtocol writeString: __hypoglycemiaCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__transOrgReason_isset) {
    if (__transOrgReason != nil) {
      [outProtocol writeFieldBeginWithName: @"transOrgReason" type: TType_STRING fieldID: 37];
      [outProtocol writeString: __transOrgReason];
      [outProtocol writeFieldEnd];
    }
  }
  if (__transOrg_isset) {
    if (__transOrg != nil) {
      [outProtocol writeFieldBeginWithName: @"transOrg" type: TType_STRING fieldID: 38];
      [outProtocol writeString: __transOrg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__transDepartment_isset) {
    if (__transDepartment != nil) {
      [outProtocol writeFieldBeginWithName: @"transDepartment" type: TType_STRING fieldID: 39];
      [outProtocol writeString: __transDepartment];
      [outProtocol writeFieldEnd];
    }
  }
  if (__managementYNCode_isset) {
    if (__managementYNCode != nil) {
      [outProtocol writeFieldBeginWithName: @"managementYNCode" type: TType_STRING fieldID: 40];
      [outProtocol writeString: __managementYNCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__management_isset) {
    if (__management != nil) {
      [outProtocol writeFieldBeginWithName: @"management" type: TType_STRING fieldID: 41];
      [outProtocol writeString: __management];
      [outProtocol writeFieldEnd];
    }
  }
  if (__visitDoctor_isset) {
    if (__visitDoctor != nil) {
      [outProtocol writeFieldBeginWithName: @"visitDoctor" type: TType_STRING fieldID: 42];
      [outProtocol writeString: __visitDoctor];
      [outProtocol writeFieldEnd];
    }
  }
  if (__visitDoctorCode_isset) {
    if (__visitDoctorCode != nil) {
      [outProtocol writeFieldBeginWithName: @"visitDoctorCode" type: TType_STRING fieldID: 43];
      [outProtocol writeString: __visitDoctorCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__visitDateNext_isset) {
    if (__visitDateNext != nil) {
      [outProtocol writeFieldBeginWithName: @"visitDateNext" type: TType_STRING fieldID: 44];
      [outProtocol writeString: __visitDateNext];
      [outProtocol writeFieldEnd];
    }
  }
  if (__planStart_isset) {
    if (__planStart != nil) {
      [outProtocol writeFieldBeginWithName: @"planStart" type: TType_STRING fieldID: 45];
      [outProtocol writeString: __planStart];
      [outProtocol writeFieldEnd];
    }
  }
  if (__planEnd_isset) {
    if (__planEnd != nil) {
      [outProtocol writeFieldBeginWithName: @"planEnd" type: TType_STRING fieldID: 46];
      [outProtocol writeString: __planEnd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__planStatus_isset) {
    if (__planStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"planStatus" type: TType_STRING fieldID: 47];
      [outProtocol writeString: __planStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__visitDoCode_isset) {
    if (__visitDoCode != nil) {
      [outProtocol writeFieldBeginWithName: @"visitDoCode" type: TType_STRING fieldID: 48];
      [outProtocol writeString: __visitDoCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__visitDetails_isset) {
    if (__visitDetails != nil) {
      [outProtocol writeFieldBeginWithName: @"visitDetails" type: TType_LIST fieldID: 49];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__visitDetails count]];
        int idx165;
        for (idx165 = 0; idx165 < [__visitDetails count]; idx165++)
        {
          [[__visitDetails objectAtIndex: idx165] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__vegaFood_isset) {
    if (__vegaFood != nil) {
      [outProtocol writeFieldBeginWithName: @"vegaFood" type: TType_STRING fieldID: 50];
      [outProtocol writeString: __vegaFood];
      [outProtocol writeFieldEnd];
    }
  }
  if (__vegaFoodAdv_isset) {
    if (__vegaFoodAdv != nil) {
      [outProtocol writeFieldBeginWithName: @"vegaFoodAdv" type: TType_STRING fieldID: 51];
      [outProtocol writeString: __vegaFoodAdv];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fruitFood_isset) {
    if (__fruitFood != nil) {
      [outProtocol writeFieldBeginWithName: @"fruitFood" type: TType_STRING fieldID: 52];
      [outProtocol writeString: __fruitFood];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fruitFoodAdv_isset) {
    if (__fruitFoodAdv != nil) {
      [outProtocol writeFieldBeginWithName: @"fruitFoodAdv" type: TType_STRING fieldID: 53];
      [outProtocol writeString: __fruitFoodAdv];
      [outProtocol writeFieldEnd];
    }
  }
  if (__beanFood_isset) {
    if (__beanFood != nil) {
      [outProtocol writeFieldBeginWithName: @"beanFood" type: TType_STRING fieldID: 54];
      [outProtocol writeString: __beanFood];
      [outProtocol writeFieldEnd];
    }
  }
  if (__beanFoodAdv_isset) {
    if (__beanFoodAdv != nil) {
      [outProtocol writeFieldBeginWithName: @"beanFoodAdv" type: TType_STRING fieldID: 55];
      [outProtocol writeString: __beanFoodAdv];
      [outProtocol writeFieldEnd];
    }
  }
  if (__milkFood_isset) {
    if (__milkFood != nil) {
      [outProtocol writeFieldBeginWithName: @"milkFood" type: TType_STRING fieldID: 56];
      [outProtocol writeString: __milkFood];
      [outProtocol writeFieldEnd];
    }
  }
  if (__milkFoodAdv_isset) {
    if (__milkFoodAdv != nil) {
      [outProtocol writeFieldBeginWithName: @"milkFoodAdv" type: TType_STRING fieldID: 57];
      [outProtocol writeString: __milkFoodAdv];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fishFood_isset) {
    if (__fishFood != nil) {
      [outProtocol writeFieldBeginWithName: @"fishFood" type: TType_STRING fieldID: 58];
      [outProtocol writeString: __fishFood];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fishFoodAdv_isset) {
    if (__fishFoodAdv != nil) {
      [outProtocol writeFieldBeginWithName: @"fishFoodAdv" type: TType_STRING fieldID: 59];
      [outProtocol writeString: __fishFoodAdv];
      [outProtocol writeFieldEnd];
    }
  }
  if (__oilFood_isset) {
    if (__oilFood != nil) {
      [outProtocol writeFieldBeginWithName: @"oilFood" type: TType_STRING fieldID: 60];
      [outProtocol writeString: __oilFood];
      [outProtocol writeFieldEnd];
    }
  }
  if (__oilFoodAdv_isset) {
    if (__oilFoodAdv != nil) {
      [outProtocol writeFieldBeginWithName: @"oilFoodAdv" type: TType_STRING fieldID: 61];
      [outProtocol writeString: __oilFoodAdv];
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalCalories_isset) {
    if (__totalCalories != nil) {
      [outProtocol writeFieldBeginWithName: @"totalCalories" type: TType_STRING fieldID: 62];
      [outProtocol writeString: __totalCalories];
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalCaloriesAdv_isset) {
    if (__totalCaloriesAdv != nil) {
      [outProtocol writeFieldBeginWithName: @"totalCaloriesAdv" type: TType_STRING fieldID: 63];
      [outProtocol writeString: __totalCaloriesAdv];
      [outProtocol writeFieldEnd];
    }
  }
  if (__insulin_isset) {
    if (__insulin != nil) {
      [outProtocol writeFieldBeginWithName: @"insulin" type: TType_STRING fieldID: 64];
      [outProtocol writeString: __insulin];
      [outProtocol writeFieldEnd];
    }
  }
  if (__insulinMethod_isset) {
    if (__insulinMethod != nil) {
      [outProtocol writeFieldBeginWithName: @"insulinMethod" type: TType_STRING fieldID: 65];
      [outProtocol writeString: __insulinMethod];
      [outProtocol writeFieldEnd];
    }
  }
  if (__healthTemplate_isset) {
    if (__healthTemplate != nil) {
      [outProtocol writeFieldBeginWithName: @"healthTemplate" type: TType_STRING fieldID: 66];
      [outProtocol writeString: __healthTemplate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__physicalActivity_isset) {
    if (__physicalActivity != nil) {
      [outProtocol writeFieldBeginWithName: @"physicalActivity" type: TType_STRING fieldID: 67];
      [outProtocol writeString: __physicalActivity];
      [outProtocol writeFieldEnd];
    }
  }
  if (__shape_isset) {
    if (__shape != nil) {
      [outProtocol writeFieldBeginWithName: @"shape" type: TType_STRING fieldID: 68];
      [outProtocol writeString: __shape];
      [outProtocol writeFieldEnd];
    }
  }
  if (__auxiiliary_isset) {
    if (__auxiiliary != nil) {
      [outProtocol writeFieldBeginWithName: @"auxiiliary" type: TType_STRING fieldID: 69];
      [outProtocol writeString: __auxiiliary];
      [outProtocol writeFieldEnd];
    }
  }
  if (__saltCode_isset) {
    if (__saltCode != nil) {
      [outProtocol writeFieldBeginWithName: @"saltCode" type: TType_STRING fieldID: 70];
      [outProtocol writeString: __saltCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__heartRate_isset) {
    if (__heartRate != nil) {
      [outProtocol writeFieldBeginWithName: @"heartRate" type: TType_STRING fieldID: 71];
      [outProtocol writeString: __heartRate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 72];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFHDVisitDto("];
  [ms appendString: @"code:"];
  [ms appendFormat: @"\"%@\"", __code];
  [ms appendString: @",card:"];
  [ms appendFormat: @"\"%@\"", __card];
  [ms appendString: @",lastFlag:"];
  [ms appendFormat: @"\"%@\"", __lastFlag];
  [ms appendString: @",visitDate:"];
  [ms appendFormat: @"\"%@\"", __visitDate];
  [ms appendString: @",visitTypeCode:"];
  [ms appendFormat: @"\"%@\"", __visitTypeCode];
  [ms appendString: @",symptom:"];
  [ms appendFormat: @"%@", __symptom];
  [ms appendString: @",symptomCode:"];
  [ms appendFormat: @"%@", __symptomCode];
  [ms appendString: @",symptomOther:"];
  [ms appendFormat: @"\"%@\"", __symptomOther];
  [ms appendString: @",diastolic:"];
  [ms appendFormat: @"%i", __diastolic];
  [ms appendString: @",systolic:"];
  [ms appendFormat: @"%i", __systolic];
  [ms appendString: @",height:"];
  [ms appendFormat: @"\"%@\"", __height];
  [ms appendString: @",weight:"];
  [ms appendFormat: @"\"%@\"", __weight];
  [ms appendString: @",weightAdv:"];
  [ms appendFormat: @"\"%@\"", __weightAdv];
  [ms appendString: @",footBeat:"];
  [ms appendFormat: @"\"%@\"", __footBeat];
  [ms appendString: @",footBeatCode:"];
  [ms appendFormat: @"\"%@\"", __footBeatCode];
  [ms appendString: @",signsOther:"];
  [ms appendFormat: @"\"%@\"", __signsOther];
  [ms appendString: @",smoke:"];
  [ms appendFormat: @"%i", __smoke];
  [ms appendString: @",smokeAdv:"];
  [ms appendFormat: @"%i", __smokeAdv];
  [ms appendString: @",drink:"];
  [ms appendFormat: @"\"%@\"", __drink];
  [ms appendString: @",drinkAdv:"];
  [ms appendFormat: @"\"%@\"", __drinkAdv];
  [ms appendString: @",sportWeekly:"];
  [ms appendFormat: @"%i", __sportWeekly];
  [ms appendString: @",sportEveryTime:"];
  [ms appendFormat: @"%i", __sportEveryTime];
  [ms appendString: @",sportWeeklyAdv:"];
  [ms appendFormat: @"%i", __sportWeeklyAdv];
  [ms appendString: @",sportEveryTimeDav:"];
  [ms appendFormat: @"%i", __sportEveryTimeDav];
  [ms appendString: @",stapleFood:"];
  [ms appendFormat: @"%i", __stapleFood];
  [ms appendString: @",stapleFoodAdv:"];
  [ms appendFormat: @"%i", __stapleFoodAdv];
  [ms appendString: @",adjustmentCode:"];
  [ms appendFormat: @"\"%@\"", __adjustmentCode];
  [ms appendString: @",atMedicalCode:"];
  [ms appendFormat: @"\"%@\"", __atMedicalCode];
  [ms appendString: @",fastingGlucose:"];
  [ms appendFormat: @"\"%@\"", __fastingGlucose];
  [ms appendString: @",hemoglobin:"];
  [ms appendFormat: @"\"%@\"", __hemoglobin];
  [ms appendString: @",checkDate:"];
  [ms appendFormat: @"\"%@\"", __checkDate];
  [ms appendString: @",checkOther:"];
  [ms appendFormat: @"\"%@\"", __checkOther];
  [ms appendString: @",atMedicationCode:"];
  [ms appendFormat: @"\"%@\"", __atMedicationCode];
  [ms appendString: @",effectYNCode:"];
  [ms appendFormat: @"\"%@\"", __effectYNCode];
  [ms appendString: @",effect:"];
  [ms appendFormat: @"\"%@\"", __effect];
  [ms appendString: @",hypoglycemiaCode:"];
  [ms appendFormat: @"\"%@\"", __hypoglycemiaCode];
  [ms appendString: @",transOrgReason:"];
  [ms appendFormat: @"\"%@\"", __transOrgReason];
  [ms appendString: @",transOrg:"];
  [ms appendFormat: @"\"%@\"", __transOrg];
  [ms appendString: @",transDepartment:"];
  [ms appendFormat: @"\"%@\"", __transDepartment];
  [ms appendString: @",managementYNCode:"];
  [ms appendFormat: @"\"%@\"", __managementYNCode];
  [ms appendString: @",management:"];
  [ms appendFormat: @"\"%@\"", __management];
  [ms appendString: @",visitDoctor:"];
  [ms appendFormat: @"\"%@\"", __visitDoctor];
  [ms appendString: @",visitDoctorCode:"];
  [ms appendFormat: @"\"%@\"", __visitDoctorCode];
  [ms appendString: @",visitDateNext:"];
  [ms appendFormat: @"\"%@\"", __visitDateNext];
  [ms appendString: @",planStart:"];
  [ms appendFormat: @"\"%@\"", __planStart];
  [ms appendString: @",planEnd:"];
  [ms appendFormat: @"\"%@\"", __planEnd];
  [ms appendString: @",planStatus:"];
  [ms appendFormat: @"\"%@\"", __planStatus];
  [ms appendString: @",visitDoCode:"];
  [ms appendFormat: @"\"%@\"", __visitDoCode];
  [ms appendString: @",visitDetails:"];
  [ms appendFormat: @"%@", __visitDetails];
  [ms appendString: @",vegaFood:"];
  [ms appendFormat: @"\"%@\"", __vegaFood];
  [ms appendString: @",vegaFoodAdv:"];
  [ms appendFormat: @"\"%@\"", __vegaFoodAdv];
  [ms appendString: @",fruitFood:"];
  [ms appendFormat: @"\"%@\"", __fruitFood];
  [ms appendString: @",fruitFoodAdv:"];
  [ms appendFormat: @"\"%@\"", __fruitFoodAdv];
  [ms appendString: @",beanFood:"];
  [ms appendFormat: @"\"%@\"", __beanFood];
  [ms appendString: @",beanFoodAdv:"];
  [ms appendFormat: @"\"%@\"", __beanFoodAdv];
  [ms appendString: @",milkFood:"];
  [ms appendFormat: @"\"%@\"", __milkFood];
  [ms appendString: @",milkFoodAdv:"];
  [ms appendFormat: @"\"%@\"", __milkFoodAdv];
  [ms appendString: @",fishFood:"];
  [ms appendFormat: @"\"%@\"", __fishFood];
  [ms appendString: @",fishFoodAdv:"];
  [ms appendFormat: @"\"%@\"", __fishFoodAdv];
  [ms appendString: @",oilFood:"];
  [ms appendFormat: @"\"%@\"", __oilFood];
  [ms appendString: @",oilFoodAdv:"];
  [ms appendFormat: @"\"%@\"", __oilFoodAdv];
  [ms appendString: @",totalCalories:"];
  [ms appendFormat: @"\"%@\"", __totalCalories];
  [ms appendString: @",totalCaloriesAdv:"];
  [ms appendFormat: @"\"%@\"", __totalCaloriesAdv];
  [ms appendString: @",insulin:"];
  [ms appendFormat: @"\"%@\"", __insulin];
  [ms appendString: @",insulinMethod:"];
  [ms appendFormat: @"\"%@\"", __insulinMethod];
  [ms appendString: @",healthTemplate:"];
  [ms appendFormat: @"\"%@\"", __healthTemplate];
  [ms appendString: @",physicalActivity:"];
  [ms appendFormat: @"\"%@\"", __physicalActivity];
  [ms appendString: @",shape:"];
  [ms appendFormat: @"\"%@\"", __shape];
  [ms appendString: @",auxiiliary:"];
  [ms appendFormat: @"\"%@\"", __auxiiliary];
  [ms appendString: @",saltCode:"];
  [ms appendFormat: @"\"%@\"", __saltCode];
  [ms appendString: @",heartRate:"];
  [ms appendFormat: @"\"%@\"", __heartRate];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFDrTeamDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.teamMembers = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithTeamID: (NSString *) teamID teamName: (NSString *) teamName teamDesc: (NSString *) teamDesc orgcode: (NSString *) orgcode teamMembers: (NSMutableArray *) teamMembers serviceScope: (NSString *) serviceScope
{
  self = [super init];
  __teamID = [teamID retain_stub];
  __teamID_isset = YES;
  __teamName = [teamName retain_stub];
  __teamName_isset = YES;
  __teamDesc = [teamDesc retain_stub];
  __teamDesc_isset = YES;
  __orgcode = [orgcode retain_stub];
  __orgcode_isset = YES;
  __teamMembers = [teamMembers retain_stub];
  __teamMembers_isset = YES;
  __serviceScope = [serviceScope retain_stub];
  __serviceScope_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"teamID"])
  {
    __teamID = [[decoder decodeObjectForKey: @"teamID"] retain_stub];
    __teamID_isset = YES;
  }
  if ([decoder containsValueForKey: @"teamName"])
  {
    __teamName = [[decoder decodeObjectForKey: @"teamName"] retain_stub];
    __teamName_isset = YES;
  }
  if ([decoder containsValueForKey: @"teamDesc"])
  {
    __teamDesc = [[decoder decodeObjectForKey: @"teamDesc"] retain_stub];
    __teamDesc_isset = YES;
  }
  if ([decoder containsValueForKey: @"orgcode"])
  {
    __orgcode = [[decoder decodeObjectForKey: @"orgcode"] retain_stub];
    __orgcode_isset = YES;
  }
  if ([decoder containsValueForKey: @"teamMembers"])
  {
    __teamMembers = [[decoder decodeObjectForKey: @"teamMembers"] retain_stub];
    __teamMembers_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceScope"])
  {
    __serviceScope = [[decoder decodeObjectForKey: @"serviceScope"] retain_stub];
    __serviceScope_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__teamID_isset)
  {
    [encoder encodeObject: __teamID forKey: @"teamID"];
  }
  if (__teamName_isset)
  {
    [encoder encodeObject: __teamName forKey: @"teamName"];
  }
  if (__teamDesc_isset)
  {
    [encoder encodeObject: __teamDesc forKey: @"teamDesc"];
  }
  if (__orgcode_isset)
  {
    [encoder encodeObject: __orgcode forKey: @"orgcode"];
  }
  if (__teamMembers_isset)
  {
    [encoder encodeObject: __teamMembers forKey: @"teamMembers"];
  }
  if (__serviceScope_isset)
  {
    [encoder encodeObject: __serviceScope forKey: @"serviceScope"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __teamID_isset ? 2654435761 : 0;
  if (__teamID_isset)
  {
    hash = (hash * 31) ^ [__teamID hash];
  }
  hash = (hash * 31) ^ __teamName_isset ? 2654435761 : 0;
  if (__teamName_isset)
  {
    hash = (hash * 31) ^ [__teamName hash];
  }
  hash = (hash * 31) ^ __teamDesc_isset ? 2654435761 : 0;
  if (__teamDesc_isset)
  {
    hash = (hash * 31) ^ [__teamDesc hash];
  }
  hash = (hash * 31) ^ __orgcode_isset ? 2654435761 : 0;
  if (__orgcode_isset)
  {
    hash = (hash * 31) ^ [__orgcode hash];
  }
  hash = (hash * 31) ^ __teamMembers_isset ? 2654435761 : 0;
  if (__teamMembers_isset)
  {
    hash = (hash * 31) ^ [__teamMembers hash];
  }
  hash = (hash * 31) ^ __serviceScope_isset ? 2654435761 : 0;
  if (__serviceScope_isset)
  {
    hash = (hash * 31) ^ [__serviceScope hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFDrTeamDto class]]) {
    return NO;
  }
  NXTFDrTeamDto *other = (NXTFDrTeamDto *)anObject;
  if ((__teamID_isset != other->__teamID_isset) ||
      (__teamID_isset && ((__teamID || other->__teamID) && ![__teamID isEqual:other->__teamID]))) {
    return NO;
  }
  if ((__teamName_isset != other->__teamName_isset) ||
      (__teamName_isset && ((__teamName || other->__teamName) && ![__teamName isEqual:other->__teamName]))) {
    return NO;
  }
  if ((__teamDesc_isset != other->__teamDesc_isset) ||
      (__teamDesc_isset && ((__teamDesc || other->__teamDesc) && ![__teamDesc isEqual:other->__teamDesc]))) {
    return NO;
  }
  if ((__orgcode_isset != other->__orgcode_isset) ||
      (__orgcode_isset && ((__orgcode || other->__orgcode) && ![__orgcode isEqual:other->__orgcode]))) {
    return NO;
  }
  if ((__teamMembers_isset != other->__teamMembers_isset) ||
      (__teamMembers_isset && ((__teamMembers || other->__teamMembers) && ![__teamMembers isEqual:other->__teamMembers]))) {
    return NO;
  }
  if ((__serviceScope_isset != other->__serviceScope_isset) ||
      (__serviceScope_isset && ((__serviceScope || other->__serviceScope) && ![__serviceScope isEqual:other->__serviceScope]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__teamID release_stub];
  [__teamName release_stub];
  [__teamDesc release_stub];
  [__orgcode release_stub];
  [__teamMembers release_stub];
  [__serviceScope release_stub];
  [super dealloc_stub];
}

- (NSString *) teamID {
  return [[__teamID retain_stub] autorelease_stub];
}

- (void) setTeamID: (NSString *) teamID {
  [teamID retain_stub];
  [__teamID release_stub];
  __teamID = teamID;
  __teamID_isset = YES;
}

- (BOOL) teamIDIsSet {
  return __teamID_isset;
}

- (void) unsetTeamID {
  [__teamID release_stub];
  __teamID = nil;
  __teamID_isset = NO;
}

- (NSString *) teamName {
  return [[__teamName retain_stub] autorelease_stub];
}

- (void) setTeamName: (NSString *) teamName {
  [teamName retain_stub];
  [__teamName release_stub];
  __teamName = teamName;
  __teamName_isset = YES;
}

- (BOOL) teamNameIsSet {
  return __teamName_isset;
}

- (void) unsetTeamName {
  [__teamName release_stub];
  __teamName = nil;
  __teamName_isset = NO;
}

- (NSString *) teamDesc {
  return [[__teamDesc retain_stub] autorelease_stub];
}

- (void) setTeamDesc: (NSString *) teamDesc {
  [teamDesc retain_stub];
  [__teamDesc release_stub];
  __teamDesc = teamDesc;
  __teamDesc_isset = YES;
}

- (BOOL) teamDescIsSet {
  return __teamDesc_isset;
}

- (void) unsetTeamDesc {
  [__teamDesc release_stub];
  __teamDesc = nil;
  __teamDesc_isset = NO;
}

- (NSString *) orgcode {
  return [[__orgcode retain_stub] autorelease_stub];
}

- (void) setOrgcode: (NSString *) orgcode {
  [orgcode retain_stub];
  [__orgcode release_stub];
  __orgcode = orgcode;
  __orgcode_isset = YES;
}

- (BOOL) orgcodeIsSet {
  return __orgcode_isset;
}

- (void) unsetOrgcode {
  [__orgcode release_stub];
  __orgcode = nil;
  __orgcode_isset = NO;
}

- (NSMutableArray *) teamMembers {
  return [[__teamMembers retain_stub] autorelease_stub];
}

- (void) setTeamMembers: (NSMutableArray *) teamMembers {
  [teamMembers retain_stub];
  [__teamMembers release_stub];
  __teamMembers = teamMembers;
  __teamMembers_isset = YES;
}

- (BOOL) teamMembersIsSet {
  return __teamMembers_isset;
}

- (void) unsetTeamMembers {
  [__teamMembers release_stub];
  __teamMembers = nil;
  __teamMembers_isset = NO;
}

- (NSString *) serviceScope {
  return [[__serviceScope retain_stub] autorelease_stub];
}

- (void) setServiceScope: (NSString *) serviceScope {
  [serviceScope retain_stub];
  [__serviceScope release_stub];
  __serviceScope = serviceScope;
  __serviceScope_isset = YES;
}

- (BOOL) serviceScopeIsSet {
  return __serviceScope_isset;
}

- (void) unsetServiceScope {
  [__serviceScope release_stub];
  __serviceScope = nil;
  __serviceScope_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTeamID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTeamName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTeamDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrgcode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size166;
          [inProtocol readListBeginReturningElementType: NULL size: &_size166];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size166];
          int _i167;
          for (_i167 = 0; _i167 < _size166; ++_i167)
          {
            NXTFDrTeamMemberDto *_elem168 = [[NXTFDrTeamMemberDto alloc] init];
            [_elem168 read: inProtocol];
            [fieldValue addObject: _elem168];
            [_elem168 release_stub];
          }
          [inProtocol readListEnd];
          [self setTeamMembers: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceScope: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DrTeamDto"];
  if (__teamID_isset) {
    if (__teamID != nil) {
      [outProtocol writeFieldBeginWithName: @"teamID" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __teamID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__teamName_isset) {
    if (__teamName != nil) {
      [outProtocol writeFieldBeginWithName: @"teamName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __teamName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__teamDesc_isset) {
    if (__teamDesc != nil) {
      [outProtocol writeFieldBeginWithName: @"teamDesc" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __teamDesc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orgcode_isset) {
    if (__orgcode != nil) {
      [outProtocol writeFieldBeginWithName: @"orgcode" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __orgcode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__teamMembers_isset) {
    if (__teamMembers != nil) {
      [outProtocol writeFieldBeginWithName: @"teamMembers" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__teamMembers count]];
        int idx170;
        for (idx170 = 0; idx170 < [__teamMembers count]; idx170++)
        {
          [[__teamMembers objectAtIndex: idx170] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceScope_isset) {
    if (__serviceScope != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceScope" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __serviceScope];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFDrTeamDto("];
  [ms appendString: @"teamID:"];
  [ms appendFormat: @"\"%@\"", __teamID];
  [ms appendString: @",teamName:"];
  [ms appendFormat: @"\"%@\"", __teamName];
  [ms appendString: @",teamDesc:"];
  [ms appendFormat: @"\"%@\"", __teamDesc];
  [ms appendString: @",orgcode:"];
  [ms appendFormat: @"\"%@\"", __orgcode];
  [ms appendString: @",teamMembers:"];
  [ms appendFormat: @"%@", __teamMembers];
  [ms appendString: @",serviceScope:"];
  [ms appendFormat: @"\"%@\"", __serviceScope];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFDrTeamMemberDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHisDrId: (NSString *) hisDrId drName: (NSString *) drName hospId: (int64_t) hospId hospName: (NSString *) hospName deptName: (NSString *) deptName specialty: (NSString *) specialty roleName: (NSString *) roleName isTeamLeader: (int32_t) isTeamLeader headImg: (NSString *) headImg
{
  self = [super init];
  __hisDrId = [hisDrId retain_stub];
  __hisDrId_isset = YES;
  __drName = [drName retain_stub];
  __drName_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __hospName = [hospName retain_stub];
  __hospName_isset = YES;
  __deptName = [deptName retain_stub];
  __deptName_isset = YES;
  __specialty = [specialty retain_stub];
  __specialty_isset = YES;
  __roleName = [roleName retain_stub];
  __roleName_isset = YES;
  __isTeamLeader = isTeamLeader;
  __isTeamLeader_isset = YES;
  __headImg = [headImg retain_stub];
  __headImg_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"hisDrId"])
  {
    __hisDrId = [[decoder decodeObjectForKey: @"hisDrId"] retain_stub];
    __hisDrId_isset = YES;
  }
  if ([decoder containsValueForKey: @"drName"])
  {
    __drName = [[decoder decodeObjectForKey: @"drName"] retain_stub];
    __drName_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt64ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospName"])
  {
    __hospName = [[decoder decodeObjectForKey: @"hospName"] retain_stub];
    __hospName_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptName"])
  {
    __deptName = [[decoder decodeObjectForKey: @"deptName"] retain_stub];
    __deptName_isset = YES;
  }
  if ([decoder containsValueForKey: @"specialty"])
  {
    __specialty = [[decoder decodeObjectForKey: @"specialty"] retain_stub];
    __specialty_isset = YES;
  }
  if ([decoder containsValueForKey: @"roleName"])
  {
    __roleName = [[decoder decodeObjectForKey: @"roleName"] retain_stub];
    __roleName_isset = YES;
  }
  if ([decoder containsValueForKey: @"isTeamLeader"])
  {
    __isTeamLeader = [decoder decodeInt32ForKey: @"isTeamLeader"];
    __isTeamLeader_isset = YES;
  }
  if ([decoder containsValueForKey: @"headImg"])
  {
    __headImg = [[decoder decodeObjectForKey: @"headImg"] retain_stub];
    __headImg_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__hisDrId_isset)
  {
    [encoder encodeObject: __hisDrId forKey: @"hisDrId"];
  }
  if (__drName_isset)
  {
    [encoder encodeObject: __drName forKey: @"drName"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt64: __hospId forKey: @"hospId"];
  }
  if (__hospName_isset)
  {
    [encoder encodeObject: __hospName forKey: @"hospName"];
  }
  if (__deptName_isset)
  {
    [encoder encodeObject: __deptName forKey: @"deptName"];
  }
  if (__specialty_isset)
  {
    [encoder encodeObject: __specialty forKey: @"specialty"];
  }
  if (__roleName_isset)
  {
    [encoder encodeObject: __roleName forKey: @"roleName"];
  }
  if (__isTeamLeader_isset)
  {
    [encoder encodeInt32: __isTeamLeader forKey: @"isTeamLeader"];
  }
  if (__headImg_isset)
  {
    [encoder encodeObject: __headImg forKey: @"headImg"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __hisDrId_isset ? 2654435761 : 0;
  if (__hisDrId_isset)
  {
    hash = (hash * 31) ^ [__hisDrId hash];
  }
  hash = (hash * 31) ^ __drName_isset ? 2654435761 : 0;
  if (__drName_isset)
  {
    hash = (hash * 31) ^ [__drName hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __hospName_isset ? 2654435761 : 0;
  if (__hospName_isset)
  {
    hash = (hash * 31) ^ [__hospName hash];
  }
  hash = (hash * 31) ^ __deptName_isset ? 2654435761 : 0;
  if (__deptName_isset)
  {
    hash = (hash * 31) ^ [__deptName hash];
  }
  hash = (hash * 31) ^ __specialty_isset ? 2654435761 : 0;
  if (__specialty_isset)
  {
    hash = (hash * 31) ^ [__specialty hash];
  }
  hash = (hash * 31) ^ __roleName_isset ? 2654435761 : 0;
  if (__roleName_isset)
  {
    hash = (hash * 31) ^ [__roleName hash];
  }
  hash = (hash * 31) ^ __isTeamLeader_isset ? 2654435761 : 0;
  if (__isTeamLeader_isset)
  {
    hash = (hash * 31) ^ [@(__isTeamLeader) hash];
  }
  hash = (hash * 31) ^ __headImg_isset ? 2654435761 : 0;
  if (__headImg_isset)
  {
    hash = (hash * 31) ^ [__headImg hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFDrTeamMemberDto class]]) {
    return NO;
  }
  NXTFDrTeamMemberDto *other = (NXTFDrTeamMemberDto *)anObject;
  if ((__hisDrId_isset != other->__hisDrId_isset) ||
      (__hisDrId_isset && ((__hisDrId || other->__hisDrId) && ![__hisDrId isEqual:other->__hisDrId]))) {
    return NO;
  }
  if ((__drName_isset != other->__drName_isset) ||
      (__drName_isset && ((__drName || other->__drName) && ![__drName isEqual:other->__drName]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__hospName_isset != other->__hospName_isset) ||
      (__hospName_isset && ((__hospName || other->__hospName) && ![__hospName isEqual:other->__hospName]))) {
    return NO;
  }
  if ((__deptName_isset != other->__deptName_isset) ||
      (__deptName_isset && ((__deptName || other->__deptName) && ![__deptName isEqual:other->__deptName]))) {
    return NO;
  }
  if ((__specialty_isset != other->__specialty_isset) ||
      (__specialty_isset && ((__specialty || other->__specialty) && ![__specialty isEqual:other->__specialty]))) {
    return NO;
  }
  if ((__roleName_isset != other->__roleName_isset) ||
      (__roleName_isset && ((__roleName || other->__roleName) && ![__roleName isEqual:other->__roleName]))) {
    return NO;
  }
  if ((__isTeamLeader_isset != other->__isTeamLeader_isset) ||
      (__isTeamLeader_isset && (__isTeamLeader != other->__isTeamLeader))) {
    return NO;
  }
  if ((__headImg_isset != other->__headImg_isset) ||
      (__headImg_isset && ((__headImg || other->__headImg) && ![__headImg isEqual:other->__headImg]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__hisDrId release_stub];
  [__drName release_stub];
  [__hospName release_stub];
  [__deptName release_stub];
  [__specialty release_stub];
  [__roleName release_stub];
  [__headImg release_stub];
  [super dealloc_stub];
}

- (NSString *) hisDrId {
  return [[__hisDrId retain_stub] autorelease_stub];
}

- (void) setHisDrId: (NSString *) hisDrId {
  [hisDrId retain_stub];
  [__hisDrId release_stub];
  __hisDrId = hisDrId;
  __hisDrId_isset = YES;
}

- (BOOL) hisDrIdIsSet {
  return __hisDrId_isset;
}

- (void) unsetHisDrId {
  [__hisDrId release_stub];
  __hisDrId = nil;
  __hisDrId_isset = NO;
}

- (NSString *) drName {
  return [[__drName retain_stub] autorelease_stub];
}

- (void) setDrName: (NSString *) drName {
  [drName retain_stub];
  [__drName release_stub];
  __drName = drName;
  __drName_isset = YES;
}

- (BOOL) drNameIsSet {
  return __drName_isset;
}

- (void) unsetDrName {
  [__drName release_stub];
  __drName = nil;
  __drName_isset = NO;
}

- (int64_t) hospId {
  return __hospId;
}

- (void) setHospId: (int64_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (NSString *) hospName {
  return [[__hospName retain_stub] autorelease_stub];
}

- (void) setHospName: (NSString *) hospName {
  [hospName retain_stub];
  [__hospName release_stub];
  __hospName = hospName;
  __hospName_isset = YES;
}

- (BOOL) hospNameIsSet {
  return __hospName_isset;
}

- (void) unsetHospName {
  [__hospName release_stub];
  __hospName = nil;
  __hospName_isset = NO;
}

- (NSString *) deptName {
  return [[__deptName retain_stub] autorelease_stub];
}

- (void) setDeptName: (NSString *) deptName {
  [deptName retain_stub];
  [__deptName release_stub];
  __deptName = deptName;
  __deptName_isset = YES;
}

- (BOOL) deptNameIsSet {
  return __deptName_isset;
}

- (void) unsetDeptName {
  [__deptName release_stub];
  __deptName = nil;
  __deptName_isset = NO;
}

- (NSString *) specialty {
  return [[__specialty retain_stub] autorelease_stub];
}

- (void) setSpecialty: (NSString *) specialty {
  [specialty retain_stub];
  [__specialty release_stub];
  __specialty = specialty;
  __specialty_isset = YES;
}

- (BOOL) specialtyIsSet {
  return __specialty_isset;
}

- (void) unsetSpecialty {
  [__specialty release_stub];
  __specialty = nil;
  __specialty_isset = NO;
}

- (NSString *) roleName {
  return [[__roleName retain_stub] autorelease_stub];
}

- (void) setRoleName: (NSString *) roleName {
  [roleName retain_stub];
  [__roleName release_stub];
  __roleName = roleName;
  __roleName_isset = YES;
}

- (BOOL) roleNameIsSet {
  return __roleName_isset;
}

- (void) unsetRoleName {
  [__roleName release_stub];
  __roleName = nil;
  __roleName_isset = NO;
}

- (int32_t) isTeamLeader {
  return __isTeamLeader;
}

- (void) setIsTeamLeader: (int32_t) isTeamLeader {
  __isTeamLeader = isTeamLeader;
  __isTeamLeader_isset = YES;
}

- (BOOL) isTeamLeaderIsSet {
  return __isTeamLeader_isset;
}

- (void) unsetIsTeamLeader {
  __isTeamLeader_isset = NO;
}

- (NSString *) headImg {
  return [[__headImg retain_stub] autorelease_stub];
}

- (void) setHeadImg: (NSString *) headImg {
  [headImg retain_stub];
  [__headImg release_stub];
  __headImg = headImg;
  __headImg_isset = YES;
}

- (BOOL) headImgIsSet {
  return __headImg_isset;
}

- (void) unsetHeadImg {
  [__headImg release_stub];
  __headImg = nil;
  __headImg_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHisDrId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSpecialty: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRoleName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsTeamLeader: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHeadImg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DrTeamMemberDto"];
  if (__hisDrId_isset) {
    if (__hisDrId != nil) {
      [outProtocol writeFieldBeginWithName: @"hisDrId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __hisDrId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drName_isset) {
    if (__drName != nil) {
      [outProtocol writeFieldBeginWithName: @"drName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __drName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__hospName_isset) {
    if (__hospName != nil) {
      [outProtocol writeFieldBeginWithName: @"hospName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __hospName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptName_isset) {
    if (__deptName != nil) {
      [outProtocol writeFieldBeginWithName: @"deptName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __deptName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__specialty_isset) {
    if (__specialty != nil) {
      [outProtocol writeFieldBeginWithName: @"specialty" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __specialty];
      [outProtocol writeFieldEnd];
    }
  }
  if (__roleName_isset) {
    if (__roleName != nil) {
      [outProtocol writeFieldBeginWithName: @"roleName" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __roleName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isTeamLeader_isset) {
    [outProtocol writeFieldBeginWithName: @"isTeamLeader" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __isTeamLeader];
    [outProtocol writeFieldEnd];
  }
  if (__headImg_isset) {
    if (__headImg != nil) {
      [outProtocol writeFieldBeginWithName: @"headImg" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __headImg];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFDrTeamMemberDto("];
  [ms appendString: @"hisDrId:"];
  [ms appendFormat: @"\"%@\"", __hisDrId];
  [ms appendString: @",drName:"];
  [ms appendFormat: @"\"%@\"", __drName];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%qi", __hospId];
  [ms appendString: @",hospName:"];
  [ms appendFormat: @"\"%@\"", __hospName];
  [ms appendString: @",deptName:"];
  [ms appendFormat: @"\"%@\"", __deptName];
  [ms appendString: @",specialty:"];
  [ms appendFormat: @"\"%@\"", __specialty];
  [ms appendString: @",roleName:"];
  [ms appendFormat: @"\"%@\"", __roleName];
  [ms appendString: @",isTeamLeader:"];
  [ms appendFormat: @"%i", __isTeamLeader];
  [ms appendString: @",headImg:"];
  [ms appendFormat: @"\"%@\"", __headImg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPackageInfoDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPackageId: (NSString *) packageId packageName: (NSString *) packageName packageContent: (NSString *) packageContent
{
  self = [super init];
  __packageId = [packageId retain_stub];
  __packageId_isset = YES;
  __packageName = [packageName retain_stub];
  __packageName_isset = YES;
  __packageContent = [packageContent retain_stub];
  __packageContent_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"packageId"])
  {
    __packageId = [[decoder decodeObjectForKey: @"packageId"] retain_stub];
    __packageId_isset = YES;
  }
  if ([decoder containsValueForKey: @"packageName"])
  {
    __packageName = [[decoder decodeObjectForKey: @"packageName"] retain_stub];
    __packageName_isset = YES;
  }
  if ([decoder containsValueForKey: @"packageContent"])
  {
    __packageContent = [[decoder decodeObjectForKey: @"packageContent"] retain_stub];
    __packageContent_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__packageId_isset)
  {
    [encoder encodeObject: __packageId forKey: @"packageId"];
  }
  if (__packageName_isset)
  {
    [encoder encodeObject: __packageName forKey: @"packageName"];
  }
  if (__packageContent_isset)
  {
    [encoder encodeObject: __packageContent forKey: @"packageContent"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __packageId_isset ? 2654435761 : 0;
  if (__packageId_isset)
  {
    hash = (hash * 31) ^ [__packageId hash];
  }
  hash = (hash * 31) ^ __packageName_isset ? 2654435761 : 0;
  if (__packageName_isset)
  {
    hash = (hash * 31) ^ [__packageName hash];
  }
  hash = (hash * 31) ^ __packageContent_isset ? 2654435761 : 0;
  if (__packageContent_isset)
  {
    hash = (hash * 31) ^ [__packageContent hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPackageInfoDto class]]) {
    return NO;
  }
  NXTFPackageInfoDto *other = (NXTFPackageInfoDto *)anObject;
  if ((__packageId_isset != other->__packageId_isset) ||
      (__packageId_isset && ((__packageId || other->__packageId) && ![__packageId isEqual:other->__packageId]))) {
    return NO;
  }
  if ((__packageName_isset != other->__packageName_isset) ||
      (__packageName_isset && ((__packageName || other->__packageName) && ![__packageName isEqual:other->__packageName]))) {
    return NO;
  }
  if ((__packageContent_isset != other->__packageContent_isset) ||
      (__packageContent_isset && ((__packageContent || other->__packageContent) && ![__packageContent isEqual:other->__packageContent]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__packageId release_stub];
  [__packageName release_stub];
  [__packageContent release_stub];
  [super dealloc_stub];
}

- (NSString *) packageId {
  return [[__packageId retain_stub] autorelease_stub];
}

- (void) setPackageId: (NSString *) packageId {
  [packageId retain_stub];
  [__packageId release_stub];
  __packageId = packageId;
  __packageId_isset = YES;
}

- (BOOL) packageIdIsSet {
  return __packageId_isset;
}

- (void) unsetPackageId {
  [__packageId release_stub];
  __packageId = nil;
  __packageId_isset = NO;
}

- (NSString *) packageName {
  return [[__packageName retain_stub] autorelease_stub];
}

- (void) setPackageName: (NSString *) packageName {
  [packageName retain_stub];
  [__packageName release_stub];
  __packageName = packageName;
  __packageName_isset = YES;
}

- (BOOL) packageNameIsSet {
  return __packageName_isset;
}

- (void) unsetPackageName {
  [__packageName release_stub];
  __packageName = nil;
  __packageName_isset = NO;
}

- (NSString *) packageContent {
  return [[__packageContent retain_stub] autorelease_stub];
}

- (void) setPackageContent: (NSString *) packageContent {
  [packageContent retain_stub];
  [__packageContent release_stub];
  __packageContent = packageContent;
  __packageContent_isset = YES;
}

- (BOOL) packageContentIsSet {
  return __packageContent_isset;
}

- (void) unsetPackageContent {
  [__packageContent release_stub];
  __packageContent = nil;
  __packageContent_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPackageId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPackageName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPackageContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PackageInfoDto"];
  if (__packageId_isset) {
    if (__packageId != nil) {
      [outProtocol writeFieldBeginWithName: @"packageId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __packageId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__packageName_isset) {
    if (__packageName != nil) {
      [outProtocol writeFieldBeginWithName: @"packageName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __packageName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__packageContent_isset) {
    if (__packageContent != nil) {
      [outProtocol writeFieldBeginWithName: @"packageContent" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __packageContent];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPackageInfoDto("];
  [ms appendString: @"packageId:"];
  [ms appendFormat: @"\"%@\"", __packageId];
  [ms appendString: @",packageName:"];
  [ms appendFormat: @"\"%@\"", __packageName];
  [ms appendString: @",packageContent:"];
  [ms appendFormat: @"\"%@\"", __packageContent];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFDwellerInfoDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDwellerID: (NSString *) dwellerID dwellerName: (NSString *) dwellerName dwellerGender: (NSString *) dwellerGender birthDate: (NSString *) birthDate region: (NSString *) region idNumber: (NSString *) idNumber bloodType: (NSString *) bloodType phone: (NSString *) phone maritalSts: (NSString *) maritalSts workUnit: (NSString *) workUnit addr: (NSString *) addr lastFollowupID: (NSString *) lastFollowupID linkB: (NSString *) linkB linkD: (NSString *) linkD signStatus: (NSString *) signStatus caseTypes: (NSMutableArray *) caseTypes disability: (NSString *) disability familyHistory: (NSString *) familyHistory allergichistory: (NSString *) allergichistory healthRecordCode: (NSString *) healthRecordCode contractID: (NSString *) contractID province: (NSString *) province city: (NSString *) city area: (NSString *) area linkR: (NSString *) linkR
{
  self = [super init];
  __dwellerID = [dwellerID retain_stub];
  __dwellerID_isset = YES;
  __dwellerName = [dwellerName retain_stub];
  __dwellerName_isset = YES;
  __dwellerGender = [dwellerGender retain_stub];
  __dwellerGender_isset = YES;
  __birthDate = [birthDate retain_stub];
  __birthDate_isset = YES;
  __region = [region retain_stub];
  __region_isset = YES;
  __idNumber = [idNumber retain_stub];
  __idNumber_isset = YES;
  __bloodType = [bloodType retain_stub];
  __bloodType_isset = YES;
  __phone = [phone retain_stub];
  __phone_isset = YES;
  __maritalSts = [maritalSts retain_stub];
  __maritalSts_isset = YES;
  __workUnit = [workUnit retain_stub];
  __workUnit_isset = YES;
  __addr = [addr retain_stub];
  __addr_isset = YES;
  __lastFollowupID = [lastFollowupID retain_stub];
  __lastFollowupID_isset = YES;
  __linkB = [linkB retain_stub];
  __linkB_isset = YES;
  __linkD = [linkD retain_stub];
  __linkD_isset = YES;
  __signStatus = [signStatus retain_stub];
  __signStatus_isset = YES;
  __caseTypes = [caseTypes retain_stub];
  __caseTypes_isset = YES;
  __disability = [disability retain_stub];
  __disability_isset = YES;
  __familyHistory = [familyHistory retain_stub];
  __familyHistory_isset = YES;
  __allergichistory = [allergichistory retain_stub];
  __allergichistory_isset = YES;
  __healthRecordCode = [healthRecordCode retain_stub];
  __healthRecordCode_isset = YES;
  __contractID = [contractID retain_stub];
  __contractID_isset = YES;
  __province = [province retain_stub];
  __province_isset = YES;
  __city = [city retain_stub];
  __city_isset = YES;
  __area = [area retain_stub];
  __area_isset = YES;
  __linkR = [linkR retain_stub];
  __linkR_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dwellerID"])
  {
    __dwellerID = [[decoder decodeObjectForKey: @"dwellerID"] retain_stub];
    __dwellerID_isset = YES;
  }
  if ([decoder containsValueForKey: @"dwellerName"])
  {
    __dwellerName = [[decoder decodeObjectForKey: @"dwellerName"] retain_stub];
    __dwellerName_isset = YES;
  }
  if ([decoder containsValueForKey: @"dwellerGender"])
  {
    __dwellerGender = [[decoder decodeObjectForKey: @"dwellerGender"] retain_stub];
    __dwellerGender_isset = YES;
  }
  if ([decoder containsValueForKey: @"birthDate"])
  {
    __birthDate = [[decoder decodeObjectForKey: @"birthDate"] retain_stub];
    __birthDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"region"])
  {
    __region = [[decoder decodeObjectForKey: @"region"] retain_stub];
    __region_isset = YES;
  }
  if ([decoder containsValueForKey: @"idNumber"])
  {
    __idNumber = [[decoder decodeObjectForKey: @"idNumber"] retain_stub];
    __idNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"bloodType"])
  {
    __bloodType = [[decoder decodeObjectForKey: @"bloodType"] retain_stub];
    __bloodType_isset = YES;
  }
  if ([decoder containsValueForKey: @"phone"])
  {
    __phone = [[decoder decodeObjectForKey: @"phone"] retain_stub];
    __phone_isset = YES;
  }
  if ([decoder containsValueForKey: @"maritalSts"])
  {
    __maritalSts = [[decoder decodeObjectForKey: @"maritalSts"] retain_stub];
    __maritalSts_isset = YES;
  }
  if ([decoder containsValueForKey: @"workUnit"])
  {
    __workUnit = [[decoder decodeObjectForKey: @"workUnit"] retain_stub];
    __workUnit_isset = YES;
  }
  if ([decoder containsValueForKey: @"addr"])
  {
    __addr = [[decoder decodeObjectForKey: @"addr"] retain_stub];
    __addr_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastFollowupID"])
  {
    __lastFollowupID = [[decoder decodeObjectForKey: @"lastFollowupID"] retain_stub];
    __lastFollowupID_isset = YES;
  }
  if ([decoder containsValueForKey: @"linkB"])
  {
    __linkB = [[decoder decodeObjectForKey: @"linkB"] retain_stub];
    __linkB_isset = YES;
  }
  if ([decoder containsValueForKey: @"linkD"])
  {
    __linkD = [[decoder decodeObjectForKey: @"linkD"] retain_stub];
    __linkD_isset = YES;
  }
  if ([decoder containsValueForKey: @"signStatus"])
  {
    __signStatus = [[decoder decodeObjectForKey: @"signStatus"] retain_stub];
    __signStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"caseTypes"])
  {
    __caseTypes = [[decoder decodeObjectForKey: @"caseTypes"] retain_stub];
    __caseTypes_isset = YES;
  }
  if ([decoder containsValueForKey: @"disability"])
  {
    __disability = [[decoder decodeObjectForKey: @"disability"] retain_stub];
    __disability_isset = YES;
  }
  if ([decoder containsValueForKey: @"familyHistory"])
  {
    __familyHistory = [[decoder decodeObjectForKey: @"familyHistory"] retain_stub];
    __familyHistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"allergichistory"])
  {
    __allergichistory = [[decoder decodeObjectForKey: @"allergichistory"] retain_stub];
    __allergichistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"healthRecordCode"])
  {
    __healthRecordCode = [[decoder decodeObjectForKey: @"healthRecordCode"] retain_stub];
    __healthRecordCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"contractID"])
  {
    __contractID = [[decoder decodeObjectForKey: @"contractID"] retain_stub];
    __contractID_isset = YES;
  }
  if ([decoder containsValueForKey: @"province"])
  {
    __province = [[decoder decodeObjectForKey: @"province"] retain_stub];
    __province_isset = YES;
  }
  if ([decoder containsValueForKey: @"city"])
  {
    __city = [[decoder decodeObjectForKey: @"city"] retain_stub];
    __city_isset = YES;
  }
  if ([decoder containsValueForKey: @"area"])
  {
    __area = [[decoder decodeObjectForKey: @"area"] retain_stub];
    __area_isset = YES;
  }
  if ([decoder containsValueForKey: @"linkR"])
  {
    __linkR = [[decoder decodeObjectForKey: @"linkR"] retain_stub];
    __linkR_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dwellerID_isset)
  {
    [encoder encodeObject: __dwellerID forKey: @"dwellerID"];
  }
  if (__dwellerName_isset)
  {
    [encoder encodeObject: __dwellerName forKey: @"dwellerName"];
  }
  if (__dwellerGender_isset)
  {
    [encoder encodeObject: __dwellerGender forKey: @"dwellerGender"];
  }
  if (__birthDate_isset)
  {
    [encoder encodeObject: __birthDate forKey: @"birthDate"];
  }
  if (__region_isset)
  {
    [encoder encodeObject: __region forKey: @"region"];
  }
  if (__idNumber_isset)
  {
    [encoder encodeObject: __idNumber forKey: @"idNumber"];
  }
  if (__bloodType_isset)
  {
    [encoder encodeObject: __bloodType forKey: @"bloodType"];
  }
  if (__phone_isset)
  {
    [encoder encodeObject: __phone forKey: @"phone"];
  }
  if (__maritalSts_isset)
  {
    [encoder encodeObject: __maritalSts forKey: @"maritalSts"];
  }
  if (__workUnit_isset)
  {
    [encoder encodeObject: __workUnit forKey: @"workUnit"];
  }
  if (__addr_isset)
  {
    [encoder encodeObject: __addr forKey: @"addr"];
  }
  if (__lastFollowupID_isset)
  {
    [encoder encodeObject: __lastFollowupID forKey: @"lastFollowupID"];
  }
  if (__linkB_isset)
  {
    [encoder encodeObject: __linkB forKey: @"linkB"];
  }
  if (__linkD_isset)
  {
    [encoder encodeObject: __linkD forKey: @"linkD"];
  }
  if (__signStatus_isset)
  {
    [encoder encodeObject: __signStatus forKey: @"signStatus"];
  }
  if (__caseTypes_isset)
  {
    [encoder encodeObject: __caseTypes forKey: @"caseTypes"];
  }
  if (__disability_isset)
  {
    [encoder encodeObject: __disability forKey: @"disability"];
  }
  if (__familyHistory_isset)
  {
    [encoder encodeObject: __familyHistory forKey: @"familyHistory"];
  }
  if (__allergichistory_isset)
  {
    [encoder encodeObject: __allergichistory forKey: @"allergichistory"];
  }
  if (__healthRecordCode_isset)
  {
    [encoder encodeObject: __healthRecordCode forKey: @"healthRecordCode"];
  }
  if (__contractID_isset)
  {
    [encoder encodeObject: __contractID forKey: @"contractID"];
  }
  if (__province_isset)
  {
    [encoder encodeObject: __province forKey: @"province"];
  }
  if (__city_isset)
  {
    [encoder encodeObject: __city forKey: @"city"];
  }
  if (__area_isset)
  {
    [encoder encodeObject: __area forKey: @"area"];
  }
  if (__linkR_isset)
  {
    [encoder encodeObject: __linkR forKey: @"linkR"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __dwellerID_isset ? 2654435761 : 0;
  if (__dwellerID_isset)
  {
    hash = (hash * 31) ^ [__dwellerID hash];
  }
  hash = (hash * 31) ^ __dwellerName_isset ? 2654435761 : 0;
  if (__dwellerName_isset)
  {
    hash = (hash * 31) ^ [__dwellerName hash];
  }
  hash = (hash * 31) ^ __dwellerGender_isset ? 2654435761 : 0;
  if (__dwellerGender_isset)
  {
    hash = (hash * 31) ^ [__dwellerGender hash];
  }
  hash = (hash * 31) ^ __birthDate_isset ? 2654435761 : 0;
  if (__birthDate_isset)
  {
    hash = (hash * 31) ^ [__birthDate hash];
  }
  hash = (hash * 31) ^ __region_isset ? 2654435761 : 0;
  if (__region_isset)
  {
    hash = (hash * 31) ^ [__region hash];
  }
  hash = (hash * 31) ^ __idNumber_isset ? 2654435761 : 0;
  if (__idNumber_isset)
  {
    hash = (hash * 31) ^ [__idNumber hash];
  }
  hash = (hash * 31) ^ __bloodType_isset ? 2654435761 : 0;
  if (__bloodType_isset)
  {
    hash = (hash * 31) ^ [__bloodType hash];
  }
  hash = (hash * 31) ^ __phone_isset ? 2654435761 : 0;
  if (__phone_isset)
  {
    hash = (hash * 31) ^ [__phone hash];
  }
  hash = (hash * 31) ^ __maritalSts_isset ? 2654435761 : 0;
  if (__maritalSts_isset)
  {
    hash = (hash * 31) ^ [__maritalSts hash];
  }
  hash = (hash * 31) ^ __workUnit_isset ? 2654435761 : 0;
  if (__workUnit_isset)
  {
    hash = (hash * 31) ^ [__workUnit hash];
  }
  hash = (hash * 31) ^ __addr_isset ? 2654435761 : 0;
  if (__addr_isset)
  {
    hash = (hash * 31) ^ [__addr hash];
  }
  hash = (hash * 31) ^ __lastFollowupID_isset ? 2654435761 : 0;
  if (__lastFollowupID_isset)
  {
    hash = (hash * 31) ^ [__lastFollowupID hash];
  }
  hash = (hash * 31) ^ __linkB_isset ? 2654435761 : 0;
  if (__linkB_isset)
  {
    hash = (hash * 31) ^ [__linkB hash];
  }
  hash = (hash * 31) ^ __linkD_isset ? 2654435761 : 0;
  if (__linkD_isset)
  {
    hash = (hash * 31) ^ [__linkD hash];
  }
  hash = (hash * 31) ^ __signStatus_isset ? 2654435761 : 0;
  if (__signStatus_isset)
  {
    hash = (hash * 31) ^ [__signStatus hash];
  }
  hash = (hash * 31) ^ __caseTypes_isset ? 2654435761 : 0;
  if (__caseTypes_isset)
  {
    hash = (hash * 31) ^ [__caseTypes hash];
  }
  hash = (hash * 31) ^ __disability_isset ? 2654435761 : 0;
  if (__disability_isset)
  {
    hash = (hash * 31) ^ [__disability hash];
  }
  hash = (hash * 31) ^ __familyHistory_isset ? 2654435761 : 0;
  if (__familyHistory_isset)
  {
    hash = (hash * 31) ^ [__familyHistory hash];
  }
  hash = (hash * 31) ^ __allergichistory_isset ? 2654435761 : 0;
  if (__allergichistory_isset)
  {
    hash = (hash * 31) ^ [__allergichistory hash];
  }
  hash = (hash * 31) ^ __healthRecordCode_isset ? 2654435761 : 0;
  if (__healthRecordCode_isset)
  {
    hash = (hash * 31) ^ [__healthRecordCode hash];
  }
  hash = (hash * 31) ^ __contractID_isset ? 2654435761 : 0;
  if (__contractID_isset)
  {
    hash = (hash * 31) ^ [__contractID hash];
  }
  hash = (hash * 31) ^ __province_isset ? 2654435761 : 0;
  if (__province_isset)
  {
    hash = (hash * 31) ^ [__province hash];
  }
  hash = (hash * 31) ^ __city_isset ? 2654435761 : 0;
  if (__city_isset)
  {
    hash = (hash * 31) ^ [__city hash];
  }
  hash = (hash * 31) ^ __area_isset ? 2654435761 : 0;
  if (__area_isset)
  {
    hash = (hash * 31) ^ [__area hash];
  }
  hash = (hash * 31) ^ __linkR_isset ? 2654435761 : 0;
  if (__linkR_isset)
  {
    hash = (hash * 31) ^ [__linkR hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFDwellerInfoDto class]]) {
    return NO;
  }
  NXTFDwellerInfoDto *other = (NXTFDwellerInfoDto *)anObject;
  if ((__dwellerID_isset != other->__dwellerID_isset) ||
      (__dwellerID_isset && ((__dwellerID || other->__dwellerID) && ![__dwellerID isEqual:other->__dwellerID]))) {
    return NO;
  }
  if ((__dwellerName_isset != other->__dwellerName_isset) ||
      (__dwellerName_isset && ((__dwellerName || other->__dwellerName) && ![__dwellerName isEqual:other->__dwellerName]))) {
    return NO;
  }
  if ((__dwellerGender_isset != other->__dwellerGender_isset) ||
      (__dwellerGender_isset && ((__dwellerGender || other->__dwellerGender) && ![__dwellerGender isEqual:other->__dwellerGender]))) {
    return NO;
  }
  if ((__birthDate_isset != other->__birthDate_isset) ||
      (__birthDate_isset && ((__birthDate || other->__birthDate) && ![__birthDate isEqual:other->__birthDate]))) {
    return NO;
  }
  if ((__region_isset != other->__region_isset) ||
      (__region_isset && ((__region || other->__region) && ![__region isEqual:other->__region]))) {
    return NO;
  }
  if ((__idNumber_isset != other->__idNumber_isset) ||
      (__idNumber_isset && ((__idNumber || other->__idNumber) && ![__idNumber isEqual:other->__idNumber]))) {
    return NO;
  }
  if ((__bloodType_isset != other->__bloodType_isset) ||
      (__bloodType_isset && ((__bloodType || other->__bloodType) && ![__bloodType isEqual:other->__bloodType]))) {
    return NO;
  }
  if ((__phone_isset != other->__phone_isset) ||
      (__phone_isset && ((__phone || other->__phone) && ![__phone isEqual:other->__phone]))) {
    return NO;
  }
  if ((__maritalSts_isset != other->__maritalSts_isset) ||
      (__maritalSts_isset && ((__maritalSts || other->__maritalSts) && ![__maritalSts isEqual:other->__maritalSts]))) {
    return NO;
  }
  if ((__workUnit_isset != other->__workUnit_isset) ||
      (__workUnit_isset && ((__workUnit || other->__workUnit) && ![__workUnit isEqual:other->__workUnit]))) {
    return NO;
  }
  if ((__addr_isset != other->__addr_isset) ||
      (__addr_isset && ((__addr || other->__addr) && ![__addr isEqual:other->__addr]))) {
    return NO;
  }
  if ((__lastFollowupID_isset != other->__lastFollowupID_isset) ||
      (__lastFollowupID_isset && ((__lastFollowupID || other->__lastFollowupID) && ![__lastFollowupID isEqual:other->__lastFollowupID]))) {
    return NO;
  }
  if ((__linkB_isset != other->__linkB_isset) ||
      (__linkB_isset && ((__linkB || other->__linkB) && ![__linkB isEqual:other->__linkB]))) {
    return NO;
  }
  if ((__linkD_isset != other->__linkD_isset) ||
      (__linkD_isset && ((__linkD || other->__linkD) && ![__linkD isEqual:other->__linkD]))) {
    return NO;
  }
  if ((__signStatus_isset != other->__signStatus_isset) ||
      (__signStatus_isset && ((__signStatus || other->__signStatus) && ![__signStatus isEqual:other->__signStatus]))) {
    return NO;
  }
  if ((__caseTypes_isset != other->__caseTypes_isset) ||
      (__caseTypes_isset && ((__caseTypes || other->__caseTypes) && ![__caseTypes isEqual:other->__caseTypes]))) {
    return NO;
  }
  if ((__disability_isset != other->__disability_isset) ||
      (__disability_isset && ((__disability || other->__disability) && ![__disability isEqual:other->__disability]))) {
    return NO;
  }
  if ((__familyHistory_isset != other->__familyHistory_isset) ||
      (__familyHistory_isset && ((__familyHistory || other->__familyHistory) && ![__familyHistory isEqual:other->__familyHistory]))) {
    return NO;
  }
  if ((__allergichistory_isset != other->__allergichistory_isset) ||
      (__allergichistory_isset && ((__allergichistory || other->__allergichistory) && ![__allergichistory isEqual:other->__allergichistory]))) {
    return NO;
  }
  if ((__healthRecordCode_isset != other->__healthRecordCode_isset) ||
      (__healthRecordCode_isset && ((__healthRecordCode || other->__healthRecordCode) && ![__healthRecordCode isEqual:other->__healthRecordCode]))) {
    return NO;
  }
  if ((__contractID_isset != other->__contractID_isset) ||
      (__contractID_isset && ((__contractID || other->__contractID) && ![__contractID isEqual:other->__contractID]))) {
    return NO;
  }
  if ((__province_isset != other->__province_isset) ||
      (__province_isset && ((__province || other->__province) && ![__province isEqual:other->__province]))) {
    return NO;
  }
  if ((__city_isset != other->__city_isset) ||
      (__city_isset && ((__city || other->__city) && ![__city isEqual:other->__city]))) {
    return NO;
  }
  if ((__area_isset != other->__area_isset) ||
      (__area_isset && ((__area || other->__area) && ![__area isEqual:other->__area]))) {
    return NO;
  }
  if ((__linkR_isset != other->__linkR_isset) ||
      (__linkR_isset && ((__linkR || other->__linkR) && ![__linkR isEqual:other->__linkR]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__dwellerID release_stub];
  [__dwellerName release_stub];
  [__dwellerGender release_stub];
  [__birthDate release_stub];
  [__region release_stub];
  [__idNumber release_stub];
  [__bloodType release_stub];
  [__phone release_stub];
  [__maritalSts release_stub];
  [__workUnit release_stub];
  [__addr release_stub];
  [__lastFollowupID release_stub];
  [__linkB release_stub];
  [__linkD release_stub];
  [__signStatus release_stub];
  [__caseTypes release_stub];
  [__disability release_stub];
  [__familyHistory release_stub];
  [__allergichistory release_stub];
  [__healthRecordCode release_stub];
  [__contractID release_stub];
  [__province release_stub];
  [__city release_stub];
  [__area release_stub];
  [__linkR release_stub];
  [super dealloc_stub];
}

- (NSString *) dwellerID {
  return [[__dwellerID retain_stub] autorelease_stub];
}

- (void) setDwellerID: (NSString *) dwellerID {
  [dwellerID retain_stub];
  [__dwellerID release_stub];
  __dwellerID = dwellerID;
  __dwellerID_isset = YES;
}

- (BOOL) dwellerIDIsSet {
  return __dwellerID_isset;
}

- (void) unsetDwellerID {
  [__dwellerID release_stub];
  __dwellerID = nil;
  __dwellerID_isset = NO;
}

- (NSString *) dwellerName {
  return [[__dwellerName retain_stub] autorelease_stub];
}

- (void) setDwellerName: (NSString *) dwellerName {
  [dwellerName retain_stub];
  [__dwellerName release_stub];
  __dwellerName = dwellerName;
  __dwellerName_isset = YES;
}

- (BOOL) dwellerNameIsSet {
  return __dwellerName_isset;
}

- (void) unsetDwellerName {
  [__dwellerName release_stub];
  __dwellerName = nil;
  __dwellerName_isset = NO;
}

- (NSString *) dwellerGender {
  return [[__dwellerGender retain_stub] autorelease_stub];
}

- (void) setDwellerGender: (NSString *) dwellerGender {
  [dwellerGender retain_stub];
  [__dwellerGender release_stub];
  __dwellerGender = dwellerGender;
  __dwellerGender_isset = YES;
}

- (BOOL) dwellerGenderIsSet {
  return __dwellerGender_isset;
}

- (void) unsetDwellerGender {
  [__dwellerGender release_stub];
  __dwellerGender = nil;
  __dwellerGender_isset = NO;
}

- (NSString *) birthDate {
  return [[__birthDate retain_stub] autorelease_stub];
}

- (void) setBirthDate: (NSString *) birthDate {
  [birthDate retain_stub];
  [__birthDate release_stub];
  __birthDate = birthDate;
  __birthDate_isset = YES;
}

- (BOOL) birthDateIsSet {
  return __birthDate_isset;
}

- (void) unsetBirthDate {
  [__birthDate release_stub];
  __birthDate = nil;
  __birthDate_isset = NO;
}

- (NSString *) region {
  return [[__region retain_stub] autorelease_stub];
}

- (void) setRegion: (NSString *) region {
  [region retain_stub];
  [__region release_stub];
  __region = region;
  __region_isset = YES;
}

- (BOOL) regionIsSet {
  return __region_isset;
}

- (void) unsetRegion {
  [__region release_stub];
  __region = nil;
  __region_isset = NO;
}

- (NSString *) idNumber {
  return [[__idNumber retain_stub] autorelease_stub];
}

- (void) setIdNumber: (NSString *) idNumber {
  [idNumber retain_stub];
  [__idNumber release_stub];
  __idNumber = idNumber;
  __idNumber_isset = YES;
}

- (BOOL) idNumberIsSet {
  return __idNumber_isset;
}

- (void) unsetIdNumber {
  [__idNumber release_stub];
  __idNumber = nil;
  __idNumber_isset = NO;
}

- (NSString *) bloodType {
  return [[__bloodType retain_stub] autorelease_stub];
}

- (void) setBloodType: (NSString *) bloodType {
  [bloodType retain_stub];
  [__bloodType release_stub];
  __bloodType = bloodType;
  __bloodType_isset = YES;
}

- (BOOL) bloodTypeIsSet {
  return __bloodType_isset;
}

- (void) unsetBloodType {
  [__bloodType release_stub];
  __bloodType = nil;
  __bloodType_isset = NO;
}

- (NSString *) phone {
  return [[__phone retain_stub] autorelease_stub];
}

- (void) setPhone: (NSString *) phone {
  [phone retain_stub];
  [__phone release_stub];
  __phone = phone;
  __phone_isset = YES;
}

- (BOOL) phoneIsSet {
  return __phone_isset;
}

- (void) unsetPhone {
  [__phone release_stub];
  __phone = nil;
  __phone_isset = NO;
}

- (NSString *) maritalSts {
  return [[__maritalSts retain_stub] autorelease_stub];
}

- (void) setMaritalSts: (NSString *) maritalSts {
  [maritalSts retain_stub];
  [__maritalSts release_stub];
  __maritalSts = maritalSts;
  __maritalSts_isset = YES;
}

- (BOOL) maritalStsIsSet {
  return __maritalSts_isset;
}

- (void) unsetMaritalSts {
  [__maritalSts release_stub];
  __maritalSts = nil;
  __maritalSts_isset = NO;
}

- (NSString *) workUnit {
  return [[__workUnit retain_stub] autorelease_stub];
}

- (void) setWorkUnit: (NSString *) workUnit {
  [workUnit retain_stub];
  [__workUnit release_stub];
  __workUnit = workUnit;
  __workUnit_isset = YES;
}

- (BOOL) workUnitIsSet {
  return __workUnit_isset;
}

- (void) unsetWorkUnit {
  [__workUnit release_stub];
  __workUnit = nil;
  __workUnit_isset = NO;
}

- (NSString *) addr {
  return [[__addr retain_stub] autorelease_stub];
}

- (void) setAddr: (NSString *) addr {
  [addr retain_stub];
  [__addr release_stub];
  __addr = addr;
  __addr_isset = YES;
}

- (BOOL) addrIsSet {
  return __addr_isset;
}

- (void) unsetAddr {
  [__addr release_stub];
  __addr = nil;
  __addr_isset = NO;
}

- (NSString *) lastFollowupID {
  return [[__lastFollowupID retain_stub] autorelease_stub];
}

- (void) setLastFollowupID: (NSString *) lastFollowupID {
  [lastFollowupID retain_stub];
  [__lastFollowupID release_stub];
  __lastFollowupID = lastFollowupID;
  __lastFollowupID_isset = YES;
}

- (BOOL) lastFollowupIDIsSet {
  return __lastFollowupID_isset;
}

- (void) unsetLastFollowupID {
  [__lastFollowupID release_stub];
  __lastFollowupID = nil;
  __lastFollowupID_isset = NO;
}

- (NSString *) linkB {
  return [[__linkB retain_stub] autorelease_stub];
}

- (void) setLinkB: (NSString *) linkB {
  [linkB retain_stub];
  [__linkB release_stub];
  __linkB = linkB;
  __linkB_isset = YES;
}

- (BOOL) linkBIsSet {
  return __linkB_isset;
}

- (void) unsetLinkB {
  [__linkB release_stub];
  __linkB = nil;
  __linkB_isset = NO;
}

- (NSString *) linkD {
  return [[__linkD retain_stub] autorelease_stub];
}

- (void) setLinkD: (NSString *) linkD {
  [linkD retain_stub];
  [__linkD release_stub];
  __linkD = linkD;
  __linkD_isset = YES;
}

- (BOOL) linkDIsSet {
  return __linkD_isset;
}

- (void) unsetLinkD {
  [__linkD release_stub];
  __linkD = nil;
  __linkD_isset = NO;
}

- (NSString *) signStatus {
  return [[__signStatus retain_stub] autorelease_stub];
}

- (void) setSignStatus: (NSString *) signStatus {
  [signStatus retain_stub];
  [__signStatus release_stub];
  __signStatus = signStatus;
  __signStatus_isset = YES;
}

- (BOOL) signStatusIsSet {
  return __signStatus_isset;
}

- (void) unsetSignStatus {
  [__signStatus release_stub];
  __signStatus = nil;
  __signStatus_isset = NO;
}

- (NSMutableArray *) caseTypes {
  return [[__caseTypes retain_stub] autorelease_stub];
}

- (void) setCaseTypes: (NSMutableArray *) caseTypes {
  [caseTypes retain_stub];
  [__caseTypes release_stub];
  __caseTypes = caseTypes;
  __caseTypes_isset = YES;
}

- (BOOL) caseTypesIsSet {
  return __caseTypes_isset;
}

- (void) unsetCaseTypes {
  [__caseTypes release_stub];
  __caseTypes = nil;
  __caseTypes_isset = NO;
}

- (NSString *) disability {
  return [[__disability retain_stub] autorelease_stub];
}

- (void) setDisability: (NSString *) disability {
  [disability retain_stub];
  [__disability release_stub];
  __disability = disability;
  __disability_isset = YES;
}

- (BOOL) disabilityIsSet {
  return __disability_isset;
}

- (void) unsetDisability {
  [__disability release_stub];
  __disability = nil;
  __disability_isset = NO;
}

- (NSString *) familyHistory {
  return [[__familyHistory retain_stub] autorelease_stub];
}

- (void) setFamilyHistory: (NSString *) familyHistory {
  [familyHistory retain_stub];
  [__familyHistory release_stub];
  __familyHistory = familyHistory;
  __familyHistory_isset = YES;
}

- (BOOL) familyHistoryIsSet {
  return __familyHistory_isset;
}

- (void) unsetFamilyHistory {
  [__familyHistory release_stub];
  __familyHistory = nil;
  __familyHistory_isset = NO;
}

- (NSString *) allergichistory {
  return [[__allergichistory retain_stub] autorelease_stub];
}

- (void) setAllergichistory: (NSString *) allergichistory {
  [allergichistory retain_stub];
  [__allergichistory release_stub];
  __allergichistory = allergichistory;
  __allergichistory_isset = YES;
}

- (BOOL) allergichistoryIsSet {
  return __allergichistory_isset;
}

- (void) unsetAllergichistory {
  [__allergichistory release_stub];
  __allergichistory = nil;
  __allergichistory_isset = NO;
}

- (NSString *) healthRecordCode {
  return [[__healthRecordCode retain_stub] autorelease_stub];
}

- (void) setHealthRecordCode: (NSString *) healthRecordCode {
  [healthRecordCode retain_stub];
  [__healthRecordCode release_stub];
  __healthRecordCode = healthRecordCode;
  __healthRecordCode_isset = YES;
}

- (BOOL) healthRecordCodeIsSet {
  return __healthRecordCode_isset;
}

- (void) unsetHealthRecordCode {
  [__healthRecordCode release_stub];
  __healthRecordCode = nil;
  __healthRecordCode_isset = NO;
}

- (NSString *) contractID {
  return [[__contractID retain_stub] autorelease_stub];
}

- (void) setContractID: (NSString *) contractID {
  [contractID retain_stub];
  [__contractID release_stub];
  __contractID = contractID;
  __contractID_isset = YES;
}

- (BOOL) contractIDIsSet {
  return __contractID_isset;
}

- (void) unsetContractID {
  [__contractID release_stub];
  __contractID = nil;
  __contractID_isset = NO;
}

- (NSString *) province {
  return [[__province retain_stub] autorelease_stub];
}

- (void) setProvince: (NSString *) province {
  [province retain_stub];
  [__province release_stub];
  __province = province;
  __province_isset = YES;
}

- (BOOL) provinceIsSet {
  return __province_isset;
}

- (void) unsetProvince {
  [__province release_stub];
  __province = nil;
  __province_isset = NO;
}

- (NSString *) city {
  return [[__city retain_stub] autorelease_stub];
}

- (void) setCity: (NSString *) city {
  [city retain_stub];
  [__city release_stub];
  __city = city;
  __city_isset = YES;
}

- (BOOL) cityIsSet {
  return __city_isset;
}

- (void) unsetCity {
  [__city release_stub];
  __city = nil;
  __city_isset = NO;
}

- (NSString *) area {
  return [[__area retain_stub] autorelease_stub];
}

- (void) setArea: (NSString *) area {
  [area retain_stub];
  [__area release_stub];
  __area = area;
  __area_isset = YES;
}

- (BOOL) areaIsSet {
  return __area_isset;
}

- (void) unsetArea {
  [__area release_stub];
  __area = nil;
  __area_isset = NO;
}

- (NSString *) linkR {
  return [[__linkR retain_stub] autorelease_stub];
}

- (void) setLinkR: (NSString *) linkR {
  [linkR retain_stub];
  [__linkR release_stub];
  __linkR = linkR;
  __linkR_isset = YES;
}

- (BOOL) linkRIsSet {
  return __linkR_isset;
}

- (void) unsetLinkR {
  [__linkR release_stub];
  __linkR = nil;
  __linkR_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDwellerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDwellerName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDwellerGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBirthDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIdNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBloodType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMaritalSts: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWorkUnit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddr: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLastFollowupID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLinkB: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLinkD: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSignStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_LIST) {
          int _size171;
          [inProtocol readListBeginReturningElementType: NULL size: &_size171];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size171];
          int _i172;
          for (_i172 = 0; _i172 < _size171; ++_i172)
          {
            NSString * _elem173 = [inProtocol readString];
            [fieldValue addObject: _elem173];
          }
          [inProtocol readListEnd];
          [self setCaseTypes: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDisability: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFamilyHistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAllergichistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHealthRecordCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContractID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProvince: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setArea: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLinkR: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DwellerInfoDto"];
  if (__dwellerID_isset) {
    if (__dwellerID != nil) {
      [outProtocol writeFieldBeginWithName: @"dwellerID" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dwellerID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dwellerName_isset) {
    if (__dwellerName != nil) {
      [outProtocol writeFieldBeginWithName: @"dwellerName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __dwellerName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dwellerGender_isset) {
    if (__dwellerGender != nil) {
      [outProtocol writeFieldBeginWithName: @"dwellerGender" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __dwellerGender];
      [outProtocol writeFieldEnd];
    }
  }
  if (__birthDate_isset) {
    if (__birthDate != nil) {
      [outProtocol writeFieldBeginWithName: @"birthDate" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __birthDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__region_isset) {
    if (__region != nil) {
      [outProtocol writeFieldBeginWithName: @"region" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __region];
      [outProtocol writeFieldEnd];
    }
  }
  if (__idNumber_isset) {
    if (__idNumber != nil) {
      [outProtocol writeFieldBeginWithName: @"idNumber" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __idNumber];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bloodType_isset) {
    if (__bloodType != nil) {
      [outProtocol writeFieldBeginWithName: @"bloodType" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __bloodType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phone_isset) {
    if (__phone != nil) {
      [outProtocol writeFieldBeginWithName: @"phone" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __phone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__maritalSts_isset) {
    if (__maritalSts != nil) {
      [outProtocol writeFieldBeginWithName: @"maritalSts" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __maritalSts];
      [outProtocol writeFieldEnd];
    }
  }
  if (__workUnit_isset) {
    if (__workUnit != nil) {
      [outProtocol writeFieldBeginWithName: @"workUnit" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __workUnit];
      [outProtocol writeFieldEnd];
    }
  }
  if (__addr_isset) {
    if (__addr != nil) {
      [outProtocol writeFieldBeginWithName: @"addr" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __addr];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastFollowupID_isset) {
    if (__lastFollowupID != nil) {
      [outProtocol writeFieldBeginWithName: @"lastFollowupID" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __lastFollowupID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__linkB_isset) {
    if (__linkB != nil) {
      [outProtocol writeFieldBeginWithName: @"linkB" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __linkB];
      [outProtocol writeFieldEnd];
    }
  }
  if (__linkD_isset) {
    if (__linkD != nil) {
      [outProtocol writeFieldBeginWithName: @"linkD" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __linkD];
      [outProtocol writeFieldEnd];
    }
  }
  if (__signStatus_isset) {
    if (__signStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"signStatus" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __signStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__caseTypes_isset) {
    if (__caseTypes != nil) {
      [outProtocol writeFieldBeginWithName: @"caseTypes" type: TType_LIST fieldID: 16];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__caseTypes count]];
        int idx175;
        for (idx175 = 0; idx175 < [__caseTypes count]; idx175++)
        {
          [outProtocol writeString: [__caseTypes objectAtIndex: idx175]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__disability_isset) {
    if (__disability != nil) {
      [outProtocol writeFieldBeginWithName: @"disability" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __disability];
      [outProtocol writeFieldEnd];
    }
  }
  if (__familyHistory_isset) {
    if (__familyHistory != nil) {
      [outProtocol writeFieldBeginWithName: @"familyHistory" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __familyHistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__allergichistory_isset) {
    if (__allergichistory != nil) {
      [outProtocol writeFieldBeginWithName: @"allergichistory" type: TType_STRING fieldID: 19];
      [outProtocol writeString: __allergichistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__healthRecordCode_isset) {
    if (__healthRecordCode != nil) {
      [outProtocol writeFieldBeginWithName: @"healthRecordCode" type: TType_STRING fieldID: 20];
      [outProtocol writeString: __healthRecordCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__contractID_isset) {
    if (__contractID != nil) {
      [outProtocol writeFieldBeginWithName: @"contractID" type: TType_STRING fieldID: 21];
      [outProtocol writeString: __contractID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__province_isset) {
    if (__province != nil) {
      [outProtocol writeFieldBeginWithName: @"province" type: TType_STRING fieldID: 22];
      [outProtocol writeString: __province];
      [outProtocol writeFieldEnd];
    }
  }
  if (__city_isset) {
    if (__city != nil) {
      [outProtocol writeFieldBeginWithName: @"city" type: TType_STRING fieldID: 23];
      [outProtocol writeString: __city];
      [outProtocol writeFieldEnd];
    }
  }
  if (__area_isset) {
    if (__area != nil) {
      [outProtocol writeFieldBeginWithName: @"area" type: TType_STRING fieldID: 24];
      [outProtocol writeString: __area];
      [outProtocol writeFieldEnd];
    }
  }
  if (__linkR_isset) {
    if (__linkR != nil) {
      [outProtocol writeFieldBeginWithName: @"linkR" type: TType_STRING fieldID: 25];
      [outProtocol writeString: __linkR];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFDwellerInfoDto("];
  [ms appendString: @"dwellerID:"];
  [ms appendFormat: @"\"%@\"", __dwellerID];
  [ms appendString: @",dwellerName:"];
  [ms appendFormat: @"\"%@\"", __dwellerName];
  [ms appendString: @",dwellerGender:"];
  [ms appendFormat: @"\"%@\"", __dwellerGender];
  [ms appendString: @",birthDate:"];
  [ms appendFormat: @"\"%@\"", __birthDate];
  [ms appendString: @",region:"];
  [ms appendFormat: @"\"%@\"", __region];
  [ms appendString: @",idNumber:"];
  [ms appendFormat: @"\"%@\"", __idNumber];
  [ms appendString: @",bloodType:"];
  [ms appendFormat: @"\"%@\"", __bloodType];
  [ms appendString: @",phone:"];
  [ms appendFormat: @"\"%@\"", __phone];
  [ms appendString: @",maritalSts:"];
  [ms appendFormat: @"\"%@\"", __maritalSts];
  [ms appendString: @",workUnit:"];
  [ms appendFormat: @"\"%@\"", __workUnit];
  [ms appendString: @",addr:"];
  [ms appendFormat: @"\"%@\"", __addr];
  [ms appendString: @",lastFollowupID:"];
  [ms appendFormat: @"\"%@\"", __lastFollowupID];
  [ms appendString: @",linkB:"];
  [ms appendFormat: @"\"%@\"", __linkB];
  [ms appendString: @",linkD:"];
  [ms appendFormat: @"\"%@\"", __linkD];
  [ms appendString: @",signStatus:"];
  [ms appendFormat: @"\"%@\"", __signStatus];
  [ms appendString: @",caseTypes:"];
  [ms appendFormat: @"%@", __caseTypes];
  [ms appendString: @",disability:"];
  [ms appendFormat: @"\"%@\"", __disability];
  [ms appendString: @",familyHistory:"];
  [ms appendFormat: @"\"%@\"", __familyHistory];
  [ms appendString: @",allergichistory:"];
  [ms appendFormat: @"\"%@\"", __allergichistory];
  [ms appendString: @",healthRecordCode:"];
  [ms appendFormat: @"\"%@\"", __healthRecordCode];
  [ms appendString: @",contractID:"];
  [ms appendFormat: @"\"%@\"", __contractID];
  [ms appendString: @",province:"];
  [ms appendFormat: @"\"%@\"", __province];
  [ms appendString: @",city:"];
  [ms appendFormat: @"\"%@\"", __city];
  [ms appendString: @",area:"];
  [ms appendFormat: @"\"%@\"", __area];
  [ms appendString: @",linkR:"];
  [ms appendFormat: @"\"%@\"", __linkR];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFContractInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithContractID: (NSString *) contractID signFlg: (NSString *) signFlg team: (NXTFDrTeamDto *) team contractDuration: (int32_t) contractDuration contractDate: (NSString *) contractDate dwellerInfos: (NSMutableArray *) dwellerInfos packageInfos: (NSMutableArray *) packageInfos
{
  self = [super init];
  __contractID = [contractID retain_stub];
  __contractID_isset = YES;
  __signFlg = [signFlg retain_stub];
  __signFlg_isset = YES;
  __team = [team retain_stub];
  __team_isset = YES;
  __contractDuration = contractDuration;
  __contractDuration_isset = YES;
  __contractDate = [contractDate retain_stub];
  __contractDate_isset = YES;
  __dwellerInfos = [dwellerInfos retain_stub];
  __dwellerInfos_isset = YES;
  __packageInfos = [packageInfos retain_stub];
  __packageInfos_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"contractID"])
  {
    __contractID = [[decoder decodeObjectForKey: @"contractID"] retain_stub];
    __contractID_isset = YES;
  }
  if ([decoder containsValueForKey: @"signFlg"])
  {
    __signFlg = [[decoder decodeObjectForKey: @"signFlg"] retain_stub];
    __signFlg_isset = YES;
  }
  if ([decoder containsValueForKey: @"team"])
  {
    __team = [[decoder decodeObjectForKey: @"team"] retain_stub];
    __team_isset = YES;
  }
  if ([decoder containsValueForKey: @"contractDuration"])
  {
    __contractDuration = [decoder decodeInt32ForKey: @"contractDuration"];
    __contractDuration_isset = YES;
  }
  if ([decoder containsValueForKey: @"contractDate"])
  {
    __contractDate = [[decoder decodeObjectForKey: @"contractDate"] retain_stub];
    __contractDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"dwellerInfos"])
  {
    __dwellerInfos = [[decoder decodeObjectForKey: @"dwellerInfos"] retain_stub];
    __dwellerInfos_isset = YES;
  }
  if ([decoder containsValueForKey: @"packageInfos"])
  {
    __packageInfos = [[decoder decodeObjectForKey: @"packageInfos"] retain_stub];
    __packageInfos_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__contractID_isset)
  {
    [encoder encodeObject: __contractID forKey: @"contractID"];
  }
  if (__signFlg_isset)
  {
    [encoder encodeObject: __signFlg forKey: @"signFlg"];
  }
  if (__team_isset)
  {
    [encoder encodeObject: __team forKey: @"team"];
  }
  if (__contractDuration_isset)
  {
    [encoder encodeInt32: __contractDuration forKey: @"contractDuration"];
  }
  if (__contractDate_isset)
  {
    [encoder encodeObject: __contractDate forKey: @"contractDate"];
  }
  if (__dwellerInfos_isset)
  {
    [encoder encodeObject: __dwellerInfos forKey: @"dwellerInfos"];
  }
  if (__packageInfos_isset)
  {
    [encoder encodeObject: __packageInfos forKey: @"packageInfos"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __contractID_isset ? 2654435761 : 0;
  if (__contractID_isset)
  {
    hash = (hash * 31) ^ [__contractID hash];
  }
  hash = (hash * 31) ^ __signFlg_isset ? 2654435761 : 0;
  if (__signFlg_isset)
  {
    hash = (hash * 31) ^ [__signFlg hash];
  }
  hash = (hash * 31) ^ __team_isset ? 2654435761 : 0;
  if (__team_isset)
  {
    hash = (hash * 31) ^ [__team hash];
  }
  hash = (hash * 31) ^ __contractDuration_isset ? 2654435761 : 0;
  if (__contractDuration_isset)
  {
    hash = (hash * 31) ^ [@(__contractDuration) hash];
  }
  hash = (hash * 31) ^ __contractDate_isset ? 2654435761 : 0;
  if (__contractDate_isset)
  {
    hash = (hash * 31) ^ [__contractDate hash];
  }
  hash = (hash * 31) ^ __dwellerInfos_isset ? 2654435761 : 0;
  if (__dwellerInfos_isset)
  {
    hash = (hash * 31) ^ [__dwellerInfos hash];
  }
  hash = (hash * 31) ^ __packageInfos_isset ? 2654435761 : 0;
  if (__packageInfos_isset)
  {
    hash = (hash * 31) ^ [__packageInfos hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFContractInfo class]]) {
    return NO;
  }
  NXTFContractInfo *other = (NXTFContractInfo *)anObject;
  if ((__contractID_isset != other->__contractID_isset) ||
      (__contractID_isset && ((__contractID || other->__contractID) && ![__contractID isEqual:other->__contractID]))) {
    return NO;
  }
  if ((__signFlg_isset != other->__signFlg_isset) ||
      (__signFlg_isset && ((__signFlg || other->__signFlg) && ![__signFlg isEqual:other->__signFlg]))) {
    return NO;
  }
  if ((__team_isset != other->__team_isset) ||
      (__team_isset && ((__team || other->__team) && ![__team isEqual:other->__team]))) {
    return NO;
  }
  if ((__contractDuration_isset != other->__contractDuration_isset) ||
      (__contractDuration_isset && (__contractDuration != other->__contractDuration))) {
    return NO;
  }
  if ((__contractDate_isset != other->__contractDate_isset) ||
      (__contractDate_isset && ((__contractDate || other->__contractDate) && ![__contractDate isEqual:other->__contractDate]))) {
    return NO;
  }
  if ((__dwellerInfos_isset != other->__dwellerInfos_isset) ||
      (__dwellerInfos_isset && ((__dwellerInfos || other->__dwellerInfos) && ![__dwellerInfos isEqual:other->__dwellerInfos]))) {
    return NO;
  }
  if ((__packageInfos_isset != other->__packageInfos_isset) ||
      (__packageInfos_isset && ((__packageInfos || other->__packageInfos) && ![__packageInfos isEqual:other->__packageInfos]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__contractID release_stub];
  [__signFlg release_stub];
  [__team release_stub];
  [__contractDate release_stub];
  [__dwellerInfos release_stub];
  [__packageInfos release_stub];
  [super dealloc_stub];
}

- (NSString *) contractID {
  return [[__contractID retain_stub] autorelease_stub];
}

- (void) setContractID: (NSString *) contractID {
  [contractID retain_stub];
  [__contractID release_stub];
  __contractID = contractID;
  __contractID_isset = YES;
}

- (BOOL) contractIDIsSet {
  return __contractID_isset;
}

- (void) unsetContractID {
  [__contractID release_stub];
  __contractID = nil;
  __contractID_isset = NO;
}

- (NSString *) signFlg {
  return [[__signFlg retain_stub] autorelease_stub];
}

- (void) setSignFlg: (NSString *) signFlg {
  [signFlg retain_stub];
  [__signFlg release_stub];
  __signFlg = signFlg;
  __signFlg_isset = YES;
}

- (BOOL) signFlgIsSet {
  return __signFlg_isset;
}

- (void) unsetSignFlg {
  [__signFlg release_stub];
  __signFlg = nil;
  __signFlg_isset = NO;
}

- (NXTFDrTeamDto *) team {
  return [[__team retain_stub] autorelease_stub];
}

- (void) setTeam: (NXTFDrTeamDto *) team {
  [team retain_stub];
  [__team release_stub];
  __team = team;
  __team_isset = YES;
}

- (BOOL) teamIsSet {
  return __team_isset;
}

- (void) unsetTeam {
  [__team release_stub];
  __team = nil;
  __team_isset = NO;
}

- (int32_t) contractDuration {
  return __contractDuration;
}

- (void) setContractDuration: (int32_t) contractDuration {
  __contractDuration = contractDuration;
  __contractDuration_isset = YES;
}

- (BOOL) contractDurationIsSet {
  return __contractDuration_isset;
}

- (void) unsetContractDuration {
  __contractDuration_isset = NO;
}

- (NSString *) contractDate {
  return [[__contractDate retain_stub] autorelease_stub];
}

- (void) setContractDate: (NSString *) contractDate {
  [contractDate retain_stub];
  [__contractDate release_stub];
  __contractDate = contractDate;
  __contractDate_isset = YES;
}

- (BOOL) contractDateIsSet {
  return __contractDate_isset;
}

- (void) unsetContractDate {
  [__contractDate release_stub];
  __contractDate = nil;
  __contractDate_isset = NO;
}

- (NSMutableArray *) dwellerInfos {
  return [[__dwellerInfos retain_stub] autorelease_stub];
}

- (void) setDwellerInfos: (NSMutableArray *) dwellerInfos {
  [dwellerInfos retain_stub];
  [__dwellerInfos release_stub];
  __dwellerInfos = dwellerInfos;
  __dwellerInfos_isset = YES;
}

- (BOOL) dwellerInfosIsSet {
  return __dwellerInfos_isset;
}

- (void) unsetDwellerInfos {
  [__dwellerInfos release_stub];
  __dwellerInfos = nil;
  __dwellerInfos_isset = NO;
}

- (NSMutableArray *) packageInfos {
  return [[__packageInfos retain_stub] autorelease_stub];
}

- (void) setPackageInfos: (NSMutableArray *) packageInfos {
  [packageInfos retain_stub];
  [__packageInfos release_stub];
  __packageInfos = packageInfos;
  __packageInfos_isset = YES;
}

- (BOOL) packageInfosIsSet {
  return __packageInfos_isset;
}

- (void) unsetPackageInfos {
  [__packageInfos release_stub];
  __packageInfos = nil;
  __packageInfos_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContractID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSignFlg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          NXTFDrTeamDto *fieldValue = [[NXTFDrTeamDto alloc] init];
          [fieldValue read: inProtocol];
          [self setTeam: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setContractDuration: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContractDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_LIST) {
          int _size176;
          [inProtocol readListBeginReturningElementType: NULL size: &_size176];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size176];
          int _i177;
          for (_i177 = 0; _i177 < _size176; ++_i177)
          {
            NXTFDwellerInfoDto *_elem178 = [[NXTFDwellerInfoDto alloc] init];
            [_elem178 read: inProtocol];
            [fieldValue addObject: _elem178];
            [_elem178 release_stub];
          }
          [inProtocol readListEnd];
          [self setDwellerInfos: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_LIST) {
          int _size179;
          [inProtocol readListBeginReturningElementType: NULL size: &_size179];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size179];
          int _i180;
          for (_i180 = 0; _i180 < _size179; ++_i180)
          {
            NXTFPackageInfoDto *_elem181 = [[NXTFPackageInfoDto alloc] init];
            [_elem181 read: inProtocol];
            [fieldValue addObject: _elem181];
            [_elem181 release_stub];
          }
          [inProtocol readListEnd];
          [self setPackageInfos: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ContractInfo"];
  if (__contractID_isset) {
    if (__contractID != nil) {
      [outProtocol writeFieldBeginWithName: @"contractID" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __contractID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__signFlg_isset) {
    if (__signFlg != nil) {
      [outProtocol writeFieldBeginWithName: @"signFlg" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __signFlg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__team_isset) {
    if (__team != nil) {
      [outProtocol writeFieldBeginWithName: @"team" type: TType_STRUCT fieldID: 3];
      [__team write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__contractDuration_isset) {
    [outProtocol writeFieldBeginWithName: @"contractDuration" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __contractDuration];
    [outProtocol writeFieldEnd];
  }
  if (__contractDate_isset) {
    if (__contractDate != nil) {
      [outProtocol writeFieldBeginWithName: @"contractDate" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __contractDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dwellerInfos_isset) {
    if (__dwellerInfos != nil) {
      [outProtocol writeFieldBeginWithName: @"dwellerInfos" type: TType_LIST fieldID: 6];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__dwellerInfos count]];
        int idx183;
        for (idx183 = 0; idx183 < [__dwellerInfos count]; idx183++)
        {
          [[__dwellerInfos objectAtIndex: idx183] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__packageInfos_isset) {
    if (__packageInfos != nil) {
      [outProtocol writeFieldBeginWithName: @"packageInfos" type: TType_LIST fieldID: 7];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__packageInfos count]];
        int idx185;
        for (idx185 = 0; idx185 < [__packageInfos count]; idx185++)
        {
          [[__packageInfos objectAtIndex: idx185] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFContractInfo("];
  [ms appendString: @"contractID:"];
  [ms appendFormat: @"\"%@\"", __contractID];
  [ms appendString: @",signFlg:"];
  [ms appendFormat: @"\"%@\"", __signFlg];
  [ms appendString: @",team:"];
  [ms appendFormat: @"%@", __team];
  [ms appendString: @",contractDuration:"];
  [ms appendFormat: @"%i", __contractDuration];
  [ms appendString: @",contractDate:"];
  [ms appendFormat: @"\"%@\"", __contractDate];
  [ms appendString: @",dwellerInfos:"];
  [ms appendFormat: @"%@", __dwellerInfos];
  [ms appendString: @",packageInfos:"];
  [ms appendFormat: @"%@", __packageInfos];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation NXTFRespDtoConstants
+ (void) initialize {
}
@end

