/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Base.h"
#import "RespDto.h"

#import "Resp.h"

@implementation NXTFPingResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPingResp class]]) {
    return NO;
  }
  NXTFPingResp *other = (NXTFPingResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PingResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPingResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetDeptsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.depts = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header depts: (NSMutableArray *) depts scheduleType: (int32_t) scheduleType
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __depts = [depts retain_stub];
  __depts_isset = YES;
  __scheduleType = scheduleType;
  __scheduleType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"depts"])
  {
    __depts = [[decoder decodeObjectForKey: @"depts"] retain_stub];
    __depts_isset = YES;
  }
  if ([decoder containsValueForKey: @"scheduleType"])
  {
    __scheduleType = [decoder decodeInt32ForKey: @"scheduleType"];
    __scheduleType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__depts_isset)
  {
    [encoder encodeObject: __depts forKey: @"depts"];
  }
  if (__scheduleType_isset)
  {
    [encoder encodeInt32: __scheduleType forKey: @"scheduleType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __depts_isset ? 2654435761 : 0;
  if (__depts_isset)
  {
    hash = (hash * 31) ^ [__depts hash];
  }
  hash = (hash * 31) ^ __scheduleType_isset ? 2654435761 : 0;
  if (__scheduleType_isset)
  {
    hash = (hash * 31) ^ [@(__scheduleType) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetDeptsResp class]]) {
    return NO;
  }
  NXTFGetDeptsResp *other = (NXTFGetDeptsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__depts_isset != other->__depts_isset) ||
      (__depts_isset && ((__depts || other->__depts) && ![__depts isEqual:other->__depts]))) {
    return NO;
  }
  if ((__scheduleType_isset != other->__scheduleType_isset) ||
      (__scheduleType_isset && (__scheduleType != other->__scheduleType))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__depts release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) depts {
  return [[__depts retain_stub] autorelease_stub];
}

- (void) setDepts: (NSMutableArray *) depts {
  [depts retain_stub];
  [__depts release_stub];
  __depts = depts;
  __depts_isset = YES;
}

- (BOOL) deptsIsSet {
  return __depts_isset;
}

- (void) unsetDepts {
  [__depts release_stub];
  __depts = nil;
  __depts_isset = NO;
}

- (int32_t) scheduleType {
  return __scheduleType;
}

- (void) setScheduleType: (int32_t) scheduleType {
  __scheduleType = scheduleType;
  __scheduleType_isset = YES;
}

- (BOOL) scheduleTypeIsSet {
  return __scheduleType_isset;
}

- (void) unsetScheduleType {
  __scheduleType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NXTFDeptDto *_elem2 = [[NXTFDeptDto alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setDepts: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setScheduleType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDeptsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__depts_isset) {
    if (__depts != nil) {
      [outProtocol writeFieldBeginWithName: @"depts" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__depts count]];
        int idx4;
        for (idx4 = 0; idx4 < [__depts count]; idx4++)
        {
          [[__depts objectAtIndex: idx4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__scheduleType_isset) {
    [outProtocol writeFieldBeginWithName: @"scheduleType" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __scheduleType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetDeptsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",depts:"];
  [ms appendFormat: @"%@", __depts];
  [ms appendString: @",scheduleType:"];
  [ms appendFormat: @"%i", __scheduleType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRegPointResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header orderNo: (NSString *) orderNo orderId: (NSString *) orderId regId: (NSString *) regId regNo: (NSString *) regNo hospital: (NSString *) hospital department: (NSString *) department doctor: (NSString *) doctor date: (NSString *) date regFee: (NSString *) regFee diagFee: (NSString *) diagFee inspFee: (NSString *) inspFee totalFee: (NSString *) totalFee discount: (NSString *) discount hospId: (NSString *) hospId generateTime: (int64_t) generateTime outTime: (int64_t) outTime cardNo: (NSString *) cardNo spclFee: (NSString *) spclFee sumFee: (NSString *) sumFee pubFee: (NSString *) pubFee isNeedPay: (int32_t) isNeedPay isSupportStIns: (int64_t) isSupportStIns
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __orderNo = [orderNo retain_stub];
  __orderNo_isset = YES;
  __orderId = [orderId retain_stub];
  __orderId_isset = YES;
  __regId = [regId retain_stub];
  __regId_isset = YES;
  __regNo = [regNo retain_stub];
  __regNo_isset = YES;
  __hospital = [hospital retain_stub];
  __hospital_isset = YES;
  __department = [department retain_stub];
  __department_isset = YES;
  __doctor = [doctor retain_stub];
  __doctor_isset = YES;
  __date = [date retain_stub];
  __date_isset = YES;
  __regFee = [regFee retain_stub];
  __regFee_isset = YES;
  __diagFee = [diagFee retain_stub];
  __diagFee_isset = YES;
  __inspFee = [inspFee retain_stub];
  __inspFee_isset = YES;
  __totalFee = [totalFee retain_stub];
  __totalFee_isset = YES;
  __discount = [discount retain_stub];
  __discount_isset = YES;
  __hospId = [hospId retain_stub];
  __hospId_isset = YES;
  __generateTime = generateTime;
  __generateTime_isset = YES;
  __outTime = outTime;
  __outTime_isset = YES;
  __cardNo = [cardNo retain_stub];
  __cardNo_isset = YES;
  __spclFee = [spclFee retain_stub];
  __spclFee_isset = YES;
  __sumFee = [sumFee retain_stub];
  __sumFee_isset = YES;
  __pubFee = [pubFee retain_stub];
  __pubFee_isset = YES;
  __isNeedPay = isNeedPay;
  __isNeedPay_isset = YES;
  __isSupportStIns = isSupportStIns;
  __isSupportStIns_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderNo"])
  {
    __orderNo = [[decoder decodeObjectForKey: @"orderNo"] retain_stub];
    __orderNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [[decoder decodeObjectForKey: @"orderId"] retain_stub];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [[decoder decodeObjectForKey: @"regId"] retain_stub];
    __regId_isset = YES;
  }
  if ([decoder containsValueForKey: @"regNo"])
  {
    __regNo = [[decoder decodeObjectForKey: @"regNo"] retain_stub];
    __regNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospital"])
  {
    __hospital = [[decoder decodeObjectForKey: @"hospital"] retain_stub];
    __hospital_isset = YES;
  }
  if ([decoder containsValueForKey: @"department"])
  {
    __department = [[decoder decodeObjectForKey: @"department"] retain_stub];
    __department_isset = YES;
  }
  if ([decoder containsValueForKey: @"doctor"])
  {
    __doctor = [[decoder decodeObjectForKey: @"doctor"] retain_stub];
    __doctor_isset = YES;
  }
  if ([decoder containsValueForKey: @"date"])
  {
    __date = [[decoder decodeObjectForKey: @"date"] retain_stub];
    __date_isset = YES;
  }
  if ([decoder containsValueForKey: @"regFee"])
  {
    __regFee = [[decoder decodeObjectForKey: @"regFee"] retain_stub];
    __regFee_isset = YES;
  }
  if ([decoder containsValueForKey: @"diagFee"])
  {
    __diagFee = [[decoder decodeObjectForKey: @"diagFee"] retain_stub];
    __diagFee_isset = YES;
  }
  if ([decoder containsValueForKey: @"inspFee"])
  {
    __inspFee = [[decoder decodeObjectForKey: @"inspFee"] retain_stub];
    __inspFee_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalFee"])
  {
    __totalFee = [[decoder decodeObjectForKey: @"totalFee"] retain_stub];
    __totalFee_isset = YES;
  }
  if ([decoder containsValueForKey: @"discount"])
  {
    __discount = [[decoder decodeObjectForKey: @"discount"] retain_stub];
    __discount_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [[decoder decodeObjectForKey: @"hospId"] retain_stub];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"generateTime"])
  {
    __generateTime = [decoder decodeInt64ForKey: @"generateTime"];
    __generateTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"outTime"])
  {
    __outTime = [decoder decodeInt64ForKey: @"outTime"];
    __outTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardNo"])
  {
    __cardNo = [[decoder decodeObjectForKey: @"cardNo"] retain_stub];
    __cardNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"spclFee"])
  {
    __spclFee = [[decoder decodeObjectForKey: @"spclFee"] retain_stub];
    __spclFee_isset = YES;
  }
  if ([decoder containsValueForKey: @"sumFee"])
  {
    __sumFee = [[decoder decodeObjectForKey: @"sumFee"] retain_stub];
    __sumFee_isset = YES;
  }
  if ([decoder containsValueForKey: @"pubFee"])
  {
    __pubFee = [[decoder decodeObjectForKey: @"pubFee"] retain_stub];
    __pubFee_isset = YES;
  }
  if ([decoder containsValueForKey: @"isNeedPay"])
  {
    __isNeedPay = [decoder decodeInt32ForKey: @"isNeedPay"];
    __isNeedPay_isset = YES;
  }
  if ([decoder containsValueForKey: @"isSupportStIns"])
  {
    __isSupportStIns = [decoder decodeInt64ForKey: @"isSupportStIns"];
    __isSupportStIns_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__orderNo_isset)
  {
    [encoder encodeObject: __orderNo forKey: @"orderNo"];
  }
  if (__orderId_isset)
  {
    [encoder encodeObject: __orderId forKey: @"orderId"];
  }
  if (__regId_isset)
  {
    [encoder encodeObject: __regId forKey: @"regId"];
  }
  if (__regNo_isset)
  {
    [encoder encodeObject: __regNo forKey: @"regNo"];
  }
  if (__hospital_isset)
  {
    [encoder encodeObject: __hospital forKey: @"hospital"];
  }
  if (__department_isset)
  {
    [encoder encodeObject: __department forKey: @"department"];
  }
  if (__doctor_isset)
  {
    [encoder encodeObject: __doctor forKey: @"doctor"];
  }
  if (__date_isset)
  {
    [encoder encodeObject: __date forKey: @"date"];
  }
  if (__regFee_isset)
  {
    [encoder encodeObject: __regFee forKey: @"regFee"];
  }
  if (__diagFee_isset)
  {
    [encoder encodeObject: __diagFee forKey: @"diagFee"];
  }
  if (__inspFee_isset)
  {
    [encoder encodeObject: __inspFee forKey: @"inspFee"];
  }
  if (__totalFee_isset)
  {
    [encoder encodeObject: __totalFee forKey: @"totalFee"];
  }
  if (__discount_isset)
  {
    [encoder encodeObject: __discount forKey: @"discount"];
  }
  if (__hospId_isset)
  {
    [encoder encodeObject: __hospId forKey: @"hospId"];
  }
  if (__generateTime_isset)
  {
    [encoder encodeInt64: __generateTime forKey: @"generateTime"];
  }
  if (__outTime_isset)
  {
    [encoder encodeInt64: __outTime forKey: @"outTime"];
  }
  if (__cardNo_isset)
  {
    [encoder encodeObject: __cardNo forKey: @"cardNo"];
  }
  if (__spclFee_isset)
  {
    [encoder encodeObject: __spclFee forKey: @"spclFee"];
  }
  if (__sumFee_isset)
  {
    [encoder encodeObject: __sumFee forKey: @"sumFee"];
  }
  if (__pubFee_isset)
  {
    [encoder encodeObject: __pubFee forKey: @"pubFee"];
  }
  if (__isNeedPay_isset)
  {
    [encoder encodeInt32: __isNeedPay forKey: @"isNeedPay"];
  }
  if (__isSupportStIns_isset)
  {
    [encoder encodeInt64: __isSupportStIns forKey: @"isSupportStIns"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __orderNo_isset ? 2654435761 : 0;
  if (__orderNo_isset)
  {
    hash = (hash * 31) ^ [__orderNo hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [__orderId hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [__regId hash];
  }
  hash = (hash * 31) ^ __regNo_isset ? 2654435761 : 0;
  if (__regNo_isset)
  {
    hash = (hash * 31) ^ [__regNo hash];
  }
  hash = (hash * 31) ^ __hospital_isset ? 2654435761 : 0;
  if (__hospital_isset)
  {
    hash = (hash * 31) ^ [__hospital hash];
  }
  hash = (hash * 31) ^ __department_isset ? 2654435761 : 0;
  if (__department_isset)
  {
    hash = (hash * 31) ^ [__department hash];
  }
  hash = (hash * 31) ^ __doctor_isset ? 2654435761 : 0;
  if (__doctor_isset)
  {
    hash = (hash * 31) ^ [__doctor hash];
  }
  hash = (hash * 31) ^ __date_isset ? 2654435761 : 0;
  if (__date_isset)
  {
    hash = (hash * 31) ^ [__date hash];
  }
  hash = (hash * 31) ^ __regFee_isset ? 2654435761 : 0;
  if (__regFee_isset)
  {
    hash = (hash * 31) ^ [__regFee hash];
  }
  hash = (hash * 31) ^ __diagFee_isset ? 2654435761 : 0;
  if (__diagFee_isset)
  {
    hash = (hash * 31) ^ [__diagFee hash];
  }
  hash = (hash * 31) ^ __inspFee_isset ? 2654435761 : 0;
  if (__inspFee_isset)
  {
    hash = (hash * 31) ^ [__inspFee hash];
  }
  hash = (hash * 31) ^ __totalFee_isset ? 2654435761 : 0;
  if (__totalFee_isset)
  {
    hash = (hash * 31) ^ [__totalFee hash];
  }
  hash = (hash * 31) ^ __discount_isset ? 2654435761 : 0;
  if (__discount_isset)
  {
    hash = (hash * 31) ^ [__discount hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [__hospId hash];
  }
  hash = (hash * 31) ^ __generateTime_isset ? 2654435761 : 0;
  if (__generateTime_isset)
  {
    hash = (hash * 31) ^ [@(__generateTime) hash];
  }
  hash = (hash * 31) ^ __outTime_isset ? 2654435761 : 0;
  if (__outTime_isset)
  {
    hash = (hash * 31) ^ [@(__outTime) hash];
  }
  hash = (hash * 31) ^ __cardNo_isset ? 2654435761 : 0;
  if (__cardNo_isset)
  {
    hash = (hash * 31) ^ [__cardNo hash];
  }
  hash = (hash * 31) ^ __spclFee_isset ? 2654435761 : 0;
  if (__spclFee_isset)
  {
    hash = (hash * 31) ^ [__spclFee hash];
  }
  hash = (hash * 31) ^ __sumFee_isset ? 2654435761 : 0;
  if (__sumFee_isset)
  {
    hash = (hash * 31) ^ [__sumFee hash];
  }
  hash = (hash * 31) ^ __pubFee_isset ? 2654435761 : 0;
  if (__pubFee_isset)
  {
    hash = (hash * 31) ^ [__pubFee hash];
  }
  hash = (hash * 31) ^ __isNeedPay_isset ? 2654435761 : 0;
  if (__isNeedPay_isset)
  {
    hash = (hash * 31) ^ [@(__isNeedPay) hash];
  }
  hash = (hash * 31) ^ __isSupportStIns_isset ? 2654435761 : 0;
  if (__isSupportStIns_isset)
  {
    hash = (hash * 31) ^ [@(__isSupportStIns) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRegPointResp class]]) {
    return NO;
  }
  NXTFRegPointResp *other = (NXTFRegPointResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__orderNo_isset != other->__orderNo_isset) ||
      (__orderNo_isset && ((__orderNo || other->__orderNo) && ![__orderNo isEqual:other->__orderNo]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && ((__orderId || other->__orderId) && ![__orderId isEqual:other->__orderId]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && ((__regId || other->__regId) && ![__regId isEqual:other->__regId]))) {
    return NO;
  }
  if ((__regNo_isset != other->__regNo_isset) ||
      (__regNo_isset && ((__regNo || other->__regNo) && ![__regNo isEqual:other->__regNo]))) {
    return NO;
  }
  if ((__hospital_isset != other->__hospital_isset) ||
      (__hospital_isset && ((__hospital || other->__hospital) && ![__hospital isEqual:other->__hospital]))) {
    return NO;
  }
  if ((__department_isset != other->__department_isset) ||
      (__department_isset && ((__department || other->__department) && ![__department isEqual:other->__department]))) {
    return NO;
  }
  if ((__doctor_isset != other->__doctor_isset) ||
      (__doctor_isset && ((__doctor || other->__doctor) && ![__doctor isEqual:other->__doctor]))) {
    return NO;
  }
  if ((__date_isset != other->__date_isset) ||
      (__date_isset && ((__date || other->__date) && ![__date isEqual:other->__date]))) {
    return NO;
  }
  if ((__regFee_isset != other->__regFee_isset) ||
      (__regFee_isset && ((__regFee || other->__regFee) && ![__regFee isEqual:other->__regFee]))) {
    return NO;
  }
  if ((__diagFee_isset != other->__diagFee_isset) ||
      (__diagFee_isset && ((__diagFee || other->__diagFee) && ![__diagFee isEqual:other->__diagFee]))) {
    return NO;
  }
  if ((__inspFee_isset != other->__inspFee_isset) ||
      (__inspFee_isset && ((__inspFee || other->__inspFee) && ![__inspFee isEqual:other->__inspFee]))) {
    return NO;
  }
  if ((__totalFee_isset != other->__totalFee_isset) ||
      (__totalFee_isset && ((__totalFee || other->__totalFee) && ![__totalFee isEqual:other->__totalFee]))) {
    return NO;
  }
  if ((__discount_isset != other->__discount_isset) ||
      (__discount_isset && ((__discount || other->__discount) && ![__discount isEqual:other->__discount]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && ((__hospId || other->__hospId) && ![__hospId isEqual:other->__hospId]))) {
    return NO;
  }
  if ((__generateTime_isset != other->__generateTime_isset) ||
      (__generateTime_isset && (__generateTime != other->__generateTime))) {
    return NO;
  }
  if ((__outTime_isset != other->__outTime_isset) ||
      (__outTime_isset && (__outTime != other->__outTime))) {
    return NO;
  }
  if ((__cardNo_isset != other->__cardNo_isset) ||
      (__cardNo_isset && ((__cardNo || other->__cardNo) && ![__cardNo isEqual:other->__cardNo]))) {
    return NO;
  }
  if ((__spclFee_isset != other->__spclFee_isset) ||
      (__spclFee_isset && ((__spclFee || other->__spclFee) && ![__spclFee isEqual:other->__spclFee]))) {
    return NO;
  }
  if ((__sumFee_isset != other->__sumFee_isset) ||
      (__sumFee_isset && ((__sumFee || other->__sumFee) && ![__sumFee isEqual:other->__sumFee]))) {
    return NO;
  }
  if ((__pubFee_isset != other->__pubFee_isset) ||
      (__pubFee_isset && ((__pubFee || other->__pubFee) && ![__pubFee isEqual:other->__pubFee]))) {
    return NO;
  }
  if ((__isNeedPay_isset != other->__isNeedPay_isset) ||
      (__isNeedPay_isset && (__isNeedPay != other->__isNeedPay))) {
    return NO;
  }
  if ((__isSupportStIns_isset != other->__isSupportStIns_isset) ||
      (__isSupportStIns_isset && (__isSupportStIns != other->__isSupportStIns))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__orderNo release_stub];
  [__orderId release_stub];
  [__regId release_stub];
  [__regNo release_stub];
  [__hospital release_stub];
  [__department release_stub];
  [__doctor release_stub];
  [__date release_stub];
  [__regFee release_stub];
  [__diagFee release_stub];
  [__inspFee release_stub];
  [__totalFee release_stub];
  [__discount release_stub];
  [__hospId release_stub];
  [__cardNo release_stub];
  [__spclFee release_stub];
  [__sumFee release_stub];
  [__pubFee release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) orderNo {
  return [[__orderNo retain_stub] autorelease_stub];
}

- (void) setOrderNo: (NSString *) orderNo {
  [orderNo retain_stub];
  [__orderNo release_stub];
  __orderNo = orderNo;
  __orderNo_isset = YES;
}

- (BOOL) orderNoIsSet {
  return __orderNo_isset;
}

- (void) unsetOrderNo {
  [__orderNo release_stub];
  __orderNo = nil;
  __orderNo_isset = NO;
}

- (NSString *) orderId {
  return [[__orderId retain_stub] autorelease_stub];
}

- (void) setOrderId: (NSString *) orderId {
  [orderId retain_stub];
  [__orderId release_stub];
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  [__orderId release_stub];
  __orderId = nil;
  __orderId_isset = NO;
}

- (NSString *) regId {
  return [[__regId retain_stub] autorelease_stub];
}

- (void) setRegId: (NSString *) regId {
  [regId retain_stub];
  [__regId release_stub];
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  [__regId release_stub];
  __regId = nil;
  __regId_isset = NO;
}

- (NSString *) regNo {
  return [[__regNo retain_stub] autorelease_stub];
}

- (void) setRegNo: (NSString *) regNo {
  [regNo retain_stub];
  [__regNo release_stub];
  __regNo = regNo;
  __regNo_isset = YES;
}

- (BOOL) regNoIsSet {
  return __regNo_isset;
}

- (void) unsetRegNo {
  [__regNo release_stub];
  __regNo = nil;
  __regNo_isset = NO;
}

- (NSString *) hospital {
  return [[__hospital retain_stub] autorelease_stub];
}

- (void) setHospital: (NSString *) hospital {
  [hospital retain_stub];
  [__hospital release_stub];
  __hospital = hospital;
  __hospital_isset = YES;
}

- (BOOL) hospitalIsSet {
  return __hospital_isset;
}

- (void) unsetHospital {
  [__hospital release_stub];
  __hospital = nil;
  __hospital_isset = NO;
}

- (NSString *) department {
  return [[__department retain_stub] autorelease_stub];
}

- (void) setDepartment: (NSString *) department {
  [department retain_stub];
  [__department release_stub];
  __department = department;
  __department_isset = YES;
}

- (BOOL) departmentIsSet {
  return __department_isset;
}

- (void) unsetDepartment {
  [__department release_stub];
  __department = nil;
  __department_isset = NO;
}

- (NSString *) doctor {
  return [[__doctor retain_stub] autorelease_stub];
}

- (void) setDoctor: (NSString *) doctor {
  [doctor retain_stub];
  [__doctor release_stub];
  __doctor = doctor;
  __doctor_isset = YES;
}

- (BOOL) doctorIsSet {
  return __doctor_isset;
}

- (void) unsetDoctor {
  [__doctor release_stub];
  __doctor = nil;
  __doctor_isset = NO;
}

- (NSString *) date {
  return [[__date retain_stub] autorelease_stub];
}

- (void) setDate: (NSString *) date {
  [date retain_stub];
  [__date release_stub];
  __date = date;
  __date_isset = YES;
}

- (BOOL) dateIsSet {
  return __date_isset;
}

- (void) unsetDate {
  [__date release_stub];
  __date = nil;
  __date_isset = NO;
}

- (NSString *) regFee {
  return [[__regFee retain_stub] autorelease_stub];
}

- (void) setRegFee: (NSString *) regFee {
  [regFee retain_stub];
  [__regFee release_stub];
  __regFee = regFee;
  __regFee_isset = YES;
}

- (BOOL) regFeeIsSet {
  return __regFee_isset;
}

- (void) unsetRegFee {
  [__regFee release_stub];
  __regFee = nil;
  __regFee_isset = NO;
}

- (NSString *) diagFee {
  return [[__diagFee retain_stub] autorelease_stub];
}

- (void) setDiagFee: (NSString *) diagFee {
  [diagFee retain_stub];
  [__diagFee release_stub];
  __diagFee = diagFee;
  __diagFee_isset = YES;
}

- (BOOL) diagFeeIsSet {
  return __diagFee_isset;
}

- (void) unsetDiagFee {
  [__diagFee release_stub];
  __diagFee = nil;
  __diagFee_isset = NO;
}

- (NSString *) inspFee {
  return [[__inspFee retain_stub] autorelease_stub];
}

- (void) setInspFee: (NSString *) inspFee {
  [inspFee retain_stub];
  [__inspFee release_stub];
  __inspFee = inspFee;
  __inspFee_isset = YES;
}

- (BOOL) inspFeeIsSet {
  return __inspFee_isset;
}

- (void) unsetInspFee {
  [__inspFee release_stub];
  __inspFee = nil;
  __inspFee_isset = NO;
}

- (NSString *) totalFee {
  return [[__totalFee retain_stub] autorelease_stub];
}

- (void) setTotalFee: (NSString *) totalFee {
  [totalFee retain_stub];
  [__totalFee release_stub];
  __totalFee = totalFee;
  __totalFee_isset = YES;
}

- (BOOL) totalFeeIsSet {
  return __totalFee_isset;
}

- (void) unsetTotalFee {
  [__totalFee release_stub];
  __totalFee = nil;
  __totalFee_isset = NO;
}

- (NSString *) discount {
  return [[__discount retain_stub] autorelease_stub];
}

- (void) setDiscount: (NSString *) discount {
  [discount retain_stub];
  [__discount release_stub];
  __discount = discount;
  __discount_isset = YES;
}

- (BOOL) discountIsSet {
  return __discount_isset;
}

- (void) unsetDiscount {
  [__discount release_stub];
  __discount = nil;
  __discount_isset = NO;
}

- (NSString *) hospId {
  return [[__hospId retain_stub] autorelease_stub];
}

- (void) setHospId: (NSString *) hospId {
  [hospId retain_stub];
  [__hospId release_stub];
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  [__hospId release_stub];
  __hospId = nil;
  __hospId_isset = NO;
}

- (int64_t) generateTime {
  return __generateTime;
}

- (void) setGenerateTime: (int64_t) generateTime {
  __generateTime = generateTime;
  __generateTime_isset = YES;
}

- (BOOL) generateTimeIsSet {
  return __generateTime_isset;
}

- (void) unsetGenerateTime {
  __generateTime_isset = NO;
}

- (int64_t) outTime {
  return __outTime;
}

- (void) setOutTime: (int64_t) outTime {
  __outTime = outTime;
  __outTime_isset = YES;
}

- (BOOL) outTimeIsSet {
  return __outTime_isset;
}

- (void) unsetOutTime {
  __outTime_isset = NO;
}

- (NSString *) cardNo {
  return [[__cardNo retain_stub] autorelease_stub];
}

- (void) setCardNo: (NSString *) cardNo {
  [cardNo retain_stub];
  [__cardNo release_stub];
  __cardNo = cardNo;
  __cardNo_isset = YES;
}

- (BOOL) cardNoIsSet {
  return __cardNo_isset;
}

- (void) unsetCardNo {
  [__cardNo release_stub];
  __cardNo = nil;
  __cardNo_isset = NO;
}

- (NSString *) spclFee {
  return [[__spclFee retain_stub] autorelease_stub];
}

- (void) setSpclFee: (NSString *) spclFee {
  [spclFee retain_stub];
  [__spclFee release_stub];
  __spclFee = spclFee;
  __spclFee_isset = YES;
}

- (BOOL) spclFeeIsSet {
  return __spclFee_isset;
}

- (void) unsetSpclFee {
  [__spclFee release_stub];
  __spclFee = nil;
  __spclFee_isset = NO;
}

- (NSString *) sumFee {
  return [[__sumFee retain_stub] autorelease_stub];
}

- (void) setSumFee: (NSString *) sumFee {
  [sumFee retain_stub];
  [__sumFee release_stub];
  __sumFee = sumFee;
  __sumFee_isset = YES;
}

- (BOOL) sumFeeIsSet {
  return __sumFee_isset;
}

- (void) unsetSumFee {
  [__sumFee release_stub];
  __sumFee = nil;
  __sumFee_isset = NO;
}

- (NSString *) pubFee {
  return [[__pubFee retain_stub] autorelease_stub];
}

- (void) setPubFee: (NSString *) pubFee {
  [pubFee retain_stub];
  [__pubFee release_stub];
  __pubFee = pubFee;
  __pubFee_isset = YES;
}

- (BOOL) pubFeeIsSet {
  return __pubFee_isset;
}

- (void) unsetPubFee {
  [__pubFee release_stub];
  __pubFee = nil;
  __pubFee_isset = NO;
}

- (int32_t) isNeedPay {
  return __isNeedPay;
}

- (void) setIsNeedPay: (int32_t) isNeedPay {
  __isNeedPay = isNeedPay;
  __isNeedPay_isset = YES;
}

- (BOOL) isNeedPayIsSet {
  return __isNeedPay_isset;
}

- (void) unsetIsNeedPay {
  __isNeedPay_isset = NO;
}

- (int64_t) isSupportStIns {
  return __isSupportStIns;
}

- (void) setIsSupportStIns: (int64_t) isSupportStIns {
  __isSupportStIns = isSupportStIns;
  __isSupportStIns_isset = YES;
}

- (BOOL) isSupportStInsIsSet {
  return __isSupportStIns_isset;
}

- (void) unsetIsSupportStIns {
  __isSupportStIns_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospital: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDepartment: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDoctor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDiagFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInspFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTotalFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDiscount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setGenerateTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOutTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCardNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSpclFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSumFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPubFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsNeedPay: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setIsSupportStIns: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegPointResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderNo_isset) {
    if (__orderNo != nil) {
      [outProtocol writeFieldBeginWithName: @"orderNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __orderNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    if (__orderId != nil) {
      [outProtocol writeFieldBeginWithName: @"orderId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __orderId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    if (__regId != nil) {
      [outProtocol writeFieldBeginWithName: @"regId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __regId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regNo_isset) {
    if (__regNo != nil) {
      [outProtocol writeFieldBeginWithName: @"regNo" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __regNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospital_isset) {
    if (__hospital != nil) {
      [outProtocol writeFieldBeginWithName: @"hospital" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __hospital];
      [outProtocol writeFieldEnd];
    }
  }
  if (__department_isset) {
    if (__department != nil) {
      [outProtocol writeFieldBeginWithName: @"department" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __department];
      [outProtocol writeFieldEnd];
    }
  }
  if (__doctor_isset) {
    if (__doctor != nil) {
      [outProtocol writeFieldBeginWithName: @"doctor" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __doctor];
      [outProtocol writeFieldEnd];
    }
  }
  if (__date_isset) {
    if (__date != nil) {
      [outProtocol writeFieldBeginWithName: @"date" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __date];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regFee_isset) {
    if (__regFee != nil) {
      [outProtocol writeFieldBeginWithName: @"regFee" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __regFee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diagFee_isset) {
    if (__diagFee != nil) {
      [outProtocol writeFieldBeginWithName: @"diagFee" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __diagFee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__inspFee_isset) {
    if (__inspFee != nil) {
      [outProtocol writeFieldBeginWithName: @"inspFee" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __inspFee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalFee_isset) {
    if (__totalFee != nil) {
      [outProtocol writeFieldBeginWithName: @"totalFee" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __totalFee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__discount_isset) {
    if (__discount != nil) {
      [outProtocol writeFieldBeginWithName: @"discount" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __discount];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    if (__hospId != nil) {
      [outProtocol writeFieldBeginWithName: @"hospId" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __hospId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__generateTime_isset) {
    [outProtocol writeFieldBeginWithName: @"generateTime" type: TType_I64 fieldID: 16];
    [outProtocol writeI64: __generateTime];
    [outProtocol writeFieldEnd];
  }
  if (__outTime_isset) {
    [outProtocol writeFieldBeginWithName: @"outTime" type: TType_I64 fieldID: 17];
    [outProtocol writeI64: __outTime];
    [outProtocol writeFieldEnd];
  }
  if (__cardNo_isset) {
    if (__cardNo != nil) {
      [outProtocol writeFieldBeginWithName: @"cardNo" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __cardNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__spclFee_isset) {
    if (__spclFee != nil) {
      [outProtocol writeFieldBeginWithName: @"spclFee" type: TType_STRING fieldID: 19];
      [outProtocol writeString: __spclFee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sumFee_isset) {
    if (__sumFee != nil) {
      [outProtocol writeFieldBeginWithName: @"sumFee" type: TType_STRING fieldID: 20];
      [outProtocol writeString: __sumFee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pubFee_isset) {
    if (__pubFee != nil) {
      [outProtocol writeFieldBeginWithName: @"pubFee" type: TType_STRING fieldID: 21];
      [outProtocol writeString: __pubFee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isNeedPay_isset) {
    [outProtocol writeFieldBeginWithName: @"isNeedPay" type: TType_I32 fieldID: 22];
    [outProtocol writeI32: __isNeedPay];
    [outProtocol writeFieldEnd];
  }
  if (__isSupportStIns_isset) {
    [outProtocol writeFieldBeginWithName: @"isSupportStIns" type: TType_I64 fieldID: 23];
    [outProtocol writeI64: __isSupportStIns];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRegPointResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",orderNo:"];
  [ms appendFormat: @"\"%@\"", __orderNo];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"\"%@\"", __orderId];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"\"%@\"", __regId];
  [ms appendString: @",regNo:"];
  [ms appendFormat: @"\"%@\"", __regNo];
  [ms appendString: @",hospital:"];
  [ms appendFormat: @"\"%@\"", __hospital];
  [ms appendString: @",department:"];
  [ms appendFormat: @"\"%@\"", __department];
  [ms appendString: @",doctor:"];
  [ms appendFormat: @"\"%@\"", __doctor];
  [ms appendString: @",date:"];
  [ms appendFormat: @"\"%@\"", __date];
  [ms appendString: @",regFee:"];
  [ms appendFormat: @"\"%@\"", __regFee];
  [ms appendString: @",diagFee:"];
  [ms appendFormat: @"\"%@\"", __diagFee];
  [ms appendString: @",inspFee:"];
  [ms appendFormat: @"\"%@\"", __inspFee];
  [ms appendString: @",totalFee:"];
  [ms appendFormat: @"\"%@\"", __totalFee];
  [ms appendString: @",discount:"];
  [ms appendFormat: @"\"%@\"", __discount];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"\"%@\"", __hospId];
  [ms appendString: @",generateTime:"];
  [ms appendFormat: @"%qi", __generateTime];
  [ms appendString: @",outTime:"];
  [ms appendFormat: @"%qi", __outTime];
  [ms appendString: @",cardNo:"];
  [ms appendFormat: @"\"%@\"", __cardNo];
  [ms appendString: @",spclFee:"];
  [ms appendFormat: @"\"%@\"", __spclFee];
  [ms appendString: @",sumFee:"];
  [ms appendFormat: @"\"%@\"", __sumFee];
  [ms appendString: @",pubFee:"];
  [ms appendFormat: @"\"%@\"", __pubFee];
  [ms appendString: @",isNeedPay:"];
  [ms appendFormat: @"%i", __isNeedPay];
  [ms appendString: @",isSupportStIns:"];
  [ms appendFormat: @"%qi", __isSupportStIns];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRegHospPayResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRegHospPayResp class]]) {
    return NO;
  }
  NXTFRegHospPayResp *other = (NXTFRegHospPayResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegHospPayResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRegHospPayResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetReportResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.lisItems = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header reportType: (NSString *) reportType patientName: (NSString *) patientName checkTime: (NSString *) checkTime confirmTime: (NSString *) confirmTime checkDoctorName: (NSString *) checkDoctorName confirmDoctorName: (NSString *) confirmDoctorName diagnosis: (NSString *) diagnosis desc: (NSString *) desc summary: (NSString *) summary lisItems: (NSMutableArray *) lisItems equipment: (NSString *) equipment checkPoint: (NSString *) checkPoint
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __reportType = [reportType retain_stub];
  __reportType_isset = YES;
  __patientName = [patientName retain_stub];
  __patientName_isset = YES;
  __checkTime = [checkTime retain_stub];
  __checkTime_isset = YES;
  __confirmTime = [confirmTime retain_stub];
  __confirmTime_isset = YES;
  __checkDoctorName = [checkDoctorName retain_stub];
  __checkDoctorName_isset = YES;
  __confirmDoctorName = [confirmDoctorName retain_stub];
  __confirmDoctorName_isset = YES;
  __diagnosis = [diagnosis retain_stub];
  __diagnosis_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __summary = [summary retain_stub];
  __summary_isset = YES;
  __lisItems = [lisItems retain_stub];
  __lisItems_isset = YES;
  __equipment = [equipment retain_stub];
  __equipment_isset = YES;
  __checkPoint = [checkPoint retain_stub];
  __checkPoint_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"reportType"])
  {
    __reportType = [[decoder decodeObjectForKey: @"reportType"] retain_stub];
    __reportType_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientName"])
  {
    __patientName = [[decoder decodeObjectForKey: @"patientName"] retain_stub];
    __patientName_isset = YES;
  }
  if ([decoder containsValueForKey: @"checkTime"])
  {
    __checkTime = [[decoder decodeObjectForKey: @"checkTime"] retain_stub];
    __checkTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"confirmTime"])
  {
    __confirmTime = [[decoder decodeObjectForKey: @"confirmTime"] retain_stub];
    __confirmTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"checkDoctorName"])
  {
    __checkDoctorName = [[decoder decodeObjectForKey: @"checkDoctorName"] retain_stub];
    __checkDoctorName_isset = YES;
  }
  if ([decoder containsValueForKey: @"confirmDoctorName"])
  {
    __confirmDoctorName = [[decoder decodeObjectForKey: @"confirmDoctorName"] retain_stub];
    __confirmDoctorName_isset = YES;
  }
  if ([decoder containsValueForKey: @"diagnosis"])
  {
    __diagnosis = [[decoder decodeObjectForKey: @"diagnosis"] retain_stub];
    __diagnosis_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"summary"])
  {
    __summary = [[decoder decodeObjectForKey: @"summary"] retain_stub];
    __summary_isset = YES;
  }
  if ([decoder containsValueForKey: @"lisItems"])
  {
    __lisItems = [[decoder decodeObjectForKey: @"lisItems"] retain_stub];
    __lisItems_isset = YES;
  }
  if ([decoder containsValueForKey: @"equipment"])
  {
    __equipment = [[decoder decodeObjectForKey: @"equipment"] retain_stub];
    __equipment_isset = YES;
  }
  if ([decoder containsValueForKey: @"checkPoint"])
  {
    __checkPoint = [[decoder decodeObjectForKey: @"checkPoint"] retain_stub];
    __checkPoint_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__reportType_isset)
  {
    [encoder encodeObject: __reportType forKey: @"reportType"];
  }
  if (__patientName_isset)
  {
    [encoder encodeObject: __patientName forKey: @"patientName"];
  }
  if (__checkTime_isset)
  {
    [encoder encodeObject: __checkTime forKey: @"checkTime"];
  }
  if (__confirmTime_isset)
  {
    [encoder encodeObject: __confirmTime forKey: @"confirmTime"];
  }
  if (__checkDoctorName_isset)
  {
    [encoder encodeObject: __checkDoctorName forKey: @"checkDoctorName"];
  }
  if (__confirmDoctorName_isset)
  {
    [encoder encodeObject: __confirmDoctorName forKey: @"confirmDoctorName"];
  }
  if (__diagnosis_isset)
  {
    [encoder encodeObject: __diagnosis forKey: @"diagnosis"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__summary_isset)
  {
    [encoder encodeObject: __summary forKey: @"summary"];
  }
  if (__lisItems_isset)
  {
    [encoder encodeObject: __lisItems forKey: @"lisItems"];
  }
  if (__equipment_isset)
  {
    [encoder encodeObject: __equipment forKey: @"equipment"];
  }
  if (__checkPoint_isset)
  {
    [encoder encodeObject: __checkPoint forKey: @"checkPoint"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __reportType_isset ? 2654435761 : 0;
  if (__reportType_isset)
  {
    hash = (hash * 31) ^ [__reportType hash];
  }
  hash = (hash * 31) ^ __patientName_isset ? 2654435761 : 0;
  if (__patientName_isset)
  {
    hash = (hash * 31) ^ [__patientName hash];
  }
  hash = (hash * 31) ^ __checkTime_isset ? 2654435761 : 0;
  if (__checkTime_isset)
  {
    hash = (hash * 31) ^ [__checkTime hash];
  }
  hash = (hash * 31) ^ __confirmTime_isset ? 2654435761 : 0;
  if (__confirmTime_isset)
  {
    hash = (hash * 31) ^ [__confirmTime hash];
  }
  hash = (hash * 31) ^ __checkDoctorName_isset ? 2654435761 : 0;
  if (__checkDoctorName_isset)
  {
    hash = (hash * 31) ^ [__checkDoctorName hash];
  }
  hash = (hash * 31) ^ __confirmDoctorName_isset ? 2654435761 : 0;
  if (__confirmDoctorName_isset)
  {
    hash = (hash * 31) ^ [__confirmDoctorName hash];
  }
  hash = (hash * 31) ^ __diagnosis_isset ? 2654435761 : 0;
  if (__diagnosis_isset)
  {
    hash = (hash * 31) ^ [__diagnosis hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __summary_isset ? 2654435761 : 0;
  if (__summary_isset)
  {
    hash = (hash * 31) ^ [__summary hash];
  }
  hash = (hash * 31) ^ __lisItems_isset ? 2654435761 : 0;
  if (__lisItems_isset)
  {
    hash = (hash * 31) ^ [__lisItems hash];
  }
  hash = (hash * 31) ^ __equipment_isset ? 2654435761 : 0;
  if (__equipment_isset)
  {
    hash = (hash * 31) ^ [__equipment hash];
  }
  hash = (hash * 31) ^ __checkPoint_isset ? 2654435761 : 0;
  if (__checkPoint_isset)
  {
    hash = (hash * 31) ^ [__checkPoint hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetReportResp class]]) {
    return NO;
  }
  NXTFGetReportResp *other = (NXTFGetReportResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__reportType_isset != other->__reportType_isset) ||
      (__reportType_isset && ((__reportType || other->__reportType) && ![__reportType isEqual:other->__reportType]))) {
    return NO;
  }
  if ((__patientName_isset != other->__patientName_isset) ||
      (__patientName_isset && ((__patientName || other->__patientName) && ![__patientName isEqual:other->__patientName]))) {
    return NO;
  }
  if ((__checkTime_isset != other->__checkTime_isset) ||
      (__checkTime_isset && ((__checkTime || other->__checkTime) && ![__checkTime isEqual:other->__checkTime]))) {
    return NO;
  }
  if ((__confirmTime_isset != other->__confirmTime_isset) ||
      (__confirmTime_isset && ((__confirmTime || other->__confirmTime) && ![__confirmTime isEqual:other->__confirmTime]))) {
    return NO;
  }
  if ((__checkDoctorName_isset != other->__checkDoctorName_isset) ||
      (__checkDoctorName_isset && ((__checkDoctorName || other->__checkDoctorName) && ![__checkDoctorName isEqual:other->__checkDoctorName]))) {
    return NO;
  }
  if ((__confirmDoctorName_isset != other->__confirmDoctorName_isset) ||
      (__confirmDoctorName_isset && ((__confirmDoctorName || other->__confirmDoctorName) && ![__confirmDoctorName isEqual:other->__confirmDoctorName]))) {
    return NO;
  }
  if ((__diagnosis_isset != other->__diagnosis_isset) ||
      (__diagnosis_isset && ((__diagnosis || other->__diagnosis) && ![__diagnosis isEqual:other->__diagnosis]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__summary_isset != other->__summary_isset) ||
      (__summary_isset && ((__summary || other->__summary) && ![__summary isEqual:other->__summary]))) {
    return NO;
  }
  if ((__lisItems_isset != other->__lisItems_isset) ||
      (__lisItems_isset && ((__lisItems || other->__lisItems) && ![__lisItems isEqual:other->__lisItems]))) {
    return NO;
  }
  if ((__equipment_isset != other->__equipment_isset) ||
      (__equipment_isset && ((__equipment || other->__equipment) && ![__equipment isEqual:other->__equipment]))) {
    return NO;
  }
  if ((__checkPoint_isset != other->__checkPoint_isset) ||
      (__checkPoint_isset && ((__checkPoint || other->__checkPoint) && ![__checkPoint isEqual:other->__checkPoint]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__reportType release_stub];
  [__patientName release_stub];
  [__checkTime release_stub];
  [__confirmTime release_stub];
  [__checkDoctorName release_stub];
  [__confirmDoctorName release_stub];
  [__diagnosis release_stub];
  [__desc release_stub];
  [__summary release_stub];
  [__lisItems release_stub];
  [__equipment release_stub];
  [__checkPoint release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) reportType {
  return [[__reportType retain_stub] autorelease_stub];
}

- (void) setReportType: (NSString *) reportType {
  [reportType retain_stub];
  [__reportType release_stub];
  __reportType = reportType;
  __reportType_isset = YES;
}

- (BOOL) reportTypeIsSet {
  return __reportType_isset;
}

- (void) unsetReportType {
  [__reportType release_stub];
  __reportType = nil;
  __reportType_isset = NO;
}

- (NSString *) patientName {
  return [[__patientName retain_stub] autorelease_stub];
}

- (void) setPatientName: (NSString *) patientName {
  [patientName retain_stub];
  [__patientName release_stub];
  __patientName = patientName;
  __patientName_isset = YES;
}

- (BOOL) patientNameIsSet {
  return __patientName_isset;
}

- (void) unsetPatientName {
  [__patientName release_stub];
  __patientName = nil;
  __patientName_isset = NO;
}

- (NSString *) checkTime {
  return [[__checkTime retain_stub] autorelease_stub];
}

- (void) setCheckTime: (NSString *) checkTime {
  [checkTime retain_stub];
  [__checkTime release_stub];
  __checkTime = checkTime;
  __checkTime_isset = YES;
}

- (BOOL) checkTimeIsSet {
  return __checkTime_isset;
}

- (void) unsetCheckTime {
  [__checkTime release_stub];
  __checkTime = nil;
  __checkTime_isset = NO;
}

- (NSString *) confirmTime {
  return [[__confirmTime retain_stub] autorelease_stub];
}

- (void) setConfirmTime: (NSString *) confirmTime {
  [confirmTime retain_stub];
  [__confirmTime release_stub];
  __confirmTime = confirmTime;
  __confirmTime_isset = YES;
}

- (BOOL) confirmTimeIsSet {
  return __confirmTime_isset;
}

- (void) unsetConfirmTime {
  [__confirmTime release_stub];
  __confirmTime = nil;
  __confirmTime_isset = NO;
}

- (NSString *) checkDoctorName {
  return [[__checkDoctorName retain_stub] autorelease_stub];
}

- (void) setCheckDoctorName: (NSString *) checkDoctorName {
  [checkDoctorName retain_stub];
  [__checkDoctorName release_stub];
  __checkDoctorName = checkDoctorName;
  __checkDoctorName_isset = YES;
}

- (BOOL) checkDoctorNameIsSet {
  return __checkDoctorName_isset;
}

- (void) unsetCheckDoctorName {
  [__checkDoctorName release_stub];
  __checkDoctorName = nil;
  __checkDoctorName_isset = NO;
}

- (NSString *) confirmDoctorName {
  return [[__confirmDoctorName retain_stub] autorelease_stub];
}

- (void) setConfirmDoctorName: (NSString *) confirmDoctorName {
  [confirmDoctorName retain_stub];
  [__confirmDoctorName release_stub];
  __confirmDoctorName = confirmDoctorName;
  __confirmDoctorName_isset = YES;
}

- (BOOL) confirmDoctorNameIsSet {
  return __confirmDoctorName_isset;
}

- (void) unsetConfirmDoctorName {
  [__confirmDoctorName release_stub];
  __confirmDoctorName = nil;
  __confirmDoctorName_isset = NO;
}

- (NSString *) diagnosis {
  return [[__diagnosis retain_stub] autorelease_stub];
}

- (void) setDiagnosis: (NSString *) diagnosis {
  [diagnosis retain_stub];
  [__diagnosis release_stub];
  __diagnosis = diagnosis;
  __diagnosis_isset = YES;
}

- (BOOL) diagnosisIsSet {
  return __diagnosis_isset;
}

- (void) unsetDiagnosis {
  [__diagnosis release_stub];
  __diagnosis = nil;
  __diagnosis_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) summary {
  return [[__summary retain_stub] autorelease_stub];
}

- (void) setSummary: (NSString *) summary {
  [summary retain_stub];
  [__summary release_stub];
  __summary = summary;
  __summary_isset = YES;
}

- (BOOL) summaryIsSet {
  return __summary_isset;
}

- (void) unsetSummary {
  [__summary release_stub];
  __summary = nil;
  __summary_isset = NO;
}

- (NSMutableArray *) lisItems {
  return [[__lisItems retain_stub] autorelease_stub];
}

- (void) setLisItems: (NSMutableArray *) lisItems {
  [lisItems retain_stub];
  [__lisItems release_stub];
  __lisItems = lisItems;
  __lisItems_isset = YES;
}

- (BOOL) lisItemsIsSet {
  return __lisItems_isset;
}

- (void) unsetLisItems {
  [__lisItems release_stub];
  __lisItems = nil;
  __lisItems_isset = NO;
}

- (NSString *) equipment {
  return [[__equipment retain_stub] autorelease_stub];
}

- (void) setEquipment: (NSString *) equipment {
  [equipment retain_stub];
  [__equipment release_stub];
  __equipment = equipment;
  __equipment_isset = YES;
}

- (BOOL) equipmentIsSet {
  return __equipment_isset;
}

- (void) unsetEquipment {
  [__equipment release_stub];
  __equipment = nil;
  __equipment_isset = NO;
}

- (NSString *) checkPoint {
  return [[__checkPoint retain_stub] autorelease_stub];
}

- (void) setCheckPoint: (NSString *) checkPoint {
  [checkPoint retain_stub];
  [__checkPoint release_stub];
  __checkPoint = checkPoint;
  __checkPoint_isset = YES;
}

- (BOOL) checkPointIsSet {
  return __checkPoint_isset;
}

- (void) unsetCheckPoint {
  [__checkPoint release_stub];
  __checkPoint = nil;
  __checkPoint_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReportType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCheckTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConfirmTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCheckDoctorName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConfirmDoctorName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDiagnosis: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSummary: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NXTFLisItemDto *_elem7 = [[NXTFLisItemDto alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setLisItems: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEquipment: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCheckPoint: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetReportResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reportType_isset) {
    if (__reportType != nil) {
      [outProtocol writeFieldBeginWithName: @"reportType" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __reportType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientName_isset) {
    if (__patientName != nil) {
      [outProtocol writeFieldBeginWithName: @"patientName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __patientName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__checkTime_isset) {
    if (__checkTime != nil) {
      [outProtocol writeFieldBeginWithName: @"checkTime" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __checkTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__confirmTime_isset) {
    if (__confirmTime != nil) {
      [outProtocol writeFieldBeginWithName: @"confirmTime" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __confirmTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__checkDoctorName_isset) {
    if (__checkDoctorName != nil) {
      [outProtocol writeFieldBeginWithName: @"checkDoctorName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __checkDoctorName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__confirmDoctorName_isset) {
    if (__confirmDoctorName != nil) {
      [outProtocol writeFieldBeginWithName: @"confirmDoctorName" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __confirmDoctorName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diagnosis_isset) {
    if (__diagnosis != nil) {
      [outProtocol writeFieldBeginWithName: @"diagnosis" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __diagnosis];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__summary_isset) {
    if (__summary != nil) {
      [outProtocol writeFieldBeginWithName: @"summary" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __summary];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lisItems_isset) {
    if (__lisItems != nil) {
      [outProtocol writeFieldBeginWithName: @"lisItems" type: TType_LIST fieldID: 11];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__lisItems count]];
        int idx9;
        for (idx9 = 0; idx9 < [__lisItems count]; idx9++)
        {
          [[__lisItems objectAtIndex: idx9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__equipment_isset) {
    if (__equipment != nil) {
      [outProtocol writeFieldBeginWithName: @"equipment" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __equipment];
      [outProtocol writeFieldEnd];
    }
  }
  if (__checkPoint_isset) {
    if (__checkPoint != nil) {
      [outProtocol writeFieldBeginWithName: @"checkPoint" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __checkPoint];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetReportResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",reportType:"];
  [ms appendFormat: @"\"%@\"", __reportType];
  [ms appendString: @",patientName:"];
  [ms appendFormat: @"\"%@\"", __patientName];
  [ms appendString: @",checkTime:"];
  [ms appendFormat: @"\"%@\"", __checkTime];
  [ms appendString: @",confirmTime:"];
  [ms appendFormat: @"\"%@\"", __confirmTime];
  [ms appendString: @",checkDoctorName:"];
  [ms appendFormat: @"\"%@\"", __checkDoctorName];
  [ms appendString: @",confirmDoctorName:"];
  [ms appendFormat: @"\"%@\"", __confirmDoctorName];
  [ms appendString: @",diagnosis:"];
  [ms appendFormat: @"\"%@\"", __diagnosis];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",summary:"];
  [ms appendFormat: @"\"%@\"", __summary];
  [ms appendString: @",lisItems:"];
  [ms appendFormat: @"%@", __lisItems];
  [ms appendString: @",equipment:"];
  [ms appendFormat: @"\"%@\"", __equipment];
  [ms appendString: @",checkPoint:"];
  [ms appendFormat: @"\"%@\"", __checkPoint];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetPacsImgResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header imgName: (NSString *) imgName imgData: (NSData *) imgData
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __imgName = [imgName retain_stub];
  __imgName_isset = YES;
  __imgData = [imgData retain_stub];
  __imgData_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"imgName"])
  {
    __imgName = [[decoder decodeObjectForKey: @"imgName"] retain_stub];
    __imgName_isset = YES;
  }
  if ([decoder containsValueForKey: @"imgData"])
  {
    __imgData = [[decoder decodeObjectForKey: @"imgData"] retain_stub];
    __imgData_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__imgName_isset)
  {
    [encoder encodeObject: __imgName forKey: @"imgName"];
  }
  if (__imgData_isset)
  {
    [encoder encodeObject: __imgData forKey: @"imgData"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __imgName_isset ? 2654435761 : 0;
  if (__imgName_isset)
  {
    hash = (hash * 31) ^ [__imgName hash];
  }
  hash = (hash * 31) ^ __imgData_isset ? 2654435761 : 0;
  if (__imgData_isset)
  {
    hash = (hash * 31) ^ [__imgData hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetPacsImgResp class]]) {
    return NO;
  }
  NXTFGetPacsImgResp *other = (NXTFGetPacsImgResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__imgName_isset != other->__imgName_isset) ||
      (__imgName_isset && ((__imgName || other->__imgName) && ![__imgName isEqual:other->__imgName]))) {
    return NO;
  }
  if ((__imgData_isset != other->__imgData_isset) ||
      (__imgData_isset && ((__imgData || other->__imgData) && ![__imgData isEqual:other->__imgData]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__imgName release_stub];
  [__imgData release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) imgName {
  return [[__imgName retain_stub] autorelease_stub];
}

- (void) setImgName: (NSString *) imgName {
  [imgName retain_stub];
  [__imgName release_stub];
  __imgName = imgName;
  __imgName_isset = YES;
}

- (BOOL) imgNameIsSet {
  return __imgName_isset;
}

- (void) unsetImgName {
  [__imgName release_stub];
  __imgName = nil;
  __imgName_isset = NO;
}

- (NSData *) imgData {
  return [[__imgData retain_stub] autorelease_stub];
}

- (void) setImgData: (NSData *) imgData {
  [imgData retain_stub];
  [__imgData release_stub];
  __imgData = imgData;
  __imgData_isset = YES;
}

- (BOOL) imgDataIsSet {
  return __imgData_isset;
}

- (void) unsetImgData {
  [__imgData release_stub];
  __imgData = nil;
  __imgData_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImgName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setImgData: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPacsImgResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__imgName_isset) {
    if (__imgName != nil) {
      [outProtocol writeFieldBeginWithName: @"imgName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __imgName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__imgData_isset) {
    if (__imgData != nil) {
      [outProtocol writeFieldBeginWithName: @"imgData" type: TType_STRING fieldID: 3];
      [outProtocol writeBinary: __imgData];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetPacsImgResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",imgName:"];
  [ms appendFormat: @"\"%@\"", __imgName];
  [ms appendString: @",imgData:"];
  [ms appendFormat: @"\"%@\"", __imgData];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFReqAuthCodeResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header status: (int32_t) status msg: (NSString *) msg
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __status = status;
  __status_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeInt32ForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__status_isset)
  {
    [encoder encodeInt32: __status forKey: @"status"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __status_isset ? 2654435761 : 0;
  if (__status_isset)
  {
    hash = (hash * 31) ^ [@(__status) hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFReqAuthCodeResp class]]) {
    return NO;
  }
  NXTFReqAuthCodeResp *other = (NXTFReqAuthCodeResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__status_isset != other->__status_isset) ||
      (__status_isset && (__status != other->__status))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__msg release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) status {
  return __status;
}

- (void) setStatus: (int32_t) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReqAuthCodeResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFReqAuthCodeResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetMedInfosResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.medInfos = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header medInfos: (NSMutableArray *) medInfos page: (NXTFPage *) page
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __medInfos = [medInfos retain_stub];
  __medInfos_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"medInfos"])
  {
    __medInfos = [[decoder decodeObjectForKey: @"medInfos"] retain_stub];
    __medInfos_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__medInfos_isset)
  {
    [encoder encodeObject: __medInfos forKey: @"medInfos"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __medInfos_isset ? 2654435761 : 0;
  if (__medInfos_isset)
  {
    hash = (hash * 31) ^ [__medInfos hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetMedInfosResp class]]) {
    return NO;
  }
  NXTFGetMedInfosResp *other = (NXTFGetMedInfosResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__medInfos_isset != other->__medInfos_isset) ||
      (__medInfos_isset && ((__medInfos || other->__medInfos) && ![__medInfos isEqual:other->__medInfos]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__medInfos release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) medInfos {
  return [[__medInfos retain_stub] autorelease_stub];
}

- (void) setMedInfos: (NSMutableArray *) medInfos {
  [medInfos retain_stub];
  [__medInfos release_stub];
  __medInfos = medInfos;
  __medInfos_isset = YES;
}

- (BOOL) medInfosIsSet {
  return __medInfos_isset;
}

- (void) unsetMedInfos {
  [__medInfos release_stub];
  __medInfos = nil;
  __medInfos_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            NXTFMedInfoDto *_elem12 = [[NXTFMedInfoDto alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release_stub];
          }
          [inProtocol readListEnd];
          [self setMedInfos: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMedInfosResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__medInfos_isset) {
    if (__medInfos != nil) {
      [outProtocol writeFieldBeginWithName: @"medInfos" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__medInfos count]];
        int idx14;
        for (idx14 = 0; idx14 < [__medInfos count]; idx14++)
        {
          [[__medInfos objectAtIndex: idx14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 3];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetMedInfosResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",medInfos:"];
  [ms appendFormat: @"%@", __medInfos];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetPayWaysResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.payWays = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header payWays: (NSMutableArray *) payWays
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __payWays = [payWays retain_stub];
  __payWays_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"payWays"])
  {
    __payWays = [[decoder decodeObjectForKey: @"payWays"] retain_stub];
    __payWays_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__payWays_isset)
  {
    [encoder encodeObject: __payWays forKey: @"payWays"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __payWays_isset ? 2654435761 : 0;
  if (__payWays_isset)
  {
    hash = (hash * 31) ^ [__payWays hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetPayWaysResp class]]) {
    return NO;
  }
  NXTFGetPayWaysResp *other = (NXTFGetPayWaysResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__payWays_isset != other->__payWays_isset) ||
      (__payWays_isset && ((__payWays || other->__payWays) && ![__payWays isEqual:other->__payWays]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__payWays release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) payWays {
  return [[__payWays retain_stub] autorelease_stub];
}

- (void) setPayWays: (NSMutableArray *) payWays {
  [payWays retain_stub];
  [__payWays release_stub];
  __payWays = payWays;
  __payWays_isset = YES;
}

- (BOOL) payWaysIsSet {
  return __payWays_isset;
}

- (void) unsetPayWays {
  [__payWays release_stub];
  __payWays = nil;
  __payWays_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            NXTFPayWayDto *_elem17 = [[NXTFPayWayDto alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
            [_elem17 release_stub];
          }
          [inProtocol readListEnd];
          [self setPayWays: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPayWaysResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__payWays_isset) {
    if (__payWays != nil) {
      [outProtocol writeFieldBeginWithName: @"payWays" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__payWays count]];
        int idx19;
        for (idx19 = 0; idx19 < [__payWays count]; idx19++)
        {
          [[__payWays objectAtIndex: idx19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetPayWaysResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",payWays:"];
  [ms appendFormat: @"%@", __payWays];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetPayInfoResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header payInfo: (NSString *) payInfo
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __payInfo = [payInfo retain_stub];
  __payInfo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"payInfo"])
  {
    __payInfo = [[decoder decodeObjectForKey: @"payInfo"] retain_stub];
    __payInfo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__payInfo_isset)
  {
    [encoder encodeObject: __payInfo forKey: @"payInfo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __payInfo_isset ? 2654435761 : 0;
  if (__payInfo_isset)
  {
    hash = (hash * 31) ^ [__payInfo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetPayInfoResp class]]) {
    return NO;
  }
  NXTFGetPayInfoResp *other = (NXTFGetPayInfoResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__payInfo_isset != other->__payInfo_isset) ||
      (__payInfo_isset && ((__payInfo || other->__payInfo) && ![__payInfo isEqual:other->__payInfo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__payInfo release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) payInfo {
  return [[__payInfo retain_stub] autorelease_stub];
}

- (void) setPayInfo: (NSString *) payInfo {
  [payInfo retain_stub];
  [__payInfo release_stub];
  __payInfo = payInfo;
  __payInfo_isset = YES;
}

- (BOOL) payInfoIsSet {
  return __payInfo_isset;
}

- (void) unsetPayInfo {
  [__payInfo release_stub];
  __payInfo = nil;
  __payInfo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPayInfo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPayInfoResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__payInfo_isset) {
    if (__payInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"payInfo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __payInfo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetPayInfoResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",payInfo:"];
  [ms appendFormat: @"\"%@\"", __payInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFCancelRegResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFCancelRegResp class]]) {
    return NO;
  }
  NXTFCancelRegResp *other = (NXTFCancelRegResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CancelRegResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFCancelRegResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFDescSymptomResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFDescSymptomResp class]]) {
    return NO;
  }
  NXTFDescSymptomResp *other = (NXTFDescSymptomResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DescSymptomResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFDescSymptomResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFSendFlowerResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFSendFlowerResp class]]) {
    return NO;
  }
  NXTFSendFlowerResp *other = (NXTFSendFlowerResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendFlowerResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFSendFlowerResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetRegResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.extItems = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header orderId: (NSString *) orderId orderNo: (NSString *) orderNo regId: (NSString *) regId regNo: (NSString *) regNo patientId: (NSString *) patientId patientName: (NSString *) patientName phoneNo: (NSString *) phoneNo papersNo: (NSString *) papersNo papersType: (NSString *) papersType gender: (NSString *) gender hospId: (NSString *) hospId hospName: (NSString *) hospName deptName: (NSString *) deptName deptId: (NSString *) deptId drName: (NSString *) drName medDate: (NSString *) medDate symptom: (NSString *) symptom fee: (NSString *) fee orderStatus: (NSString *) orderStatus generateTime: (NSString *) generateTime outTime: (NSString *) outTime hasSent: (int32_t) hasSent cardNo: (NSString *) cardNo markNo: (NSString *) markNo serviceCode: (NSString *) serviceCode patientHead: (NSString *) patientHead regStatus: (NSString *) regStatus stopExplain: (NSString *) stopExplain isSymptomCommit: (int32_t) isSymptomCommit disease: (NSString *) disease extItems: (NSMutableArray *) extItems sumFee: (NSString *) sumFee pubFee: (NSString *) pubFee discount: (NSString *) discount checkInStatus: (NSString *) checkInStatus relationId: (NSString *) relationId barCode: (NSString *) barCode pointName: (NSString *) pointName isNeedPay: (int32_t) isNeedPay regType: (NSString *) regType isStInsPaid: (int32_t) isStInsPaid drId: (int64_t) drId timRoomNo: (int32_t) timRoomNo orderStatusName: (NSString *) orderStatusName
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __orderId = [orderId retain_stub];
  __orderId_isset = YES;
  __orderNo = [orderNo retain_stub];
  __orderNo_isset = YES;
  __regId = [regId retain_stub];
  __regId_isset = YES;
  __regNo = [regNo retain_stub];
  __regNo_isset = YES;
  __patientId = [patientId retain_stub];
  __patientId_isset = YES;
  __patientName = [patientName retain_stub];
  __patientName_isset = YES;
  __phoneNo = [phoneNo retain_stub];
  __phoneNo_isset = YES;
  __papersNo = [papersNo retain_stub];
  __papersNo_isset = YES;
  __papersType = [papersType retain_stub];
  __papersType_isset = YES;
  __gender = [gender retain_stub];
  __gender_isset = YES;
  __hospId = [hospId retain_stub];
  __hospId_isset = YES;
  __hospName = [hospName retain_stub];
  __hospName_isset = YES;
  __deptName = [deptName retain_stub];
  __deptName_isset = YES;
  __deptId = [deptId retain_stub];
  __deptId_isset = YES;
  __drName = [drName retain_stub];
  __drName_isset = YES;
  __medDate = [medDate retain_stub];
  __medDate_isset = YES;
  __symptom = [symptom retain_stub];
  __symptom_isset = YES;
  __fee = [fee retain_stub];
  __fee_isset = YES;
  __orderStatus = [orderStatus retain_stub];
  __orderStatus_isset = YES;
  __generateTime = [generateTime retain_stub];
  __generateTime_isset = YES;
  __outTime = [outTime retain_stub];
  __outTime_isset = YES;
  __hasSent = hasSent;
  __hasSent_isset = YES;
  __cardNo = [cardNo retain_stub];
  __cardNo_isset = YES;
  __markNo = [markNo retain_stub];
  __markNo_isset = YES;
  __serviceCode = [serviceCode retain_stub];
  __serviceCode_isset = YES;
  __patientHead = [patientHead retain_stub];
  __patientHead_isset = YES;
  __regStatus = [regStatus retain_stub];
  __regStatus_isset = YES;
  __stopExplain = [stopExplain retain_stub];
  __stopExplain_isset = YES;
  __isSymptomCommit = isSymptomCommit;
  __isSymptomCommit_isset = YES;
  __disease = [disease retain_stub];
  __disease_isset = YES;
  __extItems = [extItems retain_stub];
  __extItems_isset = YES;
  __sumFee = [sumFee retain_stub];
  __sumFee_isset = YES;
  __pubFee = [pubFee retain_stub];
  __pubFee_isset = YES;
  __discount = [discount retain_stub];
  __discount_isset = YES;
  __checkInStatus = [checkInStatus retain_stub];
  __checkInStatus_isset = YES;
  __relationId = [relationId retain_stub];
  __relationId_isset = YES;
  __barCode = [barCode retain_stub];
  __barCode_isset = YES;
  __pointName = [pointName retain_stub];
  __pointName_isset = YES;
  __isNeedPay = isNeedPay;
  __isNeedPay_isset = YES;
  __regType = [regType retain_stub];
  __regType_isset = YES;
  __isStInsPaid = isStInsPaid;
  __isStInsPaid_isset = YES;
  __drId = drId;
  __drId_isset = YES;
  __timRoomNo = timRoomNo;
  __timRoomNo_isset = YES;
  __orderStatusName = [orderStatusName retain_stub];
  __orderStatusName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [[decoder decodeObjectForKey: @"orderId"] retain_stub];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderNo"])
  {
    __orderNo = [[decoder decodeObjectForKey: @"orderNo"] retain_stub];
    __orderNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"regId"])
  {
    __regId = [[decoder decodeObjectForKey: @"regId"] retain_stub];
    __regId_isset = YES;
  }
  if ([decoder containsValueForKey: @"regNo"])
  {
    __regNo = [[decoder decodeObjectForKey: @"regNo"] retain_stub];
    __regNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [[decoder decodeObjectForKey: @"patientId"] retain_stub];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientName"])
  {
    __patientName = [[decoder decodeObjectForKey: @"patientName"] retain_stub];
    __patientName_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneNo"])
  {
    __phoneNo = [[decoder decodeObjectForKey: @"phoneNo"] retain_stub];
    __phoneNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersNo"])
  {
    __papersNo = [[decoder decodeObjectForKey: @"papersNo"] retain_stub];
    __papersNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersType"])
  {
    __papersType = [[decoder decodeObjectForKey: @"papersType"] retain_stub];
    __papersType_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [[decoder decodeObjectForKey: @"gender"] retain_stub];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [[decoder decodeObjectForKey: @"hospId"] retain_stub];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospName"])
  {
    __hospName = [[decoder decodeObjectForKey: @"hospName"] retain_stub];
    __hospName_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptName"])
  {
    __deptName = [[decoder decodeObjectForKey: @"deptName"] retain_stub];
    __deptName_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptId"])
  {
    __deptId = [[decoder decodeObjectForKey: @"deptId"] retain_stub];
    __deptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"drName"])
  {
    __drName = [[decoder decodeObjectForKey: @"drName"] retain_stub];
    __drName_isset = YES;
  }
  if ([decoder containsValueForKey: @"medDate"])
  {
    __medDate = [[decoder decodeObjectForKey: @"medDate"] retain_stub];
    __medDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"symptom"])
  {
    __symptom = [[decoder decodeObjectForKey: @"symptom"] retain_stub];
    __symptom_isset = YES;
  }
  if ([decoder containsValueForKey: @"fee"])
  {
    __fee = [[decoder decodeObjectForKey: @"fee"] retain_stub];
    __fee_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderStatus"])
  {
    __orderStatus = [[decoder decodeObjectForKey: @"orderStatus"] retain_stub];
    __orderStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"generateTime"])
  {
    __generateTime = [[decoder decodeObjectForKey: @"generateTime"] retain_stub];
    __generateTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"outTime"])
  {
    __outTime = [[decoder decodeObjectForKey: @"outTime"] retain_stub];
    __outTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"hasSent"])
  {
    __hasSent = [decoder decodeInt32ForKey: @"hasSent"];
    __hasSent_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardNo"])
  {
    __cardNo = [[decoder decodeObjectForKey: @"cardNo"] retain_stub];
    __cardNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"markNo"])
  {
    __markNo = [[decoder decodeObjectForKey: @"markNo"] retain_stub];
    __markNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceCode"])
  {
    __serviceCode = [[decoder decodeObjectForKey: @"serviceCode"] retain_stub];
    __serviceCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientHead"])
  {
    __patientHead = [[decoder decodeObjectForKey: @"patientHead"] retain_stub];
    __patientHead_isset = YES;
  }
  if ([decoder containsValueForKey: @"regStatus"])
  {
    __regStatus = [[decoder decodeObjectForKey: @"regStatus"] retain_stub];
    __regStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"stopExplain"])
  {
    __stopExplain = [[decoder decodeObjectForKey: @"stopExplain"] retain_stub];
    __stopExplain_isset = YES;
  }
  if ([decoder containsValueForKey: @"isSymptomCommit"])
  {
    __isSymptomCommit = [decoder decodeInt32ForKey: @"isSymptomCommit"];
    __isSymptomCommit_isset = YES;
  }
  if ([decoder containsValueForKey: @"disease"])
  {
    __disease = [[decoder decodeObjectForKey: @"disease"] retain_stub];
    __disease_isset = YES;
  }
  if ([decoder containsValueForKey: @"extItems"])
  {
    __extItems = [[decoder decodeObjectForKey: @"extItems"] retain_stub];
    __extItems_isset = YES;
  }
  if ([decoder containsValueForKey: @"sumFee"])
  {
    __sumFee = [[decoder decodeObjectForKey: @"sumFee"] retain_stub];
    __sumFee_isset = YES;
  }
  if ([decoder containsValueForKey: @"pubFee"])
  {
    __pubFee = [[decoder decodeObjectForKey: @"pubFee"] retain_stub];
    __pubFee_isset = YES;
  }
  if ([decoder containsValueForKey: @"discount"])
  {
    __discount = [[decoder decodeObjectForKey: @"discount"] retain_stub];
    __discount_isset = YES;
  }
  if ([decoder containsValueForKey: @"checkInStatus"])
  {
    __checkInStatus = [[decoder decodeObjectForKey: @"checkInStatus"] retain_stub];
    __checkInStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"relationId"])
  {
    __relationId = [[decoder decodeObjectForKey: @"relationId"] retain_stub];
    __relationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"barCode"])
  {
    __barCode = [[decoder decodeObjectForKey: @"barCode"] retain_stub];
    __barCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"pointName"])
  {
    __pointName = [[decoder decodeObjectForKey: @"pointName"] retain_stub];
    __pointName_isset = YES;
  }
  if ([decoder containsValueForKey: @"isNeedPay"])
  {
    __isNeedPay = [decoder decodeInt32ForKey: @"isNeedPay"];
    __isNeedPay_isset = YES;
  }
  if ([decoder containsValueForKey: @"regType"])
  {
    __regType = [[decoder decodeObjectForKey: @"regType"] retain_stub];
    __regType_isset = YES;
  }
  if ([decoder containsValueForKey: @"isStInsPaid"])
  {
    __isStInsPaid = [decoder decodeInt32ForKey: @"isStInsPaid"];
    __isStInsPaid_isset = YES;
  }
  if ([decoder containsValueForKey: @"drId"])
  {
    __drId = [decoder decodeInt64ForKey: @"drId"];
    __drId_isset = YES;
  }
  if ([decoder containsValueForKey: @"timRoomNo"])
  {
    __timRoomNo = [decoder decodeInt32ForKey: @"timRoomNo"];
    __timRoomNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderStatusName"])
  {
    __orderStatusName = [[decoder decodeObjectForKey: @"orderStatusName"] retain_stub];
    __orderStatusName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__orderId_isset)
  {
    [encoder encodeObject: __orderId forKey: @"orderId"];
  }
  if (__orderNo_isset)
  {
    [encoder encodeObject: __orderNo forKey: @"orderNo"];
  }
  if (__regId_isset)
  {
    [encoder encodeObject: __regId forKey: @"regId"];
  }
  if (__regNo_isset)
  {
    [encoder encodeObject: __regNo forKey: @"regNo"];
  }
  if (__patientId_isset)
  {
    [encoder encodeObject: __patientId forKey: @"patientId"];
  }
  if (__patientName_isset)
  {
    [encoder encodeObject: __patientName forKey: @"patientName"];
  }
  if (__phoneNo_isset)
  {
    [encoder encodeObject: __phoneNo forKey: @"phoneNo"];
  }
  if (__papersNo_isset)
  {
    [encoder encodeObject: __papersNo forKey: @"papersNo"];
  }
  if (__papersType_isset)
  {
    [encoder encodeObject: __papersType forKey: @"papersType"];
  }
  if (__gender_isset)
  {
    [encoder encodeObject: __gender forKey: @"gender"];
  }
  if (__hospId_isset)
  {
    [encoder encodeObject: __hospId forKey: @"hospId"];
  }
  if (__hospName_isset)
  {
    [encoder encodeObject: __hospName forKey: @"hospName"];
  }
  if (__deptName_isset)
  {
    [encoder encodeObject: __deptName forKey: @"deptName"];
  }
  if (__deptId_isset)
  {
    [encoder encodeObject: __deptId forKey: @"deptId"];
  }
  if (__drName_isset)
  {
    [encoder encodeObject: __drName forKey: @"drName"];
  }
  if (__medDate_isset)
  {
    [encoder encodeObject: __medDate forKey: @"medDate"];
  }
  if (__symptom_isset)
  {
    [encoder encodeObject: __symptom forKey: @"symptom"];
  }
  if (__fee_isset)
  {
    [encoder encodeObject: __fee forKey: @"fee"];
  }
  if (__orderStatus_isset)
  {
    [encoder encodeObject: __orderStatus forKey: @"orderStatus"];
  }
  if (__generateTime_isset)
  {
    [encoder encodeObject: __generateTime forKey: @"generateTime"];
  }
  if (__outTime_isset)
  {
    [encoder encodeObject: __outTime forKey: @"outTime"];
  }
  if (__hasSent_isset)
  {
    [encoder encodeInt32: __hasSent forKey: @"hasSent"];
  }
  if (__cardNo_isset)
  {
    [encoder encodeObject: __cardNo forKey: @"cardNo"];
  }
  if (__markNo_isset)
  {
    [encoder encodeObject: __markNo forKey: @"markNo"];
  }
  if (__serviceCode_isset)
  {
    [encoder encodeObject: __serviceCode forKey: @"serviceCode"];
  }
  if (__patientHead_isset)
  {
    [encoder encodeObject: __patientHead forKey: @"patientHead"];
  }
  if (__regStatus_isset)
  {
    [encoder encodeObject: __regStatus forKey: @"regStatus"];
  }
  if (__stopExplain_isset)
  {
    [encoder encodeObject: __stopExplain forKey: @"stopExplain"];
  }
  if (__isSymptomCommit_isset)
  {
    [encoder encodeInt32: __isSymptomCommit forKey: @"isSymptomCommit"];
  }
  if (__disease_isset)
  {
    [encoder encodeObject: __disease forKey: @"disease"];
  }
  if (__extItems_isset)
  {
    [encoder encodeObject: __extItems forKey: @"extItems"];
  }
  if (__sumFee_isset)
  {
    [encoder encodeObject: __sumFee forKey: @"sumFee"];
  }
  if (__pubFee_isset)
  {
    [encoder encodeObject: __pubFee forKey: @"pubFee"];
  }
  if (__discount_isset)
  {
    [encoder encodeObject: __discount forKey: @"discount"];
  }
  if (__checkInStatus_isset)
  {
    [encoder encodeObject: __checkInStatus forKey: @"checkInStatus"];
  }
  if (__relationId_isset)
  {
    [encoder encodeObject: __relationId forKey: @"relationId"];
  }
  if (__barCode_isset)
  {
    [encoder encodeObject: __barCode forKey: @"barCode"];
  }
  if (__pointName_isset)
  {
    [encoder encodeObject: __pointName forKey: @"pointName"];
  }
  if (__isNeedPay_isset)
  {
    [encoder encodeInt32: __isNeedPay forKey: @"isNeedPay"];
  }
  if (__regType_isset)
  {
    [encoder encodeObject: __regType forKey: @"regType"];
  }
  if (__isStInsPaid_isset)
  {
    [encoder encodeInt32: __isStInsPaid forKey: @"isStInsPaid"];
  }
  if (__drId_isset)
  {
    [encoder encodeInt64: __drId forKey: @"drId"];
  }
  if (__timRoomNo_isset)
  {
    [encoder encodeInt32: __timRoomNo forKey: @"timRoomNo"];
  }
  if (__orderStatusName_isset)
  {
    [encoder encodeObject: __orderStatusName forKey: @"orderStatusName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [__orderId hash];
  }
  hash = (hash * 31) ^ __orderNo_isset ? 2654435761 : 0;
  if (__orderNo_isset)
  {
    hash = (hash * 31) ^ [__orderNo hash];
  }
  hash = (hash * 31) ^ __regId_isset ? 2654435761 : 0;
  if (__regId_isset)
  {
    hash = (hash * 31) ^ [__regId hash];
  }
  hash = (hash * 31) ^ __regNo_isset ? 2654435761 : 0;
  if (__regNo_isset)
  {
    hash = (hash * 31) ^ [__regNo hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [__patientId hash];
  }
  hash = (hash * 31) ^ __patientName_isset ? 2654435761 : 0;
  if (__patientName_isset)
  {
    hash = (hash * 31) ^ [__patientName hash];
  }
  hash = (hash * 31) ^ __phoneNo_isset ? 2654435761 : 0;
  if (__phoneNo_isset)
  {
    hash = (hash * 31) ^ [__phoneNo hash];
  }
  hash = (hash * 31) ^ __papersNo_isset ? 2654435761 : 0;
  if (__papersNo_isset)
  {
    hash = (hash * 31) ^ [__papersNo hash];
  }
  hash = (hash * 31) ^ __papersType_isset ? 2654435761 : 0;
  if (__papersType_isset)
  {
    hash = (hash * 31) ^ [__papersType hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [__gender hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [__hospId hash];
  }
  hash = (hash * 31) ^ __hospName_isset ? 2654435761 : 0;
  if (__hospName_isset)
  {
    hash = (hash * 31) ^ [__hospName hash];
  }
  hash = (hash * 31) ^ __deptName_isset ? 2654435761 : 0;
  if (__deptName_isset)
  {
    hash = (hash * 31) ^ [__deptName hash];
  }
  hash = (hash * 31) ^ __deptId_isset ? 2654435761 : 0;
  if (__deptId_isset)
  {
    hash = (hash * 31) ^ [__deptId hash];
  }
  hash = (hash * 31) ^ __drName_isset ? 2654435761 : 0;
  if (__drName_isset)
  {
    hash = (hash * 31) ^ [__drName hash];
  }
  hash = (hash * 31) ^ __medDate_isset ? 2654435761 : 0;
  if (__medDate_isset)
  {
    hash = (hash * 31) ^ [__medDate hash];
  }
  hash = (hash * 31) ^ __symptom_isset ? 2654435761 : 0;
  if (__symptom_isset)
  {
    hash = (hash * 31) ^ [__symptom hash];
  }
  hash = (hash * 31) ^ __fee_isset ? 2654435761 : 0;
  if (__fee_isset)
  {
    hash = (hash * 31) ^ [__fee hash];
  }
  hash = (hash * 31) ^ __orderStatus_isset ? 2654435761 : 0;
  if (__orderStatus_isset)
  {
    hash = (hash * 31) ^ [__orderStatus hash];
  }
  hash = (hash * 31) ^ __generateTime_isset ? 2654435761 : 0;
  if (__generateTime_isset)
  {
    hash = (hash * 31) ^ [__generateTime hash];
  }
  hash = (hash * 31) ^ __outTime_isset ? 2654435761 : 0;
  if (__outTime_isset)
  {
    hash = (hash * 31) ^ [__outTime hash];
  }
  hash = (hash * 31) ^ __hasSent_isset ? 2654435761 : 0;
  if (__hasSent_isset)
  {
    hash = (hash * 31) ^ [@(__hasSent) hash];
  }
  hash = (hash * 31) ^ __cardNo_isset ? 2654435761 : 0;
  if (__cardNo_isset)
  {
    hash = (hash * 31) ^ [__cardNo hash];
  }
  hash = (hash * 31) ^ __markNo_isset ? 2654435761 : 0;
  if (__markNo_isset)
  {
    hash = (hash * 31) ^ [__markNo hash];
  }
  hash = (hash * 31) ^ __serviceCode_isset ? 2654435761 : 0;
  if (__serviceCode_isset)
  {
    hash = (hash * 31) ^ [__serviceCode hash];
  }
  hash = (hash * 31) ^ __patientHead_isset ? 2654435761 : 0;
  if (__patientHead_isset)
  {
    hash = (hash * 31) ^ [__patientHead hash];
  }
  hash = (hash * 31) ^ __regStatus_isset ? 2654435761 : 0;
  if (__regStatus_isset)
  {
    hash = (hash * 31) ^ [__regStatus hash];
  }
  hash = (hash * 31) ^ __stopExplain_isset ? 2654435761 : 0;
  if (__stopExplain_isset)
  {
    hash = (hash * 31) ^ [__stopExplain hash];
  }
  hash = (hash * 31) ^ __isSymptomCommit_isset ? 2654435761 : 0;
  if (__isSymptomCommit_isset)
  {
    hash = (hash * 31) ^ [@(__isSymptomCommit) hash];
  }
  hash = (hash * 31) ^ __disease_isset ? 2654435761 : 0;
  if (__disease_isset)
  {
    hash = (hash * 31) ^ [__disease hash];
  }
  hash = (hash * 31) ^ __extItems_isset ? 2654435761 : 0;
  if (__extItems_isset)
  {
    hash = (hash * 31) ^ [__extItems hash];
  }
  hash = (hash * 31) ^ __sumFee_isset ? 2654435761 : 0;
  if (__sumFee_isset)
  {
    hash = (hash * 31) ^ [__sumFee hash];
  }
  hash = (hash * 31) ^ __pubFee_isset ? 2654435761 : 0;
  if (__pubFee_isset)
  {
    hash = (hash * 31) ^ [__pubFee hash];
  }
  hash = (hash * 31) ^ __discount_isset ? 2654435761 : 0;
  if (__discount_isset)
  {
    hash = (hash * 31) ^ [__discount hash];
  }
  hash = (hash * 31) ^ __checkInStatus_isset ? 2654435761 : 0;
  if (__checkInStatus_isset)
  {
    hash = (hash * 31) ^ [__checkInStatus hash];
  }
  hash = (hash * 31) ^ __relationId_isset ? 2654435761 : 0;
  if (__relationId_isset)
  {
    hash = (hash * 31) ^ [__relationId hash];
  }
  hash = (hash * 31) ^ __barCode_isset ? 2654435761 : 0;
  if (__barCode_isset)
  {
    hash = (hash * 31) ^ [__barCode hash];
  }
  hash = (hash * 31) ^ __pointName_isset ? 2654435761 : 0;
  if (__pointName_isset)
  {
    hash = (hash * 31) ^ [__pointName hash];
  }
  hash = (hash * 31) ^ __isNeedPay_isset ? 2654435761 : 0;
  if (__isNeedPay_isset)
  {
    hash = (hash * 31) ^ [@(__isNeedPay) hash];
  }
  hash = (hash * 31) ^ __regType_isset ? 2654435761 : 0;
  if (__regType_isset)
  {
    hash = (hash * 31) ^ [__regType hash];
  }
  hash = (hash * 31) ^ __isStInsPaid_isset ? 2654435761 : 0;
  if (__isStInsPaid_isset)
  {
    hash = (hash * 31) ^ [@(__isStInsPaid) hash];
  }
  hash = (hash * 31) ^ __drId_isset ? 2654435761 : 0;
  if (__drId_isset)
  {
    hash = (hash * 31) ^ [@(__drId) hash];
  }
  hash = (hash * 31) ^ __timRoomNo_isset ? 2654435761 : 0;
  if (__timRoomNo_isset)
  {
    hash = (hash * 31) ^ [@(__timRoomNo) hash];
  }
  hash = (hash * 31) ^ __orderStatusName_isset ? 2654435761 : 0;
  if (__orderStatusName_isset)
  {
    hash = (hash * 31) ^ [__orderStatusName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetRegResp class]]) {
    return NO;
  }
  NXTFGetRegResp *other = (NXTFGetRegResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && ((__orderId || other->__orderId) && ![__orderId isEqual:other->__orderId]))) {
    return NO;
  }
  if ((__orderNo_isset != other->__orderNo_isset) ||
      (__orderNo_isset && ((__orderNo || other->__orderNo) && ![__orderNo isEqual:other->__orderNo]))) {
    return NO;
  }
  if ((__regId_isset != other->__regId_isset) ||
      (__regId_isset && ((__regId || other->__regId) && ![__regId isEqual:other->__regId]))) {
    return NO;
  }
  if ((__regNo_isset != other->__regNo_isset) ||
      (__regNo_isset && ((__regNo || other->__regNo) && ![__regNo isEqual:other->__regNo]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && ((__patientId || other->__patientId) && ![__patientId isEqual:other->__patientId]))) {
    return NO;
  }
  if ((__patientName_isset != other->__patientName_isset) ||
      (__patientName_isset && ((__patientName || other->__patientName) && ![__patientName isEqual:other->__patientName]))) {
    return NO;
  }
  if ((__phoneNo_isset != other->__phoneNo_isset) ||
      (__phoneNo_isset && ((__phoneNo || other->__phoneNo) && ![__phoneNo isEqual:other->__phoneNo]))) {
    return NO;
  }
  if ((__papersNo_isset != other->__papersNo_isset) ||
      (__papersNo_isset && ((__papersNo || other->__papersNo) && ![__papersNo isEqual:other->__papersNo]))) {
    return NO;
  }
  if ((__papersType_isset != other->__papersType_isset) ||
      (__papersType_isset && ((__papersType || other->__papersType) && ![__papersType isEqual:other->__papersType]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && ((__gender || other->__gender) && ![__gender isEqual:other->__gender]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && ((__hospId || other->__hospId) && ![__hospId isEqual:other->__hospId]))) {
    return NO;
  }
  if ((__hospName_isset != other->__hospName_isset) ||
      (__hospName_isset && ((__hospName || other->__hospName) && ![__hospName isEqual:other->__hospName]))) {
    return NO;
  }
  if ((__deptName_isset != other->__deptName_isset) ||
      (__deptName_isset && ((__deptName || other->__deptName) && ![__deptName isEqual:other->__deptName]))) {
    return NO;
  }
  if ((__deptId_isset != other->__deptId_isset) ||
      (__deptId_isset && ((__deptId || other->__deptId) && ![__deptId isEqual:other->__deptId]))) {
    return NO;
  }
  if ((__drName_isset != other->__drName_isset) ||
      (__drName_isset && ((__drName || other->__drName) && ![__drName isEqual:other->__drName]))) {
    return NO;
  }
  if ((__medDate_isset != other->__medDate_isset) ||
      (__medDate_isset && ((__medDate || other->__medDate) && ![__medDate isEqual:other->__medDate]))) {
    return NO;
  }
  if ((__symptom_isset != other->__symptom_isset) ||
      (__symptom_isset && ((__symptom || other->__symptom) && ![__symptom isEqual:other->__symptom]))) {
    return NO;
  }
  if ((__fee_isset != other->__fee_isset) ||
      (__fee_isset && ((__fee || other->__fee) && ![__fee isEqual:other->__fee]))) {
    return NO;
  }
  if ((__orderStatus_isset != other->__orderStatus_isset) ||
      (__orderStatus_isset && ((__orderStatus || other->__orderStatus) && ![__orderStatus isEqual:other->__orderStatus]))) {
    return NO;
  }
  if ((__generateTime_isset != other->__generateTime_isset) ||
      (__generateTime_isset && ((__generateTime || other->__generateTime) && ![__generateTime isEqual:other->__generateTime]))) {
    return NO;
  }
  if ((__outTime_isset != other->__outTime_isset) ||
      (__outTime_isset && ((__outTime || other->__outTime) && ![__outTime isEqual:other->__outTime]))) {
    return NO;
  }
  if ((__hasSent_isset != other->__hasSent_isset) ||
      (__hasSent_isset && (__hasSent != other->__hasSent))) {
    return NO;
  }
  if ((__cardNo_isset != other->__cardNo_isset) ||
      (__cardNo_isset && ((__cardNo || other->__cardNo) && ![__cardNo isEqual:other->__cardNo]))) {
    return NO;
  }
  if ((__markNo_isset != other->__markNo_isset) ||
      (__markNo_isset && ((__markNo || other->__markNo) && ![__markNo isEqual:other->__markNo]))) {
    return NO;
  }
  if ((__serviceCode_isset != other->__serviceCode_isset) ||
      (__serviceCode_isset && ((__serviceCode || other->__serviceCode) && ![__serviceCode isEqual:other->__serviceCode]))) {
    return NO;
  }
  if ((__patientHead_isset != other->__patientHead_isset) ||
      (__patientHead_isset && ((__patientHead || other->__patientHead) && ![__patientHead isEqual:other->__patientHead]))) {
    return NO;
  }
  if ((__regStatus_isset != other->__regStatus_isset) ||
      (__regStatus_isset && ((__regStatus || other->__regStatus) && ![__regStatus isEqual:other->__regStatus]))) {
    return NO;
  }
  if ((__stopExplain_isset != other->__stopExplain_isset) ||
      (__stopExplain_isset && ((__stopExplain || other->__stopExplain) && ![__stopExplain isEqual:other->__stopExplain]))) {
    return NO;
  }
  if ((__isSymptomCommit_isset != other->__isSymptomCommit_isset) ||
      (__isSymptomCommit_isset && (__isSymptomCommit != other->__isSymptomCommit))) {
    return NO;
  }
  if ((__disease_isset != other->__disease_isset) ||
      (__disease_isset && ((__disease || other->__disease) && ![__disease isEqual:other->__disease]))) {
    return NO;
  }
  if ((__extItems_isset != other->__extItems_isset) ||
      (__extItems_isset && ((__extItems || other->__extItems) && ![__extItems isEqual:other->__extItems]))) {
    return NO;
  }
  if ((__sumFee_isset != other->__sumFee_isset) ||
      (__sumFee_isset && ((__sumFee || other->__sumFee) && ![__sumFee isEqual:other->__sumFee]))) {
    return NO;
  }
  if ((__pubFee_isset != other->__pubFee_isset) ||
      (__pubFee_isset && ((__pubFee || other->__pubFee) && ![__pubFee isEqual:other->__pubFee]))) {
    return NO;
  }
  if ((__discount_isset != other->__discount_isset) ||
      (__discount_isset && ((__discount || other->__discount) && ![__discount isEqual:other->__discount]))) {
    return NO;
  }
  if ((__checkInStatus_isset != other->__checkInStatus_isset) ||
      (__checkInStatus_isset && ((__checkInStatus || other->__checkInStatus) && ![__checkInStatus isEqual:other->__checkInStatus]))) {
    return NO;
  }
  if ((__relationId_isset != other->__relationId_isset) ||
      (__relationId_isset && ((__relationId || other->__relationId) && ![__relationId isEqual:other->__relationId]))) {
    return NO;
  }
  if ((__barCode_isset != other->__barCode_isset) ||
      (__barCode_isset && ((__barCode || other->__barCode) && ![__barCode isEqual:other->__barCode]))) {
    return NO;
  }
  if ((__pointName_isset != other->__pointName_isset) ||
      (__pointName_isset && ((__pointName || other->__pointName) && ![__pointName isEqual:other->__pointName]))) {
    return NO;
  }
  if ((__isNeedPay_isset != other->__isNeedPay_isset) ||
      (__isNeedPay_isset && (__isNeedPay != other->__isNeedPay))) {
    return NO;
  }
  if ((__regType_isset != other->__regType_isset) ||
      (__regType_isset && ((__regType || other->__regType) && ![__regType isEqual:other->__regType]))) {
    return NO;
  }
  if ((__isStInsPaid_isset != other->__isStInsPaid_isset) ||
      (__isStInsPaid_isset && (__isStInsPaid != other->__isStInsPaid))) {
    return NO;
  }
  if ((__drId_isset != other->__drId_isset) ||
      (__drId_isset && (__drId != other->__drId))) {
    return NO;
  }
  if ((__timRoomNo_isset != other->__timRoomNo_isset) ||
      (__timRoomNo_isset && (__timRoomNo != other->__timRoomNo))) {
    return NO;
  }
  if ((__orderStatusName_isset != other->__orderStatusName_isset) ||
      (__orderStatusName_isset && ((__orderStatusName || other->__orderStatusName) && ![__orderStatusName isEqual:other->__orderStatusName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__orderId release_stub];
  [__orderNo release_stub];
  [__regId release_stub];
  [__regNo release_stub];
  [__patientId release_stub];
  [__patientName release_stub];
  [__phoneNo release_stub];
  [__papersNo release_stub];
  [__papersType release_stub];
  [__gender release_stub];
  [__hospId release_stub];
  [__hospName release_stub];
  [__deptName release_stub];
  [__deptId release_stub];
  [__drName release_stub];
  [__medDate release_stub];
  [__symptom release_stub];
  [__fee release_stub];
  [__orderStatus release_stub];
  [__generateTime release_stub];
  [__outTime release_stub];
  [__cardNo release_stub];
  [__markNo release_stub];
  [__serviceCode release_stub];
  [__patientHead release_stub];
  [__regStatus release_stub];
  [__stopExplain release_stub];
  [__disease release_stub];
  [__extItems release_stub];
  [__sumFee release_stub];
  [__pubFee release_stub];
  [__discount release_stub];
  [__checkInStatus release_stub];
  [__relationId release_stub];
  [__barCode release_stub];
  [__pointName release_stub];
  [__regType release_stub];
  [__orderStatusName release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) orderId {
  return [[__orderId retain_stub] autorelease_stub];
}

- (void) setOrderId: (NSString *) orderId {
  [orderId retain_stub];
  [__orderId release_stub];
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  [__orderId release_stub];
  __orderId = nil;
  __orderId_isset = NO;
}

- (NSString *) orderNo {
  return [[__orderNo retain_stub] autorelease_stub];
}

- (void) setOrderNo: (NSString *) orderNo {
  [orderNo retain_stub];
  [__orderNo release_stub];
  __orderNo = orderNo;
  __orderNo_isset = YES;
}

- (BOOL) orderNoIsSet {
  return __orderNo_isset;
}

- (void) unsetOrderNo {
  [__orderNo release_stub];
  __orderNo = nil;
  __orderNo_isset = NO;
}

- (NSString *) regId {
  return [[__regId retain_stub] autorelease_stub];
}

- (void) setRegId: (NSString *) regId {
  [regId retain_stub];
  [__regId release_stub];
  __regId = regId;
  __regId_isset = YES;
}

- (BOOL) regIdIsSet {
  return __regId_isset;
}

- (void) unsetRegId {
  [__regId release_stub];
  __regId = nil;
  __regId_isset = NO;
}

- (NSString *) regNo {
  return [[__regNo retain_stub] autorelease_stub];
}

- (void) setRegNo: (NSString *) regNo {
  [regNo retain_stub];
  [__regNo release_stub];
  __regNo = regNo;
  __regNo_isset = YES;
}

- (BOOL) regNoIsSet {
  return __regNo_isset;
}

- (void) unsetRegNo {
  [__regNo release_stub];
  __regNo = nil;
  __regNo_isset = NO;
}

- (NSString *) patientId {
  return [[__patientId retain_stub] autorelease_stub];
}

- (void) setPatientId: (NSString *) patientId {
  [patientId retain_stub];
  [__patientId release_stub];
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  [__patientId release_stub];
  __patientId = nil;
  __patientId_isset = NO;
}

- (NSString *) patientName {
  return [[__patientName retain_stub] autorelease_stub];
}

- (void) setPatientName: (NSString *) patientName {
  [patientName retain_stub];
  [__patientName release_stub];
  __patientName = patientName;
  __patientName_isset = YES;
}

- (BOOL) patientNameIsSet {
  return __patientName_isset;
}

- (void) unsetPatientName {
  [__patientName release_stub];
  __patientName = nil;
  __patientName_isset = NO;
}

- (NSString *) phoneNo {
  return [[__phoneNo retain_stub] autorelease_stub];
}

- (void) setPhoneNo: (NSString *) phoneNo {
  [phoneNo retain_stub];
  [__phoneNo release_stub];
  __phoneNo = phoneNo;
  __phoneNo_isset = YES;
}

- (BOOL) phoneNoIsSet {
  return __phoneNo_isset;
}

- (void) unsetPhoneNo {
  [__phoneNo release_stub];
  __phoneNo = nil;
  __phoneNo_isset = NO;
}

- (NSString *) papersNo {
  return [[__papersNo retain_stub] autorelease_stub];
}

- (void) setPapersNo: (NSString *) papersNo {
  [papersNo retain_stub];
  [__papersNo release_stub];
  __papersNo = papersNo;
  __papersNo_isset = YES;
}

- (BOOL) papersNoIsSet {
  return __papersNo_isset;
}

- (void) unsetPapersNo {
  [__papersNo release_stub];
  __papersNo = nil;
  __papersNo_isset = NO;
}

- (NSString *) papersType {
  return [[__papersType retain_stub] autorelease_stub];
}

- (void) setPapersType: (NSString *) papersType {
  [papersType retain_stub];
  [__papersType release_stub];
  __papersType = papersType;
  __papersType_isset = YES;
}

- (BOOL) papersTypeIsSet {
  return __papersType_isset;
}

- (void) unsetPapersType {
  [__papersType release_stub];
  __papersType = nil;
  __papersType_isset = NO;
}

- (NSString *) gender {
  return [[__gender retain_stub] autorelease_stub];
}

- (void) setGender: (NSString *) gender {
  [gender retain_stub];
  [__gender release_stub];
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  [__gender release_stub];
  __gender = nil;
  __gender_isset = NO;
}

- (NSString *) hospId {
  return [[__hospId retain_stub] autorelease_stub];
}

- (void) setHospId: (NSString *) hospId {
  [hospId retain_stub];
  [__hospId release_stub];
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  [__hospId release_stub];
  __hospId = nil;
  __hospId_isset = NO;
}

- (NSString *) hospName {
  return [[__hospName retain_stub] autorelease_stub];
}

- (void) setHospName: (NSString *) hospName {
  [hospName retain_stub];
  [__hospName release_stub];
  __hospName = hospName;
  __hospName_isset = YES;
}

- (BOOL) hospNameIsSet {
  return __hospName_isset;
}

- (void) unsetHospName {
  [__hospName release_stub];
  __hospName = nil;
  __hospName_isset = NO;
}

- (NSString *) deptName {
  return [[__deptName retain_stub] autorelease_stub];
}

- (void) setDeptName: (NSString *) deptName {
  [deptName retain_stub];
  [__deptName release_stub];
  __deptName = deptName;
  __deptName_isset = YES;
}

- (BOOL) deptNameIsSet {
  return __deptName_isset;
}

- (void) unsetDeptName {
  [__deptName release_stub];
  __deptName = nil;
  __deptName_isset = NO;
}

- (NSString *) deptId {
  return [[__deptId retain_stub] autorelease_stub];
}

- (void) setDeptId: (NSString *) deptId {
  [deptId retain_stub];
  [__deptId release_stub];
  __deptId = deptId;
  __deptId_isset = YES;
}

- (BOOL) deptIdIsSet {
  return __deptId_isset;
}

- (void) unsetDeptId {
  [__deptId release_stub];
  __deptId = nil;
  __deptId_isset = NO;
}

- (NSString *) drName {
  return [[__drName retain_stub] autorelease_stub];
}

- (void) setDrName: (NSString *) drName {
  [drName retain_stub];
  [__drName release_stub];
  __drName = drName;
  __drName_isset = YES;
}

- (BOOL) drNameIsSet {
  return __drName_isset;
}

- (void) unsetDrName {
  [__drName release_stub];
  __drName = nil;
  __drName_isset = NO;
}

- (NSString *) medDate {
  return [[__medDate retain_stub] autorelease_stub];
}

- (void) setMedDate: (NSString *) medDate {
  [medDate retain_stub];
  [__medDate release_stub];
  __medDate = medDate;
  __medDate_isset = YES;
}

- (BOOL) medDateIsSet {
  return __medDate_isset;
}

- (void) unsetMedDate {
  [__medDate release_stub];
  __medDate = nil;
  __medDate_isset = NO;
}

- (NSString *) symptom {
  return [[__symptom retain_stub] autorelease_stub];
}

- (void) setSymptom: (NSString *) symptom {
  [symptom retain_stub];
  [__symptom release_stub];
  __symptom = symptom;
  __symptom_isset = YES;
}

- (BOOL) symptomIsSet {
  return __symptom_isset;
}

- (void) unsetSymptom {
  [__symptom release_stub];
  __symptom = nil;
  __symptom_isset = NO;
}

- (NSString *) fee {
  return [[__fee retain_stub] autorelease_stub];
}

- (void) setFee: (NSString *) fee {
  [fee retain_stub];
  [__fee release_stub];
  __fee = fee;
  __fee_isset = YES;
}

- (BOOL) feeIsSet {
  return __fee_isset;
}

- (void) unsetFee {
  [__fee release_stub];
  __fee = nil;
  __fee_isset = NO;
}

- (NSString *) orderStatus {
  return [[__orderStatus retain_stub] autorelease_stub];
}

- (void) setOrderStatus: (NSString *) orderStatus {
  [orderStatus retain_stub];
  [__orderStatus release_stub];
  __orderStatus = orderStatus;
  __orderStatus_isset = YES;
}

- (BOOL) orderStatusIsSet {
  return __orderStatus_isset;
}

- (void) unsetOrderStatus {
  [__orderStatus release_stub];
  __orderStatus = nil;
  __orderStatus_isset = NO;
}

- (NSString *) generateTime {
  return [[__generateTime retain_stub] autorelease_stub];
}

- (void) setGenerateTime: (NSString *) generateTime {
  [generateTime retain_stub];
  [__generateTime release_stub];
  __generateTime = generateTime;
  __generateTime_isset = YES;
}

- (BOOL) generateTimeIsSet {
  return __generateTime_isset;
}

- (void) unsetGenerateTime {
  [__generateTime release_stub];
  __generateTime = nil;
  __generateTime_isset = NO;
}

- (NSString *) outTime {
  return [[__outTime retain_stub] autorelease_stub];
}

- (void) setOutTime: (NSString *) outTime {
  [outTime retain_stub];
  [__outTime release_stub];
  __outTime = outTime;
  __outTime_isset = YES;
}

- (BOOL) outTimeIsSet {
  return __outTime_isset;
}

- (void) unsetOutTime {
  [__outTime release_stub];
  __outTime = nil;
  __outTime_isset = NO;
}

- (int32_t) hasSent {
  return __hasSent;
}

- (void) setHasSent: (int32_t) hasSent {
  __hasSent = hasSent;
  __hasSent_isset = YES;
}

- (BOOL) hasSentIsSet {
  return __hasSent_isset;
}

- (void) unsetHasSent {
  __hasSent_isset = NO;
}

- (NSString *) cardNo {
  return [[__cardNo retain_stub] autorelease_stub];
}

- (void) setCardNo: (NSString *) cardNo {
  [cardNo retain_stub];
  [__cardNo release_stub];
  __cardNo = cardNo;
  __cardNo_isset = YES;
}

- (BOOL) cardNoIsSet {
  return __cardNo_isset;
}

- (void) unsetCardNo {
  [__cardNo release_stub];
  __cardNo = nil;
  __cardNo_isset = NO;
}

- (NSString *) markNo {
  return [[__markNo retain_stub] autorelease_stub];
}

- (void) setMarkNo: (NSString *) markNo {
  [markNo retain_stub];
  [__markNo release_stub];
  __markNo = markNo;
  __markNo_isset = YES;
}

- (BOOL) markNoIsSet {
  return __markNo_isset;
}

- (void) unsetMarkNo {
  [__markNo release_stub];
  __markNo = nil;
  __markNo_isset = NO;
}

- (NSString *) serviceCode {
  return [[__serviceCode retain_stub] autorelease_stub];
}

- (void) setServiceCode: (NSString *) serviceCode {
  [serviceCode retain_stub];
  [__serviceCode release_stub];
  __serviceCode = serviceCode;
  __serviceCode_isset = YES;
}

- (BOOL) serviceCodeIsSet {
  return __serviceCode_isset;
}

- (void) unsetServiceCode {
  [__serviceCode release_stub];
  __serviceCode = nil;
  __serviceCode_isset = NO;
}

- (NSString *) patientHead {
  return [[__patientHead retain_stub] autorelease_stub];
}

- (void) setPatientHead: (NSString *) patientHead {
  [patientHead retain_stub];
  [__patientHead release_stub];
  __patientHead = patientHead;
  __patientHead_isset = YES;
}

- (BOOL) patientHeadIsSet {
  return __patientHead_isset;
}

- (void) unsetPatientHead {
  [__patientHead release_stub];
  __patientHead = nil;
  __patientHead_isset = NO;
}

- (NSString *) regStatus {
  return [[__regStatus retain_stub] autorelease_stub];
}

- (void) setRegStatus: (NSString *) regStatus {
  [regStatus retain_stub];
  [__regStatus release_stub];
  __regStatus = regStatus;
  __regStatus_isset = YES;
}

- (BOOL) regStatusIsSet {
  return __regStatus_isset;
}

- (void) unsetRegStatus {
  [__regStatus release_stub];
  __regStatus = nil;
  __regStatus_isset = NO;
}

- (NSString *) stopExplain {
  return [[__stopExplain retain_stub] autorelease_stub];
}

- (void) setStopExplain: (NSString *) stopExplain {
  [stopExplain retain_stub];
  [__stopExplain release_stub];
  __stopExplain = stopExplain;
  __stopExplain_isset = YES;
}

- (BOOL) stopExplainIsSet {
  return __stopExplain_isset;
}

- (void) unsetStopExplain {
  [__stopExplain release_stub];
  __stopExplain = nil;
  __stopExplain_isset = NO;
}

- (int32_t) isSymptomCommit {
  return __isSymptomCommit;
}

- (void) setIsSymptomCommit: (int32_t) isSymptomCommit {
  __isSymptomCommit = isSymptomCommit;
  __isSymptomCommit_isset = YES;
}

- (BOOL) isSymptomCommitIsSet {
  return __isSymptomCommit_isset;
}

- (void) unsetIsSymptomCommit {
  __isSymptomCommit_isset = NO;
}

- (NSString *) disease {
  return [[__disease retain_stub] autorelease_stub];
}

- (void) setDisease: (NSString *) disease {
  [disease retain_stub];
  [__disease release_stub];
  __disease = disease;
  __disease_isset = YES;
}

- (BOOL) diseaseIsSet {
  return __disease_isset;
}

- (void) unsetDisease {
  [__disease release_stub];
  __disease = nil;
  __disease_isset = NO;
}

- (NSMutableArray *) extItems {
  return [[__extItems retain_stub] autorelease_stub];
}

- (void) setExtItems: (NSMutableArray *) extItems {
  [extItems retain_stub];
  [__extItems release_stub];
  __extItems = extItems;
  __extItems_isset = YES;
}

- (BOOL) extItemsIsSet {
  return __extItems_isset;
}

- (void) unsetExtItems {
  [__extItems release_stub];
  __extItems = nil;
  __extItems_isset = NO;
}

- (NSString *) sumFee {
  return [[__sumFee retain_stub] autorelease_stub];
}

- (void) setSumFee: (NSString *) sumFee {
  [sumFee retain_stub];
  [__sumFee release_stub];
  __sumFee = sumFee;
  __sumFee_isset = YES;
}

- (BOOL) sumFeeIsSet {
  return __sumFee_isset;
}

- (void) unsetSumFee {
  [__sumFee release_stub];
  __sumFee = nil;
  __sumFee_isset = NO;
}

- (NSString *) pubFee {
  return [[__pubFee retain_stub] autorelease_stub];
}

- (void) setPubFee: (NSString *) pubFee {
  [pubFee retain_stub];
  [__pubFee release_stub];
  __pubFee = pubFee;
  __pubFee_isset = YES;
}

- (BOOL) pubFeeIsSet {
  return __pubFee_isset;
}

- (void) unsetPubFee {
  [__pubFee release_stub];
  __pubFee = nil;
  __pubFee_isset = NO;
}

- (NSString *) discount {
  return [[__discount retain_stub] autorelease_stub];
}

- (void) setDiscount: (NSString *) discount {
  [discount retain_stub];
  [__discount release_stub];
  __discount = discount;
  __discount_isset = YES;
}

- (BOOL) discountIsSet {
  return __discount_isset;
}

- (void) unsetDiscount {
  [__discount release_stub];
  __discount = nil;
  __discount_isset = NO;
}

- (NSString *) checkInStatus {
  return [[__checkInStatus retain_stub] autorelease_stub];
}

- (void) setCheckInStatus: (NSString *) checkInStatus {
  [checkInStatus retain_stub];
  [__checkInStatus release_stub];
  __checkInStatus = checkInStatus;
  __checkInStatus_isset = YES;
}

- (BOOL) checkInStatusIsSet {
  return __checkInStatus_isset;
}

- (void) unsetCheckInStatus {
  [__checkInStatus release_stub];
  __checkInStatus = nil;
  __checkInStatus_isset = NO;
}

- (NSString *) relationId {
  return [[__relationId retain_stub] autorelease_stub];
}

- (void) setRelationId: (NSString *) relationId {
  [relationId retain_stub];
  [__relationId release_stub];
  __relationId = relationId;
  __relationId_isset = YES;
}

- (BOOL) relationIdIsSet {
  return __relationId_isset;
}

- (void) unsetRelationId {
  [__relationId release_stub];
  __relationId = nil;
  __relationId_isset = NO;
}

- (NSString *) barCode {
  return [[__barCode retain_stub] autorelease_stub];
}

- (void) setBarCode: (NSString *) barCode {
  [barCode retain_stub];
  [__barCode release_stub];
  __barCode = barCode;
  __barCode_isset = YES;
}

- (BOOL) barCodeIsSet {
  return __barCode_isset;
}

- (void) unsetBarCode {
  [__barCode release_stub];
  __barCode = nil;
  __barCode_isset = NO;
}

- (NSString *) pointName {
  return [[__pointName retain_stub] autorelease_stub];
}

- (void) setPointName: (NSString *) pointName {
  [pointName retain_stub];
  [__pointName release_stub];
  __pointName = pointName;
  __pointName_isset = YES;
}

- (BOOL) pointNameIsSet {
  return __pointName_isset;
}

- (void) unsetPointName {
  [__pointName release_stub];
  __pointName = nil;
  __pointName_isset = NO;
}

- (int32_t) isNeedPay {
  return __isNeedPay;
}

- (void) setIsNeedPay: (int32_t) isNeedPay {
  __isNeedPay = isNeedPay;
  __isNeedPay_isset = YES;
}

- (BOOL) isNeedPayIsSet {
  return __isNeedPay_isset;
}

- (void) unsetIsNeedPay {
  __isNeedPay_isset = NO;
}

- (NSString *) regType {
  return [[__regType retain_stub] autorelease_stub];
}

- (void) setRegType: (NSString *) regType {
  [regType retain_stub];
  [__regType release_stub];
  __regType = regType;
  __regType_isset = YES;
}

- (BOOL) regTypeIsSet {
  return __regType_isset;
}

- (void) unsetRegType {
  [__regType release_stub];
  __regType = nil;
  __regType_isset = NO;
}

- (int32_t) isStInsPaid {
  return __isStInsPaid;
}

- (void) setIsStInsPaid: (int32_t) isStInsPaid {
  __isStInsPaid = isStInsPaid;
  __isStInsPaid_isset = YES;
}

- (BOOL) isStInsPaidIsSet {
  return __isStInsPaid_isset;
}

- (void) unsetIsStInsPaid {
  __isStInsPaid_isset = NO;
}

- (int64_t) drId {
  return __drId;
}

- (void) setDrId: (int64_t) drId {
  __drId = drId;
  __drId_isset = YES;
}

- (BOOL) drIdIsSet {
  return __drId_isset;
}

- (void) unsetDrId {
  __drId_isset = NO;
}

- (int32_t) timRoomNo {
  return __timRoomNo;
}

- (void) setTimRoomNo: (int32_t) timRoomNo {
  __timRoomNo = timRoomNo;
  __timRoomNo_isset = YES;
}

- (BOOL) timRoomNoIsSet {
  return __timRoomNo_isset;
}

- (void) unsetTimRoomNo {
  __timRoomNo_isset = NO;
}

- (NSString *) orderStatusName {
  return [[__orderStatusName retain_stub] autorelease_stub];
}

- (void) setOrderStatusName: (NSString *) orderStatusName {
  [orderStatusName retain_stub];
  [__orderStatusName release_stub];
  __orderStatusName = orderStatusName;
  __orderStatusName_isset = YES;
}

- (BOOL) orderStatusNameIsSet {
  return __orderStatusName_isset;
}

- (void) unsetOrderStatusName {
  [__orderStatusName release_stub];
  __orderStatusName = nil;
  __orderStatusName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoneNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPapersNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPapersType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMedDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSymptom: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGenerateTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOutTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHasSent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCardNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMarkNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 26:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 27:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientHead: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 28:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 29:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStopExplain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 30:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsSymptomCommit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 31:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDisease: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 32:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            NXTFExtItem *_elem22 = [[NXTFExtItem alloc] init];
            [_elem22 read: inProtocol];
            [fieldValue addObject: _elem22];
            [_elem22 release_stub];
          }
          [inProtocol readListEnd];
          [self setExtItems: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 33:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSumFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 34:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPubFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 35:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDiscount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 36:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCheckInStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 37:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRelationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 38:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBarCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 39:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPointName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 40:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsNeedPay: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 41:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 42:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsStInsPaid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 43:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDrId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 44:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTimRoomNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 45:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderStatusName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRegResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    if (__orderId != nil) {
      [outProtocol writeFieldBeginWithName: @"orderId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __orderId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderNo_isset) {
    if (__orderNo != nil) {
      [outProtocol writeFieldBeginWithName: @"orderNo" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __orderNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regId_isset) {
    if (__regId != nil) {
      [outProtocol writeFieldBeginWithName: @"regId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __regId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regNo_isset) {
    if (__regNo != nil) {
      [outProtocol writeFieldBeginWithName: @"regNo" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __regNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    if (__patientId != nil) {
      [outProtocol writeFieldBeginWithName: @"patientId" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __patientId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientName_isset) {
    if (__patientName != nil) {
      [outProtocol writeFieldBeginWithName: @"patientName" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __patientName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phoneNo_isset) {
    if (__phoneNo != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneNo" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __phoneNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__papersNo_isset) {
    if (__papersNo != nil) {
      [outProtocol writeFieldBeginWithName: @"papersNo" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __papersNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__papersType_isset) {
    if (__papersType != nil) {
      [outProtocol writeFieldBeginWithName: @"papersType" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __papersType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    if (__gender != nil) {
      [outProtocol writeFieldBeginWithName: @"gender" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __gender];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    if (__hospId != nil) {
      [outProtocol writeFieldBeginWithName: @"hospId" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __hospId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospName_isset) {
    if (__hospName != nil) {
      [outProtocol writeFieldBeginWithName: @"hospName" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __hospName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptName_isset) {
    if (__deptName != nil) {
      [outProtocol writeFieldBeginWithName: @"deptName" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __deptName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptId_isset) {
    if (__deptId != nil) {
      [outProtocol writeFieldBeginWithName: @"deptId" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __deptId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drName_isset) {
    if (__drName != nil) {
      [outProtocol writeFieldBeginWithName: @"drName" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __drName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__medDate_isset) {
    if (__medDate != nil) {
      [outProtocol writeFieldBeginWithName: @"medDate" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __medDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__symptom_isset) {
    if (__symptom != nil) {
      [outProtocol writeFieldBeginWithName: @"symptom" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __symptom];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fee_isset) {
    if (__fee != nil) {
      [outProtocol writeFieldBeginWithName: @"fee" type: TType_STRING fieldID: 19];
      [outProtocol writeString: __fee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderStatus_isset) {
    if (__orderStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"orderStatus" type: TType_STRING fieldID: 20];
      [outProtocol writeString: __orderStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__generateTime_isset) {
    if (__generateTime != nil) {
      [outProtocol writeFieldBeginWithName: @"generateTime" type: TType_STRING fieldID: 21];
      [outProtocol writeString: __generateTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__outTime_isset) {
    if (__outTime != nil) {
      [outProtocol writeFieldBeginWithName: @"outTime" type: TType_STRING fieldID: 22];
      [outProtocol writeString: __outTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hasSent_isset) {
    [outProtocol writeFieldBeginWithName: @"hasSent" type: TType_I32 fieldID: 23];
    [outProtocol writeI32: __hasSent];
    [outProtocol writeFieldEnd];
  }
  if (__cardNo_isset) {
    if (__cardNo != nil) {
      [outProtocol writeFieldBeginWithName: @"cardNo" type: TType_STRING fieldID: 24];
      [outProtocol writeString: __cardNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__markNo_isset) {
    if (__markNo != nil) {
      [outProtocol writeFieldBeginWithName: @"markNo" type: TType_STRING fieldID: 25];
      [outProtocol writeString: __markNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceCode_isset) {
    if (__serviceCode != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceCode" type: TType_STRING fieldID: 26];
      [outProtocol writeString: __serviceCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientHead_isset) {
    if (__patientHead != nil) {
      [outProtocol writeFieldBeginWithName: @"patientHead" type: TType_STRING fieldID: 27];
      [outProtocol writeString: __patientHead];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regStatus_isset) {
    if (__regStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"regStatus" type: TType_STRING fieldID: 28];
      [outProtocol writeString: __regStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stopExplain_isset) {
    if (__stopExplain != nil) {
      [outProtocol writeFieldBeginWithName: @"stopExplain" type: TType_STRING fieldID: 29];
      [outProtocol writeString: __stopExplain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isSymptomCommit_isset) {
    [outProtocol writeFieldBeginWithName: @"isSymptomCommit" type: TType_I32 fieldID: 30];
    [outProtocol writeI32: __isSymptomCommit];
    [outProtocol writeFieldEnd];
  }
  if (__disease_isset) {
    if (__disease != nil) {
      [outProtocol writeFieldBeginWithName: @"disease" type: TType_STRING fieldID: 31];
      [outProtocol writeString: __disease];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extItems_isset) {
    if (__extItems != nil) {
      [outProtocol writeFieldBeginWithName: @"extItems" type: TType_LIST fieldID: 32];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__extItems count]];
        int idx24;
        for (idx24 = 0; idx24 < [__extItems count]; idx24++)
        {
          [[__extItems objectAtIndex: idx24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__sumFee_isset) {
    if (__sumFee != nil) {
      [outProtocol writeFieldBeginWithName: @"sumFee" type: TType_STRING fieldID: 33];
      [outProtocol writeString: __sumFee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pubFee_isset) {
    if (__pubFee != nil) {
      [outProtocol writeFieldBeginWithName: @"pubFee" type: TType_STRING fieldID: 34];
      [outProtocol writeString: __pubFee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__discount_isset) {
    if (__discount != nil) {
      [outProtocol writeFieldBeginWithName: @"discount" type: TType_STRING fieldID: 35];
      [outProtocol writeString: __discount];
      [outProtocol writeFieldEnd];
    }
  }
  if (__checkInStatus_isset) {
    if (__checkInStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"checkInStatus" type: TType_STRING fieldID: 36];
      [outProtocol writeString: __checkInStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__relationId_isset) {
    if (__relationId != nil) {
      [outProtocol writeFieldBeginWithName: @"relationId" type: TType_STRING fieldID: 37];
      [outProtocol writeString: __relationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__barCode_isset) {
    if (__barCode != nil) {
      [outProtocol writeFieldBeginWithName: @"barCode" type: TType_STRING fieldID: 38];
      [outProtocol writeString: __barCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pointName_isset) {
    if (__pointName != nil) {
      [outProtocol writeFieldBeginWithName: @"pointName" type: TType_STRING fieldID: 39];
      [outProtocol writeString: __pointName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isNeedPay_isset) {
    [outProtocol writeFieldBeginWithName: @"isNeedPay" type: TType_I32 fieldID: 40];
    [outProtocol writeI32: __isNeedPay];
    [outProtocol writeFieldEnd];
  }
  if (__regType_isset) {
    if (__regType != nil) {
      [outProtocol writeFieldBeginWithName: @"regType" type: TType_STRING fieldID: 41];
      [outProtocol writeString: __regType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isStInsPaid_isset) {
    [outProtocol writeFieldBeginWithName: @"isStInsPaid" type: TType_I32 fieldID: 42];
    [outProtocol writeI32: __isStInsPaid];
    [outProtocol writeFieldEnd];
  }
  if (__drId_isset) {
    [outProtocol writeFieldBeginWithName: @"drId" type: TType_I64 fieldID: 43];
    [outProtocol writeI64: __drId];
    [outProtocol writeFieldEnd];
  }
  if (__timRoomNo_isset) {
    [outProtocol writeFieldBeginWithName: @"timRoomNo" type: TType_I32 fieldID: 44];
    [outProtocol writeI32: __timRoomNo];
    [outProtocol writeFieldEnd];
  }
  if (__orderStatusName_isset) {
    if (__orderStatusName != nil) {
      [outProtocol writeFieldBeginWithName: @"orderStatusName" type: TType_STRING fieldID: 45];
      [outProtocol writeString: __orderStatusName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetRegResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"\"%@\"", __orderId];
  [ms appendString: @",orderNo:"];
  [ms appendFormat: @"\"%@\"", __orderNo];
  [ms appendString: @",regId:"];
  [ms appendFormat: @"\"%@\"", __regId];
  [ms appendString: @",regNo:"];
  [ms appendFormat: @"\"%@\"", __regNo];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"\"%@\"", __patientId];
  [ms appendString: @",patientName:"];
  [ms appendFormat: @"\"%@\"", __patientName];
  [ms appendString: @",phoneNo:"];
  [ms appendFormat: @"\"%@\"", __phoneNo];
  [ms appendString: @",papersNo:"];
  [ms appendFormat: @"\"%@\"", __papersNo];
  [ms appendString: @",papersType:"];
  [ms appendFormat: @"\"%@\"", __papersType];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"\"%@\"", __gender];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"\"%@\"", __hospId];
  [ms appendString: @",hospName:"];
  [ms appendFormat: @"\"%@\"", __hospName];
  [ms appendString: @",deptName:"];
  [ms appendFormat: @"\"%@\"", __deptName];
  [ms appendString: @",deptId:"];
  [ms appendFormat: @"\"%@\"", __deptId];
  [ms appendString: @",drName:"];
  [ms appendFormat: @"\"%@\"", __drName];
  [ms appendString: @",medDate:"];
  [ms appendFormat: @"\"%@\"", __medDate];
  [ms appendString: @",symptom:"];
  [ms appendFormat: @"\"%@\"", __symptom];
  [ms appendString: @",fee:"];
  [ms appendFormat: @"\"%@\"", __fee];
  [ms appendString: @",orderStatus:"];
  [ms appendFormat: @"\"%@\"", __orderStatus];
  [ms appendString: @",generateTime:"];
  [ms appendFormat: @"\"%@\"", __generateTime];
  [ms appendString: @",outTime:"];
  [ms appendFormat: @"\"%@\"", __outTime];
  [ms appendString: @",hasSent:"];
  [ms appendFormat: @"%i", __hasSent];
  [ms appendString: @",cardNo:"];
  [ms appendFormat: @"\"%@\"", __cardNo];
  [ms appendString: @",markNo:"];
  [ms appendFormat: @"\"%@\"", __markNo];
  [ms appendString: @",serviceCode:"];
  [ms appendFormat: @"\"%@\"", __serviceCode];
  [ms appendString: @",patientHead:"];
  [ms appendFormat: @"\"%@\"", __patientHead];
  [ms appendString: @",regStatus:"];
  [ms appendFormat: @"\"%@\"", __regStatus];
  [ms appendString: @",stopExplain:"];
  [ms appendFormat: @"\"%@\"", __stopExplain];
  [ms appendString: @",isSymptomCommit:"];
  [ms appendFormat: @"%i", __isSymptomCommit];
  [ms appendString: @",disease:"];
  [ms appendFormat: @"\"%@\"", __disease];
  [ms appendString: @",extItems:"];
  [ms appendFormat: @"%@", __extItems];
  [ms appendString: @",sumFee:"];
  [ms appendFormat: @"\"%@\"", __sumFee];
  [ms appendString: @",pubFee:"];
  [ms appendFormat: @"\"%@\"", __pubFee];
  [ms appendString: @",discount:"];
  [ms appendFormat: @"\"%@\"", __discount];
  [ms appendString: @",checkInStatus:"];
  [ms appendFormat: @"\"%@\"", __checkInStatus];
  [ms appendString: @",relationId:"];
  [ms appendFormat: @"\"%@\"", __relationId];
  [ms appendString: @",barCode:"];
  [ms appendFormat: @"\"%@\"", __barCode];
  [ms appendString: @",pointName:"];
  [ms appendFormat: @"\"%@\"", __pointName];
  [ms appendString: @",isNeedPay:"];
  [ms appendFormat: @"%i", __isNeedPay];
  [ms appendString: @",regType:"];
  [ms appendFormat: @"\"%@\"", __regType];
  [ms appendString: @",isStInsPaid:"];
  [ms appendFormat: @"%i", __isStInsPaid];
  [ms appendString: @",drId:"];
  [ms appendFormat: @"%qi", __drId];
  [ms appendString: @",timRoomNo:"];
  [ms appendFormat: @"%i", __timRoomNo];
  [ms appendString: @",orderStatusName:"];
  [ms appendFormat: @"\"%@\"", __orderStatusName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetHospMapsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.hospitalMaps = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header hospitalMaps: (NSMutableArray *) hospitalMaps
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospitalMaps = [hospitalMaps retain_stub];
  __hospitalMaps_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospitalMaps"])
  {
    __hospitalMaps = [[decoder decodeObjectForKey: @"hospitalMaps"] retain_stub];
    __hospitalMaps_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospitalMaps_isset)
  {
    [encoder encodeObject: __hospitalMaps forKey: @"hospitalMaps"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospitalMaps_isset ? 2654435761 : 0;
  if (__hospitalMaps_isset)
  {
    hash = (hash * 31) ^ [__hospitalMaps hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetHospMapsResp class]]) {
    return NO;
  }
  NXTFGetHospMapsResp *other = (NXTFGetHospMapsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospitalMaps_isset != other->__hospitalMaps_isset) ||
      (__hospitalMaps_isset && ((__hospitalMaps || other->__hospitalMaps) && ![__hospitalMaps isEqual:other->__hospitalMaps]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__hospitalMaps release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) hospitalMaps {
  return [[__hospitalMaps retain_stub] autorelease_stub];
}

- (void) setHospitalMaps: (NSMutableArray *) hospitalMaps {
  [hospitalMaps retain_stub];
  [__hospitalMaps release_stub];
  __hospitalMaps = hospitalMaps;
  __hospitalMaps_isset = YES;
}

- (BOOL) hospitalMapsIsSet {
  return __hospitalMaps_isset;
}

- (void) unsetHospitalMaps {
  [__hospitalMaps release_stub];
  __hospitalMaps = nil;
  __hospitalMaps_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size25;
          [inProtocol readListBeginReturningElementType: NULL size: &_size25];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            NXTFHospMapDto *_elem27 = [[NXTFHospMapDto alloc] init];
            [_elem27 read: inProtocol];
            [fieldValue addObject: _elem27];
            [_elem27 release_stub];
          }
          [inProtocol readListEnd];
          [self setHospitalMaps: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetHospMapsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospitalMaps_isset) {
    if (__hospitalMaps != nil) {
      [outProtocol writeFieldBeginWithName: @"hospitalMaps" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__hospitalMaps count]];
        int idx29;
        for (idx29 = 0; idx29 < [__hospitalMaps count]; idx29++)
        {
          [[__hospitalMaps objectAtIndex: idx29] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetHospMapsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospitalMaps:"];
  [ms appendFormat: @"%@", __hospitalMaps];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFavorDrResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header favorCount: (int32_t) favorCount
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __favorCount = favorCount;
  __favorCount_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"favorCount"])
  {
    __favorCount = [decoder decodeInt32ForKey: @"favorCount"];
    __favorCount_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__favorCount_isset)
  {
    [encoder encodeInt32: __favorCount forKey: @"favorCount"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __favorCount_isset ? 2654435761 : 0;
  if (__favorCount_isset)
  {
    hash = (hash * 31) ^ [@(__favorCount) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFavorDrResp class]]) {
    return NO;
  }
  NXTFFavorDrResp *other = (NXTFFavorDrResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__favorCount_isset != other->__favorCount_isset) ||
      (__favorCount_isset && (__favorCount != other->__favorCount))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) favorCount {
  return __favorCount;
}

- (void) setFavorCount: (int32_t) favorCount {
  __favorCount = favorCount;
  __favorCount_isset = YES;
}

- (BOOL) favorCountIsSet {
  return __favorCount_isset;
}

- (void) unsetFavorCount {
  __favorCount_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFavorCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FavorDrResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__favorCount_isset) {
    [outProtocol writeFieldBeginWithName: @"favorCount" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __favorCount];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFavorDrResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",favorCount:"];
  [ms appendFormat: @"%i", __favorCount];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFavorHospResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header favorCount: (int32_t) favorCount
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __favorCount = favorCount;
  __favorCount_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"favorCount"])
  {
    __favorCount = [decoder decodeInt32ForKey: @"favorCount"];
    __favorCount_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__favorCount_isset)
  {
    [encoder encodeInt32: __favorCount forKey: @"favorCount"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __favorCount_isset ? 2654435761 : 0;
  if (__favorCount_isset)
  {
    hash = (hash * 31) ^ [@(__favorCount) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFavorHospResp class]]) {
    return NO;
  }
  NXTFFavorHospResp *other = (NXTFFavorHospResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__favorCount_isset != other->__favorCount_isset) ||
      (__favorCount_isset && (__favorCount != other->__favorCount))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) favorCount {
  return __favorCount;
}

- (void) setFavorCount: (int32_t) favorCount {
  __favorCount = favorCount;
  __favorCount_isset = YES;
}

- (BOOL) favorCountIsSet {
  return __favorCount_isset;
}

- (void) unsetFavorCount {
  __favorCount_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFavorCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FavorHospResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__favorCount_isset) {
    [outProtocol writeFieldBeginWithName: @"favorCount" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __favorCount];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFavorHospResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",favorCount:"];
  [ms appendFormat: @"%i", __favorCount];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFavorDiseaseResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header favorCount: (int32_t) favorCount
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __favorCount = favorCount;
  __favorCount_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"favorCount"])
  {
    __favorCount = [decoder decodeInt32ForKey: @"favorCount"];
    __favorCount_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__favorCount_isset)
  {
    [encoder encodeInt32: __favorCount forKey: @"favorCount"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __favorCount_isset ? 2654435761 : 0;
  if (__favorCount_isset)
  {
    hash = (hash * 31) ^ [@(__favorCount) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFavorDiseaseResp class]]) {
    return NO;
  }
  NXTFFavorDiseaseResp *other = (NXTFFavorDiseaseResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__favorCount_isset != other->__favorCount_isset) ||
      (__favorCount_isset && (__favorCount != other->__favorCount))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) favorCount {
  return __favorCount;
}

- (void) setFavorCount: (int32_t) favorCount {
  __favorCount = favorCount;
  __favorCount_isset = YES;
}

- (BOOL) favorCountIsSet {
  return __favorCount_isset;
}

- (void) unsetFavorCount {
  __favorCount_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFavorCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FavorDiseaseResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__favorCount_isset) {
    [outProtocol writeFieldBeginWithName: @"favorCount" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __favorCount];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFavorDiseaseResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",favorCount:"];
  [ms appendFormat: @"%i", __favorCount];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetFavorDrsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.favorDrs = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header favorDrs: (NSMutableArray *) favorDrs page: (NXTFPage *) page
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __favorDrs = [favorDrs retain_stub];
  __favorDrs_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"favorDrs"])
  {
    __favorDrs = [[decoder decodeObjectForKey: @"favorDrs"] retain_stub];
    __favorDrs_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__favorDrs_isset)
  {
    [encoder encodeObject: __favorDrs forKey: @"favorDrs"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __favorDrs_isset ? 2654435761 : 0;
  if (__favorDrs_isset)
  {
    hash = (hash * 31) ^ [__favorDrs hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetFavorDrsResp class]]) {
    return NO;
  }
  NXTFGetFavorDrsResp *other = (NXTFGetFavorDrsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__favorDrs_isset != other->__favorDrs_isset) ||
      (__favorDrs_isset && ((__favorDrs || other->__favorDrs) && ![__favorDrs isEqual:other->__favorDrs]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__favorDrs release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) favorDrs {
  return [[__favorDrs retain_stub] autorelease_stub];
}

- (void) setFavorDrs: (NSMutableArray *) favorDrs {
  [favorDrs retain_stub];
  [__favorDrs release_stub];
  __favorDrs = favorDrs;
  __favorDrs_isset = YES;
}

- (BOOL) favorDrsIsSet {
  return __favorDrs_isset;
}

- (void) unsetFavorDrs {
  [__favorDrs release_stub];
  __favorDrs = nil;
  __favorDrs_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size30;
          [inProtocol readListBeginReturningElementType: NULL size: &_size30];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size30];
          int _i31;
          for (_i31 = 0; _i31 < _size30; ++_i31)
          {
            NXTFDoctorDto *_elem32 = [[NXTFDoctorDto alloc] init];
            [_elem32 read: inProtocol];
            [fieldValue addObject: _elem32];
            [_elem32 release_stub];
          }
          [inProtocol readListEnd];
          [self setFavorDrs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFavorDrsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__favorDrs_isset) {
    if (__favorDrs != nil) {
      [outProtocol writeFieldBeginWithName: @"favorDrs" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__favorDrs count]];
        int idx34;
        for (idx34 = 0; idx34 < [__favorDrs count]; idx34++)
        {
          [[__favorDrs objectAtIndex: idx34] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 3];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetFavorDrsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",favorDrs:"];
  [ms appendFormat: @"%@", __favorDrs];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetFavorHospsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.favorHosps = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header favorHosps: (NSMutableArray *) favorHosps page: (NXTFPage *) page
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __favorHosps = [favorHosps retain_stub];
  __favorHosps_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"favorHosps"])
  {
    __favorHosps = [[decoder decodeObjectForKey: @"favorHosps"] retain_stub];
    __favorHosps_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__favorHosps_isset)
  {
    [encoder encodeObject: __favorHosps forKey: @"favorHosps"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __favorHosps_isset ? 2654435761 : 0;
  if (__favorHosps_isset)
  {
    hash = (hash * 31) ^ [__favorHosps hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetFavorHospsResp class]]) {
    return NO;
  }
  NXTFGetFavorHospsResp *other = (NXTFGetFavorHospsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__favorHosps_isset != other->__favorHosps_isset) ||
      (__favorHosps_isset && ((__favorHosps || other->__favorHosps) && ![__favorHosps isEqual:other->__favorHosps]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__favorHosps release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) favorHosps {
  return [[__favorHosps retain_stub] autorelease_stub];
}

- (void) setFavorHosps: (NSMutableArray *) favorHosps {
  [favorHosps retain_stub];
  [__favorHosps release_stub];
  __favorHosps = favorHosps;
  __favorHosps_isset = YES;
}

- (BOOL) favorHospsIsSet {
  return __favorHosps_isset;
}

- (void) unsetFavorHosps {
  [__favorHosps release_stub];
  __favorHosps = nil;
  __favorHosps_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size35;
          [inProtocol readListBeginReturningElementType: NULL size: &_size35];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size35];
          int _i36;
          for (_i36 = 0; _i36 < _size35; ++_i36)
          {
            NXTFHospDto *_elem37 = [[NXTFHospDto alloc] init];
            [_elem37 read: inProtocol];
            [fieldValue addObject: _elem37];
            [_elem37 release_stub];
          }
          [inProtocol readListEnd];
          [self setFavorHosps: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFavorHospsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__favorHosps_isset) {
    if (__favorHosps != nil) {
      [outProtocol writeFieldBeginWithName: @"favorHosps" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__favorHosps count]];
        int idx39;
        for (idx39 = 0; idx39 < [__favorHosps count]; idx39++)
        {
          [[__favorHosps objectAtIndex: idx39] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 3];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetFavorHospsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",favorHosps:"];
  [ms appendFormat: @"%@", __favorHosps];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetFavorDiseasesResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.favorDiseases = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header favorDiseases: (NSMutableArray *) favorDiseases
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __favorDiseases = [favorDiseases retain_stub];
  __favorDiseases_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"favorDiseases"])
  {
    __favorDiseases = [[decoder decodeObjectForKey: @"favorDiseases"] retain_stub];
    __favorDiseases_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__favorDiseases_isset)
  {
    [encoder encodeObject: __favorDiseases forKey: @"favorDiseases"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __favorDiseases_isset ? 2654435761 : 0;
  if (__favorDiseases_isset)
  {
    hash = (hash * 31) ^ [__favorDiseases hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetFavorDiseasesResp class]]) {
    return NO;
  }
  NXTFGetFavorDiseasesResp *other = (NXTFGetFavorDiseasesResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__favorDiseases_isset != other->__favorDiseases_isset) ||
      (__favorDiseases_isset && ((__favorDiseases || other->__favorDiseases) && ![__favorDiseases isEqual:other->__favorDiseases]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__favorDiseases release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) favorDiseases {
  return [[__favorDiseases retain_stub] autorelease_stub];
}

- (void) setFavorDiseases: (NSMutableArray *) favorDiseases {
  [favorDiseases retain_stub];
  [__favorDiseases release_stub];
  __favorDiseases = favorDiseases;
  __favorDiseases_isset = YES;
}

- (BOOL) favorDiseasesIsSet {
  return __favorDiseases_isset;
}

- (void) unsetFavorDiseases {
  [__favorDiseases release_stub];
  __favorDiseases = nil;
  __favorDiseases_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size40;
          [inProtocol readListBeginReturningElementType: NULL size: &_size40];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size40];
          int _i41;
          for (_i41 = 0; _i41 < _size40; ++_i41)
          {
            NXTFDiseaseDto *_elem42 = [[NXTFDiseaseDto alloc] init];
            [_elem42 read: inProtocol];
            [fieldValue addObject: _elem42];
            [_elem42 release_stub];
          }
          [inProtocol readListEnd];
          [self setFavorDiseases: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFavorDiseasesResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__favorDiseases_isset) {
    if (__favorDiseases != nil) {
      [outProtocol writeFieldBeginWithName: @"favorDiseases" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__favorDiseases count]];
        int idx44;
        for (idx44 = 0; idx44 < [__favorDiseases count]; idx44++)
        {
          [[__favorDiseases objectAtIndex: idx44] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetFavorDiseasesResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",favorDiseases:"];
  [ms appendFormat: @"%@", __favorDiseases];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetNoticeResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header notice: (NSString *) notice
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __notice = [notice retain_stub];
  __notice_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"notice"])
  {
    __notice = [[decoder decodeObjectForKey: @"notice"] retain_stub];
    __notice_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__notice_isset)
  {
    [encoder encodeObject: __notice forKey: @"notice"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __notice_isset ? 2654435761 : 0;
  if (__notice_isset)
  {
    hash = (hash * 31) ^ [__notice hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetNoticeResp class]]) {
    return NO;
  }
  NXTFGetNoticeResp *other = (NXTFGetNoticeResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__notice_isset != other->__notice_isset) ||
      (__notice_isset && ((__notice || other->__notice) && ![__notice isEqual:other->__notice]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__notice release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) notice {
  return [[__notice retain_stub] autorelease_stub];
}

- (void) setNotice: (NSString *) notice {
  [notice retain_stub];
  [__notice release_stub];
  __notice = notice;
  __notice_isset = YES;
}

- (BOOL) noticeIsSet {
  return __notice_isset;
}

- (void) unsetNotice {
  [__notice release_stub];
  __notice = nil;
  __notice_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNotice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetNoticeResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__notice_isset) {
    if (__notice != nil) {
      [outProtocol writeFieldBeginWithName: @"notice" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __notice];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetNoticeResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",notice:"];
  [ms appendFormat: @"\"%@\"", __notice];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFQueryPatientsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.patients = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header patients: (NSMutableArray *) patients
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patients = [patients retain_stub];
  __patients_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patients"])
  {
    __patients = [[decoder decodeObjectForKey: @"patients"] retain_stub];
    __patients_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patients_isset)
  {
    [encoder encodeObject: __patients forKey: @"patients"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patients_isset ? 2654435761 : 0;
  if (__patients_isset)
  {
    hash = (hash * 31) ^ [__patients hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFQueryPatientsResp class]]) {
    return NO;
  }
  NXTFQueryPatientsResp *other = (NXTFQueryPatientsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patients_isset != other->__patients_isset) ||
      (__patients_isset && ((__patients || other->__patients) && ![__patients isEqual:other->__patients]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__patients release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) patients {
  return [[__patients retain_stub] autorelease_stub];
}

- (void) setPatients: (NSMutableArray *) patients {
  [patients retain_stub];
  [__patients release_stub];
  __patients = patients;
  __patients_isset = YES;
}

- (BOOL) patientsIsSet {
  return __patients_isset;
}

- (void) unsetPatients {
  [__patients release_stub];
  __patients = nil;
  __patients_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size45;
          [inProtocol readListBeginReturningElementType: NULL size: &_size45];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size45];
          int _i46;
          for (_i46 = 0; _i46 < _size45; ++_i46)
          {
            NXTFPatientDto *_elem47 = [[NXTFPatientDto alloc] init];
            [_elem47 read: inProtocol];
            [fieldValue addObject: _elem47];
            [_elem47 release_stub];
          }
          [inProtocol readListEnd];
          [self setPatients: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryPatientsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patients_isset) {
    if (__patients != nil) {
      [outProtocol writeFieldBeginWithName: @"patients" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__patients count]];
        int idx49;
        for (idx49 = 0; idx49 < [__patients count]; idx49++)
        {
          [[__patients objectAtIndex: idx49] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFQueryPatientsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patients:"];
  [ms appendFormat: @"%@", __patients];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFBindMedCardResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header cardNo: (NSString *) cardNo balance: (NSString *) balance limits: (NSString *) limits createTime: (NSString *) createTime
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __cardNo = [cardNo retain_stub];
  __cardNo_isset = YES;
  __balance = [balance retain_stub];
  __balance_isset = YES;
  __limits = [limits retain_stub];
  __limits_isset = YES;
  __createTime = [createTime retain_stub];
  __createTime_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardNo"])
  {
    __cardNo = [[decoder decodeObjectForKey: @"cardNo"] retain_stub];
    __cardNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"balance"])
  {
    __balance = [[decoder decodeObjectForKey: @"balance"] retain_stub];
    __balance_isset = YES;
  }
  if ([decoder containsValueForKey: @"limits"])
  {
    __limits = [[decoder decodeObjectForKey: @"limits"] retain_stub];
    __limits_isset = YES;
  }
  if ([decoder containsValueForKey: @"createTime"])
  {
    __createTime = [[decoder decodeObjectForKey: @"createTime"] retain_stub];
    __createTime_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__cardNo_isset)
  {
    [encoder encodeObject: __cardNo forKey: @"cardNo"];
  }
  if (__balance_isset)
  {
    [encoder encodeObject: __balance forKey: @"balance"];
  }
  if (__limits_isset)
  {
    [encoder encodeObject: __limits forKey: @"limits"];
  }
  if (__createTime_isset)
  {
    [encoder encodeObject: __createTime forKey: @"createTime"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __cardNo_isset ? 2654435761 : 0;
  if (__cardNo_isset)
  {
    hash = (hash * 31) ^ [__cardNo hash];
  }
  hash = (hash * 31) ^ __balance_isset ? 2654435761 : 0;
  if (__balance_isset)
  {
    hash = (hash * 31) ^ [__balance hash];
  }
  hash = (hash * 31) ^ __limits_isset ? 2654435761 : 0;
  if (__limits_isset)
  {
    hash = (hash * 31) ^ [__limits hash];
  }
  hash = (hash * 31) ^ __createTime_isset ? 2654435761 : 0;
  if (__createTime_isset)
  {
    hash = (hash * 31) ^ [__createTime hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFBindMedCardResp class]]) {
    return NO;
  }
  NXTFBindMedCardResp *other = (NXTFBindMedCardResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__cardNo_isset != other->__cardNo_isset) ||
      (__cardNo_isset && ((__cardNo || other->__cardNo) && ![__cardNo isEqual:other->__cardNo]))) {
    return NO;
  }
  if ((__balance_isset != other->__balance_isset) ||
      (__balance_isset && ((__balance || other->__balance) && ![__balance isEqual:other->__balance]))) {
    return NO;
  }
  if ((__limits_isset != other->__limits_isset) ||
      (__limits_isset && ((__limits || other->__limits) && ![__limits isEqual:other->__limits]))) {
    return NO;
  }
  if ((__createTime_isset != other->__createTime_isset) ||
      (__createTime_isset && ((__createTime || other->__createTime) && ![__createTime isEqual:other->__createTime]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__cardNo release_stub];
  [__balance release_stub];
  [__limits release_stub];
  [__createTime release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) cardNo {
  return [[__cardNo retain_stub] autorelease_stub];
}

- (void) setCardNo: (NSString *) cardNo {
  [cardNo retain_stub];
  [__cardNo release_stub];
  __cardNo = cardNo;
  __cardNo_isset = YES;
}

- (BOOL) cardNoIsSet {
  return __cardNo_isset;
}

- (void) unsetCardNo {
  [__cardNo release_stub];
  __cardNo = nil;
  __cardNo_isset = NO;
}

- (NSString *) balance {
  return [[__balance retain_stub] autorelease_stub];
}

- (void) setBalance: (NSString *) balance {
  [balance retain_stub];
  [__balance release_stub];
  __balance = balance;
  __balance_isset = YES;
}

- (BOOL) balanceIsSet {
  return __balance_isset;
}

- (void) unsetBalance {
  [__balance release_stub];
  __balance = nil;
  __balance_isset = NO;
}

- (NSString *) limits {
  return [[__limits retain_stub] autorelease_stub];
}

- (void) setLimits: (NSString *) limits {
  [limits retain_stub];
  [__limits release_stub];
  __limits = limits;
  __limits_isset = YES;
}

- (BOOL) limitsIsSet {
  return __limits_isset;
}

- (void) unsetLimits {
  [__limits release_stub];
  __limits = nil;
  __limits_isset = NO;
}

- (NSString *) createTime {
  return [[__createTime retain_stub] autorelease_stub];
}

- (void) setCreateTime: (NSString *) createTime {
  [createTime retain_stub];
  [__createTime release_stub];
  __createTime = createTime;
  __createTime_isset = YES;
}

- (BOOL) createTimeIsSet {
  return __createTime_isset;
}

- (void) unsetCreateTime {
  [__createTime release_stub];
  __createTime = nil;
  __createTime_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCardNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBalance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLimits: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreateTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BindMedCardResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cardNo_isset) {
    if (__cardNo != nil) {
      [outProtocol writeFieldBeginWithName: @"cardNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __cardNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__balance_isset) {
    if (__balance != nil) {
      [outProtocol writeFieldBeginWithName: @"balance" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __balance];
      [outProtocol writeFieldEnd];
    }
  }
  if (__limits_isset) {
    if (__limits != nil) {
      [outProtocol writeFieldBeginWithName: @"limits" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __limits];
      [outProtocol writeFieldEnd];
    }
  }
  if (__createTime_isset) {
    if (__createTime != nil) {
      [outProtocol writeFieldBeginWithName: @"createTime" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __createTime];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFBindMedCardResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",cardNo:"];
  [ms appendFormat: @"\"%@\"", __cardNo];
  [ms appendString: @",balance:"];
  [ms appendFormat: @"\"%@\"", __balance];
  [ms appendString: @",limits:"];
  [ms appendFormat: @"\"%@\"", __limits];
  [ms appendString: @",createTime:"];
  [ms appendFormat: @"\"%@\"", __createTime];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetMedCardsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.medCards = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

  self.inpatientCards = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header medCards: (NSMutableArray *) medCards inpatientCards: (NSMutableArray *) inpatientCards
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __medCards = [medCards retain_stub];
  __medCards_isset = YES;
  __inpatientCards = [inpatientCards retain_stub];
  __inpatientCards_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"medCards"])
  {
    __medCards = [[decoder decodeObjectForKey: @"medCards"] retain_stub];
    __medCards_isset = YES;
  }
  if ([decoder containsValueForKey: @"inpatientCards"])
  {
    __inpatientCards = [[decoder decodeObjectForKey: @"inpatientCards"] retain_stub];
    __inpatientCards_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__medCards_isset)
  {
    [encoder encodeObject: __medCards forKey: @"medCards"];
  }
  if (__inpatientCards_isset)
  {
    [encoder encodeObject: __inpatientCards forKey: @"inpatientCards"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __medCards_isset ? 2654435761 : 0;
  if (__medCards_isset)
  {
    hash = (hash * 31) ^ [__medCards hash];
  }
  hash = (hash * 31) ^ __inpatientCards_isset ? 2654435761 : 0;
  if (__inpatientCards_isset)
  {
    hash = (hash * 31) ^ [__inpatientCards hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetMedCardsResp class]]) {
    return NO;
  }
  NXTFGetMedCardsResp *other = (NXTFGetMedCardsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__medCards_isset != other->__medCards_isset) ||
      (__medCards_isset && ((__medCards || other->__medCards) && ![__medCards isEqual:other->__medCards]))) {
    return NO;
  }
  if ((__inpatientCards_isset != other->__inpatientCards_isset) ||
      (__inpatientCards_isset && ((__inpatientCards || other->__inpatientCards) && ![__inpatientCards isEqual:other->__inpatientCards]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__medCards release_stub];
  [__inpatientCards release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) medCards {
  return [[__medCards retain_stub] autorelease_stub];
}

- (void) setMedCards: (NSMutableArray *) medCards {
  [medCards retain_stub];
  [__medCards release_stub];
  __medCards = medCards;
  __medCards_isset = YES;
}

- (BOOL) medCardsIsSet {
  return __medCards_isset;
}

- (void) unsetMedCards {
  [__medCards release_stub];
  __medCards = nil;
  __medCards_isset = NO;
}

- (NSMutableArray *) inpatientCards {
  return [[__inpatientCards retain_stub] autorelease_stub];
}

- (void) setInpatientCards: (NSMutableArray *) inpatientCards {
  [inpatientCards retain_stub];
  [__inpatientCards release_stub];
  __inpatientCards = inpatientCards;
  __inpatientCards_isset = YES;
}

- (BOOL) inpatientCardsIsSet {
  return __inpatientCards_isset;
}

- (void) unsetInpatientCards {
  [__inpatientCards release_stub];
  __inpatientCards = nil;
  __inpatientCards_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size50;
          [inProtocol readListBeginReturningElementType: NULL size: &_size50];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size50];
          int _i51;
          for (_i51 = 0; _i51 < _size50; ++_i51)
          {
            NXTFMedCardDto *_elem52 = [[NXTFMedCardDto alloc] init];
            [_elem52 read: inProtocol];
            [fieldValue addObject: _elem52];
            [_elem52 release_stub];
          }
          [inProtocol readListEnd];
          [self setMedCards: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size53;
          [inProtocol readListBeginReturningElementType: NULL size: &_size53];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size53];
          int _i54;
          for (_i54 = 0; _i54 < _size53; ++_i54)
          {
            NXTFInpatientCardDto *_elem55 = [[NXTFInpatientCardDto alloc] init];
            [_elem55 read: inProtocol];
            [fieldValue addObject: _elem55];
            [_elem55 release_stub];
          }
          [inProtocol readListEnd];
          [self setInpatientCards: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMedCardsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__medCards_isset) {
    if (__medCards != nil) {
      [outProtocol writeFieldBeginWithName: @"medCards" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__medCards count]];
        int idx57;
        for (idx57 = 0; idx57 < [__medCards count]; idx57++)
        {
          [[__medCards objectAtIndex: idx57] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__inpatientCards_isset) {
    if (__inpatientCards != nil) {
      [outProtocol writeFieldBeginWithName: @"inpatientCards" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__inpatientCards count]];
        int idx59;
        for (idx59 = 0; idx59 < [__inpatientCards count]; idx59++)
        {
          [[__inpatientCards objectAtIndex: idx59] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetMedCardsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",medCards:"];
  [ms appendFormat: @"%@", __medCards];
  [ms appendString: @",inpatientCards:"];
  [ms appendFormat: @"%@", __inpatientCards];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetMedCardResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header medCard: (NXTFMedCardDto *) medCard
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __medCard = [medCard retain_stub];
  __medCard_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"medCard"])
  {
    __medCard = [[decoder decodeObjectForKey: @"medCard"] retain_stub];
    __medCard_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__medCard_isset)
  {
    [encoder encodeObject: __medCard forKey: @"medCard"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __medCard_isset ? 2654435761 : 0;
  if (__medCard_isset)
  {
    hash = (hash * 31) ^ [__medCard hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetMedCardResp class]]) {
    return NO;
  }
  NXTFGetMedCardResp *other = (NXTFGetMedCardResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__medCard_isset != other->__medCard_isset) ||
      (__medCard_isset && ((__medCard || other->__medCard) && ![__medCard isEqual:other->__medCard]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__medCard release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFMedCardDto *) medCard {
  return [[__medCard retain_stub] autorelease_stub];
}

- (void) setMedCard: (NXTFMedCardDto *) medCard {
  [medCard retain_stub];
  [__medCard release_stub];
  __medCard = medCard;
  __medCard_isset = YES;
}

- (BOOL) medCardIsSet {
  return __medCard_isset;
}

- (void) unsetMedCard {
  [__medCard release_stub];
  __medCard = nil;
  __medCard_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFMedCardDto *fieldValue = [[NXTFMedCardDto alloc] init];
          [fieldValue read: inProtocol];
          [self setMedCard: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMedCardResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__medCard_isset) {
    if (__medCard != nil) {
      [outProtocol writeFieldBeginWithName: @"medCard" type: TType_STRUCT fieldID: 2];
      [__medCard write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetMedCardResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",medCard:"];
  [ms appendFormat: @"%@", __medCard];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetDictDataResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.dictDatas = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header dictDatas: (NSMutableArray *) dictDatas medCardGuide: (NSString *) medCardGuide
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __dictDatas = [dictDatas retain_stub];
  __dictDatas_isset = YES;
  __medCardGuide = [medCardGuide retain_stub];
  __medCardGuide_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"dictDatas"])
  {
    __dictDatas = [[decoder decodeObjectForKey: @"dictDatas"] retain_stub];
    __dictDatas_isset = YES;
  }
  if ([decoder containsValueForKey: @"medCardGuide"])
  {
    __medCardGuide = [[decoder decodeObjectForKey: @"medCardGuide"] retain_stub];
    __medCardGuide_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__dictDatas_isset)
  {
    [encoder encodeObject: __dictDatas forKey: @"dictDatas"];
  }
  if (__medCardGuide_isset)
  {
    [encoder encodeObject: __medCardGuide forKey: @"medCardGuide"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __dictDatas_isset ? 2654435761 : 0;
  if (__dictDatas_isset)
  {
    hash = (hash * 31) ^ [__dictDatas hash];
  }
  hash = (hash * 31) ^ __medCardGuide_isset ? 2654435761 : 0;
  if (__medCardGuide_isset)
  {
    hash = (hash * 31) ^ [__medCardGuide hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetDictDataResp class]]) {
    return NO;
  }
  NXTFGetDictDataResp *other = (NXTFGetDictDataResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__dictDatas_isset != other->__dictDatas_isset) ||
      (__dictDatas_isset && ((__dictDatas || other->__dictDatas) && ![__dictDatas isEqual:other->__dictDatas]))) {
    return NO;
  }
  if ((__medCardGuide_isset != other->__medCardGuide_isset) ||
      (__medCardGuide_isset && ((__medCardGuide || other->__medCardGuide) && ![__medCardGuide isEqual:other->__medCardGuide]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__dictDatas release_stub];
  [__medCardGuide release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) dictDatas {
  return [[__dictDatas retain_stub] autorelease_stub];
}

- (void) setDictDatas: (NSMutableArray *) dictDatas {
  [dictDatas retain_stub];
  [__dictDatas release_stub];
  __dictDatas = dictDatas;
  __dictDatas_isset = YES;
}

- (BOOL) dictDatasIsSet {
  return __dictDatas_isset;
}

- (void) unsetDictDatas {
  [__dictDatas release_stub];
  __dictDatas = nil;
  __dictDatas_isset = NO;
}

- (NSString *) medCardGuide {
  return [[__medCardGuide retain_stub] autorelease_stub];
}

- (void) setMedCardGuide: (NSString *) medCardGuide {
  [medCardGuide retain_stub];
  [__medCardGuide release_stub];
  __medCardGuide = medCardGuide;
  __medCardGuide_isset = YES;
}

- (BOOL) medCardGuideIsSet {
  return __medCardGuide_isset;
}

- (void) unsetMedCardGuide {
  [__medCardGuide release_stub];
  __medCardGuide = nil;
  __medCardGuide_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size60;
          [inProtocol readListBeginReturningElementType: NULL size: &_size60];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size60];
          int _i61;
          for (_i61 = 0; _i61 < _size60; ++_i61)
          {
            NXTFDictData *_elem62 = [[NXTFDictData alloc] init];
            [_elem62 read: inProtocol];
            [fieldValue addObject: _elem62];
            [_elem62 release_stub];
          }
          [inProtocol readListEnd];
          [self setDictDatas: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMedCardGuide: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDictDataResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dictDatas_isset) {
    if (__dictDatas != nil) {
      [outProtocol writeFieldBeginWithName: @"dictDatas" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__dictDatas count]];
        int idx64;
        for (idx64 = 0; idx64 < [__dictDatas count]; idx64++)
        {
          [[__dictDatas objectAtIndex: idx64] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__medCardGuide_isset) {
    if (__medCardGuide != nil) {
      [outProtocol writeFieldBeginWithName: @"medCardGuide" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __medCardGuide];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetDictDataResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",dictDatas:"];
  [ms appendFormat: @"%@", __dictDatas];
  [ms appendString: @",medCardGuide:"];
  [ms appendFormat: @"\"%@\"", __medCardGuide];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFeedbackResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFeedbackResp class]]) {
    return NO;
  }
  NXTFFeedbackResp *other = (NXTFFeedbackResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FeedbackResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFeedbackResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFChangePwdResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFChangePwdResp class]]) {
    return NO;
  }
  NXTFChangePwdResp *other = (NXTFChangePwdResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ChangePwdResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFChangePwdResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFSignOutResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFSignOutResp class]]) {
    return NO;
  }
  NXTFSignOutResp *other = (NXTFSignOutResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignOutResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFSignOutResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRegCardNoResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header data: (NSString *) data
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRegCardNoResp class]]) {
    return NO;
  }
  NXTFRegCardNoResp *other = (NXTFRegCardNoResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__data release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSString *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setData: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegCardNoResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __data];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRegCardNoResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",data:"];
  [ms appendFormat: @"\"%@\"", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFAddPatientResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header patient: (NXTFPatientDto *) patient
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patient = [patient retain_stub];
  __patient_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patient"])
  {
    __patient = [[decoder decodeObjectForKey: @"patient"] retain_stub];
    __patient_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patient_isset)
  {
    [encoder encodeObject: __patient forKey: @"patient"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patient_isset ? 2654435761 : 0;
  if (__patient_isset)
  {
    hash = (hash * 31) ^ [__patient hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFAddPatientResp class]]) {
    return NO;
  }
  NXTFAddPatientResp *other = (NXTFAddPatientResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patient_isset != other->__patient_isset) ||
      (__patient_isset && ((__patient || other->__patient) && ![__patient isEqual:other->__patient]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__patient release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPatientDto *) patient {
  return [[__patient retain_stub] autorelease_stub];
}

- (void) setPatient: (NXTFPatientDto *) patient {
  [patient retain_stub];
  [__patient release_stub];
  __patient = patient;
  __patient_isset = YES;
}

- (BOOL) patientIsSet {
  return __patient_isset;
}

- (void) unsetPatient {
  [__patient release_stub];
  __patient = nil;
  __patient_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPatientDto *fieldValue = [[NXTFPatientDto alloc] init];
          [fieldValue read: inProtocol];
          [self setPatient: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddPatientResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patient_isset) {
    if (__patient != nil) {
      [outProtocol writeFieldBeginWithName: @"patient" type: TType_STRUCT fieldID: 2];
      [__patient write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFAddPatientResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patient:"];
  [ms appendFormat: @"%@", __patient];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFModifyPatientResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header patient: (NXTFPatientDto *) patient
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patient = [patient retain_stub];
  __patient_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patient"])
  {
    __patient = [[decoder decodeObjectForKey: @"patient"] retain_stub];
    __patient_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patient_isset)
  {
    [encoder encodeObject: __patient forKey: @"patient"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patient_isset ? 2654435761 : 0;
  if (__patient_isset)
  {
    hash = (hash * 31) ^ [__patient hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFModifyPatientResp class]]) {
    return NO;
  }
  NXTFModifyPatientResp *other = (NXTFModifyPatientResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patient_isset != other->__patient_isset) ||
      (__patient_isset && ((__patient || other->__patient) && ![__patient isEqual:other->__patient]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__patient release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPatientDto *) patient {
  return [[__patient retain_stub] autorelease_stub];
}

- (void) setPatient: (NXTFPatientDto *) patient {
  [patient retain_stub];
  [__patient release_stub];
  __patient = patient;
  __patient_isset = YES;
}

- (BOOL) patientIsSet {
  return __patient_isset;
}

- (void) unsetPatient {
  [__patient release_stub];
  __patient = nil;
  __patient_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPatientDto *fieldValue = [[NXTFPatientDto alloc] init];
          [fieldValue read: inProtocol];
          [self setPatient: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ModifyPatientResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patient_isset) {
    if (__patient != nil) {
      [outProtocol writeFieldBeginWithName: @"patient" type: TType_STRUCT fieldID: 2];
      [__patient write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFModifyPatientResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patient:"];
  [ms appendFormat: @"%@", __patient];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetExpertsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.expertDrs = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header expertDrs: (NSMutableArray *) expertDrs
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __expertDrs = [expertDrs retain_stub];
  __expertDrs_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"expertDrs"])
  {
    __expertDrs = [[decoder decodeObjectForKey: @"expertDrs"] retain_stub];
    __expertDrs_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__expertDrs_isset)
  {
    [encoder encodeObject: __expertDrs forKey: @"expertDrs"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __expertDrs_isset ? 2654435761 : 0;
  if (__expertDrs_isset)
  {
    hash = (hash * 31) ^ [__expertDrs hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetExpertsResp class]]) {
    return NO;
  }
  NXTFGetExpertsResp *other = (NXTFGetExpertsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__expertDrs_isset != other->__expertDrs_isset) ||
      (__expertDrs_isset && ((__expertDrs || other->__expertDrs) && ![__expertDrs isEqual:other->__expertDrs]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__expertDrs release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) expertDrs {
  return [[__expertDrs retain_stub] autorelease_stub];
}

- (void) setExpertDrs: (NSMutableArray *) expertDrs {
  [expertDrs retain_stub];
  [__expertDrs release_stub];
  __expertDrs = expertDrs;
  __expertDrs_isset = YES;
}

- (BOOL) expertDrsIsSet {
  return __expertDrs_isset;
}

- (void) unsetExpertDrs {
  [__expertDrs release_stub];
  __expertDrs = nil;
  __expertDrs_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size65;
          [inProtocol readListBeginReturningElementType: NULL size: &_size65];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size65];
          int _i66;
          for (_i66 = 0; _i66 < _size65; ++_i66)
          {
            NXTFDoctorDto *_elem67 = [[NXTFDoctorDto alloc] init];
            [_elem67 read: inProtocol];
            [fieldValue addObject: _elem67];
            [_elem67 release_stub];
          }
          [inProtocol readListEnd];
          [self setExpertDrs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetExpertsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__expertDrs_isset) {
    if (__expertDrs != nil) {
      [outProtocol writeFieldBeginWithName: @"expertDrs" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__expertDrs count]];
        int idx69;
        for (idx69 = 0; idx69 < [__expertDrs count]; idx69++)
        {
          [[__expertDrs objectAtIndex: idx69] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetExpertsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",expertDrs:"];
  [ms appendFormat: @"%@", __expertDrs];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRegTargetsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.regTargets = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header hospId: (NSString *) hospId serviceCode: (NSString *) serviceCode deptId: (NSString *) deptId hospName: (NSString *) hospName deptName: (NSString *) deptName regTargets: (NSMutableArray *) regTargets scheduleType: (int32_t) scheduleType deptDesc: (NSString *) deptDesc
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospId = [hospId retain_stub];
  __hospId_isset = YES;
  __serviceCode = [serviceCode retain_stub];
  __serviceCode_isset = YES;
  __deptId = [deptId retain_stub];
  __deptId_isset = YES;
  __hospName = [hospName retain_stub];
  __hospName_isset = YES;
  __deptName = [deptName retain_stub];
  __deptName_isset = YES;
  __regTargets = [regTargets retain_stub];
  __regTargets_isset = YES;
  __scheduleType = scheduleType;
  __scheduleType_isset = YES;
  __deptDesc = [deptDesc retain_stub];
  __deptDesc_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [[decoder decodeObjectForKey: @"hospId"] retain_stub];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceCode"])
  {
    __serviceCode = [[decoder decodeObjectForKey: @"serviceCode"] retain_stub];
    __serviceCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptId"])
  {
    __deptId = [[decoder decodeObjectForKey: @"deptId"] retain_stub];
    __deptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospName"])
  {
    __hospName = [[decoder decodeObjectForKey: @"hospName"] retain_stub];
    __hospName_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptName"])
  {
    __deptName = [[decoder decodeObjectForKey: @"deptName"] retain_stub];
    __deptName_isset = YES;
  }
  if ([decoder containsValueForKey: @"regTargets"])
  {
    __regTargets = [[decoder decodeObjectForKey: @"regTargets"] retain_stub];
    __regTargets_isset = YES;
  }
  if ([decoder containsValueForKey: @"scheduleType"])
  {
    __scheduleType = [decoder decodeInt32ForKey: @"scheduleType"];
    __scheduleType_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptDesc"])
  {
    __deptDesc = [[decoder decodeObjectForKey: @"deptDesc"] retain_stub];
    __deptDesc_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospId_isset)
  {
    [encoder encodeObject: __hospId forKey: @"hospId"];
  }
  if (__serviceCode_isset)
  {
    [encoder encodeObject: __serviceCode forKey: @"serviceCode"];
  }
  if (__deptId_isset)
  {
    [encoder encodeObject: __deptId forKey: @"deptId"];
  }
  if (__hospName_isset)
  {
    [encoder encodeObject: __hospName forKey: @"hospName"];
  }
  if (__deptName_isset)
  {
    [encoder encodeObject: __deptName forKey: @"deptName"];
  }
  if (__regTargets_isset)
  {
    [encoder encodeObject: __regTargets forKey: @"regTargets"];
  }
  if (__scheduleType_isset)
  {
    [encoder encodeInt32: __scheduleType forKey: @"scheduleType"];
  }
  if (__deptDesc_isset)
  {
    [encoder encodeObject: __deptDesc forKey: @"deptDesc"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [__hospId hash];
  }
  hash = (hash * 31) ^ __serviceCode_isset ? 2654435761 : 0;
  if (__serviceCode_isset)
  {
    hash = (hash * 31) ^ [__serviceCode hash];
  }
  hash = (hash * 31) ^ __deptId_isset ? 2654435761 : 0;
  if (__deptId_isset)
  {
    hash = (hash * 31) ^ [__deptId hash];
  }
  hash = (hash * 31) ^ __hospName_isset ? 2654435761 : 0;
  if (__hospName_isset)
  {
    hash = (hash * 31) ^ [__hospName hash];
  }
  hash = (hash * 31) ^ __deptName_isset ? 2654435761 : 0;
  if (__deptName_isset)
  {
    hash = (hash * 31) ^ [__deptName hash];
  }
  hash = (hash * 31) ^ __regTargets_isset ? 2654435761 : 0;
  if (__regTargets_isset)
  {
    hash = (hash * 31) ^ [__regTargets hash];
  }
  hash = (hash * 31) ^ __scheduleType_isset ? 2654435761 : 0;
  if (__scheduleType_isset)
  {
    hash = (hash * 31) ^ [@(__scheduleType) hash];
  }
  hash = (hash * 31) ^ __deptDesc_isset ? 2654435761 : 0;
  if (__deptDesc_isset)
  {
    hash = (hash * 31) ^ [__deptDesc hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRegTargetsResp class]]) {
    return NO;
  }
  NXTFRegTargetsResp *other = (NXTFRegTargetsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && ((__hospId || other->__hospId) && ![__hospId isEqual:other->__hospId]))) {
    return NO;
  }
  if ((__serviceCode_isset != other->__serviceCode_isset) ||
      (__serviceCode_isset && ((__serviceCode || other->__serviceCode) && ![__serviceCode isEqual:other->__serviceCode]))) {
    return NO;
  }
  if ((__deptId_isset != other->__deptId_isset) ||
      (__deptId_isset && ((__deptId || other->__deptId) && ![__deptId isEqual:other->__deptId]))) {
    return NO;
  }
  if ((__hospName_isset != other->__hospName_isset) ||
      (__hospName_isset && ((__hospName || other->__hospName) && ![__hospName isEqual:other->__hospName]))) {
    return NO;
  }
  if ((__deptName_isset != other->__deptName_isset) ||
      (__deptName_isset && ((__deptName || other->__deptName) && ![__deptName isEqual:other->__deptName]))) {
    return NO;
  }
  if ((__regTargets_isset != other->__regTargets_isset) ||
      (__regTargets_isset && ((__regTargets || other->__regTargets) && ![__regTargets isEqual:other->__regTargets]))) {
    return NO;
  }
  if ((__scheduleType_isset != other->__scheduleType_isset) ||
      (__scheduleType_isset && (__scheduleType != other->__scheduleType))) {
    return NO;
  }
  if ((__deptDesc_isset != other->__deptDesc_isset) ||
      (__deptDesc_isset && ((__deptDesc || other->__deptDesc) && ![__deptDesc isEqual:other->__deptDesc]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__hospId release_stub];
  [__serviceCode release_stub];
  [__deptId release_stub];
  [__hospName release_stub];
  [__deptName release_stub];
  [__regTargets release_stub];
  [__deptDesc release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) hospId {
  return [[__hospId retain_stub] autorelease_stub];
}

- (void) setHospId: (NSString *) hospId {
  [hospId retain_stub];
  [__hospId release_stub];
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  [__hospId release_stub];
  __hospId = nil;
  __hospId_isset = NO;
}

- (NSString *) serviceCode {
  return [[__serviceCode retain_stub] autorelease_stub];
}

- (void) setServiceCode: (NSString *) serviceCode {
  [serviceCode retain_stub];
  [__serviceCode release_stub];
  __serviceCode = serviceCode;
  __serviceCode_isset = YES;
}

- (BOOL) serviceCodeIsSet {
  return __serviceCode_isset;
}

- (void) unsetServiceCode {
  [__serviceCode release_stub];
  __serviceCode = nil;
  __serviceCode_isset = NO;
}

- (NSString *) deptId {
  return [[__deptId retain_stub] autorelease_stub];
}

- (void) setDeptId: (NSString *) deptId {
  [deptId retain_stub];
  [__deptId release_stub];
  __deptId = deptId;
  __deptId_isset = YES;
}

- (BOOL) deptIdIsSet {
  return __deptId_isset;
}

- (void) unsetDeptId {
  [__deptId release_stub];
  __deptId = nil;
  __deptId_isset = NO;
}

- (NSString *) hospName {
  return [[__hospName retain_stub] autorelease_stub];
}

- (void) setHospName: (NSString *) hospName {
  [hospName retain_stub];
  [__hospName release_stub];
  __hospName = hospName;
  __hospName_isset = YES;
}

- (BOOL) hospNameIsSet {
  return __hospName_isset;
}

- (void) unsetHospName {
  [__hospName release_stub];
  __hospName = nil;
  __hospName_isset = NO;
}

- (NSString *) deptName {
  return [[__deptName retain_stub] autorelease_stub];
}

- (void) setDeptName: (NSString *) deptName {
  [deptName retain_stub];
  [__deptName release_stub];
  __deptName = deptName;
  __deptName_isset = YES;
}

- (BOOL) deptNameIsSet {
  return __deptName_isset;
}

- (void) unsetDeptName {
  [__deptName release_stub];
  __deptName = nil;
  __deptName_isset = NO;
}

- (NSMutableArray *) regTargets {
  return [[__regTargets retain_stub] autorelease_stub];
}

- (void) setRegTargets: (NSMutableArray *) regTargets {
  [regTargets retain_stub];
  [__regTargets release_stub];
  __regTargets = regTargets;
  __regTargets_isset = YES;
}

- (BOOL) regTargetsIsSet {
  return __regTargets_isset;
}

- (void) unsetRegTargets {
  [__regTargets release_stub];
  __regTargets = nil;
  __regTargets_isset = NO;
}

- (int32_t) scheduleType {
  return __scheduleType;
}

- (void) setScheduleType: (int32_t) scheduleType {
  __scheduleType = scheduleType;
  __scheduleType_isset = YES;
}

- (BOOL) scheduleTypeIsSet {
  return __scheduleType_isset;
}

- (void) unsetScheduleType {
  __scheduleType_isset = NO;
}

- (NSString *) deptDesc {
  return [[__deptDesc retain_stub] autorelease_stub];
}

- (void) setDeptDesc: (NSString *) deptDesc {
  [deptDesc retain_stub];
  [__deptDesc release_stub];
  __deptDesc = deptDesc;
  __deptDesc_isset = YES;
}

- (BOOL) deptDescIsSet {
  return __deptDesc_isset;
}

- (void) unsetDeptDesc {
  [__deptDesc release_stub];
  __deptDesc = nil;
  __deptDesc_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_LIST) {
          int _size70;
          [inProtocol readListBeginReturningElementType: NULL size: &_size70];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size70];
          int _i71;
          for (_i71 = 0; _i71 < _size70; ++_i71)
          {
            NXTFRegTargetDto *_elem72 = [[NXTFRegTargetDto alloc] init];
            [_elem72 read: inProtocol];
            [fieldValue addObject: _elem72];
            [_elem72 release_stub];
          }
          [inProtocol readListEnd];
          [self setRegTargets: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setScheduleType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegTargetsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    if (__hospId != nil) {
      [outProtocol writeFieldBeginWithName: @"hospId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __hospId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceCode_isset) {
    if (__serviceCode != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceCode" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __serviceCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptId_isset) {
    if (__deptId != nil) {
      [outProtocol writeFieldBeginWithName: @"deptId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __deptId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospName_isset) {
    if (__hospName != nil) {
      [outProtocol writeFieldBeginWithName: @"hospName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __hospName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptName_isset) {
    if (__deptName != nil) {
      [outProtocol writeFieldBeginWithName: @"deptName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __deptName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regTargets_isset) {
    if (__regTargets != nil) {
      [outProtocol writeFieldBeginWithName: @"regTargets" type: TType_LIST fieldID: 7];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__regTargets count]];
        int idx74;
        for (idx74 = 0; idx74 < [__regTargets count]; idx74++)
        {
          [[__regTargets objectAtIndex: idx74] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__scheduleType_isset) {
    [outProtocol writeFieldBeginWithName: @"scheduleType" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __scheduleType];
    [outProtocol writeFieldEnd];
  }
  if (__deptDesc_isset) {
    if (__deptDesc != nil) {
      [outProtocol writeFieldBeginWithName: @"deptDesc" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __deptDesc];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRegTargetsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"\"%@\"", __hospId];
  [ms appendString: @",serviceCode:"];
  [ms appendFormat: @"\"%@\"", __serviceCode];
  [ms appendString: @",deptId:"];
  [ms appendFormat: @"\"%@\"", __deptId];
  [ms appendString: @",hospName:"];
  [ms appendFormat: @"\"%@\"", __hospName];
  [ms appendString: @",deptName:"];
  [ms appendFormat: @"\"%@\"", __deptName];
  [ms appendString: @",regTargets:"];
  [ms appendFormat: @"%@", __regTargets];
  [ms appendString: @",scheduleType:"];
  [ms appendFormat: @"%i", __scheduleType];
  [ms appendString: @",deptDesc:"];
  [ms appendFormat: @"\"%@\"", __deptDesc];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFClientPaidResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFClientPaidResp class]]) {
    return NO;
  }
  NXTFClientPaidResp *other = (NXTFClientPaidResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ClientPaidResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFClientPaidResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetDrResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.jobPlaces = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

  self.workExps = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

  self.eduExps = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

  self.services = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header deptId: (NSString *) deptId name: (NSString *) name levelName: (NSString *) levelName deptName: (NSString *) deptName hospName: (NSString *) hospName bornDate: (NSString *) bornDate gender: (NSString *) gender headImg: (NSString *) headImg desc: (NSString *) desc flowers: (NSString *) flowers specialNote: (NSString *) specialNote isFavor: (NSString *) isFavor totalVisits: (NSString *) totalVisits evalScores: (NSString *) evalScores evalNumber: (NSString *) evalNumber isConsulted: (NSString *) isConsulted consultId: (NSString *) consultId docId: (NSString *) docId hospId: (int32_t) hospId isRegisted: (BOOL) isRegisted serviceCode: (NSString *) serviceCode titleStatus: (NSString *) titleStatus qualStatus: (NSString *) qualStatus contactNo: (NSString *) contactNo diamonds: (NSString *) diamonds remark: (NSString *) remark jobPlaces: (NSMutableArray *) jobPlaces workExps: (NSMutableArray *) workExps eduExps: (NSMutableArray *) eduExps services: (NSMutableArray *) services consVisits: (int64_t) consVisits diseases: (NSMutableArray *) diseases userId: (int64_t) userId drTeams: (NSMutableArray *) drTeams
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __deptId = [deptId retain_stub];
  __deptId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __levelName = [levelName retain_stub];
  __levelName_isset = YES;
  __deptName = [deptName retain_stub];
  __deptName_isset = YES;
  __hospName = [hospName retain_stub];
  __hospName_isset = YES;
  __bornDate = [bornDate retain_stub];
  __bornDate_isset = YES;
  __gender = [gender retain_stub];
  __gender_isset = YES;
  __headImg = [headImg retain_stub];
  __headImg_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __flowers = [flowers retain_stub];
  __flowers_isset = YES;
  __specialNote = [specialNote retain_stub];
  __specialNote_isset = YES;
  __isFavor = [isFavor retain_stub];
  __isFavor_isset = YES;
  __totalVisits = [totalVisits retain_stub];
  __totalVisits_isset = YES;
  __evalScores = [evalScores retain_stub];
  __evalScores_isset = YES;
  __evalNumber = [evalNumber retain_stub];
  __evalNumber_isset = YES;
  __isConsulted = [isConsulted retain_stub];
  __isConsulted_isset = YES;
  __consultId = [consultId retain_stub];
  __consultId_isset = YES;
  __docId = [docId retain_stub];
  __docId_isset = YES;
  __hospId = hospId;
  __hospId_isset = YES;
  __isRegisted = isRegisted;
  __isRegisted_isset = YES;
  __serviceCode = [serviceCode retain_stub];
  __serviceCode_isset = YES;
  __titleStatus = [titleStatus retain_stub];
  __titleStatus_isset = YES;
  __qualStatus = [qualStatus retain_stub];
  __qualStatus_isset = YES;
  __contactNo = [contactNo retain_stub];
  __contactNo_isset = YES;
  __diamonds = [diamonds retain_stub];
  __diamonds_isset = YES;
  __remark = [remark retain_stub];
  __remark_isset = YES;
  __jobPlaces = [jobPlaces retain_stub];
  __jobPlaces_isset = YES;
  __workExps = [workExps retain_stub];
  __workExps_isset = YES;
  __eduExps = [eduExps retain_stub];
  __eduExps_isset = YES;
  __services = [services retain_stub];
  __services_isset = YES;
  __consVisits = consVisits;
  __consVisits_isset = YES;
  __diseases = [diseases retain_stub];
  __diseases_isset = YES;
  __userId = userId;
  __userId_isset = YES;
  __drTeams = [drTeams retain_stub];
  __drTeams_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptId"])
  {
    __deptId = [[decoder decodeObjectForKey: @"deptId"] retain_stub];
    __deptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"levelName"])
  {
    __levelName = [[decoder decodeObjectForKey: @"levelName"] retain_stub];
    __levelName_isset = YES;
  }
  if ([decoder containsValueForKey: @"deptName"])
  {
    __deptName = [[decoder decodeObjectForKey: @"deptName"] retain_stub];
    __deptName_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospName"])
  {
    __hospName = [[decoder decodeObjectForKey: @"hospName"] retain_stub];
    __hospName_isset = YES;
  }
  if ([decoder containsValueForKey: @"bornDate"])
  {
    __bornDate = [[decoder decodeObjectForKey: @"bornDate"] retain_stub];
    __bornDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [[decoder decodeObjectForKey: @"gender"] retain_stub];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"headImg"])
  {
    __headImg = [[decoder decodeObjectForKey: @"headImg"] retain_stub];
    __headImg_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"flowers"])
  {
    __flowers = [[decoder decodeObjectForKey: @"flowers"] retain_stub];
    __flowers_isset = YES;
  }
  if ([decoder containsValueForKey: @"specialNote"])
  {
    __specialNote = [[decoder decodeObjectForKey: @"specialNote"] retain_stub];
    __specialNote_isset = YES;
  }
  if ([decoder containsValueForKey: @"isFavor"])
  {
    __isFavor = [[decoder decodeObjectForKey: @"isFavor"] retain_stub];
    __isFavor_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalVisits"])
  {
    __totalVisits = [[decoder decodeObjectForKey: @"totalVisits"] retain_stub];
    __totalVisits_isset = YES;
  }
  if ([decoder containsValueForKey: @"evalScores"])
  {
    __evalScores = [[decoder decodeObjectForKey: @"evalScores"] retain_stub];
    __evalScores_isset = YES;
  }
  if ([decoder containsValueForKey: @"evalNumber"])
  {
    __evalNumber = [[decoder decodeObjectForKey: @"evalNumber"] retain_stub];
    __evalNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"isConsulted"])
  {
    __isConsulted = [[decoder decodeObjectForKey: @"isConsulted"] retain_stub];
    __isConsulted_isset = YES;
  }
  if ([decoder containsValueForKey: @"consultId"])
  {
    __consultId = [[decoder decodeObjectForKey: @"consultId"] retain_stub];
    __consultId_isset = YES;
  }
  if ([decoder containsValueForKey: @"docId"])
  {
    __docId = [[decoder decodeObjectForKey: @"docId"] retain_stub];
    __docId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [decoder decodeInt32ForKey: @"hospId"];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"isRegisted"])
  {
    __isRegisted = [decoder decodeBoolForKey: @"isRegisted"];
    __isRegisted_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceCode"])
  {
    __serviceCode = [[decoder decodeObjectForKey: @"serviceCode"] retain_stub];
    __serviceCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"titleStatus"])
  {
    __titleStatus = [[decoder decodeObjectForKey: @"titleStatus"] retain_stub];
    __titleStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"qualStatus"])
  {
    __qualStatus = [[decoder decodeObjectForKey: @"qualStatus"] retain_stub];
    __qualStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"contactNo"])
  {
    __contactNo = [[decoder decodeObjectForKey: @"contactNo"] retain_stub];
    __contactNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"diamonds"])
  {
    __diamonds = [[decoder decodeObjectForKey: @"diamonds"] retain_stub];
    __diamonds_isset = YES;
  }
  if ([decoder containsValueForKey: @"remark"])
  {
    __remark = [[decoder decodeObjectForKey: @"remark"] retain_stub];
    __remark_isset = YES;
  }
  if ([decoder containsValueForKey: @"jobPlaces"])
  {
    __jobPlaces = [[decoder decodeObjectForKey: @"jobPlaces"] retain_stub];
    __jobPlaces_isset = YES;
  }
  if ([decoder containsValueForKey: @"workExps"])
  {
    __workExps = [[decoder decodeObjectForKey: @"workExps"] retain_stub];
    __workExps_isset = YES;
  }
  if ([decoder containsValueForKey: @"eduExps"])
  {
    __eduExps = [[decoder decodeObjectForKey: @"eduExps"] retain_stub];
    __eduExps_isset = YES;
  }
  if ([decoder containsValueForKey: @"services"])
  {
    __services = [[decoder decodeObjectForKey: @"services"] retain_stub];
    __services_isset = YES;
  }
  if ([decoder containsValueForKey: @"consVisits"])
  {
    __consVisits = [decoder decodeInt64ForKey: @"consVisits"];
    __consVisits_isset = YES;
  }
  if ([decoder containsValueForKey: @"diseases"])
  {
    __diseases = [[decoder decodeObjectForKey: @"diseases"] retain_stub];
    __diseases_isset = YES;
  }
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [decoder decodeInt64ForKey: @"userId"];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"drTeams"])
  {
    __drTeams = [[decoder decodeObjectForKey: @"drTeams"] retain_stub];
    __drTeams_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__deptId_isset)
  {
    [encoder encodeObject: __deptId forKey: @"deptId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__levelName_isset)
  {
    [encoder encodeObject: __levelName forKey: @"levelName"];
  }
  if (__deptName_isset)
  {
    [encoder encodeObject: __deptName forKey: @"deptName"];
  }
  if (__hospName_isset)
  {
    [encoder encodeObject: __hospName forKey: @"hospName"];
  }
  if (__bornDate_isset)
  {
    [encoder encodeObject: __bornDate forKey: @"bornDate"];
  }
  if (__gender_isset)
  {
    [encoder encodeObject: __gender forKey: @"gender"];
  }
  if (__headImg_isset)
  {
    [encoder encodeObject: __headImg forKey: @"headImg"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__flowers_isset)
  {
    [encoder encodeObject: __flowers forKey: @"flowers"];
  }
  if (__specialNote_isset)
  {
    [encoder encodeObject: __specialNote forKey: @"specialNote"];
  }
  if (__isFavor_isset)
  {
    [encoder encodeObject: __isFavor forKey: @"isFavor"];
  }
  if (__totalVisits_isset)
  {
    [encoder encodeObject: __totalVisits forKey: @"totalVisits"];
  }
  if (__evalScores_isset)
  {
    [encoder encodeObject: __evalScores forKey: @"evalScores"];
  }
  if (__evalNumber_isset)
  {
    [encoder encodeObject: __evalNumber forKey: @"evalNumber"];
  }
  if (__isConsulted_isset)
  {
    [encoder encodeObject: __isConsulted forKey: @"isConsulted"];
  }
  if (__consultId_isset)
  {
    [encoder encodeObject: __consultId forKey: @"consultId"];
  }
  if (__docId_isset)
  {
    [encoder encodeObject: __docId forKey: @"docId"];
  }
  if (__hospId_isset)
  {
    [encoder encodeInt32: __hospId forKey: @"hospId"];
  }
  if (__isRegisted_isset)
  {
    [encoder encodeBool: __isRegisted forKey: @"isRegisted"];
  }
  if (__serviceCode_isset)
  {
    [encoder encodeObject: __serviceCode forKey: @"serviceCode"];
  }
  if (__titleStatus_isset)
  {
    [encoder encodeObject: __titleStatus forKey: @"titleStatus"];
  }
  if (__qualStatus_isset)
  {
    [encoder encodeObject: __qualStatus forKey: @"qualStatus"];
  }
  if (__contactNo_isset)
  {
    [encoder encodeObject: __contactNo forKey: @"contactNo"];
  }
  if (__diamonds_isset)
  {
    [encoder encodeObject: __diamonds forKey: @"diamonds"];
  }
  if (__remark_isset)
  {
    [encoder encodeObject: __remark forKey: @"remark"];
  }
  if (__jobPlaces_isset)
  {
    [encoder encodeObject: __jobPlaces forKey: @"jobPlaces"];
  }
  if (__workExps_isset)
  {
    [encoder encodeObject: __workExps forKey: @"workExps"];
  }
  if (__eduExps_isset)
  {
    [encoder encodeObject: __eduExps forKey: @"eduExps"];
  }
  if (__services_isset)
  {
    [encoder encodeObject: __services forKey: @"services"];
  }
  if (__consVisits_isset)
  {
    [encoder encodeInt64: __consVisits forKey: @"consVisits"];
  }
  if (__diseases_isset)
  {
    [encoder encodeObject: __diseases forKey: @"diseases"];
  }
  if (__userId_isset)
  {
    [encoder encodeInt64: __userId forKey: @"userId"];
  }
  if (__drTeams_isset)
  {
    [encoder encodeObject: __drTeams forKey: @"drTeams"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __deptId_isset ? 2654435761 : 0;
  if (__deptId_isset)
  {
    hash = (hash * 31) ^ [__deptId hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __levelName_isset ? 2654435761 : 0;
  if (__levelName_isset)
  {
    hash = (hash * 31) ^ [__levelName hash];
  }
  hash = (hash * 31) ^ __deptName_isset ? 2654435761 : 0;
  if (__deptName_isset)
  {
    hash = (hash * 31) ^ [__deptName hash];
  }
  hash = (hash * 31) ^ __hospName_isset ? 2654435761 : 0;
  if (__hospName_isset)
  {
    hash = (hash * 31) ^ [__hospName hash];
  }
  hash = (hash * 31) ^ __bornDate_isset ? 2654435761 : 0;
  if (__bornDate_isset)
  {
    hash = (hash * 31) ^ [__bornDate hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [__gender hash];
  }
  hash = (hash * 31) ^ __headImg_isset ? 2654435761 : 0;
  if (__headImg_isset)
  {
    hash = (hash * 31) ^ [__headImg hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __flowers_isset ? 2654435761 : 0;
  if (__flowers_isset)
  {
    hash = (hash * 31) ^ [__flowers hash];
  }
  hash = (hash * 31) ^ __specialNote_isset ? 2654435761 : 0;
  if (__specialNote_isset)
  {
    hash = (hash * 31) ^ [__specialNote hash];
  }
  hash = (hash * 31) ^ __isFavor_isset ? 2654435761 : 0;
  if (__isFavor_isset)
  {
    hash = (hash * 31) ^ [__isFavor hash];
  }
  hash = (hash * 31) ^ __totalVisits_isset ? 2654435761 : 0;
  if (__totalVisits_isset)
  {
    hash = (hash * 31) ^ [__totalVisits hash];
  }
  hash = (hash * 31) ^ __evalScores_isset ? 2654435761 : 0;
  if (__evalScores_isset)
  {
    hash = (hash * 31) ^ [__evalScores hash];
  }
  hash = (hash * 31) ^ __evalNumber_isset ? 2654435761 : 0;
  if (__evalNumber_isset)
  {
    hash = (hash * 31) ^ [__evalNumber hash];
  }
  hash = (hash * 31) ^ __isConsulted_isset ? 2654435761 : 0;
  if (__isConsulted_isset)
  {
    hash = (hash * 31) ^ [__isConsulted hash];
  }
  hash = (hash * 31) ^ __consultId_isset ? 2654435761 : 0;
  if (__consultId_isset)
  {
    hash = (hash * 31) ^ [__consultId hash];
  }
  hash = (hash * 31) ^ __docId_isset ? 2654435761 : 0;
  if (__docId_isset)
  {
    hash = (hash * 31) ^ [__docId hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [@(__hospId) hash];
  }
  hash = (hash * 31) ^ __isRegisted_isset ? 2654435761 : 0;
  if (__isRegisted_isset)
  {
    hash = (hash * 31) ^ [@(__isRegisted) hash];
  }
  hash = (hash * 31) ^ __serviceCode_isset ? 2654435761 : 0;
  if (__serviceCode_isset)
  {
    hash = (hash * 31) ^ [__serviceCode hash];
  }
  hash = (hash * 31) ^ __titleStatus_isset ? 2654435761 : 0;
  if (__titleStatus_isset)
  {
    hash = (hash * 31) ^ [__titleStatus hash];
  }
  hash = (hash * 31) ^ __qualStatus_isset ? 2654435761 : 0;
  if (__qualStatus_isset)
  {
    hash = (hash * 31) ^ [__qualStatus hash];
  }
  hash = (hash * 31) ^ __contactNo_isset ? 2654435761 : 0;
  if (__contactNo_isset)
  {
    hash = (hash * 31) ^ [__contactNo hash];
  }
  hash = (hash * 31) ^ __diamonds_isset ? 2654435761 : 0;
  if (__diamonds_isset)
  {
    hash = (hash * 31) ^ [__diamonds hash];
  }
  hash = (hash * 31) ^ __remark_isset ? 2654435761 : 0;
  if (__remark_isset)
  {
    hash = (hash * 31) ^ [__remark hash];
  }
  hash = (hash * 31) ^ __jobPlaces_isset ? 2654435761 : 0;
  if (__jobPlaces_isset)
  {
    hash = (hash * 31) ^ [__jobPlaces hash];
  }
  hash = (hash * 31) ^ __workExps_isset ? 2654435761 : 0;
  if (__workExps_isset)
  {
    hash = (hash * 31) ^ [__workExps hash];
  }
  hash = (hash * 31) ^ __eduExps_isset ? 2654435761 : 0;
  if (__eduExps_isset)
  {
    hash = (hash * 31) ^ [__eduExps hash];
  }
  hash = (hash * 31) ^ __services_isset ? 2654435761 : 0;
  if (__services_isset)
  {
    hash = (hash * 31) ^ [__services hash];
  }
  hash = (hash * 31) ^ __consVisits_isset ? 2654435761 : 0;
  if (__consVisits_isset)
  {
    hash = (hash * 31) ^ [@(__consVisits) hash];
  }
  hash = (hash * 31) ^ __diseases_isset ? 2654435761 : 0;
  if (__diseases_isset)
  {
    hash = (hash * 31) ^ [__diseases hash];
  }
  hash = (hash * 31) ^ __userId_isset ? 2654435761 : 0;
  if (__userId_isset)
  {
    hash = (hash * 31) ^ [@(__userId) hash];
  }
  hash = (hash * 31) ^ __drTeams_isset ? 2654435761 : 0;
  if (__drTeams_isset)
  {
    hash = (hash * 31) ^ [__drTeams hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetDrResp class]]) {
    return NO;
  }
  NXTFGetDrResp *other = (NXTFGetDrResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__deptId_isset != other->__deptId_isset) ||
      (__deptId_isset && ((__deptId || other->__deptId) && ![__deptId isEqual:other->__deptId]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__levelName_isset != other->__levelName_isset) ||
      (__levelName_isset && ((__levelName || other->__levelName) && ![__levelName isEqual:other->__levelName]))) {
    return NO;
  }
  if ((__deptName_isset != other->__deptName_isset) ||
      (__deptName_isset && ((__deptName || other->__deptName) && ![__deptName isEqual:other->__deptName]))) {
    return NO;
  }
  if ((__hospName_isset != other->__hospName_isset) ||
      (__hospName_isset && ((__hospName || other->__hospName) && ![__hospName isEqual:other->__hospName]))) {
    return NO;
  }
  if ((__bornDate_isset != other->__bornDate_isset) ||
      (__bornDate_isset && ((__bornDate || other->__bornDate) && ![__bornDate isEqual:other->__bornDate]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && ((__gender || other->__gender) && ![__gender isEqual:other->__gender]))) {
    return NO;
  }
  if ((__headImg_isset != other->__headImg_isset) ||
      (__headImg_isset && ((__headImg || other->__headImg) && ![__headImg isEqual:other->__headImg]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__flowers_isset != other->__flowers_isset) ||
      (__flowers_isset && ((__flowers || other->__flowers) && ![__flowers isEqual:other->__flowers]))) {
    return NO;
  }
  if ((__specialNote_isset != other->__specialNote_isset) ||
      (__specialNote_isset && ((__specialNote || other->__specialNote) && ![__specialNote isEqual:other->__specialNote]))) {
    return NO;
  }
  if ((__isFavor_isset != other->__isFavor_isset) ||
      (__isFavor_isset && ((__isFavor || other->__isFavor) && ![__isFavor isEqual:other->__isFavor]))) {
    return NO;
  }
  if ((__totalVisits_isset != other->__totalVisits_isset) ||
      (__totalVisits_isset && ((__totalVisits || other->__totalVisits) && ![__totalVisits isEqual:other->__totalVisits]))) {
    return NO;
  }
  if ((__evalScores_isset != other->__evalScores_isset) ||
      (__evalScores_isset && ((__evalScores || other->__evalScores) && ![__evalScores isEqual:other->__evalScores]))) {
    return NO;
  }
  if ((__evalNumber_isset != other->__evalNumber_isset) ||
      (__evalNumber_isset && ((__evalNumber || other->__evalNumber) && ![__evalNumber isEqual:other->__evalNumber]))) {
    return NO;
  }
  if ((__isConsulted_isset != other->__isConsulted_isset) ||
      (__isConsulted_isset && ((__isConsulted || other->__isConsulted) && ![__isConsulted isEqual:other->__isConsulted]))) {
    return NO;
  }
  if ((__consultId_isset != other->__consultId_isset) ||
      (__consultId_isset && ((__consultId || other->__consultId) && ![__consultId isEqual:other->__consultId]))) {
    return NO;
  }
  if ((__docId_isset != other->__docId_isset) ||
      (__docId_isset && ((__docId || other->__docId) && ![__docId isEqual:other->__docId]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && (__hospId != other->__hospId))) {
    return NO;
  }
  if ((__isRegisted_isset != other->__isRegisted_isset) ||
      (__isRegisted_isset && (__isRegisted != other->__isRegisted))) {
    return NO;
  }
  if ((__serviceCode_isset != other->__serviceCode_isset) ||
      (__serviceCode_isset && ((__serviceCode || other->__serviceCode) && ![__serviceCode isEqual:other->__serviceCode]))) {
    return NO;
  }
  if ((__titleStatus_isset != other->__titleStatus_isset) ||
      (__titleStatus_isset && ((__titleStatus || other->__titleStatus) && ![__titleStatus isEqual:other->__titleStatus]))) {
    return NO;
  }
  if ((__qualStatus_isset != other->__qualStatus_isset) ||
      (__qualStatus_isset && ((__qualStatus || other->__qualStatus) && ![__qualStatus isEqual:other->__qualStatus]))) {
    return NO;
  }
  if ((__contactNo_isset != other->__contactNo_isset) ||
      (__contactNo_isset && ((__contactNo || other->__contactNo) && ![__contactNo isEqual:other->__contactNo]))) {
    return NO;
  }
  if ((__diamonds_isset != other->__diamonds_isset) ||
      (__diamonds_isset && ((__diamonds || other->__diamonds) && ![__diamonds isEqual:other->__diamonds]))) {
    return NO;
  }
  if ((__remark_isset != other->__remark_isset) ||
      (__remark_isset && ((__remark || other->__remark) && ![__remark isEqual:other->__remark]))) {
    return NO;
  }
  if ((__jobPlaces_isset != other->__jobPlaces_isset) ||
      (__jobPlaces_isset && ((__jobPlaces || other->__jobPlaces) && ![__jobPlaces isEqual:other->__jobPlaces]))) {
    return NO;
  }
  if ((__workExps_isset != other->__workExps_isset) ||
      (__workExps_isset && ((__workExps || other->__workExps) && ![__workExps isEqual:other->__workExps]))) {
    return NO;
  }
  if ((__eduExps_isset != other->__eduExps_isset) ||
      (__eduExps_isset && ((__eduExps || other->__eduExps) && ![__eduExps isEqual:other->__eduExps]))) {
    return NO;
  }
  if ((__services_isset != other->__services_isset) ||
      (__services_isset && ((__services || other->__services) && ![__services isEqual:other->__services]))) {
    return NO;
  }
  if ((__consVisits_isset != other->__consVisits_isset) ||
      (__consVisits_isset && (__consVisits != other->__consVisits))) {
    return NO;
  }
  if ((__diseases_isset != other->__diseases_isset) ||
      (__diseases_isset && ((__diseases || other->__diseases) && ![__diseases isEqual:other->__diseases]))) {
    return NO;
  }
  if ((__userId_isset != other->__userId_isset) ||
      (__userId_isset && (__userId != other->__userId))) {
    return NO;
  }
  if ((__drTeams_isset != other->__drTeams_isset) ||
      (__drTeams_isset && ((__drTeams || other->__drTeams) && ![__drTeams isEqual:other->__drTeams]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__deptId release_stub];
  [__name release_stub];
  [__levelName release_stub];
  [__deptName release_stub];
  [__hospName release_stub];
  [__bornDate release_stub];
  [__gender release_stub];
  [__headImg release_stub];
  [__desc release_stub];
  [__flowers release_stub];
  [__specialNote release_stub];
  [__isFavor release_stub];
  [__totalVisits release_stub];
  [__evalScores release_stub];
  [__evalNumber release_stub];
  [__isConsulted release_stub];
  [__consultId release_stub];
  [__docId release_stub];
  [__serviceCode release_stub];
  [__titleStatus release_stub];
  [__qualStatus release_stub];
  [__contactNo release_stub];
  [__diamonds release_stub];
  [__remark release_stub];
  [__jobPlaces release_stub];
  [__workExps release_stub];
  [__eduExps release_stub];
  [__services release_stub];
  [__diseases release_stub];
  [__drTeams release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) deptId {
  return [[__deptId retain_stub] autorelease_stub];
}

- (void) setDeptId: (NSString *) deptId {
  [deptId retain_stub];
  [__deptId release_stub];
  __deptId = deptId;
  __deptId_isset = YES;
}

- (BOOL) deptIdIsSet {
  return __deptId_isset;
}

- (void) unsetDeptId {
  [__deptId release_stub];
  __deptId = nil;
  __deptId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) levelName {
  return [[__levelName retain_stub] autorelease_stub];
}

- (void) setLevelName: (NSString *) levelName {
  [levelName retain_stub];
  [__levelName release_stub];
  __levelName = levelName;
  __levelName_isset = YES;
}

- (BOOL) levelNameIsSet {
  return __levelName_isset;
}

- (void) unsetLevelName {
  [__levelName release_stub];
  __levelName = nil;
  __levelName_isset = NO;
}

- (NSString *) deptName {
  return [[__deptName retain_stub] autorelease_stub];
}

- (void) setDeptName: (NSString *) deptName {
  [deptName retain_stub];
  [__deptName release_stub];
  __deptName = deptName;
  __deptName_isset = YES;
}

- (BOOL) deptNameIsSet {
  return __deptName_isset;
}

- (void) unsetDeptName {
  [__deptName release_stub];
  __deptName = nil;
  __deptName_isset = NO;
}

- (NSString *) hospName {
  return [[__hospName retain_stub] autorelease_stub];
}

- (void) setHospName: (NSString *) hospName {
  [hospName retain_stub];
  [__hospName release_stub];
  __hospName = hospName;
  __hospName_isset = YES;
}

- (BOOL) hospNameIsSet {
  return __hospName_isset;
}

- (void) unsetHospName {
  [__hospName release_stub];
  __hospName = nil;
  __hospName_isset = NO;
}

- (NSString *) bornDate {
  return [[__bornDate retain_stub] autorelease_stub];
}

- (void) setBornDate: (NSString *) bornDate {
  [bornDate retain_stub];
  [__bornDate release_stub];
  __bornDate = bornDate;
  __bornDate_isset = YES;
}

- (BOOL) bornDateIsSet {
  return __bornDate_isset;
}

- (void) unsetBornDate {
  [__bornDate release_stub];
  __bornDate = nil;
  __bornDate_isset = NO;
}

- (NSString *) gender {
  return [[__gender retain_stub] autorelease_stub];
}

- (void) setGender: (NSString *) gender {
  [gender retain_stub];
  [__gender release_stub];
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  [__gender release_stub];
  __gender = nil;
  __gender_isset = NO;
}

- (NSString *) headImg {
  return [[__headImg retain_stub] autorelease_stub];
}

- (void) setHeadImg: (NSString *) headImg {
  [headImg retain_stub];
  [__headImg release_stub];
  __headImg = headImg;
  __headImg_isset = YES;
}

- (BOOL) headImgIsSet {
  return __headImg_isset;
}

- (void) unsetHeadImg {
  [__headImg release_stub];
  __headImg = nil;
  __headImg_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) flowers {
  return [[__flowers retain_stub] autorelease_stub];
}

- (void) setFlowers: (NSString *) flowers {
  [flowers retain_stub];
  [__flowers release_stub];
  __flowers = flowers;
  __flowers_isset = YES;
}

- (BOOL) flowersIsSet {
  return __flowers_isset;
}

- (void) unsetFlowers {
  [__flowers release_stub];
  __flowers = nil;
  __flowers_isset = NO;
}

- (NSString *) specialNote {
  return [[__specialNote retain_stub] autorelease_stub];
}

- (void) setSpecialNote: (NSString *) specialNote {
  [specialNote retain_stub];
  [__specialNote release_stub];
  __specialNote = specialNote;
  __specialNote_isset = YES;
}

- (BOOL) specialNoteIsSet {
  return __specialNote_isset;
}

- (void) unsetSpecialNote {
  [__specialNote release_stub];
  __specialNote = nil;
  __specialNote_isset = NO;
}

- (NSString *) isFavor {
  return [[__isFavor retain_stub] autorelease_stub];
}

- (void) setIsFavor: (NSString *) isFavor {
  [isFavor retain_stub];
  [__isFavor release_stub];
  __isFavor = isFavor;
  __isFavor_isset = YES;
}

- (BOOL) isFavorIsSet {
  return __isFavor_isset;
}

- (void) unsetIsFavor {
  [__isFavor release_stub];
  __isFavor = nil;
  __isFavor_isset = NO;
}

- (NSString *) totalVisits {
  return [[__totalVisits retain_stub] autorelease_stub];
}

- (void) setTotalVisits: (NSString *) totalVisits {
  [totalVisits retain_stub];
  [__totalVisits release_stub];
  __totalVisits = totalVisits;
  __totalVisits_isset = YES;
}

- (BOOL) totalVisitsIsSet {
  return __totalVisits_isset;
}

- (void) unsetTotalVisits {
  [__totalVisits release_stub];
  __totalVisits = nil;
  __totalVisits_isset = NO;
}

- (NSString *) evalScores {
  return [[__evalScores retain_stub] autorelease_stub];
}

- (void) setEvalScores: (NSString *) evalScores {
  [evalScores retain_stub];
  [__evalScores release_stub];
  __evalScores = evalScores;
  __evalScores_isset = YES;
}

- (BOOL) evalScoresIsSet {
  return __evalScores_isset;
}

- (void) unsetEvalScores {
  [__evalScores release_stub];
  __evalScores = nil;
  __evalScores_isset = NO;
}

- (NSString *) evalNumber {
  return [[__evalNumber retain_stub] autorelease_stub];
}

- (void) setEvalNumber: (NSString *) evalNumber {
  [evalNumber retain_stub];
  [__evalNumber release_stub];
  __evalNumber = evalNumber;
  __evalNumber_isset = YES;
}

- (BOOL) evalNumberIsSet {
  return __evalNumber_isset;
}

- (void) unsetEvalNumber {
  [__evalNumber release_stub];
  __evalNumber = nil;
  __evalNumber_isset = NO;
}

- (NSString *) isConsulted {
  return [[__isConsulted retain_stub] autorelease_stub];
}

- (void) setIsConsulted: (NSString *) isConsulted {
  [isConsulted retain_stub];
  [__isConsulted release_stub];
  __isConsulted = isConsulted;
  __isConsulted_isset = YES;
}

- (BOOL) isConsultedIsSet {
  return __isConsulted_isset;
}

- (void) unsetIsConsulted {
  [__isConsulted release_stub];
  __isConsulted = nil;
  __isConsulted_isset = NO;
}

- (NSString *) consultId {
  return [[__consultId retain_stub] autorelease_stub];
}

- (void) setConsultId: (NSString *) consultId {
  [consultId retain_stub];
  [__consultId release_stub];
  __consultId = consultId;
  __consultId_isset = YES;
}

- (BOOL) consultIdIsSet {
  return __consultId_isset;
}

- (void) unsetConsultId {
  [__consultId release_stub];
  __consultId = nil;
  __consultId_isset = NO;
}

- (NSString *) docId {
  return [[__docId retain_stub] autorelease_stub];
}

- (void) setDocId: (NSString *) docId {
  [docId retain_stub];
  [__docId release_stub];
  __docId = docId;
  __docId_isset = YES;
}

- (BOOL) docIdIsSet {
  return __docId_isset;
}

- (void) unsetDocId {
  [__docId release_stub];
  __docId = nil;
  __docId_isset = NO;
}

- (int32_t) hospId {
  return __hospId;
}

- (void) setHospId: (int32_t) hospId {
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  __hospId_isset = NO;
}

- (BOOL) isRegisted {
  return __isRegisted;
}

- (void) setIsRegisted: (BOOL) isRegisted {
  __isRegisted = isRegisted;
  __isRegisted_isset = YES;
}

- (BOOL) isRegistedIsSet {
  return __isRegisted_isset;
}

- (void) unsetIsRegisted {
  __isRegisted_isset = NO;
}

- (NSString *) serviceCode {
  return [[__serviceCode retain_stub] autorelease_stub];
}

- (void) setServiceCode: (NSString *) serviceCode {
  [serviceCode retain_stub];
  [__serviceCode release_stub];
  __serviceCode = serviceCode;
  __serviceCode_isset = YES;
}

- (BOOL) serviceCodeIsSet {
  return __serviceCode_isset;
}

- (void) unsetServiceCode {
  [__serviceCode release_stub];
  __serviceCode = nil;
  __serviceCode_isset = NO;
}

- (NSString *) titleStatus {
  return [[__titleStatus retain_stub] autorelease_stub];
}

- (void) setTitleStatus: (NSString *) titleStatus {
  [titleStatus retain_stub];
  [__titleStatus release_stub];
  __titleStatus = titleStatus;
  __titleStatus_isset = YES;
}

- (BOOL) titleStatusIsSet {
  return __titleStatus_isset;
}

- (void) unsetTitleStatus {
  [__titleStatus release_stub];
  __titleStatus = nil;
  __titleStatus_isset = NO;
}

- (NSString *) qualStatus {
  return [[__qualStatus retain_stub] autorelease_stub];
}

- (void) setQualStatus: (NSString *) qualStatus {
  [qualStatus retain_stub];
  [__qualStatus release_stub];
  __qualStatus = qualStatus;
  __qualStatus_isset = YES;
}

- (BOOL) qualStatusIsSet {
  return __qualStatus_isset;
}

- (void) unsetQualStatus {
  [__qualStatus release_stub];
  __qualStatus = nil;
  __qualStatus_isset = NO;
}

- (NSString *) contactNo {
  return [[__contactNo retain_stub] autorelease_stub];
}

- (void) setContactNo: (NSString *) contactNo {
  [contactNo retain_stub];
  [__contactNo release_stub];
  __contactNo = contactNo;
  __contactNo_isset = YES;
}

- (BOOL) contactNoIsSet {
  return __contactNo_isset;
}

- (void) unsetContactNo {
  [__contactNo release_stub];
  __contactNo = nil;
  __contactNo_isset = NO;
}

- (NSString *) diamonds {
  return [[__diamonds retain_stub] autorelease_stub];
}

- (void) setDiamonds: (NSString *) diamonds {
  [diamonds retain_stub];
  [__diamonds release_stub];
  __diamonds = diamonds;
  __diamonds_isset = YES;
}

- (BOOL) diamondsIsSet {
  return __diamonds_isset;
}

- (void) unsetDiamonds {
  [__diamonds release_stub];
  __diamonds = nil;
  __diamonds_isset = NO;
}

- (NSString *) remark {
  return [[__remark retain_stub] autorelease_stub];
}

- (void) setRemark: (NSString *) remark {
  [remark retain_stub];
  [__remark release_stub];
  __remark = remark;
  __remark_isset = YES;
}

- (BOOL) remarkIsSet {
  return __remark_isset;
}

- (void) unsetRemark {
  [__remark release_stub];
  __remark = nil;
  __remark_isset = NO;
}

- (NSMutableArray *) jobPlaces {
  return [[__jobPlaces retain_stub] autorelease_stub];
}

- (void) setJobPlaces: (NSMutableArray *) jobPlaces {
  [jobPlaces retain_stub];
  [__jobPlaces release_stub];
  __jobPlaces = jobPlaces;
  __jobPlaces_isset = YES;
}

- (BOOL) jobPlacesIsSet {
  return __jobPlaces_isset;
}

- (void) unsetJobPlaces {
  [__jobPlaces release_stub];
  __jobPlaces = nil;
  __jobPlaces_isset = NO;
}

- (NSMutableArray *) workExps {
  return [[__workExps retain_stub] autorelease_stub];
}

- (void) setWorkExps: (NSMutableArray *) workExps {
  [workExps retain_stub];
  [__workExps release_stub];
  __workExps = workExps;
  __workExps_isset = YES;
}

- (BOOL) workExpsIsSet {
  return __workExps_isset;
}

- (void) unsetWorkExps {
  [__workExps release_stub];
  __workExps = nil;
  __workExps_isset = NO;
}

- (NSMutableArray *) eduExps {
  return [[__eduExps retain_stub] autorelease_stub];
}

- (void) setEduExps: (NSMutableArray *) eduExps {
  [eduExps retain_stub];
  [__eduExps release_stub];
  __eduExps = eduExps;
  __eduExps_isset = YES;
}

- (BOOL) eduExpsIsSet {
  return __eduExps_isset;
}

- (void) unsetEduExps {
  [__eduExps release_stub];
  __eduExps = nil;
  __eduExps_isset = NO;
}

- (NSMutableArray *) services {
  return [[__services retain_stub] autorelease_stub];
}

- (void) setServices: (NSMutableArray *) services {
  [services retain_stub];
  [__services release_stub];
  __services = services;
  __services_isset = YES;
}

- (BOOL) servicesIsSet {
  return __services_isset;
}

- (void) unsetServices {
  [__services release_stub];
  __services = nil;
  __services_isset = NO;
}

- (int64_t) consVisits {
  return __consVisits;
}

- (void) setConsVisits: (int64_t) consVisits {
  __consVisits = consVisits;
  __consVisits_isset = YES;
}

- (BOOL) consVisitsIsSet {
  return __consVisits_isset;
}

- (void) unsetConsVisits {
  __consVisits_isset = NO;
}

- (NSMutableArray *) diseases {
  return [[__diseases retain_stub] autorelease_stub];
}

- (void) setDiseases: (NSMutableArray *) diseases {
  [diseases retain_stub];
  [__diseases release_stub];
  __diseases = diseases;
  __diseases_isset = YES;
}

- (BOOL) diseasesIsSet {
  return __diseases_isset;
}

- (void) unsetDiseases {
  [__diseases release_stub];
  __diseases = nil;
  __diseases_isset = NO;
}

- (int64_t) userId {
  return __userId;
}

- (void) setUserId: (int64_t) userId {
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  __userId_isset = NO;
}

- (NSMutableArray *) drTeams {
  return [[__drTeams retain_stub] autorelease_stub];
}

- (void) setDrTeams: (NSMutableArray *) drTeams {
  [drTeams retain_stub];
  [__drTeams release_stub];
  __drTeams = drTeams;
  __drTeams_isset = YES;
}

- (BOOL) drTeamsIsSet {
  return __drTeams_isset;
}

- (void) unsetDrTeams {
  [__drTeams release_stub];
  __drTeams = nil;
  __drTeams_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLevelName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeptName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBornDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHeadImg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFlowers: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSpecialNote: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsFavor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTotalVisits: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEvalScores: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEvalNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsConsulted: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConsultId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDocId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsRegisted: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitleStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setQualStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContactNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 26:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDiamonds: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 27:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemark: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 28:
        if (fieldType == TType_LIST) {
          int _size75;
          [inProtocol readListBeginReturningElementType: NULL size: &_size75];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size75];
          int _i76;
          for (_i76 = 0; _i76 < _size75; ++_i76)
          {
            NXTFJobPlaceDto *_elem77 = [[NXTFJobPlaceDto alloc] init];
            [_elem77 read: inProtocol];
            [fieldValue addObject: _elem77];
            [_elem77 release_stub];
          }
          [inProtocol readListEnd];
          [self setJobPlaces: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 29:
        if (fieldType == TType_LIST) {
          int _size78;
          [inProtocol readListBeginReturningElementType: NULL size: &_size78];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size78];
          int _i79;
          for (_i79 = 0; _i79 < _size78; ++_i79)
          {
            NXTFWorkExpDto *_elem80 = [[NXTFWorkExpDto alloc] init];
            [_elem80 read: inProtocol];
            [fieldValue addObject: _elem80];
            [_elem80 release_stub];
          }
          [inProtocol readListEnd];
          [self setWorkExps: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 30:
        if (fieldType == TType_LIST) {
          int _size81;
          [inProtocol readListBeginReturningElementType: NULL size: &_size81];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size81];
          int _i82;
          for (_i82 = 0; _i82 < _size81; ++_i82)
          {
            NXTFEduExpDto *_elem83 = [[NXTFEduExpDto alloc] init];
            [_elem83 read: inProtocol];
            [fieldValue addObject: _elem83];
            [_elem83 release_stub];
          }
          [inProtocol readListEnd];
          [self setEduExps: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 31:
        if (fieldType == TType_LIST) {
          int _size84;
          [inProtocol readListBeginReturningElementType: NULL size: &_size84];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size84];
          int _i85;
          for (_i85 = 0; _i85 < _size84; ++_i85)
          {
            NXTFServiceDto *_elem86 = [[NXTFServiceDto alloc] init];
            [_elem86 read: inProtocol];
            [fieldValue addObject: _elem86];
            [_elem86 release_stub];
          }
          [inProtocol readListEnd];
          [self setServices: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 32:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setConsVisits: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 33:
        if (fieldType == TType_LIST) {
          int _size87;
          [inProtocol readListBeginReturningElementType: NULL size: &_size87];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size87];
          int _i88;
          for (_i88 = 0; _i88 < _size87; ++_i88)
          {
            NSString * _elem89 = [inProtocol readString];
            [fieldValue addObject: _elem89];
          }
          [inProtocol readListEnd];
          [self setDiseases: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 34:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 35:
        if (fieldType == TType_LIST) {
          int _size90;
          [inProtocol readListBeginReturningElementType: NULL size: &_size90];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size90];
          int _i91;
          for (_i91 = 0; _i91 < _size90; ++_i91)
          {
            NXTFDrTeamDto *_elem92 = [[NXTFDrTeamDto alloc] init];
            [_elem92 read: inProtocol];
            [fieldValue addObject: _elem92];
            [_elem92 release_stub];
          }
          [inProtocol readListEnd];
          [self setDrTeams: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDrResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptId_isset) {
    if (__deptId != nil) {
      [outProtocol writeFieldBeginWithName: @"deptId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __deptId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__levelName_isset) {
    if (__levelName != nil) {
      [outProtocol writeFieldBeginWithName: @"levelName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __levelName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deptName_isset) {
    if (__deptName != nil) {
      [outProtocol writeFieldBeginWithName: @"deptName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __deptName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospName_isset) {
    if (__hospName != nil) {
      [outProtocol writeFieldBeginWithName: @"hospName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __hospName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bornDate_isset) {
    if (__bornDate != nil) {
      [outProtocol writeFieldBeginWithName: @"bornDate" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __bornDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    if (__gender != nil) {
      [outProtocol writeFieldBeginWithName: @"gender" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __gender];
      [outProtocol writeFieldEnd];
    }
  }
  if (__headImg_isset) {
    if (__headImg != nil) {
      [outProtocol writeFieldBeginWithName: @"headImg" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __headImg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__flowers_isset) {
    if (__flowers != nil) {
      [outProtocol writeFieldBeginWithName: @"flowers" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __flowers];
      [outProtocol writeFieldEnd];
    }
  }
  if (__specialNote_isset) {
    if (__specialNote != nil) {
      [outProtocol writeFieldBeginWithName: @"specialNote" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __specialNote];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isFavor_isset) {
    if (__isFavor != nil) {
      [outProtocol writeFieldBeginWithName: @"isFavor" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __isFavor];
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalVisits_isset) {
    if (__totalVisits != nil) {
      [outProtocol writeFieldBeginWithName: @"totalVisits" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __totalVisits];
      [outProtocol writeFieldEnd];
    }
  }
  if (__evalScores_isset) {
    if (__evalScores != nil) {
      [outProtocol writeFieldBeginWithName: @"evalScores" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __evalScores];
      [outProtocol writeFieldEnd];
    }
  }
  if (__evalNumber_isset) {
    if (__evalNumber != nil) {
      [outProtocol writeFieldBeginWithName: @"evalNumber" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __evalNumber];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isConsulted_isset) {
    if (__isConsulted != nil) {
      [outProtocol writeFieldBeginWithName: @"isConsulted" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __isConsulted];
      [outProtocol writeFieldEnd];
    }
  }
  if (__consultId_isset) {
    if (__consultId != nil) {
      [outProtocol writeFieldBeginWithName: @"consultId" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __consultId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__docId_isset) {
    if (__docId != nil) {
      [outProtocol writeFieldBeginWithName: @"docId" type: TType_STRING fieldID: 19];
      [outProtocol writeString: __docId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    [outProtocol writeFieldBeginWithName: @"hospId" type: TType_I32 fieldID: 20];
    [outProtocol writeI32: __hospId];
    [outProtocol writeFieldEnd];
  }
  if (__isRegisted_isset) {
    [outProtocol writeFieldBeginWithName: @"isRegisted" type: TType_BOOL fieldID: 21];
    [outProtocol writeBool: __isRegisted];
    [outProtocol writeFieldEnd];
  }
  if (__serviceCode_isset) {
    if (__serviceCode != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceCode" type: TType_STRING fieldID: 22];
      [outProtocol writeString: __serviceCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__titleStatus_isset) {
    if (__titleStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"titleStatus" type: TType_STRING fieldID: 23];
      [outProtocol writeString: __titleStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__qualStatus_isset) {
    if (__qualStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"qualStatus" type: TType_STRING fieldID: 24];
      [outProtocol writeString: __qualStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__contactNo_isset) {
    if (__contactNo != nil) {
      [outProtocol writeFieldBeginWithName: @"contactNo" type: TType_STRING fieldID: 25];
      [outProtocol writeString: __contactNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diamonds_isset) {
    if (__diamonds != nil) {
      [outProtocol writeFieldBeginWithName: @"diamonds" type: TType_STRING fieldID: 26];
      [outProtocol writeString: __diamonds];
      [outProtocol writeFieldEnd];
    }
  }
  if (__remark_isset) {
    if (__remark != nil) {
      [outProtocol writeFieldBeginWithName: @"remark" type: TType_STRING fieldID: 27];
      [outProtocol writeString: __remark];
      [outProtocol writeFieldEnd];
    }
  }
  if (__jobPlaces_isset) {
    if (__jobPlaces != nil) {
      [outProtocol writeFieldBeginWithName: @"jobPlaces" type: TType_LIST fieldID: 28];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__jobPlaces count]];
        int idx94;
        for (idx94 = 0; idx94 < [__jobPlaces count]; idx94++)
        {
          [[__jobPlaces objectAtIndex: idx94] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__workExps_isset) {
    if (__workExps != nil) {
      [outProtocol writeFieldBeginWithName: @"workExps" type: TType_LIST fieldID: 29];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__workExps count]];
        int idx96;
        for (idx96 = 0; idx96 < [__workExps count]; idx96++)
        {
          [[__workExps objectAtIndex: idx96] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__eduExps_isset) {
    if (__eduExps != nil) {
      [outProtocol writeFieldBeginWithName: @"eduExps" type: TType_LIST fieldID: 30];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__eduExps count]];
        int idx98;
        for (idx98 = 0; idx98 < [__eduExps count]; idx98++)
        {
          [[__eduExps objectAtIndex: idx98] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__services_isset) {
    if (__services != nil) {
      [outProtocol writeFieldBeginWithName: @"services" type: TType_LIST fieldID: 31];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__services count]];
        int idx100;
        for (idx100 = 0; idx100 < [__services count]; idx100++)
        {
          [[__services objectAtIndex: idx100] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__consVisits_isset) {
    [outProtocol writeFieldBeginWithName: @"consVisits" type: TType_I64 fieldID: 32];
    [outProtocol writeI64: __consVisits];
    [outProtocol writeFieldEnd];
  }
  if (__diseases_isset) {
    if (__diseases != nil) {
      [outProtocol writeFieldBeginWithName: @"diseases" type: TType_LIST fieldID: 33];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__diseases count]];
        int idx102;
        for (idx102 = 0; idx102 < [__diseases count]; idx102++)
        {
          [outProtocol writeString: [__diseases objectAtIndex: idx102]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__userId_isset) {
    [outProtocol writeFieldBeginWithName: @"userId" type: TType_I64 fieldID: 34];
    [outProtocol writeI64: __userId];
    [outProtocol writeFieldEnd];
  }
  if (__drTeams_isset) {
    if (__drTeams != nil) {
      [outProtocol writeFieldBeginWithName: @"drTeams" type: TType_LIST fieldID: 35];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__drTeams count]];
        int idx104;
        for (idx104 = 0; idx104 < [__drTeams count]; idx104++)
        {
          [[__drTeams objectAtIndex: idx104] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetDrResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",deptId:"];
  [ms appendFormat: @"\"%@\"", __deptId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",levelName:"];
  [ms appendFormat: @"\"%@\"", __levelName];
  [ms appendString: @",deptName:"];
  [ms appendFormat: @"\"%@\"", __deptName];
  [ms appendString: @",hospName:"];
  [ms appendFormat: @"\"%@\"", __hospName];
  [ms appendString: @",bornDate:"];
  [ms appendFormat: @"\"%@\"", __bornDate];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"\"%@\"", __gender];
  [ms appendString: @",headImg:"];
  [ms appendFormat: @"\"%@\"", __headImg];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",flowers:"];
  [ms appendFormat: @"\"%@\"", __flowers];
  [ms appendString: @",specialNote:"];
  [ms appendFormat: @"\"%@\"", __specialNote];
  [ms appendString: @",isFavor:"];
  [ms appendFormat: @"\"%@\"", __isFavor];
  [ms appendString: @",totalVisits:"];
  [ms appendFormat: @"\"%@\"", __totalVisits];
  [ms appendString: @",evalScores:"];
  [ms appendFormat: @"\"%@\"", __evalScores];
  [ms appendString: @",evalNumber:"];
  [ms appendFormat: @"\"%@\"", __evalNumber];
  [ms appendString: @",isConsulted:"];
  [ms appendFormat: @"\"%@\"", __isConsulted];
  [ms appendString: @",consultId:"];
  [ms appendFormat: @"\"%@\"", __consultId];
  [ms appendString: @",docId:"];
  [ms appendFormat: @"\"%@\"", __docId];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"%i", __hospId];
  [ms appendString: @",isRegisted:"];
  [ms appendFormat: @"%i", __isRegisted];
  [ms appendString: @",serviceCode:"];
  [ms appendFormat: @"\"%@\"", __serviceCode];
  [ms appendString: @",titleStatus:"];
  [ms appendFormat: @"\"%@\"", __titleStatus];
  [ms appendString: @",qualStatus:"];
  [ms appendFormat: @"\"%@\"", __qualStatus];
  [ms appendString: @",contactNo:"];
  [ms appendFormat: @"\"%@\"", __contactNo];
  [ms appendString: @",diamonds:"];
  [ms appendFormat: @"\"%@\"", __diamonds];
  [ms appendString: @",remark:"];
  [ms appendFormat: @"\"%@\"", __remark];
  [ms appendString: @",jobPlaces:"];
  [ms appendFormat: @"%@", __jobPlaces];
  [ms appendString: @",workExps:"];
  [ms appendFormat: @"%@", __workExps];
  [ms appendString: @",eduExps:"];
  [ms appendFormat: @"%@", __eduExps];
  [ms appendString: @",services:"];
  [ms appendFormat: @"%@", __services];
  [ms appendString: @",consVisits:"];
  [ms appendFormat: @"%qi", __consVisits];
  [ms appendString: @",diseases:"];
  [ms appendFormat: @"%@", __diseases];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"%qi", __userId];
  [ms appendString: @",drTeams:"];
  [ms appendFormat: @"%@", __drTeams];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRegPointsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.regPoints = [[[NSMutableDictionary alloc] initWithCapacity:0] autorelease_stub]; 

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header page: (NXTFPage *) page regPoints: (NSMutableDictionary *) regPoints scheduleType: (int32_t) scheduleType
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __regPoints = [regPoints retain_stub];
  __regPoints_isset = YES;
  __scheduleType = scheduleType;
  __scheduleType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"regPoints"])
  {
    __regPoints = [[decoder decodeObjectForKey: @"regPoints"] retain_stub];
    __regPoints_isset = YES;
  }
  if ([decoder containsValueForKey: @"scheduleType"])
  {
    __scheduleType = [decoder decodeInt32ForKey: @"scheduleType"];
    __scheduleType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__regPoints_isset)
  {
    [encoder encodeObject: __regPoints forKey: @"regPoints"];
  }
  if (__scheduleType_isset)
  {
    [encoder encodeInt32: __scheduleType forKey: @"scheduleType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __regPoints_isset ? 2654435761 : 0;
  if (__regPoints_isset)
  {
    hash = (hash * 31) ^ [__regPoints hash];
  }
  hash = (hash * 31) ^ __scheduleType_isset ? 2654435761 : 0;
  if (__scheduleType_isset)
  {
    hash = (hash * 31) ^ [@(__scheduleType) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRegPointsResp class]]) {
    return NO;
  }
  NXTFRegPointsResp *other = (NXTFRegPointsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__regPoints_isset != other->__regPoints_isset) ||
      (__regPoints_isset && ((__regPoints || other->__regPoints) && ![__regPoints isEqual:other->__regPoints]))) {
    return NO;
  }
  if ((__scheduleType_isset != other->__scheduleType_isset) ||
      (__scheduleType_isset && (__scheduleType != other->__scheduleType))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__regPoints release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSMutableDictionary *) regPoints {
  return [[__regPoints retain_stub] autorelease_stub];
}

- (void) setRegPoints: (NSMutableDictionary *) regPoints {
  [regPoints retain_stub];
  [__regPoints release_stub];
  __regPoints = regPoints;
  __regPoints_isset = YES;
}

- (BOOL) regPointsIsSet {
  return __regPoints_isset;
}

- (void) unsetRegPoints {
  [__regPoints release_stub];
  __regPoints = nil;
  __regPoints_isset = NO;
}

- (int32_t) scheduleType {
  return __scheduleType;
}

- (void) setScheduleType: (int32_t) scheduleType {
  __scheduleType = scheduleType;
  __scheduleType_isset = YES;
}

- (BOOL) scheduleTypeIsSet {
  return __scheduleType_isset;
}

- (void) unsetScheduleType {
  __scheduleType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_MAP) {
          int _size105;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size105];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size105];
          int _i106;
          for (_i106 = 0; _i106 < _size105; ++_i106)
          {
            NSString * _key107 = [inProtocol readString];
            int _size109;
            [inProtocol readListBeginReturningElementType: NULL size: &_size109];
            NSMutableArray * _val108 = [[NSMutableArray alloc] initWithCapacity: _size109];
            int _i110;
            for (_i110 = 0; _i110 < _size109; ++_i110)
            {
              NXTFRegPointDto *_elem111 = [[NXTFRegPointDto alloc] init];
              [_elem111 read: inProtocol];
              [_val108 addObject: _elem111];
              [_elem111 release_stub];
            }
            [inProtocol readListEnd];
            [fieldValue setObject: _val108 forKey: _key107];
            [_val108 release_stub];
          }
          [inProtocol readMapEnd];
          [self setRegPoints: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setScheduleType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegPointsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regPoints_isset) {
    if (__regPoints != nil) {
      [outProtocol writeFieldBeginWithName: @"regPoints" type: TType_MAP fieldID: 3];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_LIST size: [__regPoints count]];
        NSEnumerator * _iter112 = [__regPoints keyEnumerator];
        id key113;
        while ((key113 = [_iter112 nextObject]))
        {
          [outProtocol writeString: key113];
          {
            [outProtocol writeListBeginWithElementType: TType_STRUCT size: [[__regPoints objectForKey: key113] count]];
            int idx115;
            for (idx115 = 0; idx115 < [[__regPoints objectForKey: key113] count]; idx115++)
            {
              [[[__regPoints objectForKey: key113] objectAtIndex: idx115] write: outProtocol];
            }
            [outProtocol writeListEnd];
          }
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__scheduleType_isset) {
    [outProtocol writeFieldBeginWithName: @"scheduleType" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __scheduleType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRegPointsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",regPoints:"];
  [ms appendFormat: @"%@", __regPoints];
  [ms appendString: @",scheduleType:"];
  [ms appendFormat: @"%i", __scheduleType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetLatestVerResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header versionCode: (NSString *) versionCode versionName: (NSString *) versionName releaseDate: (NSString *) releaseDate releaseNote: (NSString *) releaseNote downloadUrl: (NSString *) downloadUrl forceUpdate: (NSString *) forceUpdate
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __versionCode = [versionCode retain_stub];
  __versionCode_isset = YES;
  __versionName = [versionName retain_stub];
  __versionName_isset = YES;
  __releaseDate = [releaseDate retain_stub];
  __releaseDate_isset = YES;
  __releaseNote = [releaseNote retain_stub];
  __releaseNote_isset = YES;
  __downloadUrl = [downloadUrl retain_stub];
  __downloadUrl_isset = YES;
  __forceUpdate = [forceUpdate retain_stub];
  __forceUpdate_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"versionCode"])
  {
    __versionCode = [[decoder decodeObjectForKey: @"versionCode"] retain_stub];
    __versionCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"versionName"])
  {
    __versionName = [[decoder decodeObjectForKey: @"versionName"] retain_stub];
    __versionName_isset = YES;
  }
  if ([decoder containsValueForKey: @"releaseDate"])
  {
    __releaseDate = [[decoder decodeObjectForKey: @"releaseDate"] retain_stub];
    __releaseDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"releaseNote"])
  {
    __releaseNote = [[decoder decodeObjectForKey: @"releaseNote"] retain_stub];
    __releaseNote_isset = YES;
  }
  if ([decoder containsValueForKey: @"downloadUrl"])
  {
    __downloadUrl = [[decoder decodeObjectForKey: @"downloadUrl"] retain_stub];
    __downloadUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"forceUpdate"])
  {
    __forceUpdate = [[decoder decodeObjectForKey: @"forceUpdate"] retain_stub];
    __forceUpdate_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__versionCode_isset)
  {
    [encoder encodeObject: __versionCode forKey: @"versionCode"];
  }
  if (__versionName_isset)
  {
    [encoder encodeObject: __versionName forKey: @"versionName"];
  }
  if (__releaseDate_isset)
  {
    [encoder encodeObject: __releaseDate forKey: @"releaseDate"];
  }
  if (__releaseNote_isset)
  {
    [encoder encodeObject: __releaseNote forKey: @"releaseNote"];
  }
  if (__downloadUrl_isset)
  {
    [encoder encodeObject: __downloadUrl forKey: @"downloadUrl"];
  }
  if (__forceUpdate_isset)
  {
    [encoder encodeObject: __forceUpdate forKey: @"forceUpdate"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __versionCode_isset ? 2654435761 : 0;
  if (__versionCode_isset)
  {
    hash = (hash * 31) ^ [__versionCode hash];
  }
  hash = (hash * 31) ^ __versionName_isset ? 2654435761 : 0;
  if (__versionName_isset)
  {
    hash = (hash * 31) ^ [__versionName hash];
  }
  hash = (hash * 31) ^ __releaseDate_isset ? 2654435761 : 0;
  if (__releaseDate_isset)
  {
    hash = (hash * 31) ^ [__releaseDate hash];
  }
  hash = (hash * 31) ^ __releaseNote_isset ? 2654435761 : 0;
  if (__releaseNote_isset)
  {
    hash = (hash * 31) ^ [__releaseNote hash];
  }
  hash = (hash * 31) ^ __downloadUrl_isset ? 2654435761 : 0;
  if (__downloadUrl_isset)
  {
    hash = (hash * 31) ^ [__downloadUrl hash];
  }
  hash = (hash * 31) ^ __forceUpdate_isset ? 2654435761 : 0;
  if (__forceUpdate_isset)
  {
    hash = (hash * 31) ^ [__forceUpdate hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetLatestVerResp class]]) {
    return NO;
  }
  NXTFGetLatestVerResp *other = (NXTFGetLatestVerResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__versionCode_isset != other->__versionCode_isset) ||
      (__versionCode_isset && ((__versionCode || other->__versionCode) && ![__versionCode isEqual:other->__versionCode]))) {
    return NO;
  }
  if ((__versionName_isset != other->__versionName_isset) ||
      (__versionName_isset && ((__versionName || other->__versionName) && ![__versionName isEqual:other->__versionName]))) {
    return NO;
  }
  if ((__releaseDate_isset != other->__releaseDate_isset) ||
      (__releaseDate_isset && ((__releaseDate || other->__releaseDate) && ![__releaseDate isEqual:other->__releaseDate]))) {
    return NO;
  }
  if ((__releaseNote_isset != other->__releaseNote_isset) ||
      (__releaseNote_isset && ((__releaseNote || other->__releaseNote) && ![__releaseNote isEqual:other->__releaseNote]))) {
    return NO;
  }
  if ((__downloadUrl_isset != other->__downloadUrl_isset) ||
      (__downloadUrl_isset && ((__downloadUrl || other->__downloadUrl) && ![__downloadUrl isEqual:other->__downloadUrl]))) {
    return NO;
  }
  if ((__forceUpdate_isset != other->__forceUpdate_isset) ||
      (__forceUpdate_isset && ((__forceUpdate || other->__forceUpdate) && ![__forceUpdate isEqual:other->__forceUpdate]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__versionCode release_stub];
  [__versionName release_stub];
  [__releaseDate release_stub];
  [__releaseNote release_stub];
  [__downloadUrl release_stub];
  [__forceUpdate release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) versionCode {
  return [[__versionCode retain_stub] autorelease_stub];
}

- (void) setVersionCode: (NSString *) versionCode {
  [versionCode retain_stub];
  [__versionCode release_stub];
  __versionCode = versionCode;
  __versionCode_isset = YES;
}

- (BOOL) versionCodeIsSet {
  return __versionCode_isset;
}

- (void) unsetVersionCode {
  [__versionCode release_stub];
  __versionCode = nil;
  __versionCode_isset = NO;
}

- (NSString *) versionName {
  return [[__versionName retain_stub] autorelease_stub];
}

- (void) setVersionName: (NSString *) versionName {
  [versionName retain_stub];
  [__versionName release_stub];
  __versionName = versionName;
  __versionName_isset = YES;
}

- (BOOL) versionNameIsSet {
  return __versionName_isset;
}

- (void) unsetVersionName {
  [__versionName release_stub];
  __versionName = nil;
  __versionName_isset = NO;
}

- (NSString *) releaseDate {
  return [[__releaseDate retain_stub] autorelease_stub];
}

- (void) setReleaseDate: (NSString *) releaseDate {
  [releaseDate retain_stub];
  [__releaseDate release_stub];
  __releaseDate = releaseDate;
  __releaseDate_isset = YES;
}

- (BOOL) releaseDateIsSet {
  return __releaseDate_isset;
}

- (void) unsetReleaseDate {
  [__releaseDate release_stub];
  __releaseDate = nil;
  __releaseDate_isset = NO;
}

- (NSString *) releaseNote {
  return [[__releaseNote retain_stub] autorelease_stub];
}

- (void) setReleaseNote: (NSString *) releaseNote {
  [releaseNote retain_stub];
  [__releaseNote release_stub];
  __releaseNote = releaseNote;
  __releaseNote_isset = YES;
}

- (BOOL) releaseNoteIsSet {
  return __releaseNote_isset;
}

- (void) unsetReleaseNote {
  [__releaseNote release_stub];
  __releaseNote = nil;
  __releaseNote_isset = NO;
}

- (NSString *) downloadUrl {
  return [[__downloadUrl retain_stub] autorelease_stub];
}

- (void) setDownloadUrl: (NSString *) downloadUrl {
  [downloadUrl retain_stub];
  [__downloadUrl release_stub];
  __downloadUrl = downloadUrl;
  __downloadUrl_isset = YES;
}

- (BOOL) downloadUrlIsSet {
  return __downloadUrl_isset;
}

- (void) unsetDownloadUrl {
  [__downloadUrl release_stub];
  __downloadUrl = nil;
  __downloadUrl_isset = NO;
}

- (NSString *) forceUpdate {
  return [[__forceUpdate retain_stub] autorelease_stub];
}

- (void) setForceUpdate: (NSString *) forceUpdate {
  [forceUpdate retain_stub];
  [__forceUpdate release_stub];
  __forceUpdate = forceUpdate;
  __forceUpdate_isset = YES;
}

- (BOOL) forceUpdateIsSet {
  return __forceUpdate_isset;
}

- (void) unsetForceUpdate {
  [__forceUpdate release_stub];
  __forceUpdate = nil;
  __forceUpdate_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVersionCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVersionName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReleaseDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReleaseNote: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDownloadUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setForceUpdate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetLatestVerResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__versionCode_isset) {
    if (__versionCode != nil) {
      [outProtocol writeFieldBeginWithName: @"versionCode" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __versionCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__versionName_isset) {
    if (__versionName != nil) {
      [outProtocol writeFieldBeginWithName: @"versionName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __versionName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__releaseDate_isset) {
    if (__releaseDate != nil) {
      [outProtocol writeFieldBeginWithName: @"releaseDate" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __releaseDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__releaseNote_isset) {
    if (__releaseNote != nil) {
      [outProtocol writeFieldBeginWithName: @"releaseNote" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __releaseNote];
      [outProtocol writeFieldEnd];
    }
  }
  if (__downloadUrl_isset) {
    if (__downloadUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"downloadUrl" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __downloadUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__forceUpdate_isset) {
    if (__forceUpdate != nil) {
      [outProtocol writeFieldBeginWithName: @"forceUpdate" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __forceUpdate];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetLatestVerResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",versionCode:"];
  [ms appendFormat: @"\"%@\"", __versionCode];
  [ms appendString: @",versionName:"];
  [ms appendFormat: @"\"%@\"", __versionName];
  [ms appendString: @",releaseDate:"];
  [ms appendFormat: @"\"%@\"", __releaseDate];
  [ms appendString: @",releaseNote:"];
  [ms appendFormat: @"\"%@\"", __releaseNote];
  [ms appendString: @",downloadUrl:"];
  [ms appendFormat: @"\"%@\"", __downloadUrl];
  [ms appendString: @",forceUpdate:"];
  [ms appendFormat: @"\"%@\"", __forceUpdate];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFSignUpResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header userId: (NSString *) userId headImg: (NSString *) headImg name: (NSString *) name gender: (NSString *) gender phoneNo: (NSString *) phoneNo papersNo: (NSString *) papersNo papersTypeId: (NSString *) papersTypeId papersType: (NSString *) papersType patientId: (NSString *) patientId age: (NSString *) age medInsureance: (NSString *) medInsureance stature: (NSString *) stature weight: (NSString *) weight bornDate: (NSString *) bornDate address: (NSString *) address relationId: (NSString *) relationId criticalIllness: (NSString *) criticalIllness allergicHistory: (NSString *) allergicHistory familyHistory: (NSString *) familyHistory bloodType: (NSString *) bloodType token: (NSString *) token signingKey: (NSString *) signingKey accountName: (NSString *) accountName
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __headImg = [headImg retain_stub];
  __headImg_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __gender = [gender retain_stub];
  __gender_isset = YES;
  __phoneNo = [phoneNo retain_stub];
  __phoneNo_isset = YES;
  __papersNo = [papersNo retain_stub];
  __papersNo_isset = YES;
  __papersTypeId = [papersTypeId retain_stub];
  __papersTypeId_isset = YES;
  __papersType = [papersType retain_stub];
  __papersType_isset = YES;
  __patientId = [patientId retain_stub];
  __patientId_isset = YES;
  __age = [age retain_stub];
  __age_isset = YES;
  __medInsureance = [medInsureance retain_stub];
  __medInsureance_isset = YES;
  __stature = [stature retain_stub];
  __stature_isset = YES;
  __weight = [weight retain_stub];
  __weight_isset = YES;
  __bornDate = [bornDate retain_stub];
  __bornDate_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __relationId = [relationId retain_stub];
  __relationId_isset = YES;
  __criticalIllness = [criticalIllness retain_stub];
  __criticalIllness_isset = YES;
  __allergicHistory = [allergicHistory retain_stub];
  __allergicHistory_isset = YES;
  __familyHistory = [familyHistory retain_stub];
  __familyHistory_isset = YES;
  __bloodType = [bloodType retain_stub];
  __bloodType_isset = YES;
  __token = [token retain_stub];
  __token_isset = YES;
  __signingKey = [signingKey retain_stub];
  __signingKey_isset = YES;
  __accountName = [accountName retain_stub];
  __accountName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"headImg"])
  {
    __headImg = [[decoder decodeObjectForKey: @"headImg"] retain_stub];
    __headImg_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [[decoder decodeObjectForKey: @"gender"] retain_stub];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneNo"])
  {
    __phoneNo = [[decoder decodeObjectForKey: @"phoneNo"] retain_stub];
    __phoneNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersNo"])
  {
    __papersNo = [[decoder decodeObjectForKey: @"papersNo"] retain_stub];
    __papersNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersTypeId"])
  {
    __papersTypeId = [[decoder decodeObjectForKey: @"papersTypeId"] retain_stub];
    __papersTypeId_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersType"])
  {
    __papersType = [[decoder decodeObjectForKey: @"papersType"] retain_stub];
    __papersType_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [[decoder decodeObjectForKey: @"patientId"] retain_stub];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"age"])
  {
    __age = [[decoder decodeObjectForKey: @"age"] retain_stub];
    __age_isset = YES;
  }
  if ([decoder containsValueForKey: @"medInsureance"])
  {
    __medInsureance = [[decoder decodeObjectForKey: @"medInsureance"] retain_stub];
    __medInsureance_isset = YES;
  }
  if ([decoder containsValueForKey: @"stature"])
  {
    __stature = [[decoder decodeObjectForKey: @"stature"] retain_stub];
    __stature_isset = YES;
  }
  if ([decoder containsValueForKey: @"weight"])
  {
    __weight = [[decoder decodeObjectForKey: @"weight"] retain_stub];
    __weight_isset = YES;
  }
  if ([decoder containsValueForKey: @"bornDate"])
  {
    __bornDate = [[decoder decodeObjectForKey: @"bornDate"] retain_stub];
    __bornDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"relationId"])
  {
    __relationId = [[decoder decodeObjectForKey: @"relationId"] retain_stub];
    __relationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"criticalIllness"])
  {
    __criticalIllness = [[decoder decodeObjectForKey: @"criticalIllness"] retain_stub];
    __criticalIllness_isset = YES;
  }
  if ([decoder containsValueForKey: @"allergicHistory"])
  {
    __allergicHistory = [[decoder decodeObjectForKey: @"allergicHistory"] retain_stub];
    __allergicHistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"familyHistory"])
  {
    __familyHistory = [[decoder decodeObjectForKey: @"familyHistory"] retain_stub];
    __familyHistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"bloodType"])
  {
    __bloodType = [[decoder decodeObjectForKey: @"bloodType"] retain_stub];
    __bloodType_isset = YES;
  }
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"signingKey"])
  {
    __signingKey = [[decoder decodeObjectForKey: @"signingKey"] retain_stub];
    __signingKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"accountName"])
  {
    __accountName = [[decoder decodeObjectForKey: @"accountName"] retain_stub];
    __accountName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__headImg_isset)
  {
    [encoder encodeObject: __headImg forKey: @"headImg"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__gender_isset)
  {
    [encoder encodeObject: __gender forKey: @"gender"];
  }
  if (__phoneNo_isset)
  {
    [encoder encodeObject: __phoneNo forKey: @"phoneNo"];
  }
  if (__papersNo_isset)
  {
    [encoder encodeObject: __papersNo forKey: @"papersNo"];
  }
  if (__papersTypeId_isset)
  {
    [encoder encodeObject: __papersTypeId forKey: @"papersTypeId"];
  }
  if (__papersType_isset)
  {
    [encoder encodeObject: __papersType forKey: @"papersType"];
  }
  if (__patientId_isset)
  {
    [encoder encodeObject: __patientId forKey: @"patientId"];
  }
  if (__age_isset)
  {
    [encoder encodeObject: __age forKey: @"age"];
  }
  if (__medInsureance_isset)
  {
    [encoder encodeObject: __medInsureance forKey: @"medInsureance"];
  }
  if (__stature_isset)
  {
    [encoder encodeObject: __stature forKey: @"stature"];
  }
  if (__weight_isset)
  {
    [encoder encodeObject: __weight forKey: @"weight"];
  }
  if (__bornDate_isset)
  {
    [encoder encodeObject: __bornDate forKey: @"bornDate"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__relationId_isset)
  {
    [encoder encodeObject: __relationId forKey: @"relationId"];
  }
  if (__criticalIllness_isset)
  {
    [encoder encodeObject: __criticalIllness forKey: @"criticalIllness"];
  }
  if (__allergicHistory_isset)
  {
    [encoder encodeObject: __allergicHistory forKey: @"allergicHistory"];
  }
  if (__familyHistory_isset)
  {
    [encoder encodeObject: __familyHistory forKey: @"familyHistory"];
  }
  if (__bloodType_isset)
  {
    [encoder encodeObject: __bloodType forKey: @"bloodType"];
  }
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__signingKey_isset)
  {
    [encoder encodeObject: __signingKey forKey: @"signingKey"];
  }
  if (__accountName_isset)
  {
    [encoder encodeObject: __accountName forKey: @"accountName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __userId_isset ? 2654435761 : 0;
  if (__userId_isset)
  {
    hash = (hash * 31) ^ [__userId hash];
  }
  hash = (hash * 31) ^ __headImg_isset ? 2654435761 : 0;
  if (__headImg_isset)
  {
    hash = (hash * 31) ^ [__headImg hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [__gender hash];
  }
  hash = (hash * 31) ^ __phoneNo_isset ? 2654435761 : 0;
  if (__phoneNo_isset)
  {
    hash = (hash * 31) ^ [__phoneNo hash];
  }
  hash = (hash * 31) ^ __papersNo_isset ? 2654435761 : 0;
  if (__papersNo_isset)
  {
    hash = (hash * 31) ^ [__papersNo hash];
  }
  hash = (hash * 31) ^ __papersTypeId_isset ? 2654435761 : 0;
  if (__papersTypeId_isset)
  {
    hash = (hash * 31) ^ [__papersTypeId hash];
  }
  hash = (hash * 31) ^ __papersType_isset ? 2654435761 : 0;
  if (__papersType_isset)
  {
    hash = (hash * 31) ^ [__papersType hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [__patientId hash];
  }
  hash = (hash * 31) ^ __age_isset ? 2654435761 : 0;
  if (__age_isset)
  {
    hash = (hash * 31) ^ [__age hash];
  }
  hash = (hash * 31) ^ __medInsureance_isset ? 2654435761 : 0;
  if (__medInsureance_isset)
  {
    hash = (hash * 31) ^ [__medInsureance hash];
  }
  hash = (hash * 31) ^ __stature_isset ? 2654435761 : 0;
  if (__stature_isset)
  {
    hash = (hash * 31) ^ [__stature hash];
  }
  hash = (hash * 31) ^ __weight_isset ? 2654435761 : 0;
  if (__weight_isset)
  {
    hash = (hash * 31) ^ [__weight hash];
  }
  hash = (hash * 31) ^ __bornDate_isset ? 2654435761 : 0;
  if (__bornDate_isset)
  {
    hash = (hash * 31) ^ [__bornDate hash];
  }
  hash = (hash * 31) ^ __address_isset ? 2654435761 : 0;
  if (__address_isset)
  {
    hash = (hash * 31) ^ [__address hash];
  }
  hash = (hash * 31) ^ __relationId_isset ? 2654435761 : 0;
  if (__relationId_isset)
  {
    hash = (hash * 31) ^ [__relationId hash];
  }
  hash = (hash * 31) ^ __criticalIllness_isset ? 2654435761 : 0;
  if (__criticalIllness_isset)
  {
    hash = (hash * 31) ^ [__criticalIllness hash];
  }
  hash = (hash * 31) ^ __allergicHistory_isset ? 2654435761 : 0;
  if (__allergicHistory_isset)
  {
    hash = (hash * 31) ^ [__allergicHistory hash];
  }
  hash = (hash * 31) ^ __familyHistory_isset ? 2654435761 : 0;
  if (__familyHistory_isset)
  {
    hash = (hash * 31) ^ [__familyHistory hash];
  }
  hash = (hash * 31) ^ __bloodType_isset ? 2654435761 : 0;
  if (__bloodType_isset)
  {
    hash = (hash * 31) ^ [__bloodType hash];
  }
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __signingKey_isset ? 2654435761 : 0;
  if (__signingKey_isset)
  {
    hash = (hash * 31) ^ [__signingKey hash];
  }
  hash = (hash * 31) ^ __accountName_isset ? 2654435761 : 0;
  if (__accountName_isset)
  {
    hash = (hash * 31) ^ [__accountName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFSignUpResp class]]) {
    return NO;
  }
  NXTFSignUpResp *other = (NXTFSignUpResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__userId_isset != other->__userId_isset) ||
      (__userId_isset && ((__userId || other->__userId) && ![__userId isEqual:other->__userId]))) {
    return NO;
  }
  if ((__headImg_isset != other->__headImg_isset) ||
      (__headImg_isset && ((__headImg || other->__headImg) && ![__headImg isEqual:other->__headImg]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && ((__gender || other->__gender) && ![__gender isEqual:other->__gender]))) {
    return NO;
  }
  if ((__phoneNo_isset != other->__phoneNo_isset) ||
      (__phoneNo_isset && ((__phoneNo || other->__phoneNo) && ![__phoneNo isEqual:other->__phoneNo]))) {
    return NO;
  }
  if ((__papersNo_isset != other->__papersNo_isset) ||
      (__papersNo_isset && ((__papersNo || other->__papersNo) && ![__papersNo isEqual:other->__papersNo]))) {
    return NO;
  }
  if ((__papersTypeId_isset != other->__papersTypeId_isset) ||
      (__papersTypeId_isset && ((__papersTypeId || other->__papersTypeId) && ![__papersTypeId isEqual:other->__papersTypeId]))) {
    return NO;
  }
  if ((__papersType_isset != other->__papersType_isset) ||
      (__papersType_isset && ((__papersType || other->__papersType) && ![__papersType isEqual:other->__papersType]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && ((__patientId || other->__patientId) && ![__patientId isEqual:other->__patientId]))) {
    return NO;
  }
  if ((__age_isset != other->__age_isset) ||
      (__age_isset && ((__age || other->__age) && ![__age isEqual:other->__age]))) {
    return NO;
  }
  if ((__medInsureance_isset != other->__medInsureance_isset) ||
      (__medInsureance_isset && ((__medInsureance || other->__medInsureance) && ![__medInsureance isEqual:other->__medInsureance]))) {
    return NO;
  }
  if ((__stature_isset != other->__stature_isset) ||
      (__stature_isset && ((__stature || other->__stature) && ![__stature isEqual:other->__stature]))) {
    return NO;
  }
  if ((__weight_isset != other->__weight_isset) ||
      (__weight_isset && ((__weight || other->__weight) && ![__weight isEqual:other->__weight]))) {
    return NO;
  }
  if ((__bornDate_isset != other->__bornDate_isset) ||
      (__bornDate_isset && ((__bornDate || other->__bornDate) && ![__bornDate isEqual:other->__bornDate]))) {
    return NO;
  }
  if ((__address_isset != other->__address_isset) ||
      (__address_isset && ((__address || other->__address) && ![__address isEqual:other->__address]))) {
    return NO;
  }
  if ((__relationId_isset != other->__relationId_isset) ||
      (__relationId_isset && ((__relationId || other->__relationId) && ![__relationId isEqual:other->__relationId]))) {
    return NO;
  }
  if ((__criticalIllness_isset != other->__criticalIllness_isset) ||
      (__criticalIllness_isset && ((__criticalIllness || other->__criticalIllness) && ![__criticalIllness isEqual:other->__criticalIllness]))) {
    return NO;
  }
  if ((__allergicHistory_isset != other->__allergicHistory_isset) ||
      (__allergicHistory_isset && ((__allergicHistory || other->__allergicHistory) && ![__allergicHistory isEqual:other->__allergicHistory]))) {
    return NO;
  }
  if ((__familyHistory_isset != other->__familyHistory_isset) ||
      (__familyHistory_isset && ((__familyHistory || other->__familyHistory) && ![__familyHistory isEqual:other->__familyHistory]))) {
    return NO;
  }
  if ((__bloodType_isset != other->__bloodType_isset) ||
      (__bloodType_isset && ((__bloodType || other->__bloodType) && ![__bloodType isEqual:other->__bloodType]))) {
    return NO;
  }
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__signingKey_isset != other->__signingKey_isset) ||
      (__signingKey_isset && ((__signingKey || other->__signingKey) && ![__signingKey isEqual:other->__signingKey]))) {
    return NO;
  }
  if ((__accountName_isset != other->__accountName_isset) ||
      (__accountName_isset && ((__accountName || other->__accountName) && ![__accountName isEqual:other->__accountName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__userId release_stub];
  [__headImg release_stub];
  [__name release_stub];
  [__gender release_stub];
  [__phoneNo release_stub];
  [__papersNo release_stub];
  [__papersTypeId release_stub];
  [__papersType release_stub];
  [__patientId release_stub];
  [__age release_stub];
  [__medInsureance release_stub];
  [__stature release_stub];
  [__weight release_stub];
  [__bornDate release_stub];
  [__address release_stub];
  [__relationId release_stub];
  [__criticalIllness release_stub];
  [__allergicHistory release_stub];
  [__familyHistory release_stub];
  [__bloodType release_stub];
  [__token release_stub];
  [__signingKey release_stub];
  [__accountName release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSString *) headImg {
  return [[__headImg retain_stub] autorelease_stub];
}

- (void) setHeadImg: (NSString *) headImg {
  [headImg retain_stub];
  [__headImg release_stub];
  __headImg = headImg;
  __headImg_isset = YES;
}

- (BOOL) headImgIsSet {
  return __headImg_isset;
}

- (void) unsetHeadImg {
  [__headImg release_stub];
  __headImg = nil;
  __headImg_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) gender {
  return [[__gender retain_stub] autorelease_stub];
}

- (void) setGender: (NSString *) gender {
  [gender retain_stub];
  [__gender release_stub];
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  [__gender release_stub];
  __gender = nil;
  __gender_isset = NO;
}

- (NSString *) phoneNo {
  return [[__phoneNo retain_stub] autorelease_stub];
}

- (void) setPhoneNo: (NSString *) phoneNo {
  [phoneNo retain_stub];
  [__phoneNo release_stub];
  __phoneNo = phoneNo;
  __phoneNo_isset = YES;
}

- (BOOL) phoneNoIsSet {
  return __phoneNo_isset;
}

- (void) unsetPhoneNo {
  [__phoneNo release_stub];
  __phoneNo = nil;
  __phoneNo_isset = NO;
}

- (NSString *) papersNo {
  return [[__papersNo retain_stub] autorelease_stub];
}

- (void) setPapersNo: (NSString *) papersNo {
  [papersNo retain_stub];
  [__papersNo release_stub];
  __papersNo = papersNo;
  __papersNo_isset = YES;
}

- (BOOL) papersNoIsSet {
  return __papersNo_isset;
}

- (void) unsetPapersNo {
  [__papersNo release_stub];
  __papersNo = nil;
  __papersNo_isset = NO;
}

- (NSString *) papersTypeId {
  return [[__papersTypeId retain_stub] autorelease_stub];
}

- (void) setPapersTypeId: (NSString *) papersTypeId {
  [papersTypeId retain_stub];
  [__papersTypeId release_stub];
  __papersTypeId = papersTypeId;
  __papersTypeId_isset = YES;
}

- (BOOL) papersTypeIdIsSet {
  return __papersTypeId_isset;
}

- (void) unsetPapersTypeId {
  [__papersTypeId release_stub];
  __papersTypeId = nil;
  __papersTypeId_isset = NO;
}

- (NSString *) papersType {
  return [[__papersType retain_stub] autorelease_stub];
}

- (void) setPapersType: (NSString *) papersType {
  [papersType retain_stub];
  [__papersType release_stub];
  __papersType = papersType;
  __papersType_isset = YES;
}

- (BOOL) papersTypeIsSet {
  return __papersType_isset;
}

- (void) unsetPapersType {
  [__papersType release_stub];
  __papersType = nil;
  __papersType_isset = NO;
}

- (NSString *) patientId {
  return [[__patientId retain_stub] autorelease_stub];
}

- (void) setPatientId: (NSString *) patientId {
  [patientId retain_stub];
  [__patientId release_stub];
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  [__patientId release_stub];
  __patientId = nil;
  __patientId_isset = NO;
}

- (NSString *) age {
  return [[__age retain_stub] autorelease_stub];
}

- (void) setAge: (NSString *) age {
  [age retain_stub];
  [__age release_stub];
  __age = age;
  __age_isset = YES;
}

- (BOOL) ageIsSet {
  return __age_isset;
}

- (void) unsetAge {
  [__age release_stub];
  __age = nil;
  __age_isset = NO;
}

- (NSString *) medInsureance {
  return [[__medInsureance retain_stub] autorelease_stub];
}

- (void) setMedInsureance: (NSString *) medInsureance {
  [medInsureance retain_stub];
  [__medInsureance release_stub];
  __medInsureance = medInsureance;
  __medInsureance_isset = YES;
}

- (BOOL) medInsureanceIsSet {
  return __medInsureance_isset;
}

- (void) unsetMedInsureance {
  [__medInsureance release_stub];
  __medInsureance = nil;
  __medInsureance_isset = NO;
}

- (NSString *) stature {
  return [[__stature retain_stub] autorelease_stub];
}

- (void) setStature: (NSString *) stature {
  [stature retain_stub];
  [__stature release_stub];
  __stature = stature;
  __stature_isset = YES;
}

- (BOOL) statureIsSet {
  return __stature_isset;
}

- (void) unsetStature {
  [__stature release_stub];
  __stature = nil;
  __stature_isset = NO;
}

- (NSString *) weight {
  return [[__weight retain_stub] autorelease_stub];
}

- (void) setWeight: (NSString *) weight {
  [weight retain_stub];
  [__weight release_stub];
  __weight = weight;
  __weight_isset = YES;
}

- (BOOL) weightIsSet {
  return __weight_isset;
}

- (void) unsetWeight {
  [__weight release_stub];
  __weight = nil;
  __weight_isset = NO;
}

- (NSString *) bornDate {
  return [[__bornDate retain_stub] autorelease_stub];
}

- (void) setBornDate: (NSString *) bornDate {
  [bornDate retain_stub];
  [__bornDate release_stub];
  __bornDate = bornDate;
  __bornDate_isset = YES;
}

- (BOOL) bornDateIsSet {
  return __bornDate_isset;
}

- (void) unsetBornDate {
  [__bornDate release_stub];
  __bornDate = nil;
  __bornDate_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (NSString *) relationId {
  return [[__relationId retain_stub] autorelease_stub];
}

- (void) setRelationId: (NSString *) relationId {
  [relationId retain_stub];
  [__relationId release_stub];
  __relationId = relationId;
  __relationId_isset = YES;
}

- (BOOL) relationIdIsSet {
  return __relationId_isset;
}

- (void) unsetRelationId {
  [__relationId release_stub];
  __relationId = nil;
  __relationId_isset = NO;
}

- (NSString *) criticalIllness {
  return [[__criticalIllness retain_stub] autorelease_stub];
}

- (void) setCriticalIllness: (NSString *) criticalIllness {
  [criticalIllness retain_stub];
  [__criticalIllness release_stub];
  __criticalIllness = criticalIllness;
  __criticalIllness_isset = YES;
}

- (BOOL) criticalIllnessIsSet {
  return __criticalIllness_isset;
}

- (void) unsetCriticalIllness {
  [__criticalIllness release_stub];
  __criticalIllness = nil;
  __criticalIllness_isset = NO;
}

- (NSString *) allergicHistory {
  return [[__allergicHistory retain_stub] autorelease_stub];
}

- (void) setAllergicHistory: (NSString *) allergicHistory {
  [allergicHistory retain_stub];
  [__allergicHistory release_stub];
  __allergicHistory = allergicHistory;
  __allergicHistory_isset = YES;
}

- (BOOL) allergicHistoryIsSet {
  return __allergicHistory_isset;
}

- (void) unsetAllergicHistory {
  [__allergicHistory release_stub];
  __allergicHistory = nil;
  __allergicHistory_isset = NO;
}

- (NSString *) familyHistory {
  return [[__familyHistory retain_stub] autorelease_stub];
}

- (void) setFamilyHistory: (NSString *) familyHistory {
  [familyHistory retain_stub];
  [__familyHistory release_stub];
  __familyHistory = familyHistory;
  __familyHistory_isset = YES;
}

- (BOOL) familyHistoryIsSet {
  return __familyHistory_isset;
}

- (void) unsetFamilyHistory {
  [__familyHistory release_stub];
  __familyHistory = nil;
  __familyHistory_isset = NO;
}

- (NSString *) bloodType {
  return [[__bloodType retain_stub] autorelease_stub];
}

- (void) setBloodType: (NSString *) bloodType {
  [bloodType retain_stub];
  [__bloodType release_stub];
  __bloodType = bloodType;
  __bloodType_isset = YES;
}

- (BOOL) bloodTypeIsSet {
  return __bloodType_isset;
}

- (void) unsetBloodType {
  [__bloodType release_stub];
  __bloodType = nil;
  __bloodType_isset = NO;
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) signingKey {
  return [[__signingKey retain_stub] autorelease_stub];
}

- (void) setSigningKey: (NSString *) signingKey {
  [signingKey retain_stub];
  [__signingKey release_stub];
  __signingKey = signingKey;
  __signingKey_isset = YES;
}

- (BOOL) signingKeyIsSet {
  return __signingKey_isset;
}

- (void) unsetSigningKey {
  [__signingKey release_stub];
  __signingKey = nil;
  __signingKey_isset = NO;
}

- (NSString *) accountName {
  return [[__accountName retain_stub] autorelease_stub];
}

- (void) setAccountName: (NSString *) accountName {
  [accountName retain_stub];
  [__accountName release_stub];
  __accountName = accountName;
  __accountName_isset = YES;
}

- (BOOL) accountNameIsSet {
  return __accountName_isset;
}

- (void) unsetAccountName {
  [__accountName release_stub];
  __accountName = nil;
  __accountName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHeadImg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoneNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPapersNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPapersTypeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPapersType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAge: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMedInsureance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStature: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWeight: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBornDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRelationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCriticalIllness: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAllergicHistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFamilyHistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBloodType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSigningKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccountName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignUpResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__headImg_isset) {
    if (__headImg != nil) {
      [outProtocol writeFieldBeginWithName: @"headImg" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __headImg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    if (__gender != nil) {
      [outProtocol writeFieldBeginWithName: @"gender" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __gender];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phoneNo_isset) {
    if (__phoneNo != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneNo" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __phoneNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__papersNo_isset) {
    if (__papersNo != nil) {
      [outProtocol writeFieldBeginWithName: @"papersNo" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __papersNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__papersTypeId_isset) {
    if (__papersTypeId != nil) {
      [outProtocol writeFieldBeginWithName: @"papersTypeId" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __papersTypeId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__papersType_isset) {
    if (__papersType != nil) {
      [outProtocol writeFieldBeginWithName: @"papersType" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __papersType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    if (__patientId != nil) {
      [outProtocol writeFieldBeginWithName: @"patientId" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __patientId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__age_isset) {
    if (__age != nil) {
      [outProtocol writeFieldBeginWithName: @"age" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __age];
      [outProtocol writeFieldEnd];
    }
  }
  if (__medInsureance_isset) {
    if (__medInsureance != nil) {
      [outProtocol writeFieldBeginWithName: @"medInsureance" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __medInsureance];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stature_isset) {
    if (__stature != nil) {
      [outProtocol writeFieldBeginWithName: @"stature" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __stature];
      [outProtocol writeFieldEnd];
    }
  }
  if (__weight_isset) {
    if (__weight != nil) {
      [outProtocol writeFieldBeginWithName: @"weight" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __weight];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bornDate_isset) {
    if (__bornDate != nil) {
      [outProtocol writeFieldBeginWithName: @"bornDate" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __bornDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__relationId_isset) {
    if (__relationId != nil) {
      [outProtocol writeFieldBeginWithName: @"relationId" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __relationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__criticalIllness_isset) {
    if (__criticalIllness != nil) {
      [outProtocol writeFieldBeginWithName: @"criticalIllness" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __criticalIllness];
      [outProtocol writeFieldEnd];
    }
  }
  if (__allergicHistory_isset) {
    if (__allergicHistory != nil) {
      [outProtocol writeFieldBeginWithName: @"allergicHistory" type: TType_STRING fieldID: 19];
      [outProtocol writeString: __allergicHistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__familyHistory_isset) {
    if (__familyHistory != nil) {
      [outProtocol writeFieldBeginWithName: @"familyHistory" type: TType_STRING fieldID: 20];
      [outProtocol writeString: __familyHistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bloodType_isset) {
    if (__bloodType != nil) {
      [outProtocol writeFieldBeginWithName: @"bloodType" type: TType_STRING fieldID: 21];
      [outProtocol writeString: __bloodType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 22];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__signingKey_isset) {
    if (__signingKey != nil) {
      [outProtocol writeFieldBeginWithName: @"signingKey" type: TType_STRING fieldID: 23];
      [outProtocol writeString: __signingKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__accountName_isset) {
    if (__accountName != nil) {
      [outProtocol writeFieldBeginWithName: @"accountName" type: TType_STRING fieldID: 24];
      [outProtocol writeString: __accountName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFSignUpResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",headImg:"];
  [ms appendFormat: @"\"%@\"", __headImg];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"\"%@\"", __gender];
  [ms appendString: @",phoneNo:"];
  [ms appendFormat: @"\"%@\"", __phoneNo];
  [ms appendString: @",papersNo:"];
  [ms appendFormat: @"\"%@\"", __papersNo];
  [ms appendString: @",papersTypeId:"];
  [ms appendFormat: @"\"%@\"", __papersTypeId];
  [ms appendString: @",papersType:"];
  [ms appendFormat: @"\"%@\"", __papersType];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"\"%@\"", __patientId];
  [ms appendString: @",age:"];
  [ms appendFormat: @"\"%@\"", __age];
  [ms appendString: @",medInsureance:"];
  [ms appendFormat: @"\"%@\"", __medInsureance];
  [ms appendString: @",stature:"];
  [ms appendFormat: @"\"%@\"", __stature];
  [ms appendString: @",weight:"];
  [ms appendFormat: @"\"%@\"", __weight];
  [ms appendString: @",bornDate:"];
  [ms appendFormat: @"\"%@\"", __bornDate];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",relationId:"];
  [ms appendFormat: @"\"%@\"", __relationId];
  [ms appendString: @",criticalIllness:"];
  [ms appendFormat: @"\"%@\"", __criticalIllness];
  [ms appendString: @",allergicHistory:"];
  [ms appendFormat: @"\"%@\"", __allergicHistory];
  [ms appendString: @",familyHistory:"];
  [ms appendFormat: @"\"%@\"", __familyHistory];
  [ms appendString: @",bloodType:"];
  [ms appendFormat: @"\"%@\"", __bloodType];
  [ms appendString: @",token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",signingKey:"];
  [ms appendFormat: @"\"%@\"", __signingKey];
  [ms appendString: @",accountName:"];
  [ms appendFormat: @"\"%@\"", __accountName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetCitiesResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.citys = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header citys: (NSMutableArray *) citys
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __citys = [citys retain_stub];
  __citys_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"citys"])
  {
    __citys = [[decoder decodeObjectForKey: @"citys"] retain_stub];
    __citys_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__citys_isset)
  {
    [encoder encodeObject: __citys forKey: @"citys"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __citys_isset ? 2654435761 : 0;
  if (__citys_isset)
  {
    hash = (hash * 31) ^ [__citys hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetCitiesResp class]]) {
    return NO;
  }
  NXTFGetCitiesResp *other = (NXTFGetCitiesResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__citys_isset != other->__citys_isset) ||
      (__citys_isset && ((__citys || other->__citys) && ![__citys isEqual:other->__citys]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__citys release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) citys {
  return [[__citys retain_stub] autorelease_stub];
}

- (void) setCitys: (NSMutableArray *) citys {
  [citys retain_stub];
  [__citys release_stub];
  __citys = citys;
  __citys_isset = YES;
}

- (BOOL) citysIsSet {
  return __citys_isset;
}

- (void) unsetCitys {
  [__citys release_stub];
  __citys = nil;
  __citys_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size116;
          [inProtocol readListBeginReturningElementType: NULL size: &_size116];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size116];
          int _i117;
          for (_i117 = 0; _i117 < _size116; ++_i117)
          {
            NXTFCityDto *_elem118 = [[NXTFCityDto alloc] init];
            [_elem118 read: inProtocol];
            [fieldValue addObject: _elem118];
            [_elem118 release_stub];
          }
          [inProtocol readListEnd];
          [self setCitys: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetCitiesResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__citys_isset) {
    if (__citys != nil) {
      [outProtocol writeFieldBeginWithName: @"citys" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__citys count]];
        int idx120;
        for (idx120 = 0; idx120 < [__citys count]; idx120++)
        {
          [[__citys objectAtIndex: idx120] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetCitiesResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",citys:"];
  [ms appendFormat: @"%@", __citys];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFBindInpatientNoResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFBindInpatientNoResp class]]) {
    return NO;
  }
  NXTFBindInpatientNoResp *other = (NXTFBindInpatientNoResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BindInpatientNoResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFBindInpatientNoResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetInpatientInfosResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.inpatientInfos = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header inpatientInfos: (NSMutableArray *) inpatientInfos
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __inpatientInfos = [inpatientInfos retain_stub];
  __inpatientInfos_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"inpatientInfos"])
  {
    __inpatientInfos = [[decoder decodeObjectForKey: @"inpatientInfos"] retain_stub];
    __inpatientInfos_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__inpatientInfos_isset)
  {
    [encoder encodeObject: __inpatientInfos forKey: @"inpatientInfos"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __inpatientInfos_isset ? 2654435761 : 0;
  if (__inpatientInfos_isset)
  {
    hash = (hash * 31) ^ [__inpatientInfos hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetInpatientInfosResp class]]) {
    return NO;
  }
  NXTFGetInpatientInfosResp *other = (NXTFGetInpatientInfosResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__inpatientInfos_isset != other->__inpatientInfos_isset) ||
      (__inpatientInfos_isset && ((__inpatientInfos || other->__inpatientInfos) && ![__inpatientInfos isEqual:other->__inpatientInfos]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__inpatientInfos release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) inpatientInfos {
  return [[__inpatientInfos retain_stub] autorelease_stub];
}

- (void) setInpatientInfos: (NSMutableArray *) inpatientInfos {
  [inpatientInfos retain_stub];
  [__inpatientInfos release_stub];
  __inpatientInfos = inpatientInfos;
  __inpatientInfos_isset = YES;
}

- (BOOL) inpatientInfosIsSet {
  return __inpatientInfos_isset;
}

- (void) unsetInpatientInfos {
  [__inpatientInfos release_stub];
  __inpatientInfos = nil;
  __inpatientInfos_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size121;
          [inProtocol readListBeginReturningElementType: NULL size: &_size121];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size121];
          int _i122;
          for (_i122 = 0; _i122 < _size121; ++_i122)
          {
            NXTFInpatientInfo *_elem123 = [[NXTFInpatientInfo alloc] init];
            [_elem123 read: inProtocol];
            [fieldValue addObject: _elem123];
            [_elem123 release_stub];
          }
          [inProtocol readListEnd];
          [self setInpatientInfos: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetInpatientInfosResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__inpatientInfos_isset) {
    if (__inpatientInfos != nil) {
      [outProtocol writeFieldBeginWithName: @"inpatientInfos" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__inpatientInfos count]];
        int idx125;
        for (idx125 = 0; idx125 < [__inpatientInfos count]; idx125++)
        {
          [[__inpatientInfos objectAtIndex: idx125] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetInpatientInfosResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",inpatientInfos:"];
  [ms appendFormat: @"%@", __inpatientInfos];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetInpatientInfoResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header inpatientInfo: (NXTFInpatientInfo *) inpatientInfo
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __inpatientInfo = [inpatientInfo retain_stub];
  __inpatientInfo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"inpatientInfo"])
  {
    __inpatientInfo = [[decoder decodeObjectForKey: @"inpatientInfo"] retain_stub];
    __inpatientInfo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__inpatientInfo_isset)
  {
    [encoder encodeObject: __inpatientInfo forKey: @"inpatientInfo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __inpatientInfo_isset ? 2654435761 : 0;
  if (__inpatientInfo_isset)
  {
    hash = (hash * 31) ^ [__inpatientInfo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetInpatientInfoResp class]]) {
    return NO;
  }
  NXTFGetInpatientInfoResp *other = (NXTFGetInpatientInfoResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__inpatientInfo_isset != other->__inpatientInfo_isset) ||
      (__inpatientInfo_isset && ((__inpatientInfo || other->__inpatientInfo) && ![__inpatientInfo isEqual:other->__inpatientInfo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__inpatientInfo release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFInpatientInfo *) inpatientInfo {
  return [[__inpatientInfo retain_stub] autorelease_stub];
}

- (void) setInpatientInfo: (NXTFInpatientInfo *) inpatientInfo {
  [inpatientInfo retain_stub];
  [__inpatientInfo release_stub];
  __inpatientInfo = inpatientInfo;
  __inpatientInfo_isset = YES;
}

- (BOOL) inpatientInfoIsSet {
  return __inpatientInfo_isset;
}

- (void) unsetInpatientInfo {
  [__inpatientInfo release_stub];
  __inpatientInfo = nil;
  __inpatientInfo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFInpatientInfo *fieldValue = [[NXTFInpatientInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setInpatientInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetInpatientInfoResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__inpatientInfo_isset) {
    if (__inpatientInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"inpatientInfo" type: TType_STRUCT fieldID: 2];
      [__inpatientInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetInpatientInfoResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",inpatientInfo:"];
  [ms appendFormat: @"%@", __inpatientInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetInpatientFeeListResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.dailyFees = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header dailyFees: (NSMutableArray *) dailyFees
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __dailyFees = [dailyFees retain_stub];
  __dailyFees_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"dailyFees"])
  {
    __dailyFees = [[decoder decodeObjectForKey: @"dailyFees"] retain_stub];
    __dailyFees_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__dailyFees_isset)
  {
    [encoder encodeObject: __dailyFees forKey: @"dailyFees"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __dailyFees_isset ? 2654435761 : 0;
  if (__dailyFees_isset)
  {
    hash = (hash * 31) ^ [__dailyFees hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetInpatientFeeListResp class]]) {
    return NO;
  }
  NXTFGetInpatientFeeListResp *other = (NXTFGetInpatientFeeListResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__dailyFees_isset != other->__dailyFees_isset) ||
      (__dailyFees_isset && ((__dailyFees || other->__dailyFees) && ![__dailyFees isEqual:other->__dailyFees]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__dailyFees release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) dailyFees {
  return [[__dailyFees retain_stub] autorelease_stub];
}

- (void) setDailyFees: (NSMutableArray *) dailyFees {
  [dailyFees retain_stub];
  [__dailyFees release_stub];
  __dailyFees = dailyFees;
  __dailyFees_isset = YES;
}

- (BOOL) dailyFeesIsSet {
  return __dailyFees_isset;
}

- (void) unsetDailyFees {
  [__dailyFees release_stub];
  __dailyFees = nil;
  __dailyFees_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size126;
          [inProtocol readListBeginReturningElementType: NULL size: &_size126];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size126];
          int _i127;
          for (_i127 = 0; _i127 < _size126; ++_i127)
          {
            NXTFInpatientDailyFee *_elem128 = [[NXTFInpatientDailyFee alloc] init];
            [_elem128 read: inProtocol];
            [fieldValue addObject: _elem128];
            [_elem128 release_stub];
          }
          [inProtocol readListEnd];
          [self setDailyFees: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetInpatientFeeListResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dailyFees_isset) {
    if (__dailyFees != nil) {
      [outProtocol writeFieldBeginWithName: @"dailyFees" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__dailyFees count]];
        int idx130;
        for (idx130 = 0; idx130 < [__dailyFees count]; idx130++)
        {
          [[__dailyFees objectAtIndex: idx130] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetInpatientFeeListResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",dailyFees:"];
  [ms appendFormat: @"%@", __dailyFees];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetInpatientFeeDetailResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.detailFees = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header detailFees: (NSMutableArray *) detailFees
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __detailFees = [detailFees retain_stub];
  __detailFees_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"detailFees"])
  {
    __detailFees = [[decoder decodeObjectForKey: @"detailFees"] retain_stub];
    __detailFees_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__detailFees_isset)
  {
    [encoder encodeObject: __detailFees forKey: @"detailFees"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __detailFees_isset ? 2654435761 : 0;
  if (__detailFees_isset)
  {
    hash = (hash * 31) ^ [__detailFees hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetInpatientFeeDetailResp class]]) {
    return NO;
  }
  NXTFGetInpatientFeeDetailResp *other = (NXTFGetInpatientFeeDetailResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__detailFees_isset != other->__detailFees_isset) ||
      (__detailFees_isset && ((__detailFees || other->__detailFees) && ![__detailFees isEqual:other->__detailFees]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__detailFees release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) detailFees {
  return [[__detailFees retain_stub] autorelease_stub];
}

- (void) setDetailFees: (NSMutableArray *) detailFees {
  [detailFees retain_stub];
  [__detailFees release_stub];
  __detailFees = detailFees;
  __detailFees_isset = YES;
}

- (BOOL) detailFeesIsSet {
  return __detailFees_isset;
}

- (void) unsetDetailFees {
  [__detailFees release_stub];
  __detailFees = nil;
  __detailFees_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size131;
          [inProtocol readListBeginReturningElementType: NULL size: &_size131];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size131];
          int _i132;
          for (_i132 = 0; _i132 < _size131; ++_i132)
          {
            NXTFInpatientDetailFee *_elem133 = [[NXTFInpatientDetailFee alloc] init];
            [_elem133 read: inProtocol];
            [fieldValue addObject: _elem133];
            [_elem133 release_stub];
          }
          [inProtocol readListEnd];
          [self setDetailFees: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetInpatientFeeDetailResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__detailFees_isset) {
    if (__detailFees != nil) {
      [outProtocol writeFieldBeginWithName: @"detailFees" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__detailFees count]];
        int idx135;
        for (idx135 = 0; idx135 < [__detailFees count]; idx135++)
        {
          [[__detailFees objectAtIndex: idx135] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetInpatientFeeDetailResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",detailFees:"];
  [ms appendFormat: @"%@", __detailFees];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFInpatientPrePaymentResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header inpatientPrePayment: (NXTFInpatientPrePayment *) inpatientPrePayment
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __inpatientPrePayment = [inpatientPrePayment retain_stub];
  __inpatientPrePayment_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"inpatientPrePayment"])
  {
    __inpatientPrePayment = [[decoder decodeObjectForKey: @"inpatientPrePayment"] retain_stub];
    __inpatientPrePayment_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__inpatientPrePayment_isset)
  {
    [encoder encodeObject: __inpatientPrePayment forKey: @"inpatientPrePayment"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __inpatientPrePayment_isset ? 2654435761 : 0;
  if (__inpatientPrePayment_isset)
  {
    hash = (hash * 31) ^ [__inpatientPrePayment hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFInpatientPrePaymentResp class]]) {
    return NO;
  }
  NXTFInpatientPrePaymentResp *other = (NXTFInpatientPrePaymentResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__inpatientPrePayment_isset != other->__inpatientPrePayment_isset) ||
      (__inpatientPrePayment_isset && ((__inpatientPrePayment || other->__inpatientPrePayment) && ![__inpatientPrePayment isEqual:other->__inpatientPrePayment]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__inpatientPrePayment release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFInpatientPrePayment *) inpatientPrePayment {
  return [[__inpatientPrePayment retain_stub] autorelease_stub];
}

- (void) setInpatientPrePayment: (NXTFInpatientPrePayment *) inpatientPrePayment {
  [inpatientPrePayment retain_stub];
  [__inpatientPrePayment release_stub];
  __inpatientPrePayment = inpatientPrePayment;
  __inpatientPrePayment_isset = YES;
}

- (BOOL) inpatientPrePaymentIsSet {
  return __inpatientPrePayment_isset;
}

- (void) unsetInpatientPrePayment {
  [__inpatientPrePayment release_stub];
  __inpatientPrePayment = nil;
  __inpatientPrePayment_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFInpatientPrePayment *fieldValue = [[NXTFInpatientPrePayment alloc] init];
          [fieldValue read: inProtocol];
          [self setInpatientPrePayment: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"InpatientPrePaymentResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__inpatientPrePayment_isset) {
    if (__inpatientPrePayment != nil) {
      [outProtocol writeFieldBeginWithName: @"inpatientPrePayment" type: TType_STRUCT fieldID: 2];
      [__inpatientPrePayment write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFInpatientPrePaymentResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",inpatientPrePayment:"];
  [ms appendFormat: @"%@", __inpatientPrePayment];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetPrePaymentDetailResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.prePaymentInfos = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header page: (NXTFPage *) page prePaymentInfos: (NSMutableArray *) prePaymentInfos
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __prePaymentInfos = [prePaymentInfos retain_stub];
  __prePaymentInfos_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"prePaymentInfos"])
  {
    __prePaymentInfos = [[decoder decodeObjectForKey: @"prePaymentInfos"] retain_stub];
    __prePaymentInfos_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__prePaymentInfos_isset)
  {
    [encoder encodeObject: __prePaymentInfos forKey: @"prePaymentInfos"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __prePaymentInfos_isset ? 2654435761 : 0;
  if (__prePaymentInfos_isset)
  {
    hash = (hash * 31) ^ [__prePaymentInfos hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetPrePaymentDetailResp class]]) {
    return NO;
  }
  NXTFGetPrePaymentDetailResp *other = (NXTFGetPrePaymentDetailResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__prePaymentInfos_isset != other->__prePaymentInfos_isset) ||
      (__prePaymentInfos_isset && ((__prePaymentInfos || other->__prePaymentInfos) && ![__prePaymentInfos isEqual:other->__prePaymentInfos]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__prePaymentInfos release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSMutableArray *) prePaymentInfos {
  return [[__prePaymentInfos retain_stub] autorelease_stub];
}

- (void) setPrePaymentInfos: (NSMutableArray *) prePaymentInfos {
  [prePaymentInfos retain_stub];
  [__prePaymentInfos release_stub];
  __prePaymentInfos = prePaymentInfos;
  __prePaymentInfos_isset = YES;
}

- (BOOL) prePaymentInfosIsSet {
  return __prePaymentInfos_isset;
}

- (void) unsetPrePaymentInfos {
  [__prePaymentInfos release_stub];
  __prePaymentInfos = nil;
  __prePaymentInfos_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size136;
          [inProtocol readListBeginReturningElementType: NULL size: &_size136];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size136];
          int _i137;
          for (_i137 = 0; _i137 < _size136; ++_i137)
          {
            NXTFPrePaymentInfo *_elem138 = [[NXTFPrePaymentInfo alloc] init];
            [_elem138 read: inProtocol];
            [fieldValue addObject: _elem138];
            [_elem138 release_stub];
          }
          [inProtocol readListEnd];
          [self setPrePaymentInfos: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPrePaymentDetailResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__prePaymentInfos_isset) {
    if (__prePaymentInfos != nil) {
      [outProtocol writeFieldBeginWithName: @"prePaymentInfos" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__prePaymentInfos count]];
        int idx140;
        for (idx140 = 0; idx140 < [__prePaymentInfos count]; idx140++)
        {
          [[__prePaymentInfos objectAtIndex: idx140] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetPrePaymentDetailResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",prePaymentInfos:"];
  [ms appendFormat: @"%@", __prePaymentInfos];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetHospsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.hosps = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header page: (NXTFPage *) page hosps: (NSMutableArray *) hosps
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __hosps = [hosps retain_stub];
  __hosps_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"hosps"])
  {
    __hosps = [[decoder decodeObjectForKey: @"hosps"] retain_stub];
    __hosps_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__hosps_isset)
  {
    [encoder encodeObject: __hosps forKey: @"hosps"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __hosps_isset ? 2654435761 : 0;
  if (__hosps_isset)
  {
    hash = (hash * 31) ^ [__hosps hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetHospsResp class]]) {
    return NO;
  }
  NXTFGetHospsResp *other = (NXTFGetHospsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__hosps_isset != other->__hosps_isset) ||
      (__hosps_isset && ((__hosps || other->__hosps) && ![__hosps isEqual:other->__hosps]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__hosps release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSMutableArray *) hosps {
  return [[__hosps retain_stub] autorelease_stub];
}

- (void) setHosps: (NSMutableArray *) hosps {
  [hosps retain_stub];
  [__hosps release_stub];
  __hosps = hosps;
  __hosps_isset = YES;
}

- (BOOL) hospsIsSet {
  return __hosps_isset;
}

- (void) unsetHosps {
  [__hosps release_stub];
  __hosps = nil;
  __hosps_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size141;
          [inProtocol readListBeginReturningElementType: NULL size: &_size141];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size141];
          int _i142;
          for (_i142 = 0; _i142 < _size141; ++_i142)
          {
            NXTFHospDto *_elem143 = [[NXTFHospDto alloc] init];
            [_elem143 read: inProtocol];
            [fieldValue addObject: _elem143];
            [_elem143 release_stub];
          }
          [inProtocol readListEnd];
          [self setHosps: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetHospsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hosps_isset) {
    if (__hosps != nil) {
      [outProtocol writeFieldBeginWithName: @"hosps" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__hosps count]];
        int idx145;
        for (idx145 = 0; idx145 < [__hosps count]; idx145++)
        {
          [[__hosps objectAtIndex: idx145] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetHospsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",hosps:"];
  [ms appendFormat: @"%@", __hosps];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetSpecialtiesResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.specialties = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header specialties: (NSMutableArray *) specialties
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __specialties = [specialties retain_stub];
  __specialties_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"specialties"])
  {
    __specialties = [[decoder decodeObjectForKey: @"specialties"] retain_stub];
    __specialties_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__specialties_isset)
  {
    [encoder encodeObject: __specialties forKey: @"specialties"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __specialties_isset ? 2654435761 : 0;
  if (__specialties_isset)
  {
    hash = (hash * 31) ^ [__specialties hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetSpecialtiesResp class]]) {
    return NO;
  }
  NXTFGetSpecialtiesResp *other = (NXTFGetSpecialtiesResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__specialties_isset != other->__specialties_isset) ||
      (__specialties_isset && ((__specialties || other->__specialties) && ![__specialties isEqual:other->__specialties]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__specialties release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) specialties {
  return [[__specialties retain_stub] autorelease_stub];
}

- (void) setSpecialties: (NSMutableArray *) specialties {
  [specialties retain_stub];
  [__specialties release_stub];
  __specialties = specialties;
  __specialties_isset = YES;
}

- (BOOL) specialtiesIsSet {
  return __specialties_isset;
}

- (void) unsetSpecialties {
  [__specialties release_stub];
  __specialties = nil;
  __specialties_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size146;
          [inProtocol readListBeginReturningElementType: NULL size: &_size146];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size146];
          int _i147;
          for (_i147 = 0; _i147 < _size146; ++_i147)
          {
            NXTFSpecialtyDto *_elem148 = [[NXTFSpecialtyDto alloc] init];
            [_elem148 read: inProtocol];
            [fieldValue addObject: _elem148];
            [_elem148 release_stub];
          }
          [inProtocol readListEnd];
          [self setSpecialties: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetSpecialtiesResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__specialties_isset) {
    if (__specialties != nil) {
      [outProtocol writeFieldBeginWithName: @"specialties" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__specialties count]];
        int idx150;
        for (idx150 = 0; idx150 < [__specialties count]; idx150++)
        {
          [[__specialties objectAtIndex: idx150] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetSpecialtiesResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",specialties:"];
  [ms appendFormat: @"%@", __specialties];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFindHospsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header page: (NXTFPage *) page findHospOutputs: (NSMutableArray *) findHospOutputs isSameCity: (NSString *) isSameCity
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __findHospOutputs = [findHospOutputs retain_stub];
  __findHospOutputs_isset = YES;
  __isSameCity = [isSameCity retain_stub];
  __isSameCity_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"findHospOutputs"])
  {
    __findHospOutputs = [[decoder decodeObjectForKey: @"findHospOutputs"] retain_stub];
    __findHospOutputs_isset = YES;
  }
  if ([decoder containsValueForKey: @"isSameCity"])
  {
    __isSameCity = [[decoder decodeObjectForKey: @"isSameCity"] retain_stub];
    __isSameCity_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__findHospOutputs_isset)
  {
    [encoder encodeObject: __findHospOutputs forKey: @"findHospOutputs"];
  }
  if (__isSameCity_isset)
  {
    [encoder encodeObject: __isSameCity forKey: @"isSameCity"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __findHospOutputs_isset ? 2654435761 : 0;
  if (__findHospOutputs_isset)
  {
    hash = (hash * 31) ^ [__findHospOutputs hash];
  }
  hash = (hash * 31) ^ __isSameCity_isset ? 2654435761 : 0;
  if (__isSameCity_isset)
  {
    hash = (hash * 31) ^ [__isSameCity hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFindHospsResp class]]) {
    return NO;
  }
  NXTFFindHospsResp *other = (NXTFFindHospsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__findHospOutputs_isset != other->__findHospOutputs_isset) ||
      (__findHospOutputs_isset && ((__findHospOutputs || other->__findHospOutputs) && ![__findHospOutputs isEqual:other->__findHospOutputs]))) {
    return NO;
  }
  if ((__isSameCity_isset != other->__isSameCity_isset) ||
      (__isSameCity_isset && ((__isSameCity || other->__isSameCity) && ![__isSameCity isEqual:other->__isSameCity]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__findHospOutputs release_stub];
  [__isSameCity release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSMutableArray *) findHospOutputs {
  return [[__findHospOutputs retain_stub] autorelease_stub];
}

- (void) setFindHospOutputs: (NSMutableArray *) findHospOutputs {
  [findHospOutputs retain_stub];
  [__findHospOutputs release_stub];
  __findHospOutputs = findHospOutputs;
  __findHospOutputs_isset = YES;
}

- (BOOL) findHospOutputsIsSet {
  return __findHospOutputs_isset;
}

- (void) unsetFindHospOutputs {
  [__findHospOutputs release_stub];
  __findHospOutputs = nil;
  __findHospOutputs_isset = NO;
}

- (NSString *) isSameCity {
  return [[__isSameCity retain_stub] autorelease_stub];
}

- (void) setIsSameCity: (NSString *) isSameCity {
  [isSameCity retain_stub];
  [__isSameCity release_stub];
  __isSameCity = isSameCity;
  __isSameCity_isset = YES;
}

- (BOOL) isSameCityIsSet {
  return __isSameCity_isset;
}

- (void) unsetIsSameCity {
  [__isSameCity release_stub];
  __isSameCity = nil;
  __isSameCity_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size151;
          [inProtocol readListBeginReturningElementType: NULL size: &_size151];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size151];
          int _i152;
          for (_i152 = 0; _i152 < _size151; ++_i152)
          {
            NXTFFindHospOutput *_elem153 = [[NXTFFindHospOutput alloc] init];
            [_elem153 read: inProtocol];
            [fieldValue addObject: _elem153];
            [_elem153 release_stub];
          }
          [inProtocol readListEnd];
          [self setFindHospOutputs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsSameCity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FindHospsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__findHospOutputs_isset) {
    if (__findHospOutputs != nil) {
      [outProtocol writeFieldBeginWithName: @"findHospOutputs" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__findHospOutputs count]];
        int idx155;
        for (idx155 = 0; idx155 < [__findHospOutputs count]; idx155++)
        {
          [[__findHospOutputs objectAtIndex: idx155] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__isSameCity_isset) {
    if (__isSameCity != nil) {
      [outProtocol writeFieldBeginWithName: @"isSameCity" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __isSameCity];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFindHospsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",findHospOutputs:"];
  [ms appendFormat: @"%@", __findHospOutputs];
  [ms appendString: @",isSameCity:"];
  [ms appendFormat: @"\"%@\"", __isSameCity];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetDiseasesResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header page: (NXTFPage *) page diseases: (NSMutableArray *) diseases
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __diseases = [diseases retain_stub];
  __diseases_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"diseases"])
  {
    __diseases = [[decoder decodeObjectForKey: @"diseases"] retain_stub];
    __diseases_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__diseases_isset)
  {
    [encoder encodeObject: __diseases forKey: @"diseases"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __diseases_isset ? 2654435761 : 0;
  if (__diseases_isset)
  {
    hash = (hash * 31) ^ [__diseases hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetDiseasesResp class]]) {
    return NO;
  }
  NXTFGetDiseasesResp *other = (NXTFGetDiseasesResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__diseases_isset != other->__diseases_isset) ||
      (__diseases_isset && ((__diseases || other->__diseases) && ![__diseases isEqual:other->__diseases]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__diseases release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSMutableArray *) diseases {
  return [[__diseases retain_stub] autorelease_stub];
}

- (void) setDiseases: (NSMutableArray *) diseases {
  [diseases retain_stub];
  [__diseases release_stub];
  __diseases = diseases;
  __diseases_isset = YES;
}

- (BOOL) diseasesIsSet {
  return __diseases_isset;
}

- (void) unsetDiseases {
  [__diseases release_stub];
  __diseases = nil;
  __diseases_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size156;
          [inProtocol readListBeginReturningElementType: NULL size: &_size156];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size156];
          int _i157;
          for (_i157 = 0; _i157 < _size156; ++_i157)
          {
            NXTFDiseaseDto *_elem158 = [[NXTFDiseaseDto alloc] init];
            [_elem158 read: inProtocol];
            [fieldValue addObject: _elem158];
            [_elem158 release_stub];
          }
          [inProtocol readListEnd];
          [self setDiseases: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDiseasesResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diseases_isset) {
    if (__diseases != nil) {
      [outProtocol writeFieldBeginWithName: @"diseases" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__diseases count]];
        int idx160;
        for (idx160 = 0; idx160 < [__diseases count]; idx160++)
        {
          [[__diseases objectAtIndex: idx160] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetDiseasesResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",diseases:"];
  [ms appendFormat: @"%@", __diseases];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetDiseaseResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header name: (NSString *) name recomDepts: (NSString *) recomDepts desc: (NSString *) desc cause: (NSString *) cause symptom: (NSString *) symptom examination: (NSString *) examination cure: (NSString *) cure precaution: (NSString *) precaution bodyPart: (NSString *) bodyPart crowd: (NSString *) crowd comDeptId: (NSString *) comDeptId fee: (NSString *) fee isInfectious: (int32_t) isInfectious remoteFile: (NSString *) remoteFile
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __recomDepts = [recomDepts retain_stub];
  __recomDepts_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __cause = [cause retain_stub];
  __cause_isset = YES;
  __symptom = [symptom retain_stub];
  __symptom_isset = YES;
  __examination = [examination retain_stub];
  __examination_isset = YES;
  __cure = [cure retain_stub];
  __cure_isset = YES;
  __precaution = [precaution retain_stub];
  __precaution_isset = YES;
  __bodyPart = [bodyPart retain_stub];
  __bodyPart_isset = YES;
  __crowd = [crowd retain_stub];
  __crowd_isset = YES;
  __comDeptId = [comDeptId retain_stub];
  __comDeptId_isset = YES;
  __fee = [fee retain_stub];
  __fee_isset = YES;
  __isInfectious = isInfectious;
  __isInfectious_isset = YES;
  __remoteFile = [remoteFile retain_stub];
  __remoteFile_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"recomDepts"])
  {
    __recomDepts = [[decoder decodeObjectForKey: @"recomDepts"] retain_stub];
    __recomDepts_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"cause"])
  {
    __cause = [[decoder decodeObjectForKey: @"cause"] retain_stub];
    __cause_isset = YES;
  }
  if ([decoder containsValueForKey: @"symptom"])
  {
    __symptom = [[decoder decodeObjectForKey: @"symptom"] retain_stub];
    __symptom_isset = YES;
  }
  if ([decoder containsValueForKey: @"examination"])
  {
    __examination = [[decoder decodeObjectForKey: @"examination"] retain_stub];
    __examination_isset = YES;
  }
  if ([decoder containsValueForKey: @"cure"])
  {
    __cure = [[decoder decodeObjectForKey: @"cure"] retain_stub];
    __cure_isset = YES;
  }
  if ([decoder containsValueForKey: @"precaution"])
  {
    __precaution = [[decoder decodeObjectForKey: @"precaution"] retain_stub];
    __precaution_isset = YES;
  }
  if ([decoder containsValueForKey: @"bodyPart"])
  {
    __bodyPart = [[decoder decodeObjectForKey: @"bodyPart"] retain_stub];
    __bodyPart_isset = YES;
  }
  if ([decoder containsValueForKey: @"crowd"])
  {
    __crowd = [[decoder decodeObjectForKey: @"crowd"] retain_stub];
    __crowd_isset = YES;
  }
  if ([decoder containsValueForKey: @"comDeptId"])
  {
    __comDeptId = [[decoder decodeObjectForKey: @"comDeptId"] retain_stub];
    __comDeptId_isset = YES;
  }
  if ([decoder containsValueForKey: @"fee"])
  {
    __fee = [[decoder decodeObjectForKey: @"fee"] retain_stub];
    __fee_isset = YES;
  }
  if ([decoder containsValueForKey: @"isInfectious"])
  {
    __isInfectious = [decoder decodeInt32ForKey: @"isInfectious"];
    __isInfectious_isset = YES;
  }
  if ([decoder containsValueForKey: @"remoteFile"])
  {
    __remoteFile = [[decoder decodeObjectForKey: @"remoteFile"] retain_stub];
    __remoteFile_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__recomDepts_isset)
  {
    [encoder encodeObject: __recomDepts forKey: @"recomDepts"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__cause_isset)
  {
    [encoder encodeObject: __cause forKey: @"cause"];
  }
  if (__symptom_isset)
  {
    [encoder encodeObject: __symptom forKey: @"symptom"];
  }
  if (__examination_isset)
  {
    [encoder encodeObject: __examination forKey: @"examination"];
  }
  if (__cure_isset)
  {
    [encoder encodeObject: __cure forKey: @"cure"];
  }
  if (__precaution_isset)
  {
    [encoder encodeObject: __precaution forKey: @"precaution"];
  }
  if (__bodyPart_isset)
  {
    [encoder encodeObject: __bodyPart forKey: @"bodyPart"];
  }
  if (__crowd_isset)
  {
    [encoder encodeObject: __crowd forKey: @"crowd"];
  }
  if (__comDeptId_isset)
  {
    [encoder encodeObject: __comDeptId forKey: @"comDeptId"];
  }
  if (__fee_isset)
  {
    [encoder encodeObject: __fee forKey: @"fee"];
  }
  if (__isInfectious_isset)
  {
    [encoder encodeInt32: __isInfectious forKey: @"isInfectious"];
  }
  if (__remoteFile_isset)
  {
    [encoder encodeObject: __remoteFile forKey: @"remoteFile"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __recomDepts_isset ? 2654435761 : 0;
  if (__recomDepts_isset)
  {
    hash = (hash * 31) ^ [__recomDepts hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __cause_isset ? 2654435761 : 0;
  if (__cause_isset)
  {
    hash = (hash * 31) ^ [__cause hash];
  }
  hash = (hash * 31) ^ __symptom_isset ? 2654435761 : 0;
  if (__symptom_isset)
  {
    hash = (hash * 31) ^ [__symptom hash];
  }
  hash = (hash * 31) ^ __examination_isset ? 2654435761 : 0;
  if (__examination_isset)
  {
    hash = (hash * 31) ^ [__examination hash];
  }
  hash = (hash * 31) ^ __cure_isset ? 2654435761 : 0;
  if (__cure_isset)
  {
    hash = (hash * 31) ^ [__cure hash];
  }
  hash = (hash * 31) ^ __precaution_isset ? 2654435761 : 0;
  if (__precaution_isset)
  {
    hash = (hash * 31) ^ [__precaution hash];
  }
  hash = (hash * 31) ^ __bodyPart_isset ? 2654435761 : 0;
  if (__bodyPart_isset)
  {
    hash = (hash * 31) ^ [__bodyPart hash];
  }
  hash = (hash * 31) ^ __crowd_isset ? 2654435761 : 0;
  if (__crowd_isset)
  {
    hash = (hash * 31) ^ [__crowd hash];
  }
  hash = (hash * 31) ^ __comDeptId_isset ? 2654435761 : 0;
  if (__comDeptId_isset)
  {
    hash = (hash * 31) ^ [__comDeptId hash];
  }
  hash = (hash * 31) ^ __fee_isset ? 2654435761 : 0;
  if (__fee_isset)
  {
    hash = (hash * 31) ^ [__fee hash];
  }
  hash = (hash * 31) ^ __isInfectious_isset ? 2654435761 : 0;
  if (__isInfectious_isset)
  {
    hash = (hash * 31) ^ [@(__isInfectious) hash];
  }
  hash = (hash * 31) ^ __remoteFile_isset ? 2654435761 : 0;
  if (__remoteFile_isset)
  {
    hash = (hash * 31) ^ [__remoteFile hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetDiseaseResp class]]) {
    return NO;
  }
  NXTFGetDiseaseResp *other = (NXTFGetDiseaseResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__recomDepts_isset != other->__recomDepts_isset) ||
      (__recomDepts_isset && ((__recomDepts || other->__recomDepts) && ![__recomDepts isEqual:other->__recomDepts]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__cause_isset != other->__cause_isset) ||
      (__cause_isset && ((__cause || other->__cause) && ![__cause isEqual:other->__cause]))) {
    return NO;
  }
  if ((__symptom_isset != other->__symptom_isset) ||
      (__symptom_isset && ((__symptom || other->__symptom) && ![__symptom isEqual:other->__symptom]))) {
    return NO;
  }
  if ((__examination_isset != other->__examination_isset) ||
      (__examination_isset && ((__examination || other->__examination) && ![__examination isEqual:other->__examination]))) {
    return NO;
  }
  if ((__cure_isset != other->__cure_isset) ||
      (__cure_isset && ((__cure || other->__cure) && ![__cure isEqual:other->__cure]))) {
    return NO;
  }
  if ((__precaution_isset != other->__precaution_isset) ||
      (__precaution_isset && ((__precaution || other->__precaution) && ![__precaution isEqual:other->__precaution]))) {
    return NO;
  }
  if ((__bodyPart_isset != other->__bodyPart_isset) ||
      (__bodyPart_isset && ((__bodyPart || other->__bodyPart) && ![__bodyPart isEqual:other->__bodyPart]))) {
    return NO;
  }
  if ((__crowd_isset != other->__crowd_isset) ||
      (__crowd_isset && ((__crowd || other->__crowd) && ![__crowd isEqual:other->__crowd]))) {
    return NO;
  }
  if ((__comDeptId_isset != other->__comDeptId_isset) ||
      (__comDeptId_isset && ((__comDeptId || other->__comDeptId) && ![__comDeptId isEqual:other->__comDeptId]))) {
    return NO;
  }
  if ((__fee_isset != other->__fee_isset) ||
      (__fee_isset && ((__fee || other->__fee) && ![__fee isEqual:other->__fee]))) {
    return NO;
  }
  if ((__isInfectious_isset != other->__isInfectious_isset) ||
      (__isInfectious_isset && (__isInfectious != other->__isInfectious))) {
    return NO;
  }
  if ((__remoteFile_isset != other->__remoteFile_isset) ||
      (__remoteFile_isset && ((__remoteFile || other->__remoteFile) && ![__remoteFile isEqual:other->__remoteFile]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__name release_stub];
  [__recomDepts release_stub];
  [__desc release_stub];
  [__cause release_stub];
  [__symptom release_stub];
  [__examination release_stub];
  [__cure release_stub];
  [__precaution release_stub];
  [__bodyPart release_stub];
  [__crowd release_stub];
  [__comDeptId release_stub];
  [__fee release_stub];
  [__remoteFile release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) recomDepts {
  return [[__recomDepts retain_stub] autorelease_stub];
}

- (void) setRecomDepts: (NSString *) recomDepts {
  [recomDepts retain_stub];
  [__recomDepts release_stub];
  __recomDepts = recomDepts;
  __recomDepts_isset = YES;
}

- (BOOL) recomDeptsIsSet {
  return __recomDepts_isset;
}

- (void) unsetRecomDepts {
  [__recomDepts release_stub];
  __recomDepts = nil;
  __recomDepts_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) cause {
  return [[__cause retain_stub] autorelease_stub];
}

- (void) setCause: (NSString *) cause {
  [cause retain_stub];
  [__cause release_stub];
  __cause = cause;
  __cause_isset = YES;
}

- (BOOL) causeIsSet {
  return __cause_isset;
}

- (void) unsetCause {
  [__cause release_stub];
  __cause = nil;
  __cause_isset = NO;
}

- (NSString *) symptom {
  return [[__symptom retain_stub] autorelease_stub];
}

- (void) setSymptom: (NSString *) symptom {
  [symptom retain_stub];
  [__symptom release_stub];
  __symptom = symptom;
  __symptom_isset = YES;
}

- (BOOL) symptomIsSet {
  return __symptom_isset;
}

- (void) unsetSymptom {
  [__symptom release_stub];
  __symptom = nil;
  __symptom_isset = NO;
}

- (NSString *) examination {
  return [[__examination retain_stub] autorelease_stub];
}

- (void) setExamination: (NSString *) examination {
  [examination retain_stub];
  [__examination release_stub];
  __examination = examination;
  __examination_isset = YES;
}

- (BOOL) examinationIsSet {
  return __examination_isset;
}

- (void) unsetExamination {
  [__examination release_stub];
  __examination = nil;
  __examination_isset = NO;
}

- (NSString *) cure {
  return [[__cure retain_stub] autorelease_stub];
}

- (void) setCure: (NSString *) cure {
  [cure retain_stub];
  [__cure release_stub];
  __cure = cure;
  __cure_isset = YES;
}

- (BOOL) cureIsSet {
  return __cure_isset;
}

- (void) unsetCure {
  [__cure release_stub];
  __cure = nil;
  __cure_isset = NO;
}

- (NSString *) precaution {
  return [[__precaution retain_stub] autorelease_stub];
}

- (void) setPrecaution: (NSString *) precaution {
  [precaution retain_stub];
  [__precaution release_stub];
  __precaution = precaution;
  __precaution_isset = YES;
}

- (BOOL) precautionIsSet {
  return __precaution_isset;
}

- (void) unsetPrecaution {
  [__precaution release_stub];
  __precaution = nil;
  __precaution_isset = NO;
}

- (NSString *) bodyPart {
  return [[__bodyPart retain_stub] autorelease_stub];
}

- (void) setBodyPart: (NSString *) bodyPart {
  [bodyPart retain_stub];
  [__bodyPart release_stub];
  __bodyPart = bodyPart;
  __bodyPart_isset = YES;
}

- (BOOL) bodyPartIsSet {
  return __bodyPart_isset;
}

- (void) unsetBodyPart {
  [__bodyPart release_stub];
  __bodyPart = nil;
  __bodyPart_isset = NO;
}

- (NSString *) crowd {
  return [[__crowd retain_stub] autorelease_stub];
}

- (void) setCrowd: (NSString *) crowd {
  [crowd retain_stub];
  [__crowd release_stub];
  __crowd = crowd;
  __crowd_isset = YES;
}

- (BOOL) crowdIsSet {
  return __crowd_isset;
}

- (void) unsetCrowd {
  [__crowd release_stub];
  __crowd = nil;
  __crowd_isset = NO;
}

- (NSString *) comDeptId {
  return [[__comDeptId retain_stub] autorelease_stub];
}

- (void) setComDeptId: (NSString *) comDeptId {
  [comDeptId retain_stub];
  [__comDeptId release_stub];
  __comDeptId = comDeptId;
  __comDeptId_isset = YES;
}

- (BOOL) comDeptIdIsSet {
  return __comDeptId_isset;
}

- (void) unsetComDeptId {
  [__comDeptId release_stub];
  __comDeptId = nil;
  __comDeptId_isset = NO;
}

- (NSString *) fee {
  return [[__fee retain_stub] autorelease_stub];
}

- (void) setFee: (NSString *) fee {
  [fee retain_stub];
  [__fee release_stub];
  __fee = fee;
  __fee_isset = YES;
}

- (BOOL) feeIsSet {
  return __fee_isset;
}

- (void) unsetFee {
  [__fee release_stub];
  __fee = nil;
  __fee_isset = NO;
}

- (int32_t) isInfectious {
  return __isInfectious;
}

- (void) setIsInfectious: (int32_t) isInfectious {
  __isInfectious = isInfectious;
  __isInfectious_isset = YES;
}

- (BOOL) isInfectiousIsSet {
  return __isInfectious_isset;
}

- (void) unsetIsInfectious {
  __isInfectious_isset = NO;
}

- (NSString *) remoteFile {
  return [[__remoteFile retain_stub] autorelease_stub];
}

- (void) setRemoteFile: (NSString *) remoteFile {
  [remoteFile retain_stub];
  [__remoteFile release_stub];
  __remoteFile = remoteFile;
  __remoteFile_isset = YES;
}

- (BOOL) remoteFileIsSet {
  return __remoteFile_isset;
}

- (void) unsetRemoteFile {
  [__remoteFile release_stub];
  __remoteFile = nil;
  __remoteFile_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRecomDepts: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCause: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSymptom: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExamination: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCure: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPrecaution: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBodyPart: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCrowd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setComDeptId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsInfectious: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemoteFile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDiseaseResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__recomDepts_isset) {
    if (__recomDepts != nil) {
      [outProtocol writeFieldBeginWithName: @"recomDepts" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __recomDepts];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cause_isset) {
    if (__cause != nil) {
      [outProtocol writeFieldBeginWithName: @"cause" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __cause];
      [outProtocol writeFieldEnd];
    }
  }
  if (__symptom_isset) {
    if (__symptom != nil) {
      [outProtocol writeFieldBeginWithName: @"symptom" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __symptom];
      [outProtocol writeFieldEnd];
    }
  }
  if (__examination_isset) {
    if (__examination != nil) {
      [outProtocol writeFieldBeginWithName: @"examination" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __examination];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cure_isset) {
    if (__cure != nil) {
      [outProtocol writeFieldBeginWithName: @"cure" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __cure];
      [outProtocol writeFieldEnd];
    }
  }
  if (__precaution_isset) {
    if (__precaution != nil) {
      [outProtocol writeFieldBeginWithName: @"precaution" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __precaution];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bodyPart_isset) {
    if (__bodyPart != nil) {
      [outProtocol writeFieldBeginWithName: @"bodyPart" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __bodyPart];
      [outProtocol writeFieldEnd];
    }
  }
  if (__crowd_isset) {
    if (__crowd != nil) {
      [outProtocol writeFieldBeginWithName: @"crowd" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __crowd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__comDeptId_isset) {
    if (__comDeptId != nil) {
      [outProtocol writeFieldBeginWithName: @"comDeptId" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __comDeptId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fee_isset) {
    if (__fee != nil) {
      [outProtocol writeFieldBeginWithName: @"fee" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __fee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isInfectious_isset) {
    [outProtocol writeFieldBeginWithName: @"isInfectious" type: TType_I32 fieldID: 14];
    [outProtocol writeI32: __isInfectious];
    [outProtocol writeFieldEnd];
  }
  if (__remoteFile_isset) {
    if (__remoteFile != nil) {
      [outProtocol writeFieldBeginWithName: @"remoteFile" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __remoteFile];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetDiseaseResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",recomDepts:"];
  [ms appendFormat: @"\"%@\"", __recomDepts];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",cause:"];
  [ms appendFormat: @"\"%@\"", __cause];
  [ms appendString: @",symptom:"];
  [ms appendFormat: @"\"%@\"", __symptom];
  [ms appendString: @",examination:"];
  [ms appendFormat: @"\"%@\"", __examination];
  [ms appendString: @",cure:"];
  [ms appendFormat: @"\"%@\"", __cure];
  [ms appendString: @",precaution:"];
  [ms appendFormat: @"\"%@\"", __precaution];
  [ms appendString: @",bodyPart:"];
  [ms appendFormat: @"\"%@\"", __bodyPart];
  [ms appendString: @",crowd:"];
  [ms appendFormat: @"\"%@\"", __crowd];
  [ms appendString: @",comDeptId:"];
  [ms appendFormat: @"\"%@\"", __comDeptId];
  [ms appendString: @",fee:"];
  [ms appendFormat: @"\"%@\"", __fee];
  [ms appendString: @",isInfectious:"];
  [ms appendFormat: @"%i", __isInfectious];
  [ms appendString: @",remoteFile:"];
  [ms appendFormat: @"\"%@\"", __remoteFile];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetComDeptsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.comDepts = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header comDepts: (NSMutableArray *) comDepts
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __comDepts = [comDepts retain_stub];
  __comDepts_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"comDepts"])
  {
    __comDepts = [[decoder decodeObjectForKey: @"comDepts"] retain_stub];
    __comDepts_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__comDepts_isset)
  {
    [encoder encodeObject: __comDepts forKey: @"comDepts"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __comDepts_isset ? 2654435761 : 0;
  if (__comDepts_isset)
  {
    hash = (hash * 31) ^ [__comDepts hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetComDeptsResp class]]) {
    return NO;
  }
  NXTFGetComDeptsResp *other = (NXTFGetComDeptsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__comDepts_isset != other->__comDepts_isset) ||
      (__comDepts_isset && ((__comDepts || other->__comDepts) && ![__comDepts isEqual:other->__comDepts]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__comDepts release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) comDepts {
  return [[__comDepts retain_stub] autorelease_stub];
}

- (void) setComDepts: (NSMutableArray *) comDepts {
  [comDepts retain_stub];
  [__comDepts release_stub];
  __comDepts = comDepts;
  __comDepts_isset = YES;
}

- (BOOL) comDeptsIsSet {
  return __comDepts_isset;
}

- (void) unsetComDepts {
  [__comDepts release_stub];
  __comDepts = nil;
  __comDepts_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size161;
          [inProtocol readListBeginReturningElementType: NULL size: &_size161];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size161];
          int _i162;
          for (_i162 = 0; _i162 < _size161; ++_i162)
          {
            NXTFComDeptDto *_elem163 = [[NXTFComDeptDto alloc] init];
            [_elem163 read: inProtocol];
            [fieldValue addObject: _elem163];
            [_elem163 release_stub];
          }
          [inProtocol readListEnd];
          [self setComDepts: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetComDeptsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__comDepts_isset) {
    if (__comDepts != nil) {
      [outProtocol writeFieldBeginWithName: @"comDepts" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__comDepts count]];
        int idx165;
        for (idx165 = 0; idx165 < [__comDepts count]; idx165++)
        {
          [[__comDepts objectAtIndex: idx165] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetComDeptsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",comDepts:"];
  [ms appendFormat: @"%@", __comDepts];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFH5SignUpResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header userId: (NSString *) userId patientId: (NSString *) patientId token: (NSString *) token signingKey: (NSString *) signingKey
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __patientId = [patientId retain_stub];
  __patientId_isset = YES;
  __token = [token retain_stub];
  __token_isset = YES;
  __signingKey = [signingKey retain_stub];
  __signingKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [[decoder decodeObjectForKey: @"patientId"] retain_stub];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"signingKey"])
  {
    __signingKey = [[decoder decodeObjectForKey: @"signingKey"] retain_stub];
    __signingKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeObject: __patientId forKey: @"patientId"];
  }
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__signingKey_isset)
  {
    [encoder encodeObject: __signingKey forKey: @"signingKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __userId_isset ? 2654435761 : 0;
  if (__userId_isset)
  {
    hash = (hash * 31) ^ [__userId hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [__patientId hash];
  }
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __signingKey_isset ? 2654435761 : 0;
  if (__signingKey_isset)
  {
    hash = (hash * 31) ^ [__signingKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFH5SignUpResp class]]) {
    return NO;
  }
  NXTFH5SignUpResp *other = (NXTFH5SignUpResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__userId_isset != other->__userId_isset) ||
      (__userId_isset && ((__userId || other->__userId) && ![__userId isEqual:other->__userId]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && ((__patientId || other->__patientId) && ![__patientId isEqual:other->__patientId]))) {
    return NO;
  }
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__signingKey_isset != other->__signingKey_isset) ||
      (__signingKey_isset && ((__signingKey || other->__signingKey) && ![__signingKey isEqual:other->__signingKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__userId release_stub];
  [__patientId release_stub];
  [__token release_stub];
  [__signingKey release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSString *) patientId {
  return [[__patientId retain_stub] autorelease_stub];
}

- (void) setPatientId: (NSString *) patientId {
  [patientId retain_stub];
  [__patientId release_stub];
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  [__patientId release_stub];
  __patientId = nil;
  __patientId_isset = NO;
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) signingKey {
  return [[__signingKey retain_stub] autorelease_stub];
}

- (void) setSigningKey: (NSString *) signingKey {
  [signingKey retain_stub];
  [__signingKey release_stub];
  __signingKey = signingKey;
  __signingKey_isset = YES;
}

- (BOOL) signingKeyIsSet {
  return __signingKey_isset;
}

- (void) unsetSigningKey {
  [__signingKey release_stub];
  __signingKey = nil;
  __signingKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSigningKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"H5SignUpResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    if (__patientId != nil) {
      [outProtocol writeFieldBeginWithName: @"patientId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __patientId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__signingKey_isset) {
    if (__signingKey != nil) {
      [outProtocol writeFieldBeginWithName: @"signingKey" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __signingKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFH5SignUpResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"\"%@\"", __patientId];
  [ms appendString: @",token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",signingKey:"];
  [ms appendFormat: @"\"%@\"", __signingKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFH5SignInResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header userId: (NSString *) userId patientId: (NSString *) patientId token: (NSString *) token signingKey: (NSString *) signingKey
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __patientId = [patientId retain_stub];
  __patientId_isset = YES;
  __token = [token retain_stub];
  __token_isset = YES;
  __signingKey = [signingKey retain_stub];
  __signingKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [[decoder decodeObjectForKey: @"patientId"] retain_stub];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"signingKey"])
  {
    __signingKey = [[decoder decodeObjectForKey: @"signingKey"] retain_stub];
    __signingKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeObject: __patientId forKey: @"patientId"];
  }
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__signingKey_isset)
  {
    [encoder encodeObject: __signingKey forKey: @"signingKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __userId_isset ? 2654435761 : 0;
  if (__userId_isset)
  {
    hash = (hash * 31) ^ [__userId hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [__patientId hash];
  }
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __signingKey_isset ? 2654435761 : 0;
  if (__signingKey_isset)
  {
    hash = (hash * 31) ^ [__signingKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFH5SignInResp class]]) {
    return NO;
  }
  NXTFH5SignInResp *other = (NXTFH5SignInResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__userId_isset != other->__userId_isset) ||
      (__userId_isset && ((__userId || other->__userId) && ![__userId isEqual:other->__userId]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && ((__patientId || other->__patientId) && ![__patientId isEqual:other->__patientId]))) {
    return NO;
  }
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__signingKey_isset != other->__signingKey_isset) ||
      (__signingKey_isset && ((__signingKey || other->__signingKey) && ![__signingKey isEqual:other->__signingKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__userId release_stub];
  [__patientId release_stub];
  [__token release_stub];
  [__signingKey release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSString *) patientId {
  return [[__patientId retain_stub] autorelease_stub];
}

- (void) setPatientId: (NSString *) patientId {
  [patientId retain_stub];
  [__patientId release_stub];
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  [__patientId release_stub];
  __patientId = nil;
  __patientId_isset = NO;
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) signingKey {
  return [[__signingKey retain_stub] autorelease_stub];
}

- (void) setSigningKey: (NSString *) signingKey {
  [signingKey retain_stub];
  [__signingKey release_stub];
  __signingKey = signingKey;
  __signingKey_isset = YES;
}

- (BOOL) signingKeyIsSet {
  return __signingKey_isset;
}

- (void) unsetSigningKey {
  [__signingKey release_stub];
  __signingKey = nil;
  __signingKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSigningKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"H5SignInResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    if (__patientId != nil) {
      [outProtocol writeFieldBeginWithName: @"patientId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __patientId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__signingKey_isset) {
    if (__signingKey != nil) {
      [outProtocol writeFieldBeginWithName: @"signingKey" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __signingKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFH5SignInResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"\"%@\"", __patientId];
  [ms appendString: @",token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",signingKey:"];
  [ms appendFormat: @"\"%@\"", __signingKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetHospResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.phoneNos = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header level: (NSString *) level name: (NSString *) name hospStaticMap: (NSString *) hospStaticMap hospLogo: (NSString *) hospLogo hospImg: (NSString *) hospImg opened: (NSString *) opened desc: (NSString *) desc patientCount: (NSString *) patientCount dailyVisitCount: (NSString *) dailyVisitCount address: (NSString *) address contactNo: (NSString *) contactNo departments: (NSString *) departments serviceCode: (NSString *) serviceCode maintainCodes: (NSMutableArray *) maintainCodes maintainMsg: (NSString *) maintainMsg lng: (NSString *) lng lat: (NSString *) lat isFavor: (NSString *) isFavor isInsurAssigned: (NSString *) isInsurAssigned phoneNos: (NSMutableArray *) phoneNos openness: (int32_t) openness hospType: (NSString *) hospType evaluation: (NSString *) evaluation diamonds: (NSString *) diamonds isOpenNet: (int32_t) isOpenNet featureDepts: (NSMutableArray *) featureDepts
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __level = [level retain_stub];
  __level_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __hospStaticMap = [hospStaticMap retain_stub];
  __hospStaticMap_isset = YES;
  __hospLogo = [hospLogo retain_stub];
  __hospLogo_isset = YES;
  __hospImg = [hospImg retain_stub];
  __hospImg_isset = YES;
  __opened = [opened retain_stub];
  __opened_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __patientCount = [patientCount retain_stub];
  __patientCount_isset = YES;
  __dailyVisitCount = [dailyVisitCount retain_stub];
  __dailyVisitCount_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __contactNo = [contactNo retain_stub];
  __contactNo_isset = YES;
  __departments = [departments retain_stub];
  __departments_isset = YES;
  __serviceCode = [serviceCode retain_stub];
  __serviceCode_isset = YES;
  __maintainCodes = [maintainCodes retain_stub];
  __maintainCodes_isset = YES;
  __maintainMsg = [maintainMsg retain_stub];
  __maintainMsg_isset = YES;
  __lng = [lng retain_stub];
  __lng_isset = YES;
  __lat = [lat retain_stub];
  __lat_isset = YES;
  __isFavor = [isFavor retain_stub];
  __isFavor_isset = YES;
  __isInsurAssigned = [isInsurAssigned retain_stub];
  __isInsurAssigned_isset = YES;
  __phoneNos = [phoneNos retain_stub];
  __phoneNos_isset = YES;
  __openness = openness;
  __openness_isset = YES;
  __hospType = [hospType retain_stub];
  __hospType_isset = YES;
  __evaluation = [evaluation retain_stub];
  __evaluation_isset = YES;
  __diamonds = [diamonds retain_stub];
  __diamonds_isset = YES;
  __isOpenNet = isOpenNet;
  __isOpenNet_isset = YES;
  __featureDepts = [featureDepts retain_stub];
  __featureDepts_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"level"])
  {
    __level = [[decoder decodeObjectForKey: @"level"] retain_stub];
    __level_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospStaticMap"])
  {
    __hospStaticMap = [[decoder decodeObjectForKey: @"hospStaticMap"] retain_stub];
    __hospStaticMap_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospLogo"])
  {
    __hospLogo = [[decoder decodeObjectForKey: @"hospLogo"] retain_stub];
    __hospLogo_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospImg"])
  {
    __hospImg = [[decoder decodeObjectForKey: @"hospImg"] retain_stub];
    __hospImg_isset = YES;
  }
  if ([decoder containsValueForKey: @"opened"])
  {
    __opened = [[decoder decodeObjectForKey: @"opened"] retain_stub];
    __opened_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientCount"])
  {
    __patientCount = [[decoder decodeObjectForKey: @"patientCount"] retain_stub];
    __patientCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"dailyVisitCount"])
  {
    __dailyVisitCount = [[decoder decodeObjectForKey: @"dailyVisitCount"] retain_stub];
    __dailyVisitCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"contactNo"])
  {
    __contactNo = [[decoder decodeObjectForKey: @"contactNo"] retain_stub];
    __contactNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"departments"])
  {
    __departments = [[decoder decodeObjectForKey: @"departments"] retain_stub];
    __departments_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceCode"])
  {
    __serviceCode = [[decoder decodeObjectForKey: @"serviceCode"] retain_stub];
    __serviceCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"maintainCodes"])
  {
    __maintainCodes = [[decoder decodeObjectForKey: @"maintainCodes"] retain_stub];
    __maintainCodes_isset = YES;
  }
  if ([decoder containsValueForKey: @"maintainMsg"])
  {
    __maintainMsg = [[decoder decodeObjectForKey: @"maintainMsg"] retain_stub];
    __maintainMsg_isset = YES;
  }
  if ([decoder containsValueForKey: @"lng"])
  {
    __lng = [[decoder decodeObjectForKey: @"lng"] retain_stub];
    __lng_isset = YES;
  }
  if ([decoder containsValueForKey: @"lat"])
  {
    __lat = [[decoder decodeObjectForKey: @"lat"] retain_stub];
    __lat_isset = YES;
  }
  if ([decoder containsValueForKey: @"isFavor"])
  {
    __isFavor = [[decoder decodeObjectForKey: @"isFavor"] retain_stub];
    __isFavor_isset = YES;
  }
  if ([decoder containsValueForKey: @"isInsurAssigned"])
  {
    __isInsurAssigned = [[decoder decodeObjectForKey: @"isInsurAssigned"] retain_stub];
    __isInsurAssigned_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneNos"])
  {
    __phoneNos = [[decoder decodeObjectForKey: @"phoneNos"] retain_stub];
    __phoneNos_isset = YES;
  }
  if ([decoder containsValueForKey: @"openness"])
  {
    __openness = [decoder decodeInt32ForKey: @"openness"];
    __openness_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospType"])
  {
    __hospType = [[decoder decodeObjectForKey: @"hospType"] retain_stub];
    __hospType_isset = YES;
  }
  if ([decoder containsValueForKey: @"evaluation"])
  {
    __evaluation = [[decoder decodeObjectForKey: @"evaluation"] retain_stub];
    __evaluation_isset = YES;
  }
  if ([decoder containsValueForKey: @"diamonds"])
  {
    __diamonds = [[decoder decodeObjectForKey: @"diamonds"] retain_stub];
    __diamonds_isset = YES;
  }
  if ([decoder containsValueForKey: @"isOpenNet"])
  {
    __isOpenNet = [decoder decodeInt32ForKey: @"isOpenNet"];
    __isOpenNet_isset = YES;
  }
  if ([decoder containsValueForKey: @"featureDepts"])
  {
    __featureDepts = [[decoder decodeObjectForKey: @"featureDepts"] retain_stub];
    __featureDepts_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__level_isset)
  {
    [encoder encodeObject: __level forKey: @"level"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__hospStaticMap_isset)
  {
    [encoder encodeObject: __hospStaticMap forKey: @"hospStaticMap"];
  }
  if (__hospLogo_isset)
  {
    [encoder encodeObject: __hospLogo forKey: @"hospLogo"];
  }
  if (__hospImg_isset)
  {
    [encoder encodeObject: __hospImg forKey: @"hospImg"];
  }
  if (__opened_isset)
  {
    [encoder encodeObject: __opened forKey: @"opened"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__patientCount_isset)
  {
    [encoder encodeObject: __patientCount forKey: @"patientCount"];
  }
  if (__dailyVisitCount_isset)
  {
    [encoder encodeObject: __dailyVisitCount forKey: @"dailyVisitCount"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__contactNo_isset)
  {
    [encoder encodeObject: __contactNo forKey: @"contactNo"];
  }
  if (__departments_isset)
  {
    [encoder encodeObject: __departments forKey: @"departments"];
  }
  if (__serviceCode_isset)
  {
    [encoder encodeObject: __serviceCode forKey: @"serviceCode"];
  }
  if (__maintainCodes_isset)
  {
    [encoder encodeObject: __maintainCodes forKey: @"maintainCodes"];
  }
  if (__maintainMsg_isset)
  {
    [encoder encodeObject: __maintainMsg forKey: @"maintainMsg"];
  }
  if (__lng_isset)
  {
    [encoder encodeObject: __lng forKey: @"lng"];
  }
  if (__lat_isset)
  {
    [encoder encodeObject: __lat forKey: @"lat"];
  }
  if (__isFavor_isset)
  {
    [encoder encodeObject: __isFavor forKey: @"isFavor"];
  }
  if (__isInsurAssigned_isset)
  {
    [encoder encodeObject: __isInsurAssigned forKey: @"isInsurAssigned"];
  }
  if (__phoneNos_isset)
  {
    [encoder encodeObject: __phoneNos forKey: @"phoneNos"];
  }
  if (__openness_isset)
  {
    [encoder encodeInt32: __openness forKey: @"openness"];
  }
  if (__hospType_isset)
  {
    [encoder encodeObject: __hospType forKey: @"hospType"];
  }
  if (__evaluation_isset)
  {
    [encoder encodeObject: __evaluation forKey: @"evaluation"];
  }
  if (__diamonds_isset)
  {
    [encoder encodeObject: __diamonds forKey: @"diamonds"];
  }
  if (__isOpenNet_isset)
  {
    [encoder encodeInt32: __isOpenNet forKey: @"isOpenNet"];
  }
  if (__featureDepts_isset)
  {
    [encoder encodeObject: __featureDepts forKey: @"featureDepts"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __level_isset ? 2654435761 : 0;
  if (__level_isset)
  {
    hash = (hash * 31) ^ [__level hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __hospStaticMap_isset ? 2654435761 : 0;
  if (__hospStaticMap_isset)
  {
    hash = (hash * 31) ^ [__hospStaticMap hash];
  }
  hash = (hash * 31) ^ __hospLogo_isset ? 2654435761 : 0;
  if (__hospLogo_isset)
  {
    hash = (hash * 31) ^ [__hospLogo hash];
  }
  hash = (hash * 31) ^ __hospImg_isset ? 2654435761 : 0;
  if (__hospImg_isset)
  {
    hash = (hash * 31) ^ [__hospImg hash];
  }
  hash = (hash * 31) ^ __opened_isset ? 2654435761 : 0;
  if (__opened_isset)
  {
    hash = (hash * 31) ^ [__opened hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __patientCount_isset ? 2654435761 : 0;
  if (__patientCount_isset)
  {
    hash = (hash * 31) ^ [__patientCount hash];
  }
  hash = (hash * 31) ^ __dailyVisitCount_isset ? 2654435761 : 0;
  if (__dailyVisitCount_isset)
  {
    hash = (hash * 31) ^ [__dailyVisitCount hash];
  }
  hash = (hash * 31) ^ __address_isset ? 2654435761 : 0;
  if (__address_isset)
  {
    hash = (hash * 31) ^ [__address hash];
  }
  hash = (hash * 31) ^ __contactNo_isset ? 2654435761 : 0;
  if (__contactNo_isset)
  {
    hash = (hash * 31) ^ [__contactNo hash];
  }
  hash = (hash * 31) ^ __departments_isset ? 2654435761 : 0;
  if (__departments_isset)
  {
    hash = (hash * 31) ^ [__departments hash];
  }
  hash = (hash * 31) ^ __serviceCode_isset ? 2654435761 : 0;
  if (__serviceCode_isset)
  {
    hash = (hash * 31) ^ [__serviceCode hash];
  }
  hash = (hash * 31) ^ __maintainCodes_isset ? 2654435761 : 0;
  if (__maintainCodes_isset)
  {
    hash = (hash * 31) ^ [__maintainCodes hash];
  }
  hash = (hash * 31) ^ __maintainMsg_isset ? 2654435761 : 0;
  if (__maintainMsg_isset)
  {
    hash = (hash * 31) ^ [__maintainMsg hash];
  }
  hash = (hash * 31) ^ __lng_isset ? 2654435761 : 0;
  if (__lng_isset)
  {
    hash = (hash * 31) ^ [__lng hash];
  }
  hash = (hash * 31) ^ __lat_isset ? 2654435761 : 0;
  if (__lat_isset)
  {
    hash = (hash * 31) ^ [__lat hash];
  }
  hash = (hash * 31) ^ __isFavor_isset ? 2654435761 : 0;
  if (__isFavor_isset)
  {
    hash = (hash * 31) ^ [__isFavor hash];
  }
  hash = (hash * 31) ^ __isInsurAssigned_isset ? 2654435761 : 0;
  if (__isInsurAssigned_isset)
  {
    hash = (hash * 31) ^ [__isInsurAssigned hash];
  }
  hash = (hash * 31) ^ __phoneNos_isset ? 2654435761 : 0;
  if (__phoneNos_isset)
  {
    hash = (hash * 31) ^ [__phoneNos hash];
  }
  hash = (hash * 31) ^ __openness_isset ? 2654435761 : 0;
  if (__openness_isset)
  {
    hash = (hash * 31) ^ [@(__openness) hash];
  }
  hash = (hash * 31) ^ __hospType_isset ? 2654435761 : 0;
  if (__hospType_isset)
  {
    hash = (hash * 31) ^ [__hospType hash];
  }
  hash = (hash * 31) ^ __evaluation_isset ? 2654435761 : 0;
  if (__evaluation_isset)
  {
    hash = (hash * 31) ^ [__evaluation hash];
  }
  hash = (hash * 31) ^ __diamonds_isset ? 2654435761 : 0;
  if (__diamonds_isset)
  {
    hash = (hash * 31) ^ [__diamonds hash];
  }
  hash = (hash * 31) ^ __isOpenNet_isset ? 2654435761 : 0;
  if (__isOpenNet_isset)
  {
    hash = (hash * 31) ^ [@(__isOpenNet) hash];
  }
  hash = (hash * 31) ^ __featureDepts_isset ? 2654435761 : 0;
  if (__featureDepts_isset)
  {
    hash = (hash * 31) ^ [__featureDepts hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetHospResp class]]) {
    return NO;
  }
  NXTFGetHospResp *other = (NXTFGetHospResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__level_isset != other->__level_isset) ||
      (__level_isset && ((__level || other->__level) && ![__level isEqual:other->__level]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__hospStaticMap_isset != other->__hospStaticMap_isset) ||
      (__hospStaticMap_isset && ((__hospStaticMap || other->__hospStaticMap) && ![__hospStaticMap isEqual:other->__hospStaticMap]))) {
    return NO;
  }
  if ((__hospLogo_isset != other->__hospLogo_isset) ||
      (__hospLogo_isset && ((__hospLogo || other->__hospLogo) && ![__hospLogo isEqual:other->__hospLogo]))) {
    return NO;
  }
  if ((__hospImg_isset != other->__hospImg_isset) ||
      (__hospImg_isset && ((__hospImg || other->__hospImg) && ![__hospImg isEqual:other->__hospImg]))) {
    return NO;
  }
  if ((__opened_isset != other->__opened_isset) ||
      (__opened_isset && ((__opened || other->__opened) && ![__opened isEqual:other->__opened]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__patientCount_isset != other->__patientCount_isset) ||
      (__patientCount_isset && ((__patientCount || other->__patientCount) && ![__patientCount isEqual:other->__patientCount]))) {
    return NO;
  }
  if ((__dailyVisitCount_isset != other->__dailyVisitCount_isset) ||
      (__dailyVisitCount_isset && ((__dailyVisitCount || other->__dailyVisitCount) && ![__dailyVisitCount isEqual:other->__dailyVisitCount]))) {
    return NO;
  }
  if ((__address_isset != other->__address_isset) ||
      (__address_isset && ((__address || other->__address) && ![__address isEqual:other->__address]))) {
    return NO;
  }
  if ((__contactNo_isset != other->__contactNo_isset) ||
      (__contactNo_isset && ((__contactNo || other->__contactNo) && ![__contactNo isEqual:other->__contactNo]))) {
    return NO;
  }
  if ((__departments_isset != other->__departments_isset) ||
      (__departments_isset && ((__departments || other->__departments) && ![__departments isEqual:other->__departments]))) {
    return NO;
  }
  if ((__serviceCode_isset != other->__serviceCode_isset) ||
      (__serviceCode_isset && ((__serviceCode || other->__serviceCode) && ![__serviceCode isEqual:other->__serviceCode]))) {
    return NO;
  }
  if ((__maintainCodes_isset != other->__maintainCodes_isset) ||
      (__maintainCodes_isset && ((__maintainCodes || other->__maintainCodes) && ![__maintainCodes isEqual:other->__maintainCodes]))) {
    return NO;
  }
  if ((__maintainMsg_isset != other->__maintainMsg_isset) ||
      (__maintainMsg_isset && ((__maintainMsg || other->__maintainMsg) && ![__maintainMsg isEqual:other->__maintainMsg]))) {
    return NO;
  }
  if ((__lng_isset != other->__lng_isset) ||
      (__lng_isset && ((__lng || other->__lng) && ![__lng isEqual:other->__lng]))) {
    return NO;
  }
  if ((__lat_isset != other->__lat_isset) ||
      (__lat_isset && ((__lat || other->__lat) && ![__lat isEqual:other->__lat]))) {
    return NO;
  }
  if ((__isFavor_isset != other->__isFavor_isset) ||
      (__isFavor_isset && ((__isFavor || other->__isFavor) && ![__isFavor isEqual:other->__isFavor]))) {
    return NO;
  }
  if ((__isInsurAssigned_isset != other->__isInsurAssigned_isset) ||
      (__isInsurAssigned_isset && ((__isInsurAssigned || other->__isInsurAssigned) && ![__isInsurAssigned isEqual:other->__isInsurAssigned]))) {
    return NO;
  }
  if ((__phoneNos_isset != other->__phoneNos_isset) ||
      (__phoneNos_isset && ((__phoneNos || other->__phoneNos) && ![__phoneNos isEqual:other->__phoneNos]))) {
    return NO;
  }
  if ((__openness_isset != other->__openness_isset) ||
      (__openness_isset && (__openness != other->__openness))) {
    return NO;
  }
  if ((__hospType_isset != other->__hospType_isset) ||
      (__hospType_isset && ((__hospType || other->__hospType) && ![__hospType isEqual:other->__hospType]))) {
    return NO;
  }
  if ((__evaluation_isset != other->__evaluation_isset) ||
      (__evaluation_isset && ((__evaluation || other->__evaluation) && ![__evaluation isEqual:other->__evaluation]))) {
    return NO;
  }
  if ((__diamonds_isset != other->__diamonds_isset) ||
      (__diamonds_isset && ((__diamonds || other->__diamonds) && ![__diamonds isEqual:other->__diamonds]))) {
    return NO;
  }
  if ((__isOpenNet_isset != other->__isOpenNet_isset) ||
      (__isOpenNet_isset && (__isOpenNet != other->__isOpenNet))) {
    return NO;
  }
  if ((__featureDepts_isset != other->__featureDepts_isset) ||
      (__featureDepts_isset && ((__featureDepts || other->__featureDepts) && ![__featureDepts isEqual:other->__featureDepts]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__level release_stub];
  [__name release_stub];
  [__hospStaticMap release_stub];
  [__hospLogo release_stub];
  [__hospImg release_stub];
  [__opened release_stub];
  [__desc release_stub];
  [__patientCount release_stub];
  [__dailyVisitCount release_stub];
  [__address release_stub];
  [__contactNo release_stub];
  [__departments release_stub];
  [__serviceCode release_stub];
  [__maintainCodes release_stub];
  [__maintainMsg release_stub];
  [__lng release_stub];
  [__lat release_stub];
  [__isFavor release_stub];
  [__isInsurAssigned release_stub];
  [__phoneNos release_stub];
  [__hospType release_stub];
  [__evaluation release_stub];
  [__diamonds release_stub];
  [__featureDepts release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) level {
  return [[__level retain_stub] autorelease_stub];
}

- (void) setLevel: (NSString *) level {
  [level retain_stub];
  [__level release_stub];
  __level = level;
  __level_isset = YES;
}

- (BOOL) levelIsSet {
  return __level_isset;
}

- (void) unsetLevel {
  [__level release_stub];
  __level = nil;
  __level_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) hospStaticMap {
  return [[__hospStaticMap retain_stub] autorelease_stub];
}

- (void) setHospStaticMap: (NSString *) hospStaticMap {
  [hospStaticMap retain_stub];
  [__hospStaticMap release_stub];
  __hospStaticMap = hospStaticMap;
  __hospStaticMap_isset = YES;
}

- (BOOL) hospStaticMapIsSet {
  return __hospStaticMap_isset;
}

- (void) unsetHospStaticMap {
  [__hospStaticMap release_stub];
  __hospStaticMap = nil;
  __hospStaticMap_isset = NO;
}

- (NSString *) hospLogo {
  return [[__hospLogo retain_stub] autorelease_stub];
}

- (void) setHospLogo: (NSString *) hospLogo {
  [hospLogo retain_stub];
  [__hospLogo release_stub];
  __hospLogo = hospLogo;
  __hospLogo_isset = YES;
}

- (BOOL) hospLogoIsSet {
  return __hospLogo_isset;
}

- (void) unsetHospLogo {
  [__hospLogo release_stub];
  __hospLogo = nil;
  __hospLogo_isset = NO;
}

- (NSString *) hospImg {
  return [[__hospImg retain_stub] autorelease_stub];
}

- (void) setHospImg: (NSString *) hospImg {
  [hospImg retain_stub];
  [__hospImg release_stub];
  __hospImg = hospImg;
  __hospImg_isset = YES;
}

- (BOOL) hospImgIsSet {
  return __hospImg_isset;
}

- (void) unsetHospImg {
  [__hospImg release_stub];
  __hospImg = nil;
  __hospImg_isset = NO;
}

- (NSString *) opened {
  return [[__opened retain_stub] autorelease_stub];
}

- (void) setOpened: (NSString *) opened {
  [opened retain_stub];
  [__opened release_stub];
  __opened = opened;
  __opened_isset = YES;
}

- (BOOL) openedIsSet {
  return __opened_isset;
}

- (void) unsetOpened {
  [__opened release_stub];
  __opened = nil;
  __opened_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (NSString *) patientCount {
  return [[__patientCount retain_stub] autorelease_stub];
}

- (void) setPatientCount: (NSString *) patientCount {
  [patientCount retain_stub];
  [__patientCount release_stub];
  __patientCount = patientCount;
  __patientCount_isset = YES;
}

- (BOOL) patientCountIsSet {
  return __patientCount_isset;
}

- (void) unsetPatientCount {
  [__patientCount release_stub];
  __patientCount = nil;
  __patientCount_isset = NO;
}

- (NSString *) dailyVisitCount {
  return [[__dailyVisitCount retain_stub] autorelease_stub];
}

- (void) setDailyVisitCount: (NSString *) dailyVisitCount {
  [dailyVisitCount retain_stub];
  [__dailyVisitCount release_stub];
  __dailyVisitCount = dailyVisitCount;
  __dailyVisitCount_isset = YES;
}

- (BOOL) dailyVisitCountIsSet {
  return __dailyVisitCount_isset;
}

- (void) unsetDailyVisitCount {
  [__dailyVisitCount release_stub];
  __dailyVisitCount = nil;
  __dailyVisitCount_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (NSString *) contactNo {
  return [[__contactNo retain_stub] autorelease_stub];
}

- (void) setContactNo: (NSString *) contactNo {
  [contactNo retain_stub];
  [__contactNo release_stub];
  __contactNo = contactNo;
  __contactNo_isset = YES;
}

- (BOOL) contactNoIsSet {
  return __contactNo_isset;
}

- (void) unsetContactNo {
  [__contactNo release_stub];
  __contactNo = nil;
  __contactNo_isset = NO;
}

- (NSString *) departments {
  return [[__departments retain_stub] autorelease_stub];
}

- (void) setDepartments: (NSString *) departments {
  [departments retain_stub];
  [__departments release_stub];
  __departments = departments;
  __departments_isset = YES;
}

- (BOOL) departmentsIsSet {
  return __departments_isset;
}

- (void) unsetDepartments {
  [__departments release_stub];
  __departments = nil;
  __departments_isset = NO;
}

- (NSString *) serviceCode {
  return [[__serviceCode retain_stub] autorelease_stub];
}

- (void) setServiceCode: (NSString *) serviceCode {
  [serviceCode retain_stub];
  [__serviceCode release_stub];
  __serviceCode = serviceCode;
  __serviceCode_isset = YES;
}

- (BOOL) serviceCodeIsSet {
  return __serviceCode_isset;
}

- (void) unsetServiceCode {
  [__serviceCode release_stub];
  __serviceCode = nil;
  __serviceCode_isset = NO;
}

- (NSMutableArray *) maintainCodes {
  return [[__maintainCodes retain_stub] autorelease_stub];
}

- (void) setMaintainCodes: (NSMutableArray *) maintainCodes {
  [maintainCodes retain_stub];
  [__maintainCodes release_stub];
  __maintainCodes = maintainCodes;
  __maintainCodes_isset = YES;
}

- (BOOL) maintainCodesIsSet {
  return __maintainCodes_isset;
}

- (void) unsetMaintainCodes {
  [__maintainCodes release_stub];
  __maintainCodes = nil;
  __maintainCodes_isset = NO;
}

- (NSString *) maintainMsg {
  return [[__maintainMsg retain_stub] autorelease_stub];
}

- (void) setMaintainMsg: (NSString *) maintainMsg {
  [maintainMsg retain_stub];
  [__maintainMsg release_stub];
  __maintainMsg = maintainMsg;
  __maintainMsg_isset = YES;
}

- (BOOL) maintainMsgIsSet {
  return __maintainMsg_isset;
}

- (void) unsetMaintainMsg {
  [__maintainMsg release_stub];
  __maintainMsg = nil;
  __maintainMsg_isset = NO;
}

- (NSString *) lng {
  return [[__lng retain_stub] autorelease_stub];
}

- (void) setLng: (NSString *) lng {
  [lng retain_stub];
  [__lng release_stub];
  __lng = lng;
  __lng_isset = YES;
}

- (BOOL) lngIsSet {
  return __lng_isset;
}

- (void) unsetLng {
  [__lng release_stub];
  __lng = nil;
  __lng_isset = NO;
}

- (NSString *) lat {
  return [[__lat retain_stub] autorelease_stub];
}

- (void) setLat: (NSString *) lat {
  [lat retain_stub];
  [__lat release_stub];
  __lat = lat;
  __lat_isset = YES;
}

- (BOOL) latIsSet {
  return __lat_isset;
}

- (void) unsetLat {
  [__lat release_stub];
  __lat = nil;
  __lat_isset = NO;
}

- (NSString *) isFavor {
  return [[__isFavor retain_stub] autorelease_stub];
}

- (void) setIsFavor: (NSString *) isFavor {
  [isFavor retain_stub];
  [__isFavor release_stub];
  __isFavor = isFavor;
  __isFavor_isset = YES;
}

- (BOOL) isFavorIsSet {
  return __isFavor_isset;
}

- (void) unsetIsFavor {
  [__isFavor release_stub];
  __isFavor = nil;
  __isFavor_isset = NO;
}

- (NSString *) isInsurAssigned {
  return [[__isInsurAssigned retain_stub] autorelease_stub];
}

- (void) setIsInsurAssigned: (NSString *) isInsurAssigned {
  [isInsurAssigned retain_stub];
  [__isInsurAssigned release_stub];
  __isInsurAssigned = isInsurAssigned;
  __isInsurAssigned_isset = YES;
}

- (BOOL) isInsurAssignedIsSet {
  return __isInsurAssigned_isset;
}

- (void) unsetIsInsurAssigned {
  [__isInsurAssigned release_stub];
  __isInsurAssigned = nil;
  __isInsurAssigned_isset = NO;
}

- (NSMutableArray *) phoneNos {
  return [[__phoneNos retain_stub] autorelease_stub];
}

- (void) setPhoneNos: (NSMutableArray *) phoneNos {
  [phoneNos retain_stub];
  [__phoneNos release_stub];
  __phoneNos = phoneNos;
  __phoneNos_isset = YES;
}

- (BOOL) phoneNosIsSet {
  return __phoneNos_isset;
}

- (void) unsetPhoneNos {
  [__phoneNos release_stub];
  __phoneNos = nil;
  __phoneNos_isset = NO;
}

- (int32_t) openness {
  return __openness;
}

- (void) setOpenness: (int32_t) openness {
  __openness = openness;
  __openness_isset = YES;
}

- (BOOL) opennessIsSet {
  return __openness_isset;
}

- (void) unsetOpenness {
  __openness_isset = NO;
}

- (NSString *) hospType {
  return [[__hospType retain_stub] autorelease_stub];
}

- (void) setHospType: (NSString *) hospType {
  [hospType retain_stub];
  [__hospType release_stub];
  __hospType = hospType;
  __hospType_isset = YES;
}

- (BOOL) hospTypeIsSet {
  return __hospType_isset;
}

- (void) unsetHospType {
  [__hospType release_stub];
  __hospType = nil;
  __hospType_isset = NO;
}

- (NSString *) evaluation {
  return [[__evaluation retain_stub] autorelease_stub];
}

- (void) setEvaluation: (NSString *) evaluation {
  [evaluation retain_stub];
  [__evaluation release_stub];
  __evaluation = evaluation;
  __evaluation_isset = YES;
}

- (BOOL) evaluationIsSet {
  return __evaluation_isset;
}

- (void) unsetEvaluation {
  [__evaluation release_stub];
  __evaluation = nil;
  __evaluation_isset = NO;
}

- (NSString *) diamonds {
  return [[__diamonds retain_stub] autorelease_stub];
}

- (void) setDiamonds: (NSString *) diamonds {
  [diamonds retain_stub];
  [__diamonds release_stub];
  __diamonds = diamonds;
  __diamonds_isset = YES;
}

- (BOOL) diamondsIsSet {
  return __diamonds_isset;
}

- (void) unsetDiamonds {
  [__diamonds release_stub];
  __diamonds = nil;
  __diamonds_isset = NO;
}

- (int32_t) isOpenNet {
  return __isOpenNet;
}

- (void) setIsOpenNet: (int32_t) isOpenNet {
  __isOpenNet = isOpenNet;
  __isOpenNet_isset = YES;
}

- (BOOL) isOpenNetIsSet {
  return __isOpenNet_isset;
}

- (void) unsetIsOpenNet {
  __isOpenNet_isset = NO;
}

- (NSMutableArray *) featureDepts {
  return [[__featureDepts retain_stub] autorelease_stub];
}

- (void) setFeatureDepts: (NSMutableArray *) featureDepts {
  [featureDepts retain_stub];
  [__featureDepts release_stub];
  __featureDepts = featureDepts;
  __featureDepts_isset = YES;
}

- (BOOL) featureDeptsIsSet {
  return __featureDepts_isset;
}

- (void) unsetFeatureDepts {
  [__featureDepts release_stub];
  __featureDepts = nil;
  __featureDepts_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLevel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospStaticMap: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospLogo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospImg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOpened: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDailyVisitCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContactNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDepartments: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_LIST) {
          int _size166;
          [inProtocol readListBeginReturningElementType: NULL size: &_size166];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size166];
          int _i167;
          for (_i167 = 0; _i167 < _size166; ++_i167)
          {
            NSString * _elem168 = [inProtocol readString];
            [fieldValue addObject: _elem168];
          }
          [inProtocol readListEnd];
          [self setMaintainCodes: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMaintainMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLng: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLat: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsFavor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsInsurAssigned: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_LIST) {
          int _size169;
          [inProtocol readListBeginReturningElementType: NULL size: &_size169];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size169];
          int _i170;
          for (_i170 = 0; _i170 < _size169; ++_i170)
          {
            NXTFPhoneNoDto *_elem171 = [[NXTFPhoneNoDto alloc] init];
            [_elem171 read: inProtocol];
            [fieldValue addObject: _elem171];
            [_elem171 release_stub];
          }
          [inProtocol readListEnd];
          [self setPhoneNos: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOpenness: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEvaluation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDiamonds: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 26:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsOpenNet: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 27:
        if (fieldType == TType_LIST) {
          int _size172;
          [inProtocol readListBeginReturningElementType: NULL size: &_size172];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size172];
          int _i173;
          for (_i173 = 0; _i173 < _size172; ++_i173)
          {
            NXTFFeatureDeptDto *_elem174 = [[NXTFFeatureDeptDto alloc] init];
            [_elem174 read: inProtocol];
            [fieldValue addObject: _elem174];
            [_elem174 release_stub];
          }
          [inProtocol readListEnd];
          [self setFeatureDepts: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetHospResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__level_isset) {
    if (__level != nil) {
      [outProtocol writeFieldBeginWithName: @"level" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __level];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospStaticMap_isset) {
    if (__hospStaticMap != nil) {
      [outProtocol writeFieldBeginWithName: @"hospStaticMap" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __hospStaticMap];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospLogo_isset) {
    if (__hospLogo != nil) {
      [outProtocol writeFieldBeginWithName: @"hospLogo" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __hospLogo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospImg_isset) {
    if (__hospImg != nil) {
      [outProtocol writeFieldBeginWithName: @"hospImg" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __hospImg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__opened_isset) {
    if (__opened != nil) {
      [outProtocol writeFieldBeginWithName: @"opened" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __opened];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientCount_isset) {
    if (__patientCount != nil) {
      [outProtocol writeFieldBeginWithName: @"patientCount" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __patientCount];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dailyVisitCount_isset) {
    if (__dailyVisitCount != nil) {
      [outProtocol writeFieldBeginWithName: @"dailyVisitCount" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __dailyVisitCount];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__contactNo_isset) {
    if (__contactNo != nil) {
      [outProtocol writeFieldBeginWithName: @"contactNo" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __contactNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__departments_isset) {
    if (__departments != nil) {
      [outProtocol writeFieldBeginWithName: @"departments" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __departments];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceCode_isset) {
    if (__serviceCode != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceCode" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __serviceCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__maintainCodes_isset) {
    if (__maintainCodes != nil) {
      [outProtocol writeFieldBeginWithName: @"maintainCodes" type: TType_LIST fieldID: 15];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__maintainCodes count]];
        int idx176;
        for (idx176 = 0; idx176 < [__maintainCodes count]; idx176++)
        {
          [outProtocol writeString: [__maintainCodes objectAtIndex: idx176]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__maintainMsg_isset) {
    if (__maintainMsg != nil) {
      [outProtocol writeFieldBeginWithName: @"maintainMsg" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __maintainMsg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lng_isset) {
    if (__lng != nil) {
      [outProtocol writeFieldBeginWithName: @"lng" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __lng];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lat_isset) {
    if (__lat != nil) {
      [outProtocol writeFieldBeginWithName: @"lat" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __lat];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isFavor_isset) {
    if (__isFavor != nil) {
      [outProtocol writeFieldBeginWithName: @"isFavor" type: TType_STRING fieldID: 19];
      [outProtocol writeString: __isFavor];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isInsurAssigned_isset) {
    if (__isInsurAssigned != nil) {
      [outProtocol writeFieldBeginWithName: @"isInsurAssigned" type: TType_STRING fieldID: 20];
      [outProtocol writeString: __isInsurAssigned];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phoneNos_isset) {
    if (__phoneNos != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneNos" type: TType_LIST fieldID: 21];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__phoneNos count]];
        int idx178;
        for (idx178 = 0; idx178 < [__phoneNos count]; idx178++)
        {
          [[__phoneNos objectAtIndex: idx178] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__openness_isset) {
    [outProtocol writeFieldBeginWithName: @"openness" type: TType_I32 fieldID: 22];
    [outProtocol writeI32: __openness];
    [outProtocol writeFieldEnd];
  }
  if (__hospType_isset) {
    if (__hospType != nil) {
      [outProtocol writeFieldBeginWithName: @"hospType" type: TType_STRING fieldID: 23];
      [outProtocol writeString: __hospType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__evaluation_isset) {
    if (__evaluation != nil) {
      [outProtocol writeFieldBeginWithName: @"evaluation" type: TType_STRING fieldID: 24];
      [outProtocol writeString: __evaluation];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diamonds_isset) {
    if (__diamonds != nil) {
      [outProtocol writeFieldBeginWithName: @"diamonds" type: TType_STRING fieldID: 25];
      [outProtocol writeString: __diamonds];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isOpenNet_isset) {
    [outProtocol writeFieldBeginWithName: @"isOpenNet" type: TType_I32 fieldID: 26];
    [outProtocol writeI32: __isOpenNet];
    [outProtocol writeFieldEnd];
  }
  if (__featureDepts_isset) {
    if (__featureDepts != nil) {
      [outProtocol writeFieldBeginWithName: @"featureDepts" type: TType_LIST fieldID: 27];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__featureDepts count]];
        int idx180;
        for (idx180 = 0; idx180 < [__featureDepts count]; idx180++)
        {
          [[__featureDepts objectAtIndex: idx180] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetHospResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",level:"];
  [ms appendFormat: @"\"%@\"", __level];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",hospStaticMap:"];
  [ms appendFormat: @"\"%@\"", __hospStaticMap];
  [ms appendString: @",hospLogo:"];
  [ms appendFormat: @"\"%@\"", __hospLogo];
  [ms appendString: @",hospImg:"];
  [ms appendFormat: @"\"%@\"", __hospImg];
  [ms appendString: @",opened:"];
  [ms appendFormat: @"\"%@\"", __opened];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",patientCount:"];
  [ms appendFormat: @"\"%@\"", __patientCount];
  [ms appendString: @",dailyVisitCount:"];
  [ms appendFormat: @"\"%@\"", __dailyVisitCount];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",contactNo:"];
  [ms appendFormat: @"\"%@\"", __contactNo];
  [ms appendString: @",departments:"];
  [ms appendFormat: @"\"%@\"", __departments];
  [ms appendString: @",serviceCode:"];
  [ms appendFormat: @"\"%@\"", __serviceCode];
  [ms appendString: @",maintainCodes:"];
  [ms appendFormat: @"%@", __maintainCodes];
  [ms appendString: @",maintainMsg:"];
  [ms appendFormat: @"\"%@\"", __maintainMsg];
  [ms appendString: @",lng:"];
  [ms appendFormat: @"\"%@\"", __lng];
  [ms appendString: @",lat:"];
  [ms appendFormat: @"\"%@\"", __lat];
  [ms appendString: @",isFavor:"];
  [ms appendFormat: @"\"%@\"", __isFavor];
  [ms appendString: @",isInsurAssigned:"];
  [ms appendFormat: @"\"%@\"", __isInsurAssigned];
  [ms appendString: @",phoneNos:"];
  [ms appendFormat: @"%@", __phoneNos];
  [ms appendString: @",openness:"];
  [ms appendFormat: @"%i", __openness];
  [ms appendString: @",hospType:"];
  [ms appendFormat: @"\"%@\"", __hospType];
  [ms appendString: @",evaluation:"];
  [ms appendFormat: @"\"%@\"", __evaluation];
  [ms appendString: @",diamonds:"];
  [ms appendFormat: @"\"%@\"", __diamonds];
  [ms appendString: @",isOpenNet:"];
  [ms appendFormat: @"%i", __isOpenNet];
  [ms appendString: @",featureDepts:"];
  [ms appendFormat: @"%@", __featureDepts];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetReportsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.reports = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header reports: (NSMutableArray *) reports page: (NXTFPage *) page
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __reports = [reports retain_stub];
  __reports_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"reports"])
  {
    __reports = [[decoder decodeObjectForKey: @"reports"] retain_stub];
    __reports_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__reports_isset)
  {
    [encoder encodeObject: __reports forKey: @"reports"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __reports_isset ? 2654435761 : 0;
  if (__reports_isset)
  {
    hash = (hash * 31) ^ [__reports hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetReportsResp class]]) {
    return NO;
  }
  NXTFGetReportsResp *other = (NXTFGetReportsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__reports_isset != other->__reports_isset) ||
      (__reports_isset && ((__reports || other->__reports) && ![__reports isEqual:other->__reports]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__reports release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) reports {
  return [[__reports retain_stub] autorelease_stub];
}

- (void) setReports: (NSMutableArray *) reports {
  [reports retain_stub];
  [__reports release_stub];
  __reports = reports;
  __reports_isset = YES;
}

- (BOOL) reportsIsSet {
  return __reports_isset;
}

- (void) unsetReports {
  [__reports release_stub];
  __reports = nil;
  __reports_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size181;
          [inProtocol readListBeginReturningElementType: NULL size: &_size181];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size181];
          int _i182;
          for (_i182 = 0; _i182 < _size181; ++_i182)
          {
            NXTFReportDto *_elem183 = [[NXTFReportDto alloc] init];
            [_elem183 read: inProtocol];
            [fieldValue addObject: _elem183];
            [_elem183 release_stub];
          }
          [inProtocol readListEnd];
          [self setReports: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetReportsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reports_isset) {
    if (__reports != nil) {
      [outProtocol writeFieldBeginWithName: @"reports" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__reports count]];
        int idx185;
        for (idx185 = 0; idx185 < [__reports count]; idx185++)
        {
          [[__reports objectAtIndex: idx185] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 3];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetReportsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",reports:"];
  [ms appendFormat: @"%@", __reports];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFindDoctorsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header page: (NXTFPage *) page findDoctorOutputs: (NSMutableArray *) findDoctorOutputs isSameCity: (NSString *) isSameCity
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __findDoctorOutputs = [findDoctorOutputs retain_stub];
  __findDoctorOutputs_isset = YES;
  __isSameCity = [isSameCity retain_stub];
  __isSameCity_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"findDoctorOutputs"])
  {
    __findDoctorOutputs = [[decoder decodeObjectForKey: @"findDoctorOutputs"] retain_stub];
    __findDoctorOutputs_isset = YES;
  }
  if ([decoder containsValueForKey: @"isSameCity"])
  {
    __isSameCity = [[decoder decodeObjectForKey: @"isSameCity"] retain_stub];
    __isSameCity_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__findDoctorOutputs_isset)
  {
    [encoder encodeObject: __findDoctorOutputs forKey: @"findDoctorOutputs"];
  }
  if (__isSameCity_isset)
  {
    [encoder encodeObject: __isSameCity forKey: @"isSameCity"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __findDoctorOutputs_isset ? 2654435761 : 0;
  if (__findDoctorOutputs_isset)
  {
    hash = (hash * 31) ^ [__findDoctorOutputs hash];
  }
  hash = (hash * 31) ^ __isSameCity_isset ? 2654435761 : 0;
  if (__isSameCity_isset)
  {
    hash = (hash * 31) ^ [__isSameCity hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFindDoctorsResp class]]) {
    return NO;
  }
  NXTFFindDoctorsResp *other = (NXTFFindDoctorsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__findDoctorOutputs_isset != other->__findDoctorOutputs_isset) ||
      (__findDoctorOutputs_isset && ((__findDoctorOutputs || other->__findDoctorOutputs) && ![__findDoctorOutputs isEqual:other->__findDoctorOutputs]))) {
    return NO;
  }
  if ((__isSameCity_isset != other->__isSameCity_isset) ||
      (__isSameCity_isset && ((__isSameCity || other->__isSameCity) && ![__isSameCity isEqual:other->__isSameCity]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__findDoctorOutputs release_stub];
  [__isSameCity release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSMutableArray *) findDoctorOutputs {
  return [[__findDoctorOutputs retain_stub] autorelease_stub];
}

- (void) setFindDoctorOutputs: (NSMutableArray *) findDoctorOutputs {
  [findDoctorOutputs retain_stub];
  [__findDoctorOutputs release_stub];
  __findDoctorOutputs = findDoctorOutputs;
  __findDoctorOutputs_isset = YES;
}

- (BOOL) findDoctorOutputsIsSet {
  return __findDoctorOutputs_isset;
}

- (void) unsetFindDoctorOutputs {
  [__findDoctorOutputs release_stub];
  __findDoctorOutputs = nil;
  __findDoctorOutputs_isset = NO;
}

- (NSString *) isSameCity {
  return [[__isSameCity retain_stub] autorelease_stub];
}

- (void) setIsSameCity: (NSString *) isSameCity {
  [isSameCity retain_stub];
  [__isSameCity release_stub];
  __isSameCity = isSameCity;
  __isSameCity_isset = YES;
}

- (BOOL) isSameCityIsSet {
  return __isSameCity_isset;
}

- (void) unsetIsSameCity {
  [__isSameCity release_stub];
  __isSameCity = nil;
  __isSameCity_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size186;
          [inProtocol readListBeginReturningElementType: NULL size: &_size186];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size186];
          int _i187;
          for (_i187 = 0; _i187 < _size186; ++_i187)
          {
            NXTFFindDoctorOutput *_elem188 = [[NXTFFindDoctorOutput alloc] init];
            [_elem188 read: inProtocol];
            [fieldValue addObject: _elem188];
            [_elem188 release_stub];
          }
          [inProtocol readListEnd];
          [self setFindDoctorOutputs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIsSameCity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FindDoctorsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__findDoctorOutputs_isset) {
    if (__findDoctorOutputs != nil) {
      [outProtocol writeFieldBeginWithName: @"findDoctorOutputs" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__findDoctorOutputs count]];
        int idx190;
        for (idx190 = 0; idx190 < [__findDoctorOutputs count]; idx190++)
        {
          [[__findDoctorOutputs objectAtIndex: idx190] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__isSameCity_isset) {
    if (__isSameCity != nil) {
      [outProtocol writeFieldBeginWithName: @"isSameCity" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __isSameCity];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFindDoctorsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",findDoctorOutputs:"];
  [ms appendFormat: @"%@", __findDoctorOutputs];
  [ms appendString: @",isSameCity:"];
  [ms appendFormat: @"\"%@\"", __isSameCity];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFSignInResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header userId: (NSString *) userId patientId: (NSString *) patientId signingKey: (NSString *) signingKey token: (NSString *) token phoneNo: (NSString *) phoneNo accountName: (NSString *) accountName name: (NSString *) name gender: (int32_t) gender patientHead: (NSString *) patientHead merchantNo: (NSString *) merchantNo
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __patientId = [patientId retain_stub];
  __patientId_isset = YES;
  __signingKey = [signingKey retain_stub];
  __signingKey_isset = YES;
  __token = [token retain_stub];
  __token_isset = YES;
  __phoneNo = [phoneNo retain_stub];
  __phoneNo_isset = YES;
  __accountName = [accountName retain_stub];
  __accountName_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __patientHead = [patientHead retain_stub];
  __patientHead_isset = YES;
  __merchantNo = [merchantNo retain_stub];
  __merchantNo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [[decoder decodeObjectForKey: @"patientId"] retain_stub];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"signingKey"])
  {
    __signingKey = [[decoder decodeObjectForKey: @"signingKey"] retain_stub];
    __signingKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneNo"])
  {
    __phoneNo = [[decoder decodeObjectForKey: @"phoneNo"] retain_stub];
    __phoneNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"accountName"])
  {
    __accountName = [[decoder decodeObjectForKey: @"accountName"] retain_stub];
    __accountName_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeInt32ForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientHead"])
  {
    __patientHead = [[decoder decodeObjectForKey: @"patientHead"] retain_stub];
    __patientHead_isset = YES;
  }
  if ([decoder containsValueForKey: @"merchantNo"])
  {
    __merchantNo = [[decoder decodeObjectForKey: @"merchantNo"] retain_stub];
    __merchantNo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeObject: __patientId forKey: @"patientId"];
  }
  if (__signingKey_isset)
  {
    [encoder encodeObject: __signingKey forKey: @"signingKey"];
  }
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__phoneNo_isset)
  {
    [encoder encodeObject: __phoneNo forKey: @"phoneNo"];
  }
  if (__accountName_isset)
  {
    [encoder encodeObject: __accountName forKey: @"accountName"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt32: __gender forKey: @"gender"];
  }
  if (__patientHead_isset)
  {
    [encoder encodeObject: __patientHead forKey: @"patientHead"];
  }
  if (__merchantNo_isset)
  {
    [encoder encodeObject: __merchantNo forKey: @"merchantNo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __userId_isset ? 2654435761 : 0;
  if (__userId_isset)
  {
    hash = (hash * 31) ^ [__userId hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [__patientId hash];
  }
  hash = (hash * 31) ^ __signingKey_isset ? 2654435761 : 0;
  if (__signingKey_isset)
  {
    hash = (hash * 31) ^ [__signingKey hash];
  }
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __phoneNo_isset ? 2654435761 : 0;
  if (__phoneNo_isset)
  {
    hash = (hash * 31) ^ [__phoneNo hash];
  }
  hash = (hash * 31) ^ __accountName_isset ? 2654435761 : 0;
  if (__accountName_isset)
  {
    hash = (hash * 31) ^ [__accountName hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [@(__gender) hash];
  }
  hash = (hash * 31) ^ __patientHead_isset ? 2654435761 : 0;
  if (__patientHead_isset)
  {
    hash = (hash * 31) ^ [__patientHead hash];
  }
  hash = (hash * 31) ^ __merchantNo_isset ? 2654435761 : 0;
  if (__merchantNo_isset)
  {
    hash = (hash * 31) ^ [__merchantNo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFSignInResp class]]) {
    return NO;
  }
  NXTFSignInResp *other = (NXTFSignInResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__userId_isset != other->__userId_isset) ||
      (__userId_isset && ((__userId || other->__userId) && ![__userId isEqual:other->__userId]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && ((__patientId || other->__patientId) && ![__patientId isEqual:other->__patientId]))) {
    return NO;
  }
  if ((__signingKey_isset != other->__signingKey_isset) ||
      (__signingKey_isset && ((__signingKey || other->__signingKey) && ![__signingKey isEqual:other->__signingKey]))) {
    return NO;
  }
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__phoneNo_isset != other->__phoneNo_isset) ||
      (__phoneNo_isset && ((__phoneNo || other->__phoneNo) && ![__phoneNo isEqual:other->__phoneNo]))) {
    return NO;
  }
  if ((__accountName_isset != other->__accountName_isset) ||
      (__accountName_isset && ((__accountName || other->__accountName) && ![__accountName isEqual:other->__accountName]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && (__gender != other->__gender))) {
    return NO;
  }
  if ((__patientHead_isset != other->__patientHead_isset) ||
      (__patientHead_isset && ((__patientHead || other->__patientHead) && ![__patientHead isEqual:other->__patientHead]))) {
    return NO;
  }
  if ((__merchantNo_isset != other->__merchantNo_isset) ||
      (__merchantNo_isset && ((__merchantNo || other->__merchantNo) && ![__merchantNo isEqual:other->__merchantNo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__userId release_stub];
  [__patientId release_stub];
  [__signingKey release_stub];
  [__token release_stub];
  [__phoneNo release_stub];
  [__accountName release_stub];
  [__name release_stub];
  [__patientHead release_stub];
  [__merchantNo release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSString *) patientId {
  return [[__patientId retain_stub] autorelease_stub];
}

- (void) setPatientId: (NSString *) patientId {
  [patientId retain_stub];
  [__patientId release_stub];
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  [__patientId release_stub];
  __patientId = nil;
  __patientId_isset = NO;
}

- (NSString *) signingKey {
  return [[__signingKey retain_stub] autorelease_stub];
}

- (void) setSigningKey: (NSString *) signingKey {
  [signingKey retain_stub];
  [__signingKey release_stub];
  __signingKey = signingKey;
  __signingKey_isset = YES;
}

- (BOOL) signingKeyIsSet {
  return __signingKey_isset;
}

- (void) unsetSigningKey {
  [__signingKey release_stub];
  __signingKey = nil;
  __signingKey_isset = NO;
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) phoneNo {
  return [[__phoneNo retain_stub] autorelease_stub];
}

- (void) setPhoneNo: (NSString *) phoneNo {
  [phoneNo retain_stub];
  [__phoneNo release_stub];
  __phoneNo = phoneNo;
  __phoneNo_isset = YES;
}

- (BOOL) phoneNoIsSet {
  return __phoneNo_isset;
}

- (void) unsetPhoneNo {
  [__phoneNo release_stub];
  __phoneNo = nil;
  __phoneNo_isset = NO;
}

- (NSString *) accountName {
  return [[__accountName retain_stub] autorelease_stub];
}

- (void) setAccountName: (NSString *) accountName {
  [accountName retain_stub];
  [__accountName release_stub];
  __accountName = accountName;
  __accountName_isset = YES;
}

- (BOOL) accountNameIsSet {
  return __accountName_isset;
}

- (void) unsetAccountName {
  [__accountName release_stub];
  __accountName = nil;
  __accountName_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (int32_t) gender {
  return __gender;
}

- (void) setGender: (int32_t) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (NSString *) patientHead {
  return [[__patientHead retain_stub] autorelease_stub];
}

- (void) setPatientHead: (NSString *) patientHead {
  [patientHead retain_stub];
  [__patientHead release_stub];
  __patientHead = patientHead;
  __patientHead_isset = YES;
}

- (BOOL) patientHeadIsSet {
  return __patientHead_isset;
}

- (void) unsetPatientHead {
  [__patientHead release_stub];
  __patientHead = nil;
  __patientHead_isset = NO;
}

- (NSString *) merchantNo {
  return [[__merchantNo retain_stub] autorelease_stub];
}

- (void) setMerchantNo: (NSString *) merchantNo {
  [merchantNo retain_stub];
  [__merchantNo release_stub];
  __merchantNo = merchantNo;
  __merchantNo_isset = YES;
}

- (BOOL) merchantNoIsSet {
  return __merchantNo_isset;
}

- (void) unsetMerchantNo {
  [__merchantNo release_stub];
  __merchantNo = nil;
  __merchantNo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSigningKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoneNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccountName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientHead: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMerchantNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignInResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    if (__patientId != nil) {
      [outProtocol writeFieldBeginWithName: @"patientId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __patientId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__signingKey_isset) {
    if (__signingKey != nil) {
      [outProtocol writeFieldBeginWithName: @"signingKey" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __signingKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phoneNo_isset) {
    if (__phoneNo != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneNo" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __phoneNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__accountName_isset) {
    if (__accountName != nil) {
      [outProtocol writeFieldBeginWithName: @"accountName" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __accountName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__patientHead_isset) {
    if (__patientHead != nil) {
      [outProtocol writeFieldBeginWithName: @"patientHead" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __patientHead];
      [outProtocol writeFieldEnd];
    }
  }
  if (__merchantNo_isset) {
    if (__merchantNo != nil) {
      [outProtocol writeFieldBeginWithName: @"merchantNo" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __merchantNo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFSignInResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"\"%@\"", __patientId];
  [ms appendString: @",signingKey:"];
  [ms appendFormat: @"\"%@\"", __signingKey];
  [ms appendString: @",token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",phoneNo:"];
  [ms appendFormat: @"\"%@\"", __phoneNo];
  [ms appendString: @",accountName:"];
  [ms appendFormat: @"\"%@\"", __accountName];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @",patientHead:"];
  [ms appendFormat: @"\"%@\"", __patientHead];
  [ms appendString: @",merchantNo:"];
  [ms appendFormat: @"\"%@\"", __merchantNo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetGuideResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header guide: (NSString *) guide
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __guide = [guide retain_stub];
  __guide_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"guide"])
  {
    __guide = [[decoder decodeObjectForKey: @"guide"] retain_stub];
    __guide_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__guide_isset)
  {
    [encoder encodeObject: __guide forKey: @"guide"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __guide_isset ? 2654435761 : 0;
  if (__guide_isset)
  {
    hash = (hash * 31) ^ [__guide hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetGuideResp class]]) {
    return NO;
  }
  NXTFGetGuideResp *other = (NXTFGetGuideResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__guide_isset != other->__guide_isset) ||
      (__guide_isset && ((__guide || other->__guide) && ![__guide isEqual:other->__guide]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__guide release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) guide {
  return [[__guide retain_stub] autorelease_stub];
}

- (void) setGuide: (NSString *) guide {
  [guide retain_stub];
  [__guide release_stub];
  __guide = guide;
  __guide_isset = YES;
}

- (BOOL) guideIsSet {
  return __guide_isset;
}

- (void) unsetGuide {
  [__guide release_stub];
  __guide = nil;
  __guide_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGuide: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetGuideResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__guide_isset) {
    if (__guide != nil) {
      [outProtocol writeFieldBeginWithName: @"guide" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __guide];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetGuideResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",guide:"];
  [ms appendFormat: @"\"%@\"", __guide];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFOrderRecipeResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header orderId: (NSString *) orderId fee: (NSString *) fee
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __orderId = [orderId retain_stub];
  __orderId_isset = YES;
  __fee = [fee retain_stub];
  __fee_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [[decoder decodeObjectForKey: @"orderId"] retain_stub];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"fee"])
  {
    __fee = [[decoder decodeObjectForKey: @"fee"] retain_stub];
    __fee_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__orderId_isset)
  {
    [encoder encodeObject: __orderId forKey: @"orderId"];
  }
  if (__fee_isset)
  {
    [encoder encodeObject: __fee forKey: @"fee"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [__orderId hash];
  }
  hash = (hash * 31) ^ __fee_isset ? 2654435761 : 0;
  if (__fee_isset)
  {
    hash = (hash * 31) ^ [__fee hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFOrderRecipeResp class]]) {
    return NO;
  }
  NXTFOrderRecipeResp *other = (NXTFOrderRecipeResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && ((__orderId || other->__orderId) && ![__orderId isEqual:other->__orderId]))) {
    return NO;
  }
  if ((__fee_isset != other->__fee_isset) ||
      (__fee_isset && ((__fee || other->__fee) && ![__fee isEqual:other->__fee]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__orderId release_stub];
  [__fee release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) orderId {
  return [[__orderId retain_stub] autorelease_stub];
}

- (void) setOrderId: (NSString *) orderId {
  [orderId retain_stub];
  [__orderId release_stub];
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  [__orderId release_stub];
  __orderId = nil;
  __orderId_isset = NO;
}

- (NSString *) fee {
  return [[__fee retain_stub] autorelease_stub];
}

- (void) setFee: (NSString *) fee {
  [fee retain_stub];
  [__fee release_stub];
  __fee = fee;
  __fee_isset = YES;
}

- (BOOL) feeIsSet {
  return __fee_isset;
}

- (void) unsetFee {
  [__fee release_stub];
  __fee = nil;
  __fee_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OrderRecipeResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    if (__orderId != nil) {
      [outProtocol writeFieldBeginWithName: @"orderId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __orderId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fee_isset) {
    if (__fee != nil) {
      [outProtocol writeFieldBeginWithName: @"fee" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __fee];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFOrderRecipeResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"\"%@\"", __orderId];
  [ms appendString: @",fee:"];
  [ms appendFormat: @"\"%@\"", __fee];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetQueResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.queues = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

  self.appoints = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header queues: (NSMutableArray *) queues appoints: (NSMutableArray *) appoints
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __queues = [queues retain_stub];
  __queues_isset = YES;
  __appoints = [appoints retain_stub];
  __appoints_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"queues"])
  {
    __queues = [[decoder decodeObjectForKey: @"queues"] retain_stub];
    __queues_isset = YES;
  }
  if ([decoder containsValueForKey: @"appoints"])
  {
    __appoints = [[decoder decodeObjectForKey: @"appoints"] retain_stub];
    __appoints_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__queues_isset)
  {
    [encoder encodeObject: __queues forKey: @"queues"];
  }
  if (__appoints_isset)
  {
    [encoder encodeObject: __appoints forKey: @"appoints"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __queues_isset ? 2654435761 : 0;
  if (__queues_isset)
  {
    hash = (hash * 31) ^ [__queues hash];
  }
  hash = (hash * 31) ^ __appoints_isset ? 2654435761 : 0;
  if (__appoints_isset)
  {
    hash = (hash * 31) ^ [__appoints hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetQueResp class]]) {
    return NO;
  }
  NXTFGetQueResp *other = (NXTFGetQueResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__queues_isset != other->__queues_isset) ||
      (__queues_isset && ((__queues || other->__queues) && ![__queues isEqual:other->__queues]))) {
    return NO;
  }
  if ((__appoints_isset != other->__appoints_isset) ||
      (__appoints_isset && ((__appoints || other->__appoints) && ![__appoints isEqual:other->__appoints]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__queues release_stub];
  [__appoints release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) queues {
  return [[__queues retain_stub] autorelease_stub];
}

- (void) setQueues: (NSMutableArray *) queues {
  [queues retain_stub];
  [__queues release_stub];
  __queues = queues;
  __queues_isset = YES;
}

- (BOOL) queuesIsSet {
  return __queues_isset;
}

- (void) unsetQueues {
  [__queues release_stub];
  __queues = nil;
  __queues_isset = NO;
}

- (NSMutableArray *) appoints {
  return [[__appoints retain_stub] autorelease_stub];
}

- (void) setAppoints: (NSMutableArray *) appoints {
  [appoints retain_stub];
  [__appoints release_stub];
  __appoints = appoints;
  __appoints_isset = YES;
}

- (BOOL) appointsIsSet {
  return __appoints_isset;
}

- (void) unsetAppoints {
  [__appoints release_stub];
  __appoints = nil;
  __appoints_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size191;
          [inProtocol readListBeginReturningElementType: NULL size: &_size191];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size191];
          int _i192;
          for (_i192 = 0; _i192 < _size191; ++_i192)
          {
            NXTFQueueDto *_elem193 = [[NXTFQueueDto alloc] init];
            [_elem193 read: inProtocol];
            [fieldValue addObject: _elem193];
            [_elem193 release_stub];
          }
          [inProtocol readListEnd];
          [self setQueues: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size194;
          [inProtocol readListBeginReturningElementType: NULL size: &_size194];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size194];
          int _i195;
          for (_i195 = 0; _i195 < _size194; ++_i195)
          {
            NXTFAppointmentDto *_elem196 = [[NXTFAppointmentDto alloc] init];
            [_elem196 read: inProtocol];
            [fieldValue addObject: _elem196];
            [_elem196 release_stub];
          }
          [inProtocol readListEnd];
          [self setAppoints: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetQueResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__queues_isset) {
    if (__queues != nil) {
      [outProtocol writeFieldBeginWithName: @"queues" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__queues count]];
        int idx198;
        for (idx198 = 0; idx198 < [__queues count]; idx198++)
        {
          [[__queues objectAtIndex: idx198] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__appoints_isset) {
    if (__appoints != nil) {
      [outProtocol writeFieldBeginWithName: @"appoints" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__appoints count]];
        int idx200;
        for (idx200 = 0; idx200 < [__appoints count]; idx200++)
        {
          [[__appoints objectAtIndex: idx200] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetQueResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",queues:"];
  [ms appendFormat: @"%@", __queues];
  [ms appendString: @",appoints:"];
  [ms appendFormat: @"%@", __appoints];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetRecipesResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.recipes = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header recipes: (NSMutableArray *) recipes
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __recipes = [recipes retain_stub];
  __recipes_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"recipes"])
  {
    __recipes = [[decoder decodeObjectForKey: @"recipes"] retain_stub];
    __recipes_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__recipes_isset)
  {
    [encoder encodeObject: __recipes forKey: @"recipes"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __recipes_isset ? 2654435761 : 0;
  if (__recipes_isset)
  {
    hash = (hash * 31) ^ [__recipes hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetRecipesResp class]]) {
    return NO;
  }
  NXTFGetRecipesResp *other = (NXTFGetRecipesResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__recipes_isset != other->__recipes_isset) ||
      (__recipes_isset && ((__recipes || other->__recipes) && ![__recipes isEqual:other->__recipes]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__recipes release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) recipes {
  return [[__recipes retain_stub] autorelease_stub];
}

- (void) setRecipes: (NSMutableArray *) recipes {
  [recipes retain_stub];
  [__recipes release_stub];
  __recipes = recipes;
  __recipes_isset = YES;
}

- (BOOL) recipesIsSet {
  return __recipes_isset;
}

- (void) unsetRecipes {
  [__recipes release_stub];
  __recipes = nil;
  __recipes_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size201;
          [inProtocol readListBeginReturningElementType: NULL size: &_size201];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size201];
          int _i202;
          for (_i202 = 0; _i202 < _size201; ++_i202)
          {
            NXTFRecipeDto *_elem203 = [[NXTFRecipeDto alloc] init];
            [_elem203 read: inProtocol];
            [fieldValue addObject: _elem203];
            [_elem203 release_stub];
          }
          [inProtocol readListEnd];
          [self setRecipes: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRecipesResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__recipes_isset) {
    if (__recipes != nil) {
      [outProtocol writeFieldBeginWithName: @"recipes" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__recipes count]];
        int idx205;
        for (idx205 = 0; idx205 < [__recipes count]; idx205++)
        {
          [[__recipes objectAtIndex: idx205] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetRecipesResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",recipes:"];
  [ms appendFormat: @"%@", __recipes];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetPrefResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header favorDrCnt: (int32_t) favorDrCnt favorHospCnt: (int32_t) favorHospCnt favorDiseaseCnt: (int32_t) favorDiseaseCnt phone: (NSString *) phone name: (NSString *) name gender: (int32_t) gender patientCount: (int32_t) patientCount accountName: (NSString *) accountName consultCount: (int64_t) consultCount patientHead: (NSString *) patientHead authStatus: (int32_t) authStatus
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __favorDrCnt = favorDrCnt;
  __favorDrCnt_isset = YES;
  __favorHospCnt = favorHospCnt;
  __favorHospCnt_isset = YES;
  __favorDiseaseCnt = favorDiseaseCnt;
  __favorDiseaseCnt_isset = YES;
  __phone = [phone retain_stub];
  __phone_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __patientCount = patientCount;
  __patientCount_isset = YES;
  __accountName = [accountName retain_stub];
  __accountName_isset = YES;
  __consultCount = consultCount;
  __consultCount_isset = YES;
  __patientHead = [patientHead retain_stub];
  __patientHead_isset = YES;
  __authStatus = authStatus;
  __authStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"favorDrCnt"])
  {
    __favorDrCnt = [decoder decodeInt32ForKey: @"favorDrCnt"];
    __favorDrCnt_isset = YES;
  }
  if ([decoder containsValueForKey: @"favorHospCnt"])
  {
    __favorHospCnt = [decoder decodeInt32ForKey: @"favorHospCnt"];
    __favorHospCnt_isset = YES;
  }
  if ([decoder containsValueForKey: @"favorDiseaseCnt"])
  {
    __favorDiseaseCnt = [decoder decodeInt32ForKey: @"favorDiseaseCnt"];
    __favorDiseaseCnt_isset = YES;
  }
  if ([decoder containsValueForKey: @"phone"])
  {
    __phone = [[decoder decodeObjectForKey: @"phone"] retain_stub];
    __phone_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeInt32ForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientCount"])
  {
    __patientCount = [decoder decodeInt32ForKey: @"patientCount"];
    __patientCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"accountName"])
  {
    __accountName = [[decoder decodeObjectForKey: @"accountName"] retain_stub];
    __accountName_isset = YES;
  }
  if ([decoder containsValueForKey: @"consultCount"])
  {
    __consultCount = [decoder decodeInt64ForKey: @"consultCount"];
    __consultCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientHead"])
  {
    __patientHead = [[decoder decodeObjectForKey: @"patientHead"] retain_stub];
    __patientHead_isset = YES;
  }
  if ([decoder containsValueForKey: @"authStatus"])
  {
    __authStatus = [decoder decodeInt32ForKey: @"authStatus"];
    __authStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__favorDrCnt_isset)
  {
    [encoder encodeInt32: __favorDrCnt forKey: @"favorDrCnt"];
  }
  if (__favorHospCnt_isset)
  {
    [encoder encodeInt32: __favorHospCnt forKey: @"favorHospCnt"];
  }
  if (__favorDiseaseCnt_isset)
  {
    [encoder encodeInt32: __favorDiseaseCnt forKey: @"favorDiseaseCnt"];
  }
  if (__phone_isset)
  {
    [encoder encodeObject: __phone forKey: @"phone"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt32: __gender forKey: @"gender"];
  }
  if (__patientCount_isset)
  {
    [encoder encodeInt32: __patientCount forKey: @"patientCount"];
  }
  if (__accountName_isset)
  {
    [encoder encodeObject: __accountName forKey: @"accountName"];
  }
  if (__consultCount_isset)
  {
    [encoder encodeInt64: __consultCount forKey: @"consultCount"];
  }
  if (__patientHead_isset)
  {
    [encoder encodeObject: __patientHead forKey: @"patientHead"];
  }
  if (__authStatus_isset)
  {
    [encoder encodeInt32: __authStatus forKey: @"authStatus"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __favorDrCnt_isset ? 2654435761 : 0;
  if (__favorDrCnt_isset)
  {
    hash = (hash * 31) ^ [@(__favorDrCnt) hash];
  }
  hash = (hash * 31) ^ __favorHospCnt_isset ? 2654435761 : 0;
  if (__favorHospCnt_isset)
  {
    hash = (hash * 31) ^ [@(__favorHospCnt) hash];
  }
  hash = (hash * 31) ^ __favorDiseaseCnt_isset ? 2654435761 : 0;
  if (__favorDiseaseCnt_isset)
  {
    hash = (hash * 31) ^ [@(__favorDiseaseCnt) hash];
  }
  hash = (hash * 31) ^ __phone_isset ? 2654435761 : 0;
  if (__phone_isset)
  {
    hash = (hash * 31) ^ [__phone hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [@(__gender) hash];
  }
  hash = (hash * 31) ^ __patientCount_isset ? 2654435761 : 0;
  if (__patientCount_isset)
  {
    hash = (hash * 31) ^ [@(__patientCount) hash];
  }
  hash = (hash * 31) ^ __accountName_isset ? 2654435761 : 0;
  if (__accountName_isset)
  {
    hash = (hash * 31) ^ [__accountName hash];
  }
  hash = (hash * 31) ^ __consultCount_isset ? 2654435761 : 0;
  if (__consultCount_isset)
  {
    hash = (hash * 31) ^ [@(__consultCount) hash];
  }
  hash = (hash * 31) ^ __patientHead_isset ? 2654435761 : 0;
  if (__patientHead_isset)
  {
    hash = (hash * 31) ^ [__patientHead hash];
  }
  hash = (hash * 31) ^ __authStatus_isset ? 2654435761 : 0;
  if (__authStatus_isset)
  {
    hash = (hash * 31) ^ [@(__authStatus) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetPrefResp class]]) {
    return NO;
  }
  NXTFGetPrefResp *other = (NXTFGetPrefResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__favorDrCnt_isset != other->__favorDrCnt_isset) ||
      (__favorDrCnt_isset && (__favorDrCnt != other->__favorDrCnt))) {
    return NO;
  }
  if ((__favorHospCnt_isset != other->__favorHospCnt_isset) ||
      (__favorHospCnt_isset && (__favorHospCnt != other->__favorHospCnt))) {
    return NO;
  }
  if ((__favorDiseaseCnt_isset != other->__favorDiseaseCnt_isset) ||
      (__favorDiseaseCnt_isset && (__favorDiseaseCnt != other->__favorDiseaseCnt))) {
    return NO;
  }
  if ((__phone_isset != other->__phone_isset) ||
      (__phone_isset && ((__phone || other->__phone) && ![__phone isEqual:other->__phone]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && (__gender != other->__gender))) {
    return NO;
  }
  if ((__patientCount_isset != other->__patientCount_isset) ||
      (__patientCount_isset && (__patientCount != other->__patientCount))) {
    return NO;
  }
  if ((__accountName_isset != other->__accountName_isset) ||
      (__accountName_isset && ((__accountName || other->__accountName) && ![__accountName isEqual:other->__accountName]))) {
    return NO;
  }
  if ((__consultCount_isset != other->__consultCount_isset) ||
      (__consultCount_isset && (__consultCount != other->__consultCount))) {
    return NO;
  }
  if ((__patientHead_isset != other->__patientHead_isset) ||
      (__patientHead_isset && ((__patientHead || other->__patientHead) && ![__patientHead isEqual:other->__patientHead]))) {
    return NO;
  }
  if ((__authStatus_isset != other->__authStatus_isset) ||
      (__authStatus_isset && (__authStatus != other->__authStatus))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__phone release_stub];
  [__name release_stub];
  [__accountName release_stub];
  [__patientHead release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int32_t) favorDrCnt {
  return __favorDrCnt;
}

- (void) setFavorDrCnt: (int32_t) favorDrCnt {
  __favorDrCnt = favorDrCnt;
  __favorDrCnt_isset = YES;
}

- (BOOL) favorDrCntIsSet {
  return __favorDrCnt_isset;
}

- (void) unsetFavorDrCnt {
  __favorDrCnt_isset = NO;
}

- (int32_t) favorHospCnt {
  return __favorHospCnt;
}

- (void) setFavorHospCnt: (int32_t) favorHospCnt {
  __favorHospCnt = favorHospCnt;
  __favorHospCnt_isset = YES;
}

- (BOOL) favorHospCntIsSet {
  return __favorHospCnt_isset;
}

- (void) unsetFavorHospCnt {
  __favorHospCnt_isset = NO;
}

- (int32_t) favorDiseaseCnt {
  return __favorDiseaseCnt;
}

- (void) setFavorDiseaseCnt: (int32_t) favorDiseaseCnt {
  __favorDiseaseCnt = favorDiseaseCnt;
  __favorDiseaseCnt_isset = YES;
}

- (BOOL) favorDiseaseCntIsSet {
  return __favorDiseaseCnt_isset;
}

- (void) unsetFavorDiseaseCnt {
  __favorDiseaseCnt_isset = NO;
}

- (NSString *) phone {
  return [[__phone retain_stub] autorelease_stub];
}

- (void) setPhone: (NSString *) phone {
  [phone retain_stub];
  [__phone release_stub];
  __phone = phone;
  __phone_isset = YES;
}

- (BOOL) phoneIsSet {
  return __phone_isset;
}

- (void) unsetPhone {
  [__phone release_stub];
  __phone = nil;
  __phone_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (int32_t) gender {
  return __gender;
}

- (void) setGender: (int32_t) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (int32_t) patientCount {
  return __patientCount;
}

- (void) setPatientCount: (int32_t) patientCount {
  __patientCount = patientCount;
  __patientCount_isset = YES;
}

- (BOOL) patientCountIsSet {
  return __patientCount_isset;
}

- (void) unsetPatientCount {
  __patientCount_isset = NO;
}

- (NSString *) accountName {
  return [[__accountName retain_stub] autorelease_stub];
}

- (void) setAccountName: (NSString *) accountName {
  [accountName retain_stub];
  [__accountName release_stub];
  __accountName = accountName;
  __accountName_isset = YES;
}

- (BOOL) accountNameIsSet {
  return __accountName_isset;
}

- (void) unsetAccountName {
  [__accountName release_stub];
  __accountName = nil;
  __accountName_isset = NO;
}

- (int64_t) consultCount {
  return __consultCount;
}

- (void) setConsultCount: (int64_t) consultCount {
  __consultCount = consultCount;
  __consultCount_isset = YES;
}

- (BOOL) consultCountIsSet {
  return __consultCount_isset;
}

- (void) unsetConsultCount {
  __consultCount_isset = NO;
}

- (NSString *) patientHead {
  return [[__patientHead retain_stub] autorelease_stub];
}

- (void) setPatientHead: (NSString *) patientHead {
  [patientHead retain_stub];
  [__patientHead release_stub];
  __patientHead = patientHead;
  __patientHead_isset = YES;
}

- (BOOL) patientHeadIsSet {
  return __patientHead_isset;
}

- (void) unsetPatientHead {
  [__patientHead release_stub];
  __patientHead = nil;
  __patientHead_isset = NO;
}

- (int32_t) authStatus {
  return __authStatus;
}

- (void) setAuthStatus: (int32_t) authStatus {
  __authStatus = authStatus;
  __authStatus_isset = YES;
}

- (BOOL) authStatusIsSet {
  return __authStatus_isset;
}

- (void) unsetAuthStatus {
  __authStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFavorDrCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFavorHospCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFavorDiseaseCnt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPatientCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccountName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setConsultCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientHead: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setAuthStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPrefResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__favorDrCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"favorDrCnt" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __favorDrCnt];
    [outProtocol writeFieldEnd];
  }
  if (__favorHospCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"favorHospCnt" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __favorHospCnt];
    [outProtocol writeFieldEnd];
  }
  if (__favorDiseaseCnt_isset) {
    [outProtocol writeFieldBeginWithName: @"favorDiseaseCnt" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __favorDiseaseCnt];
    [outProtocol writeFieldEnd];
  }
  if (__phone_isset) {
    if (__phone != nil) {
      [outProtocol writeFieldBeginWithName: @"phone" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __phone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__patientCount_isset) {
    [outProtocol writeFieldBeginWithName: @"patientCount" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __patientCount];
    [outProtocol writeFieldEnd];
  }
  if (__accountName_isset) {
    if (__accountName != nil) {
      [outProtocol writeFieldBeginWithName: @"accountName" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __accountName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__consultCount_isset) {
    [outProtocol writeFieldBeginWithName: @"consultCount" type: TType_I64 fieldID: 10];
    [outProtocol writeI64: __consultCount];
    [outProtocol writeFieldEnd];
  }
  if (__patientHead_isset) {
    if (__patientHead != nil) {
      [outProtocol writeFieldBeginWithName: @"patientHead" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __patientHead];
      [outProtocol writeFieldEnd];
    }
  }
  if (__authStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"authStatus" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __authStatus];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetPrefResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",favorDrCnt:"];
  [ms appendFormat: @"%i", __favorDrCnt];
  [ms appendString: @",favorHospCnt:"];
  [ms appendFormat: @"%i", __favorHospCnt];
  [ms appendString: @",favorDiseaseCnt:"];
  [ms appendFormat: @"%i", __favorDiseaseCnt];
  [ms appendString: @",phone:"];
  [ms appendFormat: @"\"%@\"", __phone];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @",patientCount:"];
  [ms appendFormat: @"%i", __patientCount];
  [ms appendString: @",accountName:"];
  [ms appendFormat: @"\"%@\"", __accountName];
  [ms appendString: @",consultCount:"];
  [ms appendFormat: @"%qi", __consultCount];
  [ms appendString: @",patientHead:"];
  [ms appendFormat: @"\"%@\"", __patientHead];
  [ms appendString: @",authStatus:"];
  [ms appendFormat: @"%i", __authStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGDSearchResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header hospOutput: (NXTFHospOutputDto *) hospOutput doctorOutput: (NXTFDoctorOutputDto *) doctorOutput diseaseOutput: (NXTFDiseaseOutputDto *) diseaseOutput
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __hospOutput = [hospOutput retain_stub];
  __hospOutput_isset = YES;
  __doctorOutput = [doctorOutput retain_stub];
  __doctorOutput_isset = YES;
  __diseaseOutput = [diseaseOutput retain_stub];
  __diseaseOutput_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospOutput"])
  {
    __hospOutput = [[decoder decodeObjectForKey: @"hospOutput"] retain_stub];
    __hospOutput_isset = YES;
  }
  if ([decoder containsValueForKey: @"doctorOutput"])
  {
    __doctorOutput = [[decoder decodeObjectForKey: @"doctorOutput"] retain_stub];
    __doctorOutput_isset = YES;
  }
  if ([decoder containsValueForKey: @"diseaseOutput"])
  {
    __diseaseOutput = [[decoder decodeObjectForKey: @"diseaseOutput"] retain_stub];
    __diseaseOutput_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__hospOutput_isset)
  {
    [encoder encodeObject: __hospOutput forKey: @"hospOutput"];
  }
  if (__doctorOutput_isset)
  {
    [encoder encodeObject: __doctorOutput forKey: @"doctorOutput"];
  }
  if (__diseaseOutput_isset)
  {
    [encoder encodeObject: __diseaseOutput forKey: @"diseaseOutput"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __hospOutput_isset ? 2654435761 : 0;
  if (__hospOutput_isset)
  {
    hash = (hash * 31) ^ [__hospOutput hash];
  }
  hash = (hash * 31) ^ __doctorOutput_isset ? 2654435761 : 0;
  if (__doctorOutput_isset)
  {
    hash = (hash * 31) ^ [__doctorOutput hash];
  }
  hash = (hash * 31) ^ __diseaseOutput_isset ? 2654435761 : 0;
  if (__diseaseOutput_isset)
  {
    hash = (hash * 31) ^ [__diseaseOutput hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGDSearchResp class]]) {
    return NO;
  }
  NXTFGDSearchResp *other = (NXTFGDSearchResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__hospOutput_isset != other->__hospOutput_isset) ||
      (__hospOutput_isset && ((__hospOutput || other->__hospOutput) && ![__hospOutput isEqual:other->__hospOutput]))) {
    return NO;
  }
  if ((__doctorOutput_isset != other->__doctorOutput_isset) ||
      (__doctorOutput_isset && ((__doctorOutput || other->__doctorOutput) && ![__doctorOutput isEqual:other->__doctorOutput]))) {
    return NO;
  }
  if ((__diseaseOutput_isset != other->__diseaseOutput_isset) ||
      (__diseaseOutput_isset && ((__diseaseOutput || other->__diseaseOutput) && ![__diseaseOutput isEqual:other->__diseaseOutput]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__hospOutput release_stub];
  [__doctorOutput release_stub];
  [__diseaseOutput release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFHospOutputDto *) hospOutput {
  return [[__hospOutput retain_stub] autorelease_stub];
}

- (void) setHospOutput: (NXTFHospOutputDto *) hospOutput {
  [hospOutput retain_stub];
  [__hospOutput release_stub];
  __hospOutput = hospOutput;
  __hospOutput_isset = YES;
}

- (BOOL) hospOutputIsSet {
  return __hospOutput_isset;
}

- (void) unsetHospOutput {
  [__hospOutput release_stub];
  __hospOutput = nil;
  __hospOutput_isset = NO;
}

- (NXTFDoctorOutputDto *) doctorOutput {
  return [[__doctorOutput retain_stub] autorelease_stub];
}

- (void) setDoctorOutput: (NXTFDoctorOutputDto *) doctorOutput {
  [doctorOutput retain_stub];
  [__doctorOutput release_stub];
  __doctorOutput = doctorOutput;
  __doctorOutput_isset = YES;
}

- (BOOL) doctorOutputIsSet {
  return __doctorOutput_isset;
}

- (void) unsetDoctorOutput {
  [__doctorOutput release_stub];
  __doctorOutput = nil;
  __doctorOutput_isset = NO;
}

- (NXTFDiseaseOutputDto *) diseaseOutput {
  return [[__diseaseOutput retain_stub] autorelease_stub];
}

- (void) setDiseaseOutput: (NXTFDiseaseOutputDto *) diseaseOutput {
  [diseaseOutput retain_stub];
  [__diseaseOutput release_stub];
  __diseaseOutput = diseaseOutput;
  __diseaseOutput_isset = YES;
}

- (BOOL) diseaseOutputIsSet {
  return __diseaseOutput_isset;
}

- (void) unsetDiseaseOutput {
  [__diseaseOutput release_stub];
  __diseaseOutput = nil;
  __diseaseOutput_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFHospOutputDto *fieldValue = [[NXTFHospOutputDto alloc] init];
          [fieldValue read: inProtocol];
          [self setHospOutput: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          NXTFDoctorOutputDto *fieldValue = [[NXTFDoctorOutputDto alloc] init];
          [fieldValue read: inProtocol];
          [self setDoctorOutput: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          NXTFDiseaseOutputDto *fieldValue = [[NXTFDiseaseOutputDto alloc] init];
          [fieldValue read: inProtocol];
          [self setDiseaseOutput: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GDSearchResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospOutput_isset) {
    if (__hospOutput != nil) {
      [outProtocol writeFieldBeginWithName: @"hospOutput" type: TType_STRUCT fieldID: 2];
      [__hospOutput write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__doctorOutput_isset) {
    if (__doctorOutput != nil) {
      [outProtocol writeFieldBeginWithName: @"doctorOutput" type: TType_STRUCT fieldID: 3];
      [__doctorOutput write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diseaseOutput_isset) {
    if (__diseaseOutput != nil) {
      [outProtocol writeFieldBeginWithName: @"diseaseOutput" type: TType_STRUCT fieldID: 4];
      [__diseaseOutput write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGDSearchResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",hospOutput:"];
  [ms appendFormat: @"%@", __hospOutput];
  [ms appendString: @",doctorOutput:"];
  [ms appendFormat: @"%@", __doctorOutput];
  [ms appendString: @",diseaseOutput:"];
  [ms appendFormat: @"%@", __diseaseOutput];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRemovePatientResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRemovePatientResp class]]) {
    return NO;
  }
  NXTFRemovePatientResp *other = (NXTFRemovePatientResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemovePatientResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRemovePatientResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFUpdateUserResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFUpdateUserResp class]]) {
    return NO;
  }
  NXTFUpdateUserResp *other = (NXTFUpdateUserResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UpdateUserResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFUpdateUserResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFAddConsultResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header consultTime: (NSString *) consultTime consultationId: (NSString *) consultationId consultStatus: (NSString *) consultStatus roomId: (int32_t) roomId drId: (NSString *) drId drTImId: (NSString *) drTImId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __consultTime = [consultTime retain_stub];
  __consultTime_isset = YES;
  __consultationId = [consultationId retain_stub];
  __consultationId_isset = YES;
  __consultStatus = [consultStatus retain_stub];
  __consultStatus_isset = YES;
  __roomId = roomId;
  __roomId_isset = YES;
  __drId = [drId retain_stub];
  __drId_isset = YES;
  __drTImId = [drTImId retain_stub];
  __drTImId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"consultTime"])
  {
    __consultTime = [[decoder decodeObjectForKey: @"consultTime"] retain_stub];
    __consultTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"consultationId"])
  {
    __consultationId = [[decoder decodeObjectForKey: @"consultationId"] retain_stub];
    __consultationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"consultStatus"])
  {
    __consultStatus = [[decoder decodeObjectForKey: @"consultStatus"] retain_stub];
    __consultStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomId"])
  {
    __roomId = [decoder decodeInt32ForKey: @"roomId"];
    __roomId_isset = YES;
  }
  if ([decoder containsValueForKey: @"drId"])
  {
    __drId = [[decoder decodeObjectForKey: @"drId"] retain_stub];
    __drId_isset = YES;
  }
  if ([decoder containsValueForKey: @"drTImId"])
  {
    __drTImId = [[decoder decodeObjectForKey: @"drTImId"] retain_stub];
    __drTImId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__consultTime_isset)
  {
    [encoder encodeObject: __consultTime forKey: @"consultTime"];
  }
  if (__consultationId_isset)
  {
    [encoder encodeObject: __consultationId forKey: @"consultationId"];
  }
  if (__consultStatus_isset)
  {
    [encoder encodeObject: __consultStatus forKey: @"consultStatus"];
  }
  if (__roomId_isset)
  {
    [encoder encodeInt32: __roomId forKey: @"roomId"];
  }
  if (__drId_isset)
  {
    [encoder encodeObject: __drId forKey: @"drId"];
  }
  if (__drTImId_isset)
  {
    [encoder encodeObject: __drTImId forKey: @"drTImId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __consultTime_isset ? 2654435761 : 0;
  if (__consultTime_isset)
  {
    hash = (hash * 31) ^ [__consultTime hash];
  }
  hash = (hash * 31) ^ __consultationId_isset ? 2654435761 : 0;
  if (__consultationId_isset)
  {
    hash = (hash * 31) ^ [__consultationId hash];
  }
  hash = (hash * 31) ^ __consultStatus_isset ? 2654435761 : 0;
  if (__consultStatus_isset)
  {
    hash = (hash * 31) ^ [__consultStatus hash];
  }
  hash = (hash * 31) ^ __roomId_isset ? 2654435761 : 0;
  if (__roomId_isset)
  {
    hash = (hash * 31) ^ [@(__roomId) hash];
  }
  hash = (hash * 31) ^ __drId_isset ? 2654435761 : 0;
  if (__drId_isset)
  {
    hash = (hash * 31) ^ [__drId hash];
  }
  hash = (hash * 31) ^ __drTImId_isset ? 2654435761 : 0;
  if (__drTImId_isset)
  {
    hash = (hash * 31) ^ [__drTImId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFAddConsultResp class]]) {
    return NO;
  }
  NXTFAddConsultResp *other = (NXTFAddConsultResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__consultTime_isset != other->__consultTime_isset) ||
      (__consultTime_isset && ((__consultTime || other->__consultTime) && ![__consultTime isEqual:other->__consultTime]))) {
    return NO;
  }
  if ((__consultationId_isset != other->__consultationId_isset) ||
      (__consultationId_isset && ((__consultationId || other->__consultationId) && ![__consultationId isEqual:other->__consultationId]))) {
    return NO;
  }
  if ((__consultStatus_isset != other->__consultStatus_isset) ||
      (__consultStatus_isset && ((__consultStatus || other->__consultStatus) && ![__consultStatus isEqual:other->__consultStatus]))) {
    return NO;
  }
  if ((__roomId_isset != other->__roomId_isset) ||
      (__roomId_isset && (__roomId != other->__roomId))) {
    return NO;
  }
  if ((__drId_isset != other->__drId_isset) ||
      (__drId_isset && ((__drId || other->__drId) && ![__drId isEqual:other->__drId]))) {
    return NO;
  }
  if ((__drTImId_isset != other->__drTImId_isset) ||
      (__drTImId_isset && ((__drTImId || other->__drTImId) && ![__drTImId isEqual:other->__drTImId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__consultTime release_stub];
  [__consultationId release_stub];
  [__consultStatus release_stub];
  [__drId release_stub];
  [__drTImId release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) consultTime {
  return [[__consultTime retain_stub] autorelease_stub];
}

- (void) setConsultTime: (NSString *) consultTime {
  [consultTime retain_stub];
  [__consultTime release_stub];
  __consultTime = consultTime;
  __consultTime_isset = YES;
}

- (BOOL) consultTimeIsSet {
  return __consultTime_isset;
}

- (void) unsetConsultTime {
  [__consultTime release_stub];
  __consultTime = nil;
  __consultTime_isset = NO;
}

- (NSString *) consultationId {
  return [[__consultationId retain_stub] autorelease_stub];
}

- (void) setConsultationId: (NSString *) consultationId {
  [consultationId retain_stub];
  [__consultationId release_stub];
  __consultationId = consultationId;
  __consultationId_isset = YES;
}

- (BOOL) consultationIdIsSet {
  return __consultationId_isset;
}

- (void) unsetConsultationId {
  [__consultationId release_stub];
  __consultationId = nil;
  __consultationId_isset = NO;
}

- (NSString *) consultStatus {
  return [[__consultStatus retain_stub] autorelease_stub];
}

- (void) setConsultStatus: (NSString *) consultStatus {
  [consultStatus retain_stub];
  [__consultStatus release_stub];
  __consultStatus = consultStatus;
  __consultStatus_isset = YES;
}

- (BOOL) consultStatusIsSet {
  return __consultStatus_isset;
}

- (void) unsetConsultStatus {
  [__consultStatus release_stub];
  __consultStatus = nil;
  __consultStatus_isset = NO;
}

- (int32_t) roomId {
  return __roomId;
}

- (void) setRoomId: (int32_t) roomId {
  __roomId = roomId;
  __roomId_isset = YES;
}

- (BOOL) roomIdIsSet {
  return __roomId_isset;
}

- (void) unsetRoomId {
  __roomId_isset = NO;
}

- (NSString *) drId {
  return [[__drId retain_stub] autorelease_stub];
}

- (void) setDrId: (NSString *) drId {
  [drId retain_stub];
  [__drId release_stub];
  __drId = drId;
  __drId_isset = YES;
}

- (BOOL) drIdIsSet {
  return __drId_isset;
}

- (void) unsetDrId {
  [__drId release_stub];
  __drId = nil;
  __drId_isset = NO;
}

- (NSString *) drTImId {
  return [[__drTImId retain_stub] autorelease_stub];
}

- (void) setDrTImId: (NSString *) drTImId {
  [drTImId retain_stub];
  [__drTImId release_stub];
  __drTImId = drTImId;
  __drTImId_isset = YES;
}

- (BOOL) drTImIdIsSet {
  return __drTImId_isset;
}

- (void) unsetDrTImId {
  [__drTImId release_stub];
  __drTImId = nil;
  __drTImId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConsultTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConsultationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConsultStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRoomId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrTImId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddConsultResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__consultTime_isset) {
    if (__consultTime != nil) {
      [outProtocol writeFieldBeginWithName: @"consultTime" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __consultTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__consultationId_isset) {
    if (__consultationId != nil) {
      [outProtocol writeFieldBeginWithName: @"consultationId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __consultationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__consultStatus_isset) {
    if (__consultStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"consultStatus" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __consultStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__roomId_isset) {
    [outProtocol writeFieldBeginWithName: @"roomId" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __roomId];
    [outProtocol writeFieldEnd];
  }
  if (__drId_isset) {
    if (__drId != nil) {
      [outProtocol writeFieldBeginWithName: @"drId" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __drId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drTImId_isset) {
    if (__drTImId != nil) {
      [outProtocol writeFieldBeginWithName: @"drTImId" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __drTImId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFAddConsultResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",consultTime:"];
  [ms appendFormat: @"\"%@\"", __consultTime];
  [ms appendString: @",consultationId:"];
  [ms appendFormat: @"\"%@\"", __consultationId];
  [ms appendString: @",consultStatus:"];
  [ms appendFormat: @"\"%@\"", __consultStatus];
  [ms appendString: @",roomId:"];
  [ms appendFormat: @"%i", __roomId];
  [ms appendString: @",drId:"];
  [ms appendFormat: @"\"%@\"", __drId];
  [ms appendString: @",drTImId:"];
  [ms appendFormat: @"\"%@\"", __drTImId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetConsultsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.consultations = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header consultations: (NSMutableArray *) consultations
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __consultations = [consultations retain_stub];
  __consultations_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"consultations"])
  {
    __consultations = [[decoder decodeObjectForKey: @"consultations"] retain_stub];
    __consultations_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__consultations_isset)
  {
    [encoder encodeObject: __consultations forKey: @"consultations"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __consultations_isset ? 2654435761 : 0;
  if (__consultations_isset)
  {
    hash = (hash * 31) ^ [__consultations hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetConsultsResp class]]) {
    return NO;
  }
  NXTFGetConsultsResp *other = (NXTFGetConsultsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__consultations_isset != other->__consultations_isset) ||
      (__consultations_isset && ((__consultations || other->__consultations) && ![__consultations isEqual:other->__consultations]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__consultations release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) consultations {
  return [[__consultations retain_stub] autorelease_stub];
}

- (void) setConsultations: (NSMutableArray *) consultations {
  [consultations retain_stub];
  [__consultations release_stub];
  __consultations = consultations;
  __consultations_isset = YES;
}

- (BOOL) consultationsIsSet {
  return __consultations_isset;
}

- (void) unsetConsultations {
  [__consultations release_stub];
  __consultations = nil;
  __consultations_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size206;
          [inProtocol readListBeginReturningElementType: NULL size: &_size206];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size206];
          int _i207;
          for (_i207 = 0; _i207 < _size206; ++_i207)
          {
            NXTFConsultationDto *_elem208 = [[NXTFConsultationDto alloc] init];
            [_elem208 read: inProtocol];
            [fieldValue addObject: _elem208];
            [_elem208 release_stub];
          }
          [inProtocol readListEnd];
          [self setConsultations: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetConsultsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__consultations_isset) {
    if (__consultations != nil) {
      [outProtocol writeFieldBeginWithName: @"consultations" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__consultations count]];
        int idx210;
        for (idx210 = 0; idx210 < [__consultations count]; idx210++)
        {
          [[__consultations objectAtIndex: idx210] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetConsultsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",consultations:"];
  [ms appendFormat: @"%@", __consultations];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFAddEvaluateResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFAddEvaluateResp class]]) {
    return NO;
  }
  NXTFAddEvaluateResp *other = (NXTFAddEvaluateResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddEvaluateResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFAddEvaluateResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetEvaluatesResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.evaluates = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header page: (NXTFPage *) page evaluates: (NSMutableArray *) evaluates
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __evaluates = [evaluates retain_stub];
  __evaluates_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"evaluates"])
  {
    __evaluates = [[decoder decodeObjectForKey: @"evaluates"] retain_stub];
    __evaluates_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__evaluates_isset)
  {
    [encoder encodeObject: __evaluates forKey: @"evaluates"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __evaluates_isset ? 2654435761 : 0;
  if (__evaluates_isset)
  {
    hash = (hash * 31) ^ [__evaluates hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetEvaluatesResp class]]) {
    return NO;
  }
  NXTFGetEvaluatesResp *other = (NXTFGetEvaluatesResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__evaluates_isset != other->__evaluates_isset) ||
      (__evaluates_isset && ((__evaluates || other->__evaluates) && ![__evaluates isEqual:other->__evaluates]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__evaluates release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSMutableArray *) evaluates {
  return [[__evaluates retain_stub] autorelease_stub];
}

- (void) setEvaluates: (NSMutableArray *) evaluates {
  [evaluates retain_stub];
  [__evaluates release_stub];
  __evaluates = evaluates;
  __evaluates_isset = YES;
}

- (BOOL) evaluatesIsSet {
  return __evaluates_isset;
}

- (void) unsetEvaluates {
  [__evaluates release_stub];
  __evaluates = nil;
  __evaluates_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size211;
          [inProtocol readListBeginReturningElementType: NULL size: &_size211];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size211];
          int _i212;
          for (_i212 = 0; _i212 < _size211; ++_i212)
          {
            NXTFEvaluateDto *_elem213 = [[NXTFEvaluateDto alloc] init];
            [_elem213 read: inProtocol];
            [fieldValue addObject: _elem213];
            [_elem213 release_stub];
          }
          [inProtocol readListEnd];
          [self setEvaluates: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetEvaluatesResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__evaluates_isset) {
    if (__evaluates != nil) {
      [outProtocol writeFieldBeginWithName: @"evaluates" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__evaluates count]];
        int idx215;
        for (idx215 = 0; idx215 < [__evaluates count]; idx215++)
        {
          [[__evaluates objectAtIndex: idx215] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetEvaluatesResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",evaluates:"];
  [ms appendFormat: @"%@", __evaluates];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPullMsgsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.pushmsgDto = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header pushmsgDto: (NSMutableArray *) pushmsgDto msgEndTime: (int64_t) msgEndTime
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __pushmsgDto = [pushmsgDto retain_stub];
  __pushmsgDto_isset = YES;
  __msgEndTime = msgEndTime;
  __msgEndTime_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"pushmsgDto"])
  {
    __pushmsgDto = [[decoder decodeObjectForKey: @"pushmsgDto"] retain_stub];
    __pushmsgDto_isset = YES;
  }
  if ([decoder containsValueForKey: @"msgEndTime"])
  {
    __msgEndTime = [decoder decodeInt64ForKey: @"msgEndTime"];
    __msgEndTime_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__pushmsgDto_isset)
  {
    [encoder encodeObject: __pushmsgDto forKey: @"pushmsgDto"];
  }
  if (__msgEndTime_isset)
  {
    [encoder encodeInt64: __msgEndTime forKey: @"msgEndTime"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __pushmsgDto_isset ? 2654435761 : 0;
  if (__pushmsgDto_isset)
  {
    hash = (hash * 31) ^ [__pushmsgDto hash];
  }
  hash = (hash * 31) ^ __msgEndTime_isset ? 2654435761 : 0;
  if (__msgEndTime_isset)
  {
    hash = (hash * 31) ^ [@(__msgEndTime) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPullMsgsResp class]]) {
    return NO;
  }
  NXTFPullMsgsResp *other = (NXTFPullMsgsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__pushmsgDto_isset != other->__pushmsgDto_isset) ||
      (__pushmsgDto_isset && ((__pushmsgDto || other->__pushmsgDto) && ![__pushmsgDto isEqual:other->__pushmsgDto]))) {
    return NO;
  }
  if ((__msgEndTime_isset != other->__msgEndTime_isset) ||
      (__msgEndTime_isset && (__msgEndTime != other->__msgEndTime))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__pushmsgDto release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) pushmsgDto {
  return [[__pushmsgDto retain_stub] autorelease_stub];
}

- (void) setPushmsgDto: (NSMutableArray *) pushmsgDto {
  [pushmsgDto retain_stub];
  [__pushmsgDto release_stub];
  __pushmsgDto = pushmsgDto;
  __pushmsgDto_isset = YES;
}

- (BOOL) pushmsgDtoIsSet {
  return __pushmsgDto_isset;
}

- (void) unsetPushmsgDto {
  [__pushmsgDto release_stub];
  __pushmsgDto = nil;
  __pushmsgDto_isset = NO;
}

- (int64_t) msgEndTime {
  return __msgEndTime;
}

- (void) setMsgEndTime: (int64_t) msgEndTime {
  __msgEndTime = msgEndTime;
  __msgEndTime_isset = YES;
}

- (BOOL) msgEndTimeIsSet {
  return __msgEndTime_isset;
}

- (void) unsetMsgEndTime {
  __msgEndTime_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size216;
          [inProtocol readListBeginReturningElementType: NULL size: &_size216];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size216];
          int _i217;
          for (_i217 = 0; _i217 < _size216; ++_i217)
          {
            NXTFPushmsgDto *_elem218 = [[NXTFPushmsgDto alloc] init];
            [_elem218 read: inProtocol];
            [fieldValue addObject: _elem218];
            [_elem218 release_stub];
          }
          [inProtocol readListEnd];
          [self setPushmsgDto: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMsgEndTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PullMsgsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pushmsgDto_isset) {
    if (__pushmsgDto != nil) {
      [outProtocol writeFieldBeginWithName: @"pushmsgDto" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__pushmsgDto count]];
        int idx220;
        for (idx220 = 0; idx220 < [__pushmsgDto count]; idx220++)
        {
          [[__pushmsgDto objectAtIndex: idx220] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__msgEndTime_isset) {
    [outProtocol writeFieldBeginWithName: @"msgEndTime" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __msgEndTime];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPullMsgsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",pushmsgDto:"];
  [ms appendFormat: @"%@", __pushmsgDto];
  [ms appendString: @",msgEndTime:"];
  [ms appendFormat: @"%qi", __msgEndTime];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetRegDatesResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.regDates = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header regDates: (NSMutableArray *) regDates
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __regDates = [regDates retain_stub];
  __regDates_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"regDates"])
  {
    __regDates = [[decoder decodeObjectForKey: @"regDates"] retain_stub];
    __regDates_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__regDates_isset)
  {
    [encoder encodeObject: __regDates forKey: @"regDates"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __regDates_isset ? 2654435761 : 0;
  if (__regDates_isset)
  {
    hash = (hash * 31) ^ [__regDates hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetRegDatesResp class]]) {
    return NO;
  }
  NXTFGetRegDatesResp *other = (NXTFGetRegDatesResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__regDates_isset != other->__regDates_isset) ||
      (__regDates_isset && ((__regDates || other->__regDates) && ![__regDates isEqual:other->__regDates]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__regDates release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) regDates {
  return [[__regDates retain_stub] autorelease_stub];
}

- (void) setRegDates: (NSMutableArray *) regDates {
  [regDates retain_stub];
  [__regDates release_stub];
  __regDates = regDates;
  __regDates_isset = YES;
}

- (BOOL) regDatesIsSet {
  return __regDates_isset;
}

- (void) unsetRegDates {
  [__regDates release_stub];
  __regDates = nil;
  __regDates_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size221;
          [inProtocol readListBeginReturningElementType: NULL size: &_size221];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size221];
          int _i222;
          for (_i222 = 0; _i222 < _size221; ++_i222)
          {
            NSString * _elem223 = [inProtocol readString];
            [fieldValue addObject: _elem223];
          }
          [inProtocol readListEnd];
          [self setRegDates: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRegDatesResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regDates_isset) {
    if (__regDates != nil) {
      [outProtocol writeFieldBeginWithName: @"regDates" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__regDates count]];
        int idx225;
        for (idx225 = 0; idx225 < [__regDates count]; idx225++)
        {
          [outProtocol writeString: [__regDates objectAtIndex: idx225]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetRegDatesResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",regDates:"];
  [ms appendFormat: @"%@", __regDates];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetHospAnnResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.hospAnn = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header page: (NXTFPage *) page hospAnn: (NSMutableArray *) hospAnn
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __hospAnn = [hospAnn retain_stub];
  __hospAnn_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospAnn"])
  {
    __hospAnn = [[decoder decodeObjectForKey: @"hospAnn"] retain_stub];
    __hospAnn_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__hospAnn_isset)
  {
    [encoder encodeObject: __hospAnn forKey: @"hospAnn"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __hospAnn_isset ? 2654435761 : 0;
  if (__hospAnn_isset)
  {
    hash = (hash * 31) ^ [__hospAnn hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetHospAnnResp class]]) {
    return NO;
  }
  NXTFGetHospAnnResp *other = (NXTFGetHospAnnResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__hospAnn_isset != other->__hospAnn_isset) ||
      (__hospAnn_isset && ((__hospAnn || other->__hospAnn) && ![__hospAnn isEqual:other->__hospAnn]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__hospAnn release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSMutableArray *) hospAnn {
  return [[__hospAnn retain_stub] autorelease_stub];
}

- (void) setHospAnn: (NSMutableArray *) hospAnn {
  [hospAnn retain_stub];
  [__hospAnn release_stub];
  __hospAnn = hospAnn;
  __hospAnn_isset = YES;
}

- (BOOL) hospAnnIsSet {
  return __hospAnn_isset;
}

- (void) unsetHospAnn {
  [__hospAnn release_stub];
  __hospAnn = nil;
  __hospAnn_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size226;
          [inProtocol readListBeginReturningElementType: NULL size: &_size226];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size226];
          int _i227;
          for (_i227 = 0; _i227 < _size226; ++_i227)
          {
            NXTFHospAnnDto *_elem228 = [[NXTFHospAnnDto alloc] init];
            [_elem228 read: inProtocol];
            [fieldValue addObject: _elem228];
            [_elem228 release_stub];
          }
          [inProtocol readListEnd];
          [self setHospAnn: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetHospAnnResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospAnn_isset) {
    if (__hospAnn != nil) {
      [outProtocol writeFieldBeginWithName: @"hospAnn" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__hospAnn count]];
        int idx230;
        for (idx230 = 0; idx230 < [__hospAnn count]; idx230++)
        {
          [[__hospAnn objectAtIndex: idx230] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetHospAnnResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",hospAnn:"];
  [ms appendFormat: @"%@", __hospAnn];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetDescSymptomResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header patientName: (NSString *) patientName gender: (NSString *) gender age: (NSString *) age regDate: (NSString *) regDate stature: (NSString *) stature weight: (NSString *) weight bloodType: (NSString *) bloodType allergicHistory: (NSString *) allergicHistory criticalIllness: (NSString *) criticalIllness familyHistory: (NSString *) familyHistory disease: (NSString *) disease sympton: (NSString *) sympton symptonPics: (NSMutableArray *) symptonPics patientId: (NSString *) patientId relationId: (NSString *) relationId headImg: (NSString *) headImg bornDate: (NSString *) bornDate contactNo: (NSString *) contactNo papersNo: (NSString *) papersNo papersTypeId: (int32_t) papersTypeId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientName = [patientName retain_stub];
  __patientName_isset = YES;
  __gender = [gender retain_stub];
  __gender_isset = YES;
  __age = [age retain_stub];
  __age_isset = YES;
  __regDate = [regDate retain_stub];
  __regDate_isset = YES;
  __stature = [stature retain_stub];
  __stature_isset = YES;
  __weight = [weight retain_stub];
  __weight_isset = YES;
  __bloodType = [bloodType retain_stub];
  __bloodType_isset = YES;
  __allergicHistory = [allergicHistory retain_stub];
  __allergicHistory_isset = YES;
  __criticalIllness = [criticalIllness retain_stub];
  __criticalIllness_isset = YES;
  __familyHistory = [familyHistory retain_stub];
  __familyHistory_isset = YES;
  __disease = [disease retain_stub];
  __disease_isset = YES;
  __sympton = [sympton retain_stub];
  __sympton_isset = YES;
  __symptonPics = [symptonPics retain_stub];
  __symptonPics_isset = YES;
  __patientId = [patientId retain_stub];
  __patientId_isset = YES;
  __relationId = [relationId retain_stub];
  __relationId_isset = YES;
  __headImg = [headImg retain_stub];
  __headImg_isset = YES;
  __bornDate = [bornDate retain_stub];
  __bornDate_isset = YES;
  __contactNo = [contactNo retain_stub];
  __contactNo_isset = YES;
  __papersNo = [papersNo retain_stub];
  __papersNo_isset = YES;
  __papersTypeId = papersTypeId;
  __papersTypeId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientName"])
  {
    __patientName = [[decoder decodeObjectForKey: @"patientName"] retain_stub];
    __patientName_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [[decoder decodeObjectForKey: @"gender"] retain_stub];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"age"])
  {
    __age = [[decoder decodeObjectForKey: @"age"] retain_stub];
    __age_isset = YES;
  }
  if ([decoder containsValueForKey: @"regDate"])
  {
    __regDate = [[decoder decodeObjectForKey: @"regDate"] retain_stub];
    __regDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"stature"])
  {
    __stature = [[decoder decodeObjectForKey: @"stature"] retain_stub];
    __stature_isset = YES;
  }
  if ([decoder containsValueForKey: @"weight"])
  {
    __weight = [[decoder decodeObjectForKey: @"weight"] retain_stub];
    __weight_isset = YES;
  }
  if ([decoder containsValueForKey: @"bloodType"])
  {
    __bloodType = [[decoder decodeObjectForKey: @"bloodType"] retain_stub];
    __bloodType_isset = YES;
  }
  if ([decoder containsValueForKey: @"allergicHistory"])
  {
    __allergicHistory = [[decoder decodeObjectForKey: @"allergicHistory"] retain_stub];
    __allergicHistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"criticalIllness"])
  {
    __criticalIllness = [[decoder decodeObjectForKey: @"criticalIllness"] retain_stub];
    __criticalIllness_isset = YES;
  }
  if ([decoder containsValueForKey: @"familyHistory"])
  {
    __familyHistory = [[decoder decodeObjectForKey: @"familyHistory"] retain_stub];
    __familyHistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"disease"])
  {
    __disease = [[decoder decodeObjectForKey: @"disease"] retain_stub];
    __disease_isset = YES;
  }
  if ([decoder containsValueForKey: @"sympton"])
  {
    __sympton = [[decoder decodeObjectForKey: @"sympton"] retain_stub];
    __sympton_isset = YES;
  }
  if ([decoder containsValueForKey: @"symptonPics"])
  {
    __symptonPics = [[decoder decodeObjectForKey: @"symptonPics"] retain_stub];
    __symptonPics_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [[decoder decodeObjectForKey: @"patientId"] retain_stub];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"relationId"])
  {
    __relationId = [[decoder decodeObjectForKey: @"relationId"] retain_stub];
    __relationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"headImg"])
  {
    __headImg = [[decoder decodeObjectForKey: @"headImg"] retain_stub];
    __headImg_isset = YES;
  }
  if ([decoder containsValueForKey: @"bornDate"])
  {
    __bornDate = [[decoder decodeObjectForKey: @"bornDate"] retain_stub];
    __bornDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"contactNo"])
  {
    __contactNo = [[decoder decodeObjectForKey: @"contactNo"] retain_stub];
    __contactNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersNo"])
  {
    __papersNo = [[decoder decodeObjectForKey: @"papersNo"] retain_stub];
    __papersNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"papersTypeId"])
  {
    __papersTypeId = [decoder decodeInt32ForKey: @"papersTypeId"];
    __papersTypeId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientName_isset)
  {
    [encoder encodeObject: __patientName forKey: @"patientName"];
  }
  if (__gender_isset)
  {
    [encoder encodeObject: __gender forKey: @"gender"];
  }
  if (__age_isset)
  {
    [encoder encodeObject: __age forKey: @"age"];
  }
  if (__regDate_isset)
  {
    [encoder encodeObject: __regDate forKey: @"regDate"];
  }
  if (__stature_isset)
  {
    [encoder encodeObject: __stature forKey: @"stature"];
  }
  if (__weight_isset)
  {
    [encoder encodeObject: __weight forKey: @"weight"];
  }
  if (__bloodType_isset)
  {
    [encoder encodeObject: __bloodType forKey: @"bloodType"];
  }
  if (__allergicHistory_isset)
  {
    [encoder encodeObject: __allergicHistory forKey: @"allergicHistory"];
  }
  if (__criticalIllness_isset)
  {
    [encoder encodeObject: __criticalIllness forKey: @"criticalIllness"];
  }
  if (__familyHistory_isset)
  {
    [encoder encodeObject: __familyHistory forKey: @"familyHistory"];
  }
  if (__disease_isset)
  {
    [encoder encodeObject: __disease forKey: @"disease"];
  }
  if (__sympton_isset)
  {
    [encoder encodeObject: __sympton forKey: @"sympton"];
  }
  if (__symptonPics_isset)
  {
    [encoder encodeObject: __symptonPics forKey: @"symptonPics"];
  }
  if (__patientId_isset)
  {
    [encoder encodeObject: __patientId forKey: @"patientId"];
  }
  if (__relationId_isset)
  {
    [encoder encodeObject: __relationId forKey: @"relationId"];
  }
  if (__headImg_isset)
  {
    [encoder encodeObject: __headImg forKey: @"headImg"];
  }
  if (__bornDate_isset)
  {
    [encoder encodeObject: __bornDate forKey: @"bornDate"];
  }
  if (__contactNo_isset)
  {
    [encoder encodeObject: __contactNo forKey: @"contactNo"];
  }
  if (__papersNo_isset)
  {
    [encoder encodeObject: __papersNo forKey: @"papersNo"];
  }
  if (__papersTypeId_isset)
  {
    [encoder encodeInt32: __papersTypeId forKey: @"papersTypeId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientName_isset ? 2654435761 : 0;
  if (__patientName_isset)
  {
    hash = (hash * 31) ^ [__patientName hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [__gender hash];
  }
  hash = (hash * 31) ^ __age_isset ? 2654435761 : 0;
  if (__age_isset)
  {
    hash = (hash * 31) ^ [__age hash];
  }
  hash = (hash * 31) ^ __regDate_isset ? 2654435761 : 0;
  if (__regDate_isset)
  {
    hash = (hash * 31) ^ [__regDate hash];
  }
  hash = (hash * 31) ^ __stature_isset ? 2654435761 : 0;
  if (__stature_isset)
  {
    hash = (hash * 31) ^ [__stature hash];
  }
  hash = (hash * 31) ^ __weight_isset ? 2654435761 : 0;
  if (__weight_isset)
  {
    hash = (hash * 31) ^ [__weight hash];
  }
  hash = (hash * 31) ^ __bloodType_isset ? 2654435761 : 0;
  if (__bloodType_isset)
  {
    hash = (hash * 31) ^ [__bloodType hash];
  }
  hash = (hash * 31) ^ __allergicHistory_isset ? 2654435761 : 0;
  if (__allergicHistory_isset)
  {
    hash = (hash * 31) ^ [__allergicHistory hash];
  }
  hash = (hash * 31) ^ __criticalIllness_isset ? 2654435761 : 0;
  if (__criticalIllness_isset)
  {
    hash = (hash * 31) ^ [__criticalIllness hash];
  }
  hash = (hash * 31) ^ __familyHistory_isset ? 2654435761 : 0;
  if (__familyHistory_isset)
  {
    hash = (hash * 31) ^ [__familyHistory hash];
  }
  hash = (hash * 31) ^ __disease_isset ? 2654435761 : 0;
  if (__disease_isset)
  {
    hash = (hash * 31) ^ [__disease hash];
  }
  hash = (hash * 31) ^ __sympton_isset ? 2654435761 : 0;
  if (__sympton_isset)
  {
    hash = (hash * 31) ^ [__sympton hash];
  }
  hash = (hash * 31) ^ __symptonPics_isset ? 2654435761 : 0;
  if (__symptonPics_isset)
  {
    hash = (hash * 31) ^ [__symptonPics hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [__patientId hash];
  }
  hash = (hash * 31) ^ __relationId_isset ? 2654435761 : 0;
  if (__relationId_isset)
  {
    hash = (hash * 31) ^ [__relationId hash];
  }
  hash = (hash * 31) ^ __headImg_isset ? 2654435761 : 0;
  if (__headImg_isset)
  {
    hash = (hash * 31) ^ [__headImg hash];
  }
  hash = (hash * 31) ^ __bornDate_isset ? 2654435761 : 0;
  if (__bornDate_isset)
  {
    hash = (hash * 31) ^ [__bornDate hash];
  }
  hash = (hash * 31) ^ __contactNo_isset ? 2654435761 : 0;
  if (__contactNo_isset)
  {
    hash = (hash * 31) ^ [__contactNo hash];
  }
  hash = (hash * 31) ^ __papersNo_isset ? 2654435761 : 0;
  if (__papersNo_isset)
  {
    hash = (hash * 31) ^ [__papersNo hash];
  }
  hash = (hash * 31) ^ __papersTypeId_isset ? 2654435761 : 0;
  if (__papersTypeId_isset)
  {
    hash = (hash * 31) ^ [@(__papersTypeId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetDescSymptomResp class]]) {
    return NO;
  }
  NXTFGetDescSymptomResp *other = (NXTFGetDescSymptomResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientName_isset != other->__patientName_isset) ||
      (__patientName_isset && ((__patientName || other->__patientName) && ![__patientName isEqual:other->__patientName]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && ((__gender || other->__gender) && ![__gender isEqual:other->__gender]))) {
    return NO;
  }
  if ((__age_isset != other->__age_isset) ||
      (__age_isset && ((__age || other->__age) && ![__age isEqual:other->__age]))) {
    return NO;
  }
  if ((__regDate_isset != other->__regDate_isset) ||
      (__regDate_isset && ((__regDate || other->__regDate) && ![__regDate isEqual:other->__regDate]))) {
    return NO;
  }
  if ((__stature_isset != other->__stature_isset) ||
      (__stature_isset && ((__stature || other->__stature) && ![__stature isEqual:other->__stature]))) {
    return NO;
  }
  if ((__weight_isset != other->__weight_isset) ||
      (__weight_isset && ((__weight || other->__weight) && ![__weight isEqual:other->__weight]))) {
    return NO;
  }
  if ((__bloodType_isset != other->__bloodType_isset) ||
      (__bloodType_isset && ((__bloodType || other->__bloodType) && ![__bloodType isEqual:other->__bloodType]))) {
    return NO;
  }
  if ((__allergicHistory_isset != other->__allergicHistory_isset) ||
      (__allergicHistory_isset && ((__allergicHistory || other->__allergicHistory) && ![__allergicHistory isEqual:other->__allergicHistory]))) {
    return NO;
  }
  if ((__criticalIllness_isset != other->__criticalIllness_isset) ||
      (__criticalIllness_isset && ((__criticalIllness || other->__criticalIllness) && ![__criticalIllness isEqual:other->__criticalIllness]))) {
    return NO;
  }
  if ((__familyHistory_isset != other->__familyHistory_isset) ||
      (__familyHistory_isset && ((__familyHistory || other->__familyHistory) && ![__familyHistory isEqual:other->__familyHistory]))) {
    return NO;
  }
  if ((__disease_isset != other->__disease_isset) ||
      (__disease_isset && ((__disease || other->__disease) && ![__disease isEqual:other->__disease]))) {
    return NO;
  }
  if ((__sympton_isset != other->__sympton_isset) ||
      (__sympton_isset && ((__sympton || other->__sympton) && ![__sympton isEqual:other->__sympton]))) {
    return NO;
  }
  if ((__symptonPics_isset != other->__symptonPics_isset) ||
      (__symptonPics_isset && ((__symptonPics || other->__symptonPics) && ![__symptonPics isEqual:other->__symptonPics]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && ((__patientId || other->__patientId) && ![__patientId isEqual:other->__patientId]))) {
    return NO;
  }
  if ((__relationId_isset != other->__relationId_isset) ||
      (__relationId_isset && ((__relationId || other->__relationId) && ![__relationId isEqual:other->__relationId]))) {
    return NO;
  }
  if ((__headImg_isset != other->__headImg_isset) ||
      (__headImg_isset && ((__headImg || other->__headImg) && ![__headImg isEqual:other->__headImg]))) {
    return NO;
  }
  if ((__bornDate_isset != other->__bornDate_isset) ||
      (__bornDate_isset && ((__bornDate || other->__bornDate) && ![__bornDate isEqual:other->__bornDate]))) {
    return NO;
  }
  if ((__contactNo_isset != other->__contactNo_isset) ||
      (__contactNo_isset && ((__contactNo || other->__contactNo) && ![__contactNo isEqual:other->__contactNo]))) {
    return NO;
  }
  if ((__papersNo_isset != other->__papersNo_isset) ||
      (__papersNo_isset && ((__papersNo || other->__papersNo) && ![__papersNo isEqual:other->__papersNo]))) {
    return NO;
  }
  if ((__papersTypeId_isset != other->__papersTypeId_isset) ||
      (__papersTypeId_isset && (__papersTypeId != other->__papersTypeId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__patientName release_stub];
  [__gender release_stub];
  [__age release_stub];
  [__regDate release_stub];
  [__stature release_stub];
  [__weight release_stub];
  [__bloodType release_stub];
  [__allergicHistory release_stub];
  [__criticalIllness release_stub];
  [__familyHistory release_stub];
  [__disease release_stub];
  [__sympton release_stub];
  [__symptonPics release_stub];
  [__patientId release_stub];
  [__relationId release_stub];
  [__headImg release_stub];
  [__bornDate release_stub];
  [__contactNo release_stub];
  [__papersNo release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) patientName {
  return [[__patientName retain_stub] autorelease_stub];
}

- (void) setPatientName: (NSString *) patientName {
  [patientName retain_stub];
  [__patientName release_stub];
  __patientName = patientName;
  __patientName_isset = YES;
}

- (BOOL) patientNameIsSet {
  return __patientName_isset;
}

- (void) unsetPatientName {
  [__patientName release_stub];
  __patientName = nil;
  __patientName_isset = NO;
}

- (NSString *) gender {
  return [[__gender retain_stub] autorelease_stub];
}

- (void) setGender: (NSString *) gender {
  [gender retain_stub];
  [__gender release_stub];
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  [__gender release_stub];
  __gender = nil;
  __gender_isset = NO;
}

- (NSString *) age {
  return [[__age retain_stub] autorelease_stub];
}

- (void) setAge: (NSString *) age {
  [age retain_stub];
  [__age release_stub];
  __age = age;
  __age_isset = YES;
}

- (BOOL) ageIsSet {
  return __age_isset;
}

- (void) unsetAge {
  [__age release_stub];
  __age = nil;
  __age_isset = NO;
}

- (NSString *) regDate {
  return [[__regDate retain_stub] autorelease_stub];
}

- (void) setRegDate: (NSString *) regDate {
  [regDate retain_stub];
  [__regDate release_stub];
  __regDate = regDate;
  __regDate_isset = YES;
}

- (BOOL) regDateIsSet {
  return __regDate_isset;
}

- (void) unsetRegDate {
  [__regDate release_stub];
  __regDate = nil;
  __regDate_isset = NO;
}

- (NSString *) stature {
  return [[__stature retain_stub] autorelease_stub];
}

- (void) setStature: (NSString *) stature {
  [stature retain_stub];
  [__stature release_stub];
  __stature = stature;
  __stature_isset = YES;
}

- (BOOL) statureIsSet {
  return __stature_isset;
}

- (void) unsetStature {
  [__stature release_stub];
  __stature = nil;
  __stature_isset = NO;
}

- (NSString *) weight {
  return [[__weight retain_stub] autorelease_stub];
}

- (void) setWeight: (NSString *) weight {
  [weight retain_stub];
  [__weight release_stub];
  __weight = weight;
  __weight_isset = YES;
}

- (BOOL) weightIsSet {
  return __weight_isset;
}

- (void) unsetWeight {
  [__weight release_stub];
  __weight = nil;
  __weight_isset = NO;
}

- (NSString *) bloodType {
  return [[__bloodType retain_stub] autorelease_stub];
}

- (void) setBloodType: (NSString *) bloodType {
  [bloodType retain_stub];
  [__bloodType release_stub];
  __bloodType = bloodType;
  __bloodType_isset = YES;
}

- (BOOL) bloodTypeIsSet {
  return __bloodType_isset;
}

- (void) unsetBloodType {
  [__bloodType release_stub];
  __bloodType = nil;
  __bloodType_isset = NO;
}

- (NSString *) allergicHistory {
  return [[__allergicHistory retain_stub] autorelease_stub];
}

- (void) setAllergicHistory: (NSString *) allergicHistory {
  [allergicHistory retain_stub];
  [__allergicHistory release_stub];
  __allergicHistory = allergicHistory;
  __allergicHistory_isset = YES;
}

- (BOOL) allergicHistoryIsSet {
  return __allergicHistory_isset;
}

- (void) unsetAllergicHistory {
  [__allergicHistory release_stub];
  __allergicHistory = nil;
  __allergicHistory_isset = NO;
}

- (NSString *) criticalIllness {
  return [[__criticalIllness retain_stub] autorelease_stub];
}

- (void) setCriticalIllness: (NSString *) criticalIllness {
  [criticalIllness retain_stub];
  [__criticalIllness release_stub];
  __criticalIllness = criticalIllness;
  __criticalIllness_isset = YES;
}

- (BOOL) criticalIllnessIsSet {
  return __criticalIllness_isset;
}

- (void) unsetCriticalIllness {
  [__criticalIllness release_stub];
  __criticalIllness = nil;
  __criticalIllness_isset = NO;
}

- (NSString *) familyHistory {
  return [[__familyHistory retain_stub] autorelease_stub];
}

- (void) setFamilyHistory: (NSString *) familyHistory {
  [familyHistory retain_stub];
  [__familyHistory release_stub];
  __familyHistory = familyHistory;
  __familyHistory_isset = YES;
}

- (BOOL) familyHistoryIsSet {
  return __familyHistory_isset;
}

- (void) unsetFamilyHistory {
  [__familyHistory release_stub];
  __familyHistory = nil;
  __familyHistory_isset = NO;
}

- (NSString *) disease {
  return [[__disease retain_stub] autorelease_stub];
}

- (void) setDisease: (NSString *) disease {
  [disease retain_stub];
  [__disease release_stub];
  __disease = disease;
  __disease_isset = YES;
}

- (BOOL) diseaseIsSet {
  return __disease_isset;
}

- (void) unsetDisease {
  [__disease release_stub];
  __disease = nil;
  __disease_isset = NO;
}

- (NSString *) sympton {
  return [[__sympton retain_stub] autorelease_stub];
}

- (void) setSympton: (NSString *) sympton {
  [sympton retain_stub];
  [__sympton release_stub];
  __sympton = sympton;
  __sympton_isset = YES;
}

- (BOOL) symptonIsSet {
  return __sympton_isset;
}

- (void) unsetSympton {
  [__sympton release_stub];
  __sympton = nil;
  __sympton_isset = NO;
}

- (NSMutableArray *) symptonPics {
  return [[__symptonPics retain_stub] autorelease_stub];
}

- (void) setSymptonPics: (NSMutableArray *) symptonPics {
  [symptonPics retain_stub];
  [__symptonPics release_stub];
  __symptonPics = symptonPics;
  __symptonPics_isset = YES;
}

- (BOOL) symptonPicsIsSet {
  return __symptonPics_isset;
}

- (void) unsetSymptonPics {
  [__symptonPics release_stub];
  __symptonPics = nil;
  __symptonPics_isset = NO;
}

- (NSString *) patientId {
  return [[__patientId retain_stub] autorelease_stub];
}

- (void) setPatientId: (NSString *) patientId {
  [patientId retain_stub];
  [__patientId release_stub];
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  [__patientId release_stub];
  __patientId = nil;
  __patientId_isset = NO;
}

- (NSString *) relationId {
  return [[__relationId retain_stub] autorelease_stub];
}

- (void) setRelationId: (NSString *) relationId {
  [relationId retain_stub];
  [__relationId release_stub];
  __relationId = relationId;
  __relationId_isset = YES;
}

- (BOOL) relationIdIsSet {
  return __relationId_isset;
}

- (void) unsetRelationId {
  [__relationId release_stub];
  __relationId = nil;
  __relationId_isset = NO;
}

- (NSString *) headImg {
  return [[__headImg retain_stub] autorelease_stub];
}

- (void) setHeadImg: (NSString *) headImg {
  [headImg retain_stub];
  [__headImg release_stub];
  __headImg = headImg;
  __headImg_isset = YES;
}

- (BOOL) headImgIsSet {
  return __headImg_isset;
}

- (void) unsetHeadImg {
  [__headImg release_stub];
  __headImg = nil;
  __headImg_isset = NO;
}

- (NSString *) bornDate {
  return [[__bornDate retain_stub] autorelease_stub];
}

- (void) setBornDate: (NSString *) bornDate {
  [bornDate retain_stub];
  [__bornDate release_stub];
  __bornDate = bornDate;
  __bornDate_isset = YES;
}

- (BOOL) bornDateIsSet {
  return __bornDate_isset;
}

- (void) unsetBornDate {
  [__bornDate release_stub];
  __bornDate = nil;
  __bornDate_isset = NO;
}

- (NSString *) contactNo {
  return [[__contactNo retain_stub] autorelease_stub];
}

- (void) setContactNo: (NSString *) contactNo {
  [contactNo retain_stub];
  [__contactNo release_stub];
  __contactNo = contactNo;
  __contactNo_isset = YES;
}

- (BOOL) contactNoIsSet {
  return __contactNo_isset;
}

- (void) unsetContactNo {
  [__contactNo release_stub];
  __contactNo = nil;
  __contactNo_isset = NO;
}

- (NSString *) papersNo {
  return [[__papersNo retain_stub] autorelease_stub];
}

- (void) setPapersNo: (NSString *) papersNo {
  [papersNo retain_stub];
  [__papersNo release_stub];
  __papersNo = papersNo;
  __papersNo_isset = YES;
}

- (BOOL) papersNoIsSet {
  return __papersNo_isset;
}

- (void) unsetPapersNo {
  [__papersNo release_stub];
  __papersNo = nil;
  __papersNo_isset = NO;
}

- (int32_t) papersTypeId {
  return __papersTypeId;
}

- (void) setPapersTypeId: (int32_t) papersTypeId {
  __papersTypeId = papersTypeId;
  __papersTypeId_isset = YES;
}

- (BOOL) papersTypeIdIsSet {
  return __papersTypeId_isset;
}

- (void) unsetPapersTypeId {
  __papersTypeId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAge: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStature: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWeight: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBloodType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAllergicHistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCriticalIllness: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFamilyHistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDisease: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSympton: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_LIST) {
          int _size231;
          [inProtocol readListBeginReturningElementType: NULL size: &_size231];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size231];
          int _i232;
          for (_i232 = 0; _i232 < _size231; ++_i232)
          {
            NSString * _elem233 = [inProtocol readString];
            [fieldValue addObject: _elem233];
          }
          [inProtocol readListEnd];
          [self setSymptonPics: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRelationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHeadImg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBornDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContactNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPapersNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPapersTypeId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDescSymptomResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientName_isset) {
    if (__patientName != nil) {
      [outProtocol writeFieldBeginWithName: @"patientName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __patientName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    if (__gender != nil) {
      [outProtocol writeFieldBeginWithName: @"gender" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __gender];
      [outProtocol writeFieldEnd];
    }
  }
  if (__age_isset) {
    if (__age != nil) {
      [outProtocol writeFieldBeginWithName: @"age" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __age];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regDate_isset) {
    if (__regDate != nil) {
      [outProtocol writeFieldBeginWithName: @"regDate" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __regDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stature_isset) {
    if (__stature != nil) {
      [outProtocol writeFieldBeginWithName: @"stature" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __stature];
      [outProtocol writeFieldEnd];
    }
  }
  if (__weight_isset) {
    if (__weight != nil) {
      [outProtocol writeFieldBeginWithName: @"weight" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __weight];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bloodType_isset) {
    if (__bloodType != nil) {
      [outProtocol writeFieldBeginWithName: @"bloodType" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __bloodType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__allergicHistory_isset) {
    if (__allergicHistory != nil) {
      [outProtocol writeFieldBeginWithName: @"allergicHistory" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __allergicHistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__criticalIllness_isset) {
    if (__criticalIllness != nil) {
      [outProtocol writeFieldBeginWithName: @"criticalIllness" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __criticalIllness];
      [outProtocol writeFieldEnd];
    }
  }
  if (__familyHistory_isset) {
    if (__familyHistory != nil) {
      [outProtocol writeFieldBeginWithName: @"familyHistory" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __familyHistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__disease_isset) {
    if (__disease != nil) {
      [outProtocol writeFieldBeginWithName: @"disease" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __disease];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sympton_isset) {
    if (__sympton != nil) {
      [outProtocol writeFieldBeginWithName: @"sympton" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __sympton];
      [outProtocol writeFieldEnd];
    }
  }
  if (__symptonPics_isset) {
    if (__symptonPics != nil) {
      [outProtocol writeFieldBeginWithName: @"symptonPics" type: TType_LIST fieldID: 14];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__symptonPics count]];
        int idx235;
        for (idx235 = 0; idx235 < [__symptonPics count]; idx235++)
        {
          [outProtocol writeString: [__symptonPics objectAtIndex: idx235]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    if (__patientId != nil) {
      [outProtocol writeFieldBeginWithName: @"patientId" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __patientId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__relationId_isset) {
    if (__relationId != nil) {
      [outProtocol writeFieldBeginWithName: @"relationId" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __relationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__headImg_isset) {
    if (__headImg != nil) {
      [outProtocol writeFieldBeginWithName: @"headImg" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __headImg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bornDate_isset) {
    if (__bornDate != nil) {
      [outProtocol writeFieldBeginWithName: @"bornDate" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __bornDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__contactNo_isset) {
    if (__contactNo != nil) {
      [outProtocol writeFieldBeginWithName: @"contactNo" type: TType_STRING fieldID: 19];
      [outProtocol writeString: __contactNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__papersNo_isset) {
    if (__papersNo != nil) {
      [outProtocol writeFieldBeginWithName: @"papersNo" type: TType_STRING fieldID: 20];
      [outProtocol writeString: __papersNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__papersTypeId_isset) {
    [outProtocol writeFieldBeginWithName: @"papersTypeId" type: TType_I32 fieldID: 21];
    [outProtocol writeI32: __papersTypeId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetDescSymptomResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientName:"];
  [ms appendFormat: @"\"%@\"", __patientName];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"\"%@\"", __gender];
  [ms appendString: @",age:"];
  [ms appendFormat: @"\"%@\"", __age];
  [ms appendString: @",regDate:"];
  [ms appendFormat: @"\"%@\"", __regDate];
  [ms appendString: @",stature:"];
  [ms appendFormat: @"\"%@\"", __stature];
  [ms appendString: @",weight:"];
  [ms appendFormat: @"\"%@\"", __weight];
  [ms appendString: @",bloodType:"];
  [ms appendFormat: @"\"%@\"", __bloodType];
  [ms appendString: @",allergicHistory:"];
  [ms appendFormat: @"\"%@\"", __allergicHistory];
  [ms appendString: @",criticalIllness:"];
  [ms appendFormat: @"\"%@\"", __criticalIllness];
  [ms appendString: @",familyHistory:"];
  [ms appendFormat: @"\"%@\"", __familyHistory];
  [ms appendString: @",disease:"];
  [ms appendFormat: @"\"%@\"", __disease];
  [ms appendString: @",sympton:"];
  [ms appendFormat: @"\"%@\"", __sympton];
  [ms appendString: @",symptonPics:"];
  [ms appendFormat: @"%@", __symptonPics];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"\"%@\"", __patientId];
  [ms appendString: @",relationId:"];
  [ms appendFormat: @"\"%@\"", __relationId];
  [ms appendString: @",headImg:"];
  [ms appendFormat: @"\"%@\"", __headImg];
  [ms appendString: @",bornDate:"];
  [ms appendFormat: @"\"%@\"", __bornDate];
  [ms appendString: @",contactNo:"];
  [ms appendFormat: @"\"%@\"", __contactNo];
  [ms appendString: @",papersNo:"];
  [ms appendFormat: @"\"%@\"", __papersNo];
  [ms appendString: @",papersTypeId:"];
  [ms appendFormat: @"%i", __papersTypeId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetAdvertisResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.ads = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header ads: (NSMutableArray *) ads
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __ads = [ads retain_stub];
  __ads_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"ads"])
  {
    __ads = [[decoder decodeObjectForKey: @"ads"] retain_stub];
    __ads_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__ads_isset)
  {
    [encoder encodeObject: __ads forKey: @"ads"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __ads_isset ? 2654435761 : 0;
  if (__ads_isset)
  {
    hash = (hash * 31) ^ [__ads hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetAdvertisResp class]]) {
    return NO;
  }
  NXTFGetAdvertisResp *other = (NXTFGetAdvertisResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__ads_isset != other->__ads_isset) ||
      (__ads_isset && ((__ads || other->__ads) && ![__ads isEqual:other->__ads]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__ads release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) ads {
  return [[__ads retain_stub] autorelease_stub];
}

- (void) setAds: (NSMutableArray *) ads {
  [ads retain_stub];
  [__ads release_stub];
  __ads = ads;
  __ads_isset = YES;
}

- (BOOL) adsIsSet {
  return __ads_isset;
}

- (void) unsetAds {
  [__ads release_stub];
  __ads = nil;
  __ads_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size236;
          [inProtocol readListBeginReturningElementType: NULL size: &_size236];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size236];
          int _i237;
          for (_i237 = 0; _i237 < _size236; ++_i237)
          {
            NXTFAdvertisDto *_elem238 = [[NXTFAdvertisDto alloc] init];
            [_elem238 read: inProtocol];
            [fieldValue addObject: _elem238];
            [_elem238 release_stub];
          }
          [inProtocol readListEnd];
          [self setAds: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAdvertisResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ads_isset) {
    if (__ads != nil) {
      [outProtocol writeFieldBeginWithName: @"ads" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__ads count]];
        int idx240;
        for (idx240 = 0; idx240 < [__ads count]; idx240++)
        {
          [[__ads objectAtIndex: idx240] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetAdvertisResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",ads:"];
  [ms appendFormat: @"%@", __ads];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPointNumResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPointNumResp class]]) {
    return NO;
  }
  NXTFPointNumResp *other = (NXTFPointNumResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PointNumResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPointNumResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPatientHeadResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header patientHead: (NSString *) patientHead
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patientHead = [patientHead retain_stub];
  __patientHead_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientHead"])
  {
    __patientHead = [[decoder decodeObjectForKey: @"patientHead"] retain_stub];
    __patientHead_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patientHead_isset)
  {
    [encoder encodeObject: __patientHead forKey: @"patientHead"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patientHead_isset ? 2654435761 : 0;
  if (__patientHead_isset)
  {
    hash = (hash * 31) ^ [__patientHead hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPatientHeadResp class]]) {
    return NO;
  }
  NXTFPatientHeadResp *other = (NXTFPatientHeadResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patientHead_isset != other->__patientHead_isset) ||
      (__patientHead_isset && ((__patientHead || other->__patientHead) && ![__patientHead isEqual:other->__patientHead]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__patientHead release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) patientHead {
  return [[__patientHead retain_stub] autorelease_stub];
}

- (void) setPatientHead: (NSString *) patientHead {
  [patientHead retain_stub];
  [__patientHead release_stub];
  __patientHead = patientHead;
  __patientHead_isset = YES;
}

- (BOOL) patientHeadIsSet {
  return __patientHead_isset;
}

- (void) unsetPatientHead {
  [__patientHead release_stub];
  __patientHead = nil;
  __patientHead_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientHead: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PatientHeadResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientHead_isset) {
    if (__patientHead != nil) {
      [outProtocol writeFieldBeginWithName: @"patientHead" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __patientHead];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPatientHeadResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patientHead:"];
  [ms appendFormat: @"\"%@\"", __patientHead];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetAutognosisSymsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.crownSymptoms = [[[NSMutableDictionary alloc] initWithCapacity:0] autorelease_stub]; 

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header serverDictVer: (NSString *) serverDictVer crownSymptoms: (NSMutableDictionary *) crownSymptoms
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __serverDictVer = [serverDictVer retain_stub];
  __serverDictVer_isset = YES;
  __crownSymptoms = [crownSymptoms retain_stub];
  __crownSymptoms_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"serverDictVer"])
  {
    __serverDictVer = [[decoder decodeObjectForKey: @"serverDictVer"] retain_stub];
    __serverDictVer_isset = YES;
  }
  if ([decoder containsValueForKey: @"crownSymptoms"])
  {
    __crownSymptoms = [[decoder decodeObjectForKey: @"crownSymptoms"] retain_stub];
    __crownSymptoms_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__serverDictVer_isset)
  {
    [encoder encodeObject: __serverDictVer forKey: @"serverDictVer"];
  }
  if (__crownSymptoms_isset)
  {
    [encoder encodeObject: __crownSymptoms forKey: @"crownSymptoms"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __serverDictVer_isset ? 2654435761 : 0;
  if (__serverDictVer_isset)
  {
    hash = (hash * 31) ^ [__serverDictVer hash];
  }
  hash = (hash * 31) ^ __crownSymptoms_isset ? 2654435761 : 0;
  if (__crownSymptoms_isset)
  {
    hash = (hash * 31) ^ [__crownSymptoms hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetAutognosisSymsResp class]]) {
    return NO;
  }
  NXTFGetAutognosisSymsResp *other = (NXTFGetAutognosisSymsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__serverDictVer_isset != other->__serverDictVer_isset) ||
      (__serverDictVer_isset && ((__serverDictVer || other->__serverDictVer) && ![__serverDictVer isEqual:other->__serverDictVer]))) {
    return NO;
  }
  if ((__crownSymptoms_isset != other->__crownSymptoms_isset) ||
      (__crownSymptoms_isset && ((__crownSymptoms || other->__crownSymptoms) && ![__crownSymptoms isEqual:other->__crownSymptoms]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__serverDictVer release_stub];
  [__crownSymptoms release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) serverDictVer {
  return [[__serverDictVer retain_stub] autorelease_stub];
}

- (void) setServerDictVer: (NSString *) serverDictVer {
  [serverDictVer retain_stub];
  [__serverDictVer release_stub];
  __serverDictVer = serverDictVer;
  __serverDictVer_isset = YES;
}

- (BOOL) serverDictVerIsSet {
  return __serverDictVer_isset;
}

- (void) unsetServerDictVer {
  [__serverDictVer release_stub];
  __serverDictVer = nil;
  __serverDictVer_isset = NO;
}

- (NSMutableDictionary *) crownSymptoms {
  return [[__crownSymptoms retain_stub] autorelease_stub];
}

- (void) setCrownSymptoms: (NSMutableDictionary *) crownSymptoms {
  [crownSymptoms retain_stub];
  [__crownSymptoms release_stub];
  __crownSymptoms = crownSymptoms;
  __crownSymptoms_isset = YES;
}

- (BOOL) crownSymptomsIsSet {
  return __crownSymptoms_isset;
}

- (void) unsetCrownSymptoms {
  [__crownSymptoms release_stub];
  __crownSymptoms = nil;
  __crownSymptoms_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServerDictVer: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_MAP) {
          int _size241;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size241];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size241];
          int _i242;
          for (_i242 = 0; _i242 < _size241; ++_i242)
          {
            int32_t _key243 = [inProtocol readI32];
            int _size245;
            [inProtocol readListBeginReturningElementType: NULL size: &_size245];
            NSMutableArray * _val244 = [[NSMutableArray alloc] initWithCapacity: _size245];
            int _i246;
            for (_i246 = 0; _i246 < _size245; ++_i246)
            {
              NXTFPartSymptomDto *_elem247 = [[NXTFPartSymptomDto alloc] init];
              [_elem247 read: inProtocol];
              [_val244 addObject: _elem247];
              [_elem247 release_stub];
            }
            [inProtocol readListEnd];
            [fieldValue setObject: _val244 forKey: [NSNumber numberWithLong: _key243]];
            [_val244 release_stub];
          }
          [inProtocol readMapEnd];
          [self setCrownSymptoms: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAutognosisSymsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serverDictVer_isset) {
    if (__serverDictVer != nil) {
      [outProtocol writeFieldBeginWithName: @"serverDictVer" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __serverDictVer];
      [outProtocol writeFieldEnd];
    }
  }
  if (__crownSymptoms_isset) {
    if (__crownSymptoms != nil) {
      [outProtocol writeFieldBeginWithName: @"crownSymptoms" type: TType_MAP fieldID: 3];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_LIST size: [__crownSymptoms count]];
        NSEnumerator * _iter248 = [__crownSymptoms keyEnumerator];
        id key249;
        while ((key249 = [_iter248 nextObject]))
        {
          [outProtocol writeI32: [key249 longValue]];
          {
            [outProtocol writeListBeginWithElementType: TType_STRUCT size: [[__crownSymptoms objectForKey: key249] count]];
            int idx251;
            for (idx251 = 0; idx251 < [[__crownSymptoms objectForKey: key249] count]; idx251++)
            {
              [[[__crownSymptoms objectForKey: key249] objectAtIndex: idx251] write: outProtocol];
            }
            [outProtocol writeListEnd];
          }
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetAutognosisSymsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",serverDictVer:"];
  [ms appendFormat: @"\"%@\"", __serverDictVer];
  [ms appendString: @",crownSymptoms:"];
  [ms appendFormat: @"%@", __crownSymptoms];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetAutognosisDetailResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.gnosisDetail = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

  self.diagDtos = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header assoSymptoms: (NSMutableArray *) assoSymptoms gnosisDetail: (NSMutableArray *) gnosisDetail diagDtos: (NSMutableArray *) diagDtos
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __assoSymptoms = [assoSymptoms retain_stub];
  __assoSymptoms_isset = YES;
  __gnosisDetail = [gnosisDetail retain_stub];
  __gnosisDetail_isset = YES;
  __diagDtos = [diagDtos retain_stub];
  __diagDtos_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"assoSymptoms"])
  {
    __assoSymptoms = [[decoder decodeObjectForKey: @"assoSymptoms"] retain_stub];
    __assoSymptoms_isset = YES;
  }
  if ([decoder containsValueForKey: @"gnosisDetail"])
  {
    __gnosisDetail = [[decoder decodeObjectForKey: @"gnosisDetail"] retain_stub];
    __gnosisDetail_isset = YES;
  }
  if ([decoder containsValueForKey: @"diagDtos"])
  {
    __diagDtos = [[decoder decodeObjectForKey: @"diagDtos"] retain_stub];
    __diagDtos_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__assoSymptoms_isset)
  {
    [encoder encodeObject: __assoSymptoms forKey: @"assoSymptoms"];
  }
  if (__gnosisDetail_isset)
  {
    [encoder encodeObject: __gnosisDetail forKey: @"gnosisDetail"];
  }
  if (__diagDtos_isset)
  {
    [encoder encodeObject: __diagDtos forKey: @"diagDtos"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __assoSymptoms_isset ? 2654435761 : 0;
  if (__assoSymptoms_isset)
  {
    hash = (hash * 31) ^ [__assoSymptoms hash];
  }
  hash = (hash * 31) ^ __gnosisDetail_isset ? 2654435761 : 0;
  if (__gnosisDetail_isset)
  {
    hash = (hash * 31) ^ [__gnosisDetail hash];
  }
  hash = (hash * 31) ^ __diagDtos_isset ? 2654435761 : 0;
  if (__diagDtos_isset)
  {
    hash = (hash * 31) ^ [__diagDtos hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetAutognosisDetailResp class]]) {
    return NO;
  }
  NXTFGetAutognosisDetailResp *other = (NXTFGetAutognosisDetailResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__assoSymptoms_isset != other->__assoSymptoms_isset) ||
      (__assoSymptoms_isset && ((__assoSymptoms || other->__assoSymptoms) && ![__assoSymptoms isEqual:other->__assoSymptoms]))) {
    return NO;
  }
  if ((__gnosisDetail_isset != other->__gnosisDetail_isset) ||
      (__gnosisDetail_isset && ((__gnosisDetail || other->__gnosisDetail) && ![__gnosisDetail isEqual:other->__gnosisDetail]))) {
    return NO;
  }
  if ((__diagDtos_isset != other->__diagDtos_isset) ||
      (__diagDtos_isset && ((__diagDtos || other->__diagDtos) && ![__diagDtos isEqual:other->__diagDtos]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__assoSymptoms release_stub];
  [__gnosisDetail release_stub];
  [__diagDtos release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) assoSymptoms {
  return [[__assoSymptoms retain_stub] autorelease_stub];
}

- (void) setAssoSymptoms: (NSMutableArray *) assoSymptoms {
  [assoSymptoms retain_stub];
  [__assoSymptoms release_stub];
  __assoSymptoms = assoSymptoms;
  __assoSymptoms_isset = YES;
}

- (BOOL) assoSymptomsIsSet {
  return __assoSymptoms_isset;
}

- (void) unsetAssoSymptoms {
  [__assoSymptoms release_stub];
  __assoSymptoms = nil;
  __assoSymptoms_isset = NO;
}

- (NSMutableArray *) gnosisDetail {
  return [[__gnosisDetail retain_stub] autorelease_stub];
}

- (void) setGnosisDetail: (NSMutableArray *) gnosisDetail {
  [gnosisDetail retain_stub];
  [__gnosisDetail release_stub];
  __gnosisDetail = gnosisDetail;
  __gnosisDetail_isset = YES;
}

- (BOOL) gnosisDetailIsSet {
  return __gnosisDetail_isset;
}

- (void) unsetGnosisDetail {
  [__gnosisDetail release_stub];
  __gnosisDetail = nil;
  __gnosisDetail_isset = NO;
}

- (NSMutableArray *) diagDtos {
  return [[__diagDtos retain_stub] autorelease_stub];
}

- (void) setDiagDtos: (NSMutableArray *) diagDtos {
  [diagDtos retain_stub];
  [__diagDtos release_stub];
  __diagDtos = diagDtos;
  __diagDtos_isset = YES;
}

- (BOOL) diagDtosIsSet {
  return __diagDtos_isset;
}

- (void) unsetDiagDtos {
  [__diagDtos release_stub];
  __diagDtos = nil;
  __diagDtos_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size252;
          [inProtocol readListBeginReturningElementType: NULL size: &_size252];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size252];
          int _i253;
          for (_i253 = 0; _i253 < _size252; ++_i253)
          {
            NSString * _elem254 = [inProtocol readString];
            [fieldValue addObject: _elem254];
          }
          [inProtocol readListEnd];
          [self setAssoSymptoms: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size255;
          [inProtocol readListBeginReturningElementType: NULL size: &_size255];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size255];
          int _i256;
          for (_i256 = 0; _i256 < _size255; ++_i256)
          {
            NXTFGnosisDetailDto *_elem257 = [[NXTFGnosisDetailDto alloc] init];
            [_elem257 read: inProtocol];
            [fieldValue addObject: _elem257];
            [_elem257 release_stub];
          }
          [inProtocol readListEnd];
          [self setGnosisDetail: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size258;
          [inProtocol readListBeginReturningElementType: NULL size: &_size258];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size258];
          int _i259;
          for (_i259 = 0; _i259 < _size258; ++_i259)
          {
            NXTFDiagDto *_elem260 = [[NXTFDiagDto alloc] init];
            [_elem260 read: inProtocol];
            [fieldValue addObject: _elem260];
            [_elem260 release_stub];
          }
          [inProtocol readListEnd];
          [self setDiagDtos: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAutognosisDetailResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__assoSymptoms_isset) {
    if (__assoSymptoms != nil) {
      [outProtocol writeFieldBeginWithName: @"assoSymptoms" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__assoSymptoms count]];
        int idx262;
        for (idx262 = 0; idx262 < [__assoSymptoms count]; idx262++)
        {
          [outProtocol writeString: [__assoSymptoms objectAtIndex: idx262]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__gnosisDetail_isset) {
    if (__gnosisDetail != nil) {
      [outProtocol writeFieldBeginWithName: @"gnosisDetail" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__gnosisDetail count]];
        int idx264;
        for (idx264 = 0; idx264 < [__gnosisDetail count]; idx264++)
        {
          [[__gnosisDetail objectAtIndex: idx264] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__diagDtos_isset) {
    if (__diagDtos != nil) {
      [outProtocol writeFieldBeginWithName: @"diagDtos" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__diagDtos count]];
        int idx266;
        for (idx266 = 0; idx266 < [__diagDtos count]; idx266++)
        {
          [[__diagDtos objectAtIndex: idx266] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetAutognosisDetailResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",assoSymptoms:"];
  [ms appendFormat: @"%@", __assoSymptoms];
  [ms appendString: @",gnosisDetail:"];
  [ms appendFormat: @"%@", __gnosisDetail];
  [ms appendString: @",diagDtos:"];
  [ms appendFormat: @"%@", __diagDtos];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetAutognosisDisResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.comDepts = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

  self.conDocs = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header disDesc: (NSString *) disDesc comDepts: (NSMutableArray *) comDepts conDocs: (NSMutableArray *) conDocs
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __disDesc = [disDesc retain_stub];
  __disDesc_isset = YES;
  __comDepts = [comDepts retain_stub];
  __comDepts_isset = YES;
  __conDocs = [conDocs retain_stub];
  __conDocs_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"disDesc"])
  {
    __disDesc = [[decoder decodeObjectForKey: @"disDesc"] retain_stub];
    __disDesc_isset = YES;
  }
  if ([decoder containsValueForKey: @"comDepts"])
  {
    __comDepts = [[decoder decodeObjectForKey: @"comDepts"] retain_stub];
    __comDepts_isset = YES;
  }
  if ([decoder containsValueForKey: @"conDocs"])
  {
    __conDocs = [[decoder decodeObjectForKey: @"conDocs"] retain_stub];
    __conDocs_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__disDesc_isset)
  {
    [encoder encodeObject: __disDesc forKey: @"disDesc"];
  }
  if (__comDepts_isset)
  {
    [encoder encodeObject: __comDepts forKey: @"comDepts"];
  }
  if (__conDocs_isset)
  {
    [encoder encodeObject: __conDocs forKey: @"conDocs"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __disDesc_isset ? 2654435761 : 0;
  if (__disDesc_isset)
  {
    hash = (hash * 31) ^ [__disDesc hash];
  }
  hash = (hash * 31) ^ __comDepts_isset ? 2654435761 : 0;
  if (__comDepts_isset)
  {
    hash = (hash * 31) ^ [__comDepts hash];
  }
  hash = (hash * 31) ^ __conDocs_isset ? 2654435761 : 0;
  if (__conDocs_isset)
  {
    hash = (hash * 31) ^ [__conDocs hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetAutognosisDisResp class]]) {
    return NO;
  }
  NXTFGetAutognosisDisResp *other = (NXTFGetAutognosisDisResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__disDesc_isset != other->__disDesc_isset) ||
      (__disDesc_isset && ((__disDesc || other->__disDesc) && ![__disDesc isEqual:other->__disDesc]))) {
    return NO;
  }
  if ((__comDepts_isset != other->__comDepts_isset) ||
      (__comDepts_isset && ((__comDepts || other->__comDepts) && ![__comDepts isEqual:other->__comDepts]))) {
    return NO;
  }
  if ((__conDocs_isset != other->__conDocs_isset) ||
      (__conDocs_isset && ((__conDocs || other->__conDocs) && ![__conDocs isEqual:other->__conDocs]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__disDesc release_stub];
  [__comDepts release_stub];
  [__conDocs release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) disDesc {
  return [[__disDesc retain_stub] autorelease_stub];
}

- (void) setDisDesc: (NSString *) disDesc {
  [disDesc retain_stub];
  [__disDesc release_stub];
  __disDesc = disDesc;
  __disDesc_isset = YES;
}

- (BOOL) disDescIsSet {
  return __disDesc_isset;
}

- (void) unsetDisDesc {
  [__disDesc release_stub];
  __disDesc = nil;
  __disDesc_isset = NO;
}

- (NSMutableArray *) comDepts {
  return [[__comDepts retain_stub] autorelease_stub];
}

- (void) setComDepts: (NSMutableArray *) comDepts {
  [comDepts retain_stub];
  [__comDepts release_stub];
  __comDepts = comDepts;
  __comDepts_isset = YES;
}

- (BOOL) comDeptsIsSet {
  return __comDepts_isset;
}

- (void) unsetComDepts {
  [__comDepts release_stub];
  __comDepts = nil;
  __comDepts_isset = NO;
}

- (NSMutableArray *) conDocs {
  return [[__conDocs retain_stub] autorelease_stub];
}

- (void) setConDocs: (NSMutableArray *) conDocs {
  [conDocs retain_stub];
  [__conDocs release_stub];
  __conDocs = conDocs;
  __conDocs_isset = YES;
}

- (BOOL) conDocsIsSet {
  return __conDocs_isset;
}

- (void) unsetConDocs {
  [__conDocs release_stub];
  __conDocs = nil;
  __conDocs_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDisDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size267;
          [inProtocol readListBeginReturningElementType: NULL size: &_size267];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size267];
          int _i268;
          for (_i268 = 0; _i268 < _size267; ++_i268)
          {
            NXTFComDeptDto *_elem269 = [[NXTFComDeptDto alloc] init];
            [_elem269 read: inProtocol];
            [fieldValue addObject: _elem269];
            [_elem269 release_stub];
          }
          [inProtocol readListEnd];
          [self setComDepts: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size270;
          [inProtocol readListBeginReturningElementType: NULL size: &_size270];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size270];
          int _i271;
          for (_i271 = 0; _i271 < _size270; ++_i271)
          {
            NXTFConDocDto *_elem272 = [[NXTFConDocDto alloc] init];
            [_elem272 read: inProtocol];
            [fieldValue addObject: _elem272];
            [_elem272 release_stub];
          }
          [inProtocol readListEnd];
          [self setConDocs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAutognosisDisResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__disDesc_isset) {
    if (__disDesc != nil) {
      [outProtocol writeFieldBeginWithName: @"disDesc" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __disDesc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__comDepts_isset) {
    if (__comDepts != nil) {
      [outProtocol writeFieldBeginWithName: @"comDepts" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__comDepts count]];
        int idx274;
        for (idx274 = 0; idx274 < [__comDepts count]; idx274++)
        {
          [[__comDepts objectAtIndex: idx274] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__conDocs_isset) {
    if (__conDocs != nil) {
      [outProtocol writeFieldBeginWithName: @"conDocs" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__conDocs count]];
        int idx276;
        for (idx276 = 0; idx276 < [__conDocs count]; idx276++)
        {
          [[__conDocs objectAtIndex: idx276] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetAutognosisDisResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",disDesc:"];
  [ms appendFormat: @"\"%@\"", __disDesc];
  [ms appendString: @",comDepts:"];
  [ms appendFormat: @"%@", __comDepts];
  [ms appendString: @",conDocs:"];
  [ms appendFormat: @"%@", __conDocs];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFSetDefaultCardResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header cardId: (int64_t) cardId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __cardId = cardId;
  __cardId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardId"])
  {
    __cardId = [decoder decodeInt64ForKey: @"cardId"];
    __cardId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__cardId_isset)
  {
    [encoder encodeInt64: __cardId forKey: @"cardId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __cardId_isset ? 2654435761 : 0;
  if (__cardId_isset)
  {
    hash = (hash * 31) ^ [@(__cardId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFSetDefaultCardResp class]]) {
    return NO;
  }
  NXTFSetDefaultCardResp *other = (NXTFSetDefaultCardResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__cardId_isset != other->__cardId_isset) ||
      (__cardId_isset && (__cardId != other->__cardId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) cardId {
  return __cardId;
}

- (void) setCardId: (int64_t) cardId {
  __cardId = cardId;
  __cardId_isset = YES;
}

- (BOOL) cardIdIsSet {
  return __cardId_isset;
}

- (void) unsetCardId {
  __cardId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCardId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetDefaultCardResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cardId_isset) {
    [outProtocol writeFieldBeginWithName: @"cardId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __cardId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFSetDefaultCardResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",cardId:"];
  [ms appendFormat: @"%qi", __cardId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRemoveMedCardResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header cardId: (int64_t) cardId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __cardId = cardId;
  __cardId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardId"])
  {
    __cardId = [decoder decodeInt64ForKey: @"cardId"];
    __cardId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__cardId_isset)
  {
    [encoder encodeInt64: __cardId forKey: @"cardId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __cardId_isset ? 2654435761 : 0;
  if (__cardId_isset)
  {
    hash = (hash * 31) ^ [@(__cardId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRemoveMedCardResp class]]) {
    return NO;
  }
  NXTFRemoveMedCardResp *other = (NXTFRemoveMedCardResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__cardId_isset != other->__cardId_isset) ||
      (__cardId_isset && (__cardId != other->__cardId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (int64_t) cardId {
  return __cardId;
}

- (void) setCardId: (int64_t) cardId {
  __cardId = cardId;
  __cardId_isset = YES;
}

- (BOOL) cardIdIsSet {
  return __cardId_isset;
}

- (void) unsetCardId {
  __cardId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCardId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemoveMedCardResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cardId_isset) {
    [outProtocol writeFieldBeginWithName: @"cardId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __cardId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRemoveMedCardResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",cardId:"];
  [ms appendFormat: @"%qi", __cardId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFCheckInResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header queInfo: (NXTFQueueDto *) queInfo
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __queInfo = [queInfo retain_stub];
  __queInfo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"queInfo"])
  {
    __queInfo = [[decoder decodeObjectForKey: @"queInfo"] retain_stub];
    __queInfo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__queInfo_isset)
  {
    [encoder encodeObject: __queInfo forKey: @"queInfo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __queInfo_isset ? 2654435761 : 0;
  if (__queInfo_isset)
  {
    hash = (hash * 31) ^ [__queInfo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFCheckInResp class]]) {
    return NO;
  }
  NXTFCheckInResp *other = (NXTFCheckInResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__queInfo_isset != other->__queInfo_isset) ||
      (__queInfo_isset && ((__queInfo || other->__queInfo) && ![__queInfo isEqual:other->__queInfo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__queInfo release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFQueueDto *) queInfo {
  return [[__queInfo retain_stub] autorelease_stub];
}

- (void) setQueInfo: (NXTFQueueDto *) queInfo {
  [queInfo retain_stub];
  [__queInfo release_stub];
  __queInfo = queInfo;
  __queInfo_isset = YES;
}

- (BOOL) queInfoIsSet {
  return __queInfo_isset;
}

- (void) unsetQueInfo {
  [__queInfo release_stub];
  __queInfo = nil;
  __queInfo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFQueueDto *fieldValue = [[NXTFQueueDto alloc] init];
          [fieldValue read: inProtocol];
          [self setQueInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CheckInResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__queInfo_isset) {
    if (__queInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"queInfo" type: TType_STRUCT fieldID: 2];
      [__queInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFCheckInResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",queInfo:"];
  [ms appendFormat: @"%@", __queInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFOrderChargeResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header orderId: (NSString *) orderId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __orderId = [orderId retain_stub];
  __orderId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [[decoder decodeObjectForKey: @"orderId"] retain_stub];
    __orderId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__orderId_isset)
  {
    [encoder encodeObject: __orderId forKey: @"orderId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [__orderId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFOrderChargeResp class]]) {
    return NO;
  }
  NXTFOrderChargeResp *other = (NXTFOrderChargeResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && ((__orderId || other->__orderId) && ![__orderId isEqual:other->__orderId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__orderId release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) orderId {
  return [[__orderId retain_stub] autorelease_stub];
}

- (void) setOrderId: (NSString *) orderId {
  [orderId retain_stub];
  [__orderId release_stub];
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  [__orderId release_stub];
  __orderId = nil;
  __orderId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OrderChargeResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    if (__orderId != nil) {
      [outProtocol writeFieldBeginWithName: @"orderId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __orderId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFOrderChargeResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"\"%@\"", __orderId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetStartPicsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.startPics = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header startPics: (NSMutableArray *) startPics prevPicVer: (NSString *) prevPicVer
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __startPics = [startPics retain_stub];
  __startPics_isset = YES;
  __prevPicVer = [prevPicVer retain_stub];
  __prevPicVer_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"startPics"])
  {
    __startPics = [[decoder decodeObjectForKey: @"startPics"] retain_stub];
    __startPics_isset = YES;
  }
  if ([decoder containsValueForKey: @"prevPicVer"])
  {
    __prevPicVer = [[decoder decodeObjectForKey: @"prevPicVer"] retain_stub];
    __prevPicVer_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__startPics_isset)
  {
    [encoder encodeObject: __startPics forKey: @"startPics"];
  }
  if (__prevPicVer_isset)
  {
    [encoder encodeObject: __prevPicVer forKey: @"prevPicVer"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __startPics_isset ? 2654435761 : 0;
  if (__startPics_isset)
  {
    hash = (hash * 31) ^ [__startPics hash];
  }
  hash = (hash * 31) ^ __prevPicVer_isset ? 2654435761 : 0;
  if (__prevPicVer_isset)
  {
    hash = (hash * 31) ^ [__prevPicVer hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetStartPicsResp class]]) {
    return NO;
  }
  NXTFGetStartPicsResp *other = (NXTFGetStartPicsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__startPics_isset != other->__startPics_isset) ||
      (__startPics_isset && ((__startPics || other->__startPics) && ![__startPics isEqual:other->__startPics]))) {
    return NO;
  }
  if ((__prevPicVer_isset != other->__prevPicVer_isset) ||
      (__prevPicVer_isset && ((__prevPicVer || other->__prevPicVer) && ![__prevPicVer isEqual:other->__prevPicVer]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__startPics release_stub];
  [__prevPicVer release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) startPics {
  return [[__startPics retain_stub] autorelease_stub];
}

- (void) setStartPics: (NSMutableArray *) startPics {
  [startPics retain_stub];
  [__startPics release_stub];
  __startPics = startPics;
  __startPics_isset = YES;
}

- (BOOL) startPicsIsSet {
  return __startPics_isset;
}

- (void) unsetStartPics {
  [__startPics release_stub];
  __startPics = nil;
  __startPics_isset = NO;
}

- (NSString *) prevPicVer {
  return [[__prevPicVer retain_stub] autorelease_stub];
}

- (void) setPrevPicVer: (NSString *) prevPicVer {
  [prevPicVer retain_stub];
  [__prevPicVer release_stub];
  __prevPicVer = prevPicVer;
  __prevPicVer_isset = YES;
}

- (BOOL) prevPicVerIsSet {
  return __prevPicVer_isset;
}

- (void) unsetPrevPicVer {
  [__prevPicVer release_stub];
  __prevPicVer = nil;
  __prevPicVer_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size277;
          [inProtocol readListBeginReturningElementType: NULL size: &_size277];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size277];
          int _i278;
          for (_i278 = 0; _i278 < _size277; ++_i278)
          {
            NXTFStartPics *_elem279 = [[NXTFStartPics alloc] init];
            [_elem279 read: inProtocol];
            [fieldValue addObject: _elem279];
            [_elem279 release_stub];
          }
          [inProtocol readListEnd];
          [self setStartPics: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPrevPicVer: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetStartPicsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__startPics_isset) {
    if (__startPics != nil) {
      [outProtocol writeFieldBeginWithName: @"startPics" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__startPics count]];
        int idx281;
        for (idx281 = 0; idx281 < [__startPics count]; idx281++)
        {
          [[__startPics objectAtIndex: idx281] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__prevPicVer_isset) {
    if (__prevPicVer != nil) {
      [outProtocol writeFieldBeginWithName: @"prevPicVer" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __prevPicVer];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetStartPicsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",startPics:"];
  [ms appendFormat: @"%@", __startPics];
  [ms appendString: @",prevPicVer:"];
  [ms appendFormat: @"\"%@\"", __prevPicVer];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetMedRecordResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header inHospRecordStatus: (NSString *) inHospRecordStatus
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __inHospRecordStatus = [inHospRecordStatus retain_stub];
  __inHospRecordStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"inHospRecordStatus"])
  {
    __inHospRecordStatus = [[decoder decodeObjectForKey: @"inHospRecordStatus"] retain_stub];
    __inHospRecordStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__inHospRecordStatus_isset)
  {
    [encoder encodeObject: __inHospRecordStatus forKey: @"inHospRecordStatus"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __inHospRecordStatus_isset ? 2654435761 : 0;
  if (__inHospRecordStatus_isset)
  {
    hash = (hash * 31) ^ [__inHospRecordStatus hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetMedRecordResp class]]) {
    return NO;
  }
  NXTFGetMedRecordResp *other = (NXTFGetMedRecordResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__inHospRecordStatus_isset != other->__inHospRecordStatus_isset) ||
      (__inHospRecordStatus_isset && ((__inHospRecordStatus || other->__inHospRecordStatus) && ![__inHospRecordStatus isEqual:other->__inHospRecordStatus]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__inHospRecordStatus release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) inHospRecordStatus {
  return [[__inHospRecordStatus retain_stub] autorelease_stub];
}

- (void) setInHospRecordStatus: (NSString *) inHospRecordStatus {
  [inHospRecordStatus retain_stub];
  [__inHospRecordStatus release_stub];
  __inHospRecordStatus = inHospRecordStatus;
  __inHospRecordStatus_isset = YES;
}

- (BOOL) inHospRecordStatusIsSet {
  return __inHospRecordStatus_isset;
}

- (void) unsetInHospRecordStatus {
  [__inHospRecordStatus release_stub];
  __inHospRecordStatus = nil;
  __inHospRecordStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInHospRecordStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMedRecordResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__inHospRecordStatus_isset) {
    if (__inHospRecordStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"inHospRecordStatus" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __inHospRecordStatus];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetMedRecordResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",inHospRecordStatus:"];
  [ms appendFormat: @"\"%@\"", __inHospRecordStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetImHostsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header imHosts: (NSMutableArray *) imHosts
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __imHosts = [imHosts retain_stub];
  __imHosts_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"imHosts"])
  {
    __imHosts = [[decoder decodeObjectForKey: @"imHosts"] retain_stub];
    __imHosts_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__imHosts_isset)
  {
    [encoder encodeObject: __imHosts forKey: @"imHosts"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __imHosts_isset ? 2654435761 : 0;
  if (__imHosts_isset)
  {
    hash = (hash * 31) ^ [__imHosts hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetImHostsResp class]]) {
    return NO;
  }
  NXTFGetImHostsResp *other = (NXTFGetImHostsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__imHosts_isset != other->__imHosts_isset) ||
      (__imHosts_isset && ((__imHosts || other->__imHosts) && ![__imHosts isEqual:other->__imHosts]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__imHosts release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) imHosts {
  return [[__imHosts retain_stub] autorelease_stub];
}

- (void) setImHosts: (NSMutableArray *) imHosts {
  [imHosts retain_stub];
  [__imHosts release_stub];
  __imHosts = imHosts;
  __imHosts_isset = YES;
}

- (BOOL) imHostsIsSet {
  return __imHosts_isset;
}

- (void) unsetImHosts {
  [__imHosts release_stub];
  __imHosts = nil;
  __imHosts_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size282;
          [inProtocol readListBeginReturningElementType: NULL size: &_size282];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size282];
          int _i283;
          for (_i283 = 0; _i283 < _size282; ++_i283)
          {
            NSString * _elem284 = [inProtocol readString];
            [fieldValue addObject: _elem284];
          }
          [inProtocol readListEnd];
          [self setImHosts: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetImHostsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__imHosts_isset) {
    if (__imHosts != nil) {
      [outProtocol writeFieldBeginWithName: @"imHosts" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__imHosts count]];
        int idx286;
        for (idx286 = 0; idx286 < [__imHosts count]; idx286++)
        {
          [outProtocol writeString: [__imHosts objectAtIndex: idx286]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetImHostsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",imHosts:"];
  [ms appendFormat: @"%@", __imHosts];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRegisterImResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header imUser: (NSString *) imUser imPwd: (NSString *) imPwd tImId: (NSString *) tImId tImToken: (NSString *) tImToken
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __imUser = [imUser retain_stub];
  __imUser_isset = YES;
  __imPwd = [imPwd retain_stub];
  __imPwd_isset = YES;
  __tImId = [tImId retain_stub];
  __tImId_isset = YES;
  __tImToken = [tImToken retain_stub];
  __tImToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"imUser"])
  {
    __imUser = [[decoder decodeObjectForKey: @"imUser"] retain_stub];
    __imUser_isset = YES;
  }
  if ([decoder containsValueForKey: @"imPwd"])
  {
    __imPwd = [[decoder decodeObjectForKey: @"imPwd"] retain_stub];
    __imPwd_isset = YES;
  }
  if ([decoder containsValueForKey: @"tImId"])
  {
    __tImId = [[decoder decodeObjectForKey: @"tImId"] retain_stub];
    __tImId_isset = YES;
  }
  if ([decoder containsValueForKey: @"tImToken"])
  {
    __tImToken = [[decoder decodeObjectForKey: @"tImToken"] retain_stub];
    __tImToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__imUser_isset)
  {
    [encoder encodeObject: __imUser forKey: @"imUser"];
  }
  if (__imPwd_isset)
  {
    [encoder encodeObject: __imPwd forKey: @"imPwd"];
  }
  if (__tImId_isset)
  {
    [encoder encodeObject: __tImId forKey: @"tImId"];
  }
  if (__tImToken_isset)
  {
    [encoder encodeObject: __tImToken forKey: @"tImToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __imUser_isset ? 2654435761 : 0;
  if (__imUser_isset)
  {
    hash = (hash * 31) ^ [__imUser hash];
  }
  hash = (hash * 31) ^ __imPwd_isset ? 2654435761 : 0;
  if (__imPwd_isset)
  {
    hash = (hash * 31) ^ [__imPwd hash];
  }
  hash = (hash * 31) ^ __tImId_isset ? 2654435761 : 0;
  if (__tImId_isset)
  {
    hash = (hash * 31) ^ [__tImId hash];
  }
  hash = (hash * 31) ^ __tImToken_isset ? 2654435761 : 0;
  if (__tImToken_isset)
  {
    hash = (hash * 31) ^ [__tImToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRegisterImResp class]]) {
    return NO;
  }
  NXTFRegisterImResp *other = (NXTFRegisterImResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__imUser_isset != other->__imUser_isset) ||
      (__imUser_isset && ((__imUser || other->__imUser) && ![__imUser isEqual:other->__imUser]))) {
    return NO;
  }
  if ((__imPwd_isset != other->__imPwd_isset) ||
      (__imPwd_isset && ((__imPwd || other->__imPwd) && ![__imPwd isEqual:other->__imPwd]))) {
    return NO;
  }
  if ((__tImId_isset != other->__tImId_isset) ||
      (__tImId_isset && ((__tImId || other->__tImId) && ![__tImId isEqual:other->__tImId]))) {
    return NO;
  }
  if ((__tImToken_isset != other->__tImToken_isset) ||
      (__tImToken_isset && ((__tImToken || other->__tImToken) && ![__tImToken isEqual:other->__tImToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__imUser release_stub];
  [__imPwd release_stub];
  [__tImId release_stub];
  [__tImToken release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) imUser {
  return [[__imUser retain_stub] autorelease_stub];
}

- (void) setImUser: (NSString *) imUser {
  [imUser retain_stub];
  [__imUser release_stub];
  __imUser = imUser;
  __imUser_isset = YES;
}

- (BOOL) imUserIsSet {
  return __imUser_isset;
}

- (void) unsetImUser {
  [__imUser release_stub];
  __imUser = nil;
  __imUser_isset = NO;
}

- (NSString *) imPwd {
  return [[__imPwd retain_stub] autorelease_stub];
}

- (void) setImPwd: (NSString *) imPwd {
  [imPwd retain_stub];
  [__imPwd release_stub];
  __imPwd = imPwd;
  __imPwd_isset = YES;
}

- (BOOL) imPwdIsSet {
  return __imPwd_isset;
}

- (void) unsetImPwd {
  [__imPwd release_stub];
  __imPwd = nil;
  __imPwd_isset = NO;
}

- (NSString *) tImId {
  return [[__tImId retain_stub] autorelease_stub];
}

- (void) setTImId: (NSString *) tImId {
  [tImId retain_stub];
  [__tImId release_stub];
  __tImId = tImId;
  __tImId_isset = YES;
}

- (BOOL) tImIdIsSet {
  return __tImId_isset;
}

- (void) unsetTImId {
  [__tImId release_stub];
  __tImId = nil;
  __tImId_isset = NO;
}

- (NSString *) tImToken {
  return [[__tImToken retain_stub] autorelease_stub];
}

- (void) setTImToken: (NSString *) tImToken {
  [tImToken retain_stub];
  [__tImToken release_stub];
  __tImToken = tImToken;
  __tImToken_isset = YES;
}

- (BOOL) tImTokenIsSet {
  return __tImToken_isset;
}

- (void) unsetTImToken {
  [__tImToken release_stub];
  __tImToken = nil;
  __tImToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImUser: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImPwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTImId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTImToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterImResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__imUser_isset) {
    if (__imUser != nil) {
      [outProtocol writeFieldBeginWithName: @"imUser" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __imUser];
      [outProtocol writeFieldEnd];
    }
  }
  if (__imPwd_isset) {
    if (__imPwd != nil) {
      [outProtocol writeFieldBeginWithName: @"imPwd" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __imPwd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tImId_isset) {
    if (__tImId != nil) {
      [outProtocol writeFieldBeginWithName: @"tImId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __tImId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tImToken_isset) {
    if (__tImToken != nil) {
      [outProtocol writeFieldBeginWithName: @"tImToken" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __tImToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRegisterImResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",imUser:"];
  [ms appendFormat: @"\"%@\"", __imUser];
  [ms appendString: @",imPwd:"];
  [ms appendFormat: @"\"%@\"", __imPwd];
  [ms appendString: @",tImId:"];
  [ms appendFormat: @"\"%@\"", __tImId];
  [ms appendString: @",tImToken:"];
  [ms appendFormat: @"\"%@\"", __tImToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetDrImIdResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header imId: (NSString *) imId tImId: (NSString *) tImId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __imId = [imId retain_stub];
  __imId_isset = YES;
  __tImId = [tImId retain_stub];
  __tImId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"imId"])
  {
    __imId = [[decoder decodeObjectForKey: @"imId"] retain_stub];
    __imId_isset = YES;
  }
  if ([decoder containsValueForKey: @"tImId"])
  {
    __tImId = [[decoder decodeObjectForKey: @"tImId"] retain_stub];
    __tImId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__imId_isset)
  {
    [encoder encodeObject: __imId forKey: @"imId"];
  }
  if (__tImId_isset)
  {
    [encoder encodeObject: __tImId forKey: @"tImId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __imId_isset ? 2654435761 : 0;
  if (__imId_isset)
  {
    hash = (hash * 31) ^ [__imId hash];
  }
  hash = (hash * 31) ^ __tImId_isset ? 2654435761 : 0;
  if (__tImId_isset)
  {
    hash = (hash * 31) ^ [__tImId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetDrImIdResp class]]) {
    return NO;
  }
  NXTFGetDrImIdResp *other = (NXTFGetDrImIdResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__imId_isset != other->__imId_isset) ||
      (__imId_isset && ((__imId || other->__imId) && ![__imId isEqual:other->__imId]))) {
    return NO;
  }
  if ((__tImId_isset != other->__tImId_isset) ||
      (__tImId_isset && ((__tImId || other->__tImId) && ![__tImId isEqual:other->__tImId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__imId release_stub];
  [__tImId release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) imId {
  return [[__imId retain_stub] autorelease_stub];
}

- (void) setImId: (NSString *) imId {
  [imId retain_stub];
  [__imId release_stub];
  __imId = imId;
  __imId_isset = YES;
}

- (BOOL) imIdIsSet {
  return __imId_isset;
}

- (void) unsetImId {
  [__imId release_stub];
  __imId = nil;
  __imId_isset = NO;
}

- (NSString *) tImId {
  return [[__tImId retain_stub] autorelease_stub];
}

- (void) setTImId: (NSString *) tImId {
  [tImId retain_stub];
  [__tImId release_stub];
  __tImId = tImId;
  __tImId_isset = YES;
}

- (BOOL) tImIdIsSet {
  return __tImId_isset;
}

- (void) unsetTImId {
  [__tImId release_stub];
  __tImId = nil;
  __tImId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTImId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDrImIdResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__imId_isset) {
    if (__imId != nil) {
      [outProtocol writeFieldBeginWithName: @"imId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __imId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tImId_isset) {
    if (__tImId != nil) {
      [outProtocol writeFieldBeginWithName: @"tImId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __tImId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetDrImIdResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",imId:"];
  [ms appendFormat: @"\"%@\"", __imId];
  [ms appendString: @",tImId:"];
  [ms appendFormat: @"\"%@\"", __tImId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRegistConsultResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRegistConsultResp class]]) {
    return NO;
  }
  NXTFRegistConsultResp *other = (NXTFRegistConsultResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegistConsultResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRegistConsultResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFileDownloadResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header fileContent: (NSData *) fileContent downloadSize: (int64_t) downloadSize msgId: (NSString *) msgId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __fileContent = [fileContent retain_stub];
  __fileContent_isset = YES;
  __downloadSize = downloadSize;
  __downloadSize_isset = YES;
  __msgId = [msgId retain_stub];
  __msgId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"fileContent"])
  {
    __fileContent = [[decoder decodeObjectForKey: @"fileContent"] retain_stub];
    __fileContent_isset = YES;
  }
  if ([decoder containsValueForKey: @"downloadSize"])
  {
    __downloadSize = [decoder decodeInt64ForKey: @"downloadSize"];
    __downloadSize_isset = YES;
  }
  if ([decoder containsValueForKey: @"msgId"])
  {
    __msgId = [[decoder decodeObjectForKey: @"msgId"] retain_stub];
    __msgId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__fileContent_isset)
  {
    [encoder encodeObject: __fileContent forKey: @"fileContent"];
  }
  if (__downloadSize_isset)
  {
    [encoder encodeInt64: __downloadSize forKey: @"downloadSize"];
  }
  if (__msgId_isset)
  {
    [encoder encodeObject: __msgId forKey: @"msgId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __fileContent_isset ? 2654435761 : 0;
  if (__fileContent_isset)
  {
    hash = (hash * 31) ^ [__fileContent hash];
  }
  hash = (hash * 31) ^ __downloadSize_isset ? 2654435761 : 0;
  if (__downloadSize_isset)
  {
    hash = (hash * 31) ^ [@(__downloadSize) hash];
  }
  hash = (hash * 31) ^ __msgId_isset ? 2654435761 : 0;
  if (__msgId_isset)
  {
    hash = (hash * 31) ^ [__msgId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFileDownloadResp class]]) {
    return NO;
  }
  NXTFFileDownloadResp *other = (NXTFFileDownloadResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__fileContent_isset != other->__fileContent_isset) ||
      (__fileContent_isset && ((__fileContent || other->__fileContent) && ![__fileContent isEqual:other->__fileContent]))) {
    return NO;
  }
  if ((__downloadSize_isset != other->__downloadSize_isset) ||
      (__downloadSize_isset && (__downloadSize != other->__downloadSize))) {
    return NO;
  }
  if ((__msgId_isset != other->__msgId_isset) ||
      (__msgId_isset && ((__msgId || other->__msgId) && ![__msgId isEqual:other->__msgId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__fileContent release_stub];
  [__msgId release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSData *) fileContent {
  return [[__fileContent retain_stub] autorelease_stub];
}

- (void) setFileContent: (NSData *) fileContent {
  [fileContent retain_stub];
  [__fileContent release_stub];
  __fileContent = fileContent;
  __fileContent_isset = YES;
}

- (BOOL) fileContentIsSet {
  return __fileContent_isset;
}

- (void) unsetFileContent {
  [__fileContent release_stub];
  __fileContent = nil;
  __fileContent_isset = NO;
}

- (int64_t) downloadSize {
  return __downloadSize;
}

- (void) setDownloadSize: (int64_t) downloadSize {
  __downloadSize = downloadSize;
  __downloadSize_isset = YES;
}

- (BOOL) downloadSizeIsSet {
  return __downloadSize_isset;
}

- (void) unsetDownloadSize {
  __downloadSize_isset = NO;
}

- (NSString *) msgId {
  return [[__msgId retain_stub] autorelease_stub];
}

- (void) setMsgId: (NSString *) msgId {
  [msgId retain_stub];
  [__msgId release_stub];
  __msgId = msgId;
  __msgId_isset = YES;
}

- (BOOL) msgIdIsSet {
  return __msgId_isset;
}

- (void) unsetMsgId {
  [__msgId release_stub];
  __msgId = nil;
  __msgId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setFileContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDownloadSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsgId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FileDownloadResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fileContent_isset) {
    if (__fileContent != nil) {
      [outProtocol writeFieldBeginWithName: @"fileContent" type: TType_STRING fieldID: 2];
      [outProtocol writeBinary: __fileContent];
      [outProtocol writeFieldEnd];
    }
  }
  if (__downloadSize_isset) {
    [outProtocol writeFieldBeginWithName: @"downloadSize" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __downloadSize];
    [outProtocol writeFieldEnd];
  }
  if (__msgId_isset) {
    if (__msgId != nil) {
      [outProtocol writeFieldBeginWithName: @"msgId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __msgId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFileDownloadResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",fileContent:"];
  [ms appendFormat: @"\"%@\"", __fileContent];
  [ms appendString: @",downloadSize:"];
  [ms appendFormat: @"%qi", __downloadSize];
  [ms appendString: @",msgId:"];
  [ms appendFormat: @"\"%@\"", __msgId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFFileUploadResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header groupName: (NSString *) groupName remoteFilename: (NSString *) remoteFilename msgId: (NSString *) msgId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __groupName = [groupName retain_stub];
  __groupName_isset = YES;
  __remoteFilename = [remoteFilename retain_stub];
  __remoteFilename_isset = YES;
  __msgId = [msgId retain_stub];
  __msgId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"groupName"])
  {
    __groupName = [[decoder decodeObjectForKey: @"groupName"] retain_stub];
    __groupName_isset = YES;
  }
  if ([decoder containsValueForKey: @"remoteFilename"])
  {
    __remoteFilename = [[decoder decodeObjectForKey: @"remoteFilename"] retain_stub];
    __remoteFilename_isset = YES;
  }
  if ([decoder containsValueForKey: @"msgId"])
  {
    __msgId = [[decoder decodeObjectForKey: @"msgId"] retain_stub];
    __msgId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__groupName_isset)
  {
    [encoder encodeObject: __groupName forKey: @"groupName"];
  }
  if (__remoteFilename_isset)
  {
    [encoder encodeObject: __remoteFilename forKey: @"remoteFilename"];
  }
  if (__msgId_isset)
  {
    [encoder encodeObject: __msgId forKey: @"msgId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __groupName_isset ? 2654435761 : 0;
  if (__groupName_isset)
  {
    hash = (hash * 31) ^ [__groupName hash];
  }
  hash = (hash * 31) ^ __remoteFilename_isset ? 2654435761 : 0;
  if (__remoteFilename_isset)
  {
    hash = (hash * 31) ^ [__remoteFilename hash];
  }
  hash = (hash * 31) ^ __msgId_isset ? 2654435761 : 0;
  if (__msgId_isset)
  {
    hash = (hash * 31) ^ [__msgId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFFileUploadResp class]]) {
    return NO;
  }
  NXTFFileUploadResp *other = (NXTFFileUploadResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__groupName_isset != other->__groupName_isset) ||
      (__groupName_isset && ((__groupName || other->__groupName) && ![__groupName isEqual:other->__groupName]))) {
    return NO;
  }
  if ((__remoteFilename_isset != other->__remoteFilename_isset) ||
      (__remoteFilename_isset && ((__remoteFilename || other->__remoteFilename) && ![__remoteFilename isEqual:other->__remoteFilename]))) {
    return NO;
  }
  if ((__msgId_isset != other->__msgId_isset) ||
      (__msgId_isset && ((__msgId || other->__msgId) && ![__msgId isEqual:other->__msgId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__groupName release_stub];
  [__remoteFilename release_stub];
  [__msgId release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) groupName {
  return [[__groupName retain_stub] autorelease_stub];
}

- (void) setGroupName: (NSString *) groupName {
  [groupName retain_stub];
  [__groupName release_stub];
  __groupName = groupName;
  __groupName_isset = YES;
}

- (BOOL) groupNameIsSet {
  return __groupName_isset;
}

- (void) unsetGroupName {
  [__groupName release_stub];
  __groupName = nil;
  __groupName_isset = NO;
}

- (NSString *) remoteFilename {
  return [[__remoteFilename retain_stub] autorelease_stub];
}

- (void) setRemoteFilename: (NSString *) remoteFilename {
  [remoteFilename retain_stub];
  [__remoteFilename release_stub];
  __remoteFilename = remoteFilename;
  __remoteFilename_isset = YES;
}

- (BOOL) remoteFilenameIsSet {
  return __remoteFilename_isset;
}

- (void) unsetRemoteFilename {
  [__remoteFilename release_stub];
  __remoteFilename = nil;
  __remoteFilename_isset = NO;
}

- (NSString *) msgId {
  return [[__msgId retain_stub] autorelease_stub];
}

- (void) setMsgId: (NSString *) msgId {
  [msgId retain_stub];
  [__msgId release_stub];
  __msgId = msgId;
  __msgId_isset = YES;
}

- (BOOL) msgIdIsSet {
  return __msgId_isset;
}

- (void) unsetMsgId {
  [__msgId release_stub];
  __msgId = nil;
  __msgId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGroupName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemoteFilename: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsgId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FileUploadResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__groupName_isset) {
    if (__groupName != nil) {
      [outProtocol writeFieldBeginWithName: @"groupName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __groupName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__remoteFilename_isset) {
    if (__remoteFilename != nil) {
      [outProtocol writeFieldBeginWithName: @"remoteFilename" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __remoteFilename];
      [outProtocol writeFieldEnd];
    }
  }
  if (__msgId_isset) {
    if (__msgId != nil) {
      [outProtocol writeFieldBeginWithName: @"msgId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __msgId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFFileUploadResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",groupName:"];
  [ms appendFormat: @"\"%@\"", __groupName];
  [ms appendString: @",remoteFilename:"];
  [ms appendFormat: @"\"%@\"", __remoteFilename];
  [ms appendString: @",msgId:"];
  [ms appendFormat: @"\"%@\"", __msgId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetEmrInfoResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.recipes = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

  self.reports = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header patient: (NXTFEmrPatientDto *) patient regInfo: (NXTFEmrRegDto *) regInfo recipes: (NSMutableArray *) recipes reports: (NSMutableArray *) reports totalFee: (NSString *) totalFee priDiagnosis: (NSString *) priDiagnosis medAdvice: (NSString *) medAdvice age: (NSString *) age
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __patient = [patient retain_stub];
  __patient_isset = YES;
  __regInfo = [regInfo retain_stub];
  __regInfo_isset = YES;
  __recipes = [recipes retain_stub];
  __recipes_isset = YES;
  __reports = [reports retain_stub];
  __reports_isset = YES;
  __totalFee = [totalFee retain_stub];
  __totalFee_isset = YES;
  __priDiagnosis = [priDiagnosis retain_stub];
  __priDiagnosis_isset = YES;
  __medAdvice = [medAdvice retain_stub];
  __medAdvice_isset = YES;
  __age = [age retain_stub];
  __age_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"patient"])
  {
    __patient = [[decoder decodeObjectForKey: @"patient"] retain_stub];
    __patient_isset = YES;
  }
  if ([decoder containsValueForKey: @"regInfo"])
  {
    __regInfo = [[decoder decodeObjectForKey: @"regInfo"] retain_stub];
    __regInfo_isset = YES;
  }
  if ([decoder containsValueForKey: @"recipes"])
  {
    __recipes = [[decoder decodeObjectForKey: @"recipes"] retain_stub];
    __recipes_isset = YES;
  }
  if ([decoder containsValueForKey: @"reports"])
  {
    __reports = [[decoder decodeObjectForKey: @"reports"] retain_stub];
    __reports_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalFee"])
  {
    __totalFee = [[decoder decodeObjectForKey: @"totalFee"] retain_stub];
    __totalFee_isset = YES;
  }
  if ([decoder containsValueForKey: @"priDiagnosis"])
  {
    __priDiagnosis = [[decoder decodeObjectForKey: @"priDiagnosis"] retain_stub];
    __priDiagnosis_isset = YES;
  }
  if ([decoder containsValueForKey: @"medAdvice"])
  {
    __medAdvice = [[decoder decodeObjectForKey: @"medAdvice"] retain_stub];
    __medAdvice_isset = YES;
  }
  if ([decoder containsValueForKey: @"age"])
  {
    __age = [[decoder decodeObjectForKey: @"age"] retain_stub];
    __age_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__patient_isset)
  {
    [encoder encodeObject: __patient forKey: @"patient"];
  }
  if (__regInfo_isset)
  {
    [encoder encodeObject: __regInfo forKey: @"regInfo"];
  }
  if (__recipes_isset)
  {
    [encoder encodeObject: __recipes forKey: @"recipes"];
  }
  if (__reports_isset)
  {
    [encoder encodeObject: __reports forKey: @"reports"];
  }
  if (__totalFee_isset)
  {
    [encoder encodeObject: __totalFee forKey: @"totalFee"];
  }
  if (__priDiagnosis_isset)
  {
    [encoder encodeObject: __priDiagnosis forKey: @"priDiagnosis"];
  }
  if (__medAdvice_isset)
  {
    [encoder encodeObject: __medAdvice forKey: @"medAdvice"];
  }
  if (__age_isset)
  {
    [encoder encodeObject: __age forKey: @"age"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __patient_isset ? 2654435761 : 0;
  if (__patient_isset)
  {
    hash = (hash * 31) ^ [__patient hash];
  }
  hash = (hash * 31) ^ __regInfo_isset ? 2654435761 : 0;
  if (__regInfo_isset)
  {
    hash = (hash * 31) ^ [__regInfo hash];
  }
  hash = (hash * 31) ^ __recipes_isset ? 2654435761 : 0;
  if (__recipes_isset)
  {
    hash = (hash * 31) ^ [__recipes hash];
  }
  hash = (hash * 31) ^ __reports_isset ? 2654435761 : 0;
  if (__reports_isset)
  {
    hash = (hash * 31) ^ [__reports hash];
  }
  hash = (hash * 31) ^ __totalFee_isset ? 2654435761 : 0;
  if (__totalFee_isset)
  {
    hash = (hash * 31) ^ [__totalFee hash];
  }
  hash = (hash * 31) ^ __priDiagnosis_isset ? 2654435761 : 0;
  if (__priDiagnosis_isset)
  {
    hash = (hash * 31) ^ [__priDiagnosis hash];
  }
  hash = (hash * 31) ^ __medAdvice_isset ? 2654435761 : 0;
  if (__medAdvice_isset)
  {
    hash = (hash * 31) ^ [__medAdvice hash];
  }
  hash = (hash * 31) ^ __age_isset ? 2654435761 : 0;
  if (__age_isset)
  {
    hash = (hash * 31) ^ [__age hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetEmrInfoResp class]]) {
    return NO;
  }
  NXTFGetEmrInfoResp *other = (NXTFGetEmrInfoResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__patient_isset != other->__patient_isset) ||
      (__patient_isset && ((__patient || other->__patient) && ![__patient isEqual:other->__patient]))) {
    return NO;
  }
  if ((__regInfo_isset != other->__regInfo_isset) ||
      (__regInfo_isset && ((__regInfo || other->__regInfo) && ![__regInfo isEqual:other->__regInfo]))) {
    return NO;
  }
  if ((__recipes_isset != other->__recipes_isset) ||
      (__recipes_isset && ((__recipes || other->__recipes) && ![__recipes isEqual:other->__recipes]))) {
    return NO;
  }
  if ((__reports_isset != other->__reports_isset) ||
      (__reports_isset && ((__reports || other->__reports) && ![__reports isEqual:other->__reports]))) {
    return NO;
  }
  if ((__totalFee_isset != other->__totalFee_isset) ||
      (__totalFee_isset && ((__totalFee || other->__totalFee) && ![__totalFee isEqual:other->__totalFee]))) {
    return NO;
  }
  if ((__priDiagnosis_isset != other->__priDiagnosis_isset) ||
      (__priDiagnosis_isset && ((__priDiagnosis || other->__priDiagnosis) && ![__priDiagnosis isEqual:other->__priDiagnosis]))) {
    return NO;
  }
  if ((__medAdvice_isset != other->__medAdvice_isset) ||
      (__medAdvice_isset && ((__medAdvice || other->__medAdvice) && ![__medAdvice isEqual:other->__medAdvice]))) {
    return NO;
  }
  if ((__age_isset != other->__age_isset) ||
      (__age_isset && ((__age || other->__age) && ![__age isEqual:other->__age]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__patient release_stub];
  [__regInfo release_stub];
  [__recipes release_stub];
  [__reports release_stub];
  [__totalFee release_stub];
  [__priDiagnosis release_stub];
  [__medAdvice release_stub];
  [__age release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFEmrPatientDto *) patient {
  return [[__patient retain_stub] autorelease_stub];
}

- (void) setPatient: (NXTFEmrPatientDto *) patient {
  [patient retain_stub];
  [__patient release_stub];
  __patient = patient;
  __patient_isset = YES;
}

- (BOOL) patientIsSet {
  return __patient_isset;
}

- (void) unsetPatient {
  [__patient release_stub];
  __patient = nil;
  __patient_isset = NO;
}

- (NXTFEmrRegDto *) regInfo {
  return [[__regInfo retain_stub] autorelease_stub];
}

- (void) setRegInfo: (NXTFEmrRegDto *) regInfo {
  [regInfo retain_stub];
  [__regInfo release_stub];
  __regInfo = regInfo;
  __regInfo_isset = YES;
}

- (BOOL) regInfoIsSet {
  return __regInfo_isset;
}

- (void) unsetRegInfo {
  [__regInfo release_stub];
  __regInfo = nil;
  __regInfo_isset = NO;
}

- (NSMutableArray *) recipes {
  return [[__recipes retain_stub] autorelease_stub];
}

- (void) setRecipes: (NSMutableArray *) recipes {
  [recipes retain_stub];
  [__recipes release_stub];
  __recipes = recipes;
  __recipes_isset = YES;
}

- (BOOL) recipesIsSet {
  return __recipes_isset;
}

- (void) unsetRecipes {
  [__recipes release_stub];
  __recipes = nil;
  __recipes_isset = NO;
}

- (NSMutableArray *) reports {
  return [[__reports retain_stub] autorelease_stub];
}

- (void) setReports: (NSMutableArray *) reports {
  [reports retain_stub];
  [__reports release_stub];
  __reports = reports;
  __reports_isset = YES;
}

- (BOOL) reportsIsSet {
  return __reports_isset;
}

- (void) unsetReports {
  [__reports release_stub];
  __reports = nil;
  __reports_isset = NO;
}

- (NSString *) totalFee {
  return [[__totalFee retain_stub] autorelease_stub];
}

- (void) setTotalFee: (NSString *) totalFee {
  [totalFee retain_stub];
  [__totalFee release_stub];
  __totalFee = totalFee;
  __totalFee_isset = YES;
}

- (BOOL) totalFeeIsSet {
  return __totalFee_isset;
}

- (void) unsetTotalFee {
  [__totalFee release_stub];
  __totalFee = nil;
  __totalFee_isset = NO;
}

- (NSString *) priDiagnosis {
  return [[__priDiagnosis retain_stub] autorelease_stub];
}

- (void) setPriDiagnosis: (NSString *) priDiagnosis {
  [priDiagnosis retain_stub];
  [__priDiagnosis release_stub];
  __priDiagnosis = priDiagnosis;
  __priDiagnosis_isset = YES;
}

- (BOOL) priDiagnosisIsSet {
  return __priDiagnosis_isset;
}

- (void) unsetPriDiagnosis {
  [__priDiagnosis release_stub];
  __priDiagnosis = nil;
  __priDiagnosis_isset = NO;
}

- (NSString *) medAdvice {
  return [[__medAdvice retain_stub] autorelease_stub];
}

- (void) setMedAdvice: (NSString *) medAdvice {
  [medAdvice retain_stub];
  [__medAdvice release_stub];
  __medAdvice = medAdvice;
  __medAdvice_isset = YES;
}

- (BOOL) medAdviceIsSet {
  return __medAdvice_isset;
}

- (void) unsetMedAdvice {
  [__medAdvice release_stub];
  __medAdvice = nil;
  __medAdvice_isset = NO;
}

- (NSString *) age {
  return [[__age retain_stub] autorelease_stub];
}

- (void) setAge: (NSString *) age {
  [age retain_stub];
  [__age release_stub];
  __age = age;
  __age_isset = YES;
}

- (BOOL) ageIsSet {
  return __age_isset;
}

- (void) unsetAge {
  [__age release_stub];
  __age = nil;
  __age_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFEmrPatientDto *fieldValue = [[NXTFEmrPatientDto alloc] init];
          [fieldValue read: inProtocol];
          [self setPatient: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          NXTFEmrRegDto *fieldValue = [[NXTFEmrRegDto alloc] init];
          [fieldValue read: inProtocol];
          [self setRegInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size287;
          [inProtocol readListBeginReturningElementType: NULL size: &_size287];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size287];
          int _i288;
          for (_i288 = 0; _i288 < _size287; ++_i288)
          {
            NXTFRecipeDto *_elem289 = [[NXTFRecipeDto alloc] init];
            [_elem289 read: inProtocol];
            [fieldValue addObject: _elem289];
            [_elem289 release_stub];
          }
          [inProtocol readListEnd];
          [self setRecipes: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size290;
          [inProtocol readListBeginReturningElementType: NULL size: &_size290];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size290];
          int _i291;
          for (_i291 = 0; _i291 < _size290; ++_i291)
          {
            NXTFReportDto *_elem292 = [[NXTFReportDto alloc] init];
            [_elem292 read: inProtocol];
            [fieldValue addObject: _elem292];
            [_elem292 release_stub];
          }
          [inProtocol readListEnd];
          [self setReports: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTotalFee: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPriDiagnosis: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMedAdvice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAge: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetEmrInfoResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patient_isset) {
    if (__patient != nil) {
      [outProtocol writeFieldBeginWithName: @"patient" type: TType_STRUCT fieldID: 2];
      [__patient write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regInfo_isset) {
    if (__regInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"regInfo" type: TType_STRUCT fieldID: 3];
      [__regInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__recipes_isset) {
    if (__recipes != nil) {
      [outProtocol writeFieldBeginWithName: @"recipes" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__recipes count]];
        int idx294;
        for (idx294 = 0; idx294 < [__recipes count]; idx294++)
        {
          [[__recipes objectAtIndex: idx294] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__reports_isset) {
    if (__reports != nil) {
      [outProtocol writeFieldBeginWithName: @"reports" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__reports count]];
        int idx296;
        for (idx296 = 0; idx296 < [__reports count]; idx296++)
        {
          [[__reports objectAtIndex: idx296] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalFee_isset) {
    if (__totalFee != nil) {
      [outProtocol writeFieldBeginWithName: @"totalFee" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __totalFee];
      [outProtocol writeFieldEnd];
    }
  }
  if (__priDiagnosis_isset) {
    if (__priDiagnosis != nil) {
      [outProtocol writeFieldBeginWithName: @"priDiagnosis" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __priDiagnosis];
      [outProtocol writeFieldEnd];
    }
  }
  if (__medAdvice_isset) {
    if (__medAdvice != nil) {
      [outProtocol writeFieldBeginWithName: @"medAdvice" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __medAdvice];
      [outProtocol writeFieldEnd];
    }
  }
  if (__age_isset) {
    if (__age != nil) {
      [outProtocol writeFieldBeginWithName: @"age" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __age];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetEmrInfoResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",patient:"];
  [ms appendFormat: @"%@", __patient];
  [ms appendString: @",regInfo:"];
  [ms appendFormat: @"%@", __regInfo];
  [ms appendString: @",recipes:"];
  [ms appendFormat: @"%@", __recipes];
  [ms appendString: @",reports:"];
  [ms appendFormat: @"%@", __reports];
  [ms appendString: @",totalFee:"];
  [ms appendFormat: @"\"%@\"", __totalFee];
  [ms appendString: @",priDiagnosis:"];
  [ms appendFormat: @"\"%@\"", __priDiagnosis];
  [ms appendString: @",medAdvice:"];
  [ms appendFormat: @"\"%@\"", __medAdvice];
  [ms appendString: @",age:"];
  [ms appendFormat: @"\"%@\"", __age];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetVisitsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.schedules = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

  self.stopSchedules = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header schedules: (NSMutableArray *) schedules stopSchedules: (NSMutableArray *) stopSchedules
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __schedules = [schedules retain_stub];
  __schedules_isset = YES;
  __stopSchedules = [stopSchedules retain_stub];
  __stopSchedules_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"schedules"])
  {
    __schedules = [[decoder decodeObjectForKey: @"schedules"] retain_stub];
    __schedules_isset = YES;
  }
  if ([decoder containsValueForKey: @"stopSchedules"])
  {
    __stopSchedules = [[decoder decodeObjectForKey: @"stopSchedules"] retain_stub];
    __stopSchedules_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__schedules_isset)
  {
    [encoder encodeObject: __schedules forKey: @"schedules"];
  }
  if (__stopSchedules_isset)
  {
    [encoder encodeObject: __stopSchedules forKey: @"stopSchedules"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __schedules_isset ? 2654435761 : 0;
  if (__schedules_isset)
  {
    hash = (hash * 31) ^ [__schedules hash];
  }
  hash = (hash * 31) ^ __stopSchedules_isset ? 2654435761 : 0;
  if (__stopSchedules_isset)
  {
    hash = (hash * 31) ^ [__stopSchedules hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetVisitsResp class]]) {
    return NO;
  }
  NXTFGetVisitsResp *other = (NXTFGetVisitsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__schedules_isset != other->__schedules_isset) ||
      (__schedules_isset && ((__schedules || other->__schedules) && ![__schedules isEqual:other->__schedules]))) {
    return NO;
  }
  if ((__stopSchedules_isset != other->__stopSchedules_isset) ||
      (__stopSchedules_isset && ((__stopSchedules || other->__stopSchedules) && ![__stopSchedules isEqual:other->__stopSchedules]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__schedules release_stub];
  [__stopSchedules release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) schedules {
  return [[__schedules retain_stub] autorelease_stub];
}

- (void) setSchedules: (NSMutableArray *) schedules {
  [schedules retain_stub];
  [__schedules release_stub];
  __schedules = schedules;
  __schedules_isset = YES;
}

- (BOOL) schedulesIsSet {
  return __schedules_isset;
}

- (void) unsetSchedules {
  [__schedules release_stub];
  __schedules = nil;
  __schedules_isset = NO;
}

- (NSMutableArray *) stopSchedules {
  return [[__stopSchedules retain_stub] autorelease_stub];
}

- (void) setStopSchedules: (NSMutableArray *) stopSchedules {
  [stopSchedules retain_stub];
  [__stopSchedules release_stub];
  __stopSchedules = stopSchedules;
  __stopSchedules_isset = YES;
}

- (BOOL) stopSchedulesIsSet {
  return __stopSchedules_isset;
}

- (void) unsetStopSchedules {
  [__stopSchedules release_stub];
  __stopSchedules = nil;
  __stopSchedules_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size297;
          [inProtocol readListBeginReturningElementType: NULL size: &_size297];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size297];
          int _i298;
          for (_i298 = 0; _i298 < _size297; ++_i298)
          {
            NXTFScheduleDto *_elem299 = [[NXTFScheduleDto alloc] init];
            [_elem299 read: inProtocol];
            [fieldValue addObject: _elem299];
            [_elem299 release_stub];
          }
          [inProtocol readListEnd];
          [self setSchedules: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size300;
          [inProtocol readListBeginReturningElementType: NULL size: &_size300];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size300];
          int _i301;
          for (_i301 = 0; _i301 < _size300; ++_i301)
          {
            NXTFStopScheduleDto *_elem302 = [[NXTFStopScheduleDto alloc] init];
            [_elem302 read: inProtocol];
            [fieldValue addObject: _elem302];
            [_elem302 release_stub];
          }
          [inProtocol readListEnd];
          [self setStopSchedules: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetVisitsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__schedules_isset) {
    if (__schedules != nil) {
      [outProtocol writeFieldBeginWithName: @"schedules" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__schedules count]];
        int idx304;
        for (idx304 = 0; idx304 < [__schedules count]; idx304++)
        {
          [[__schedules objectAtIndex: idx304] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__stopSchedules_isset) {
    if (__stopSchedules != nil) {
      [outProtocol writeFieldBeginWithName: @"stopSchedules" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__stopSchedules count]];
        int idx306;
        for (idx306 = 0; idx306 < [__stopSchedules count]; idx306++)
        {
          [[__stopSchedules objectAtIndex: idx306] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetVisitsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",schedules:"];
  [ms appendFormat: @"%@", __schedules];
  [ms appendString: @",stopSchedules:"];
  [ms appendFormat: @"%@", __stopSchedules];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPhysicalRptInfoResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.physicalReports = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header physicalReports: (NSMutableArray *) physicalReports
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __physicalReports = [physicalReports retain_stub];
  __physicalReports_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"physicalReports"])
  {
    __physicalReports = [[decoder decodeObjectForKey: @"physicalReports"] retain_stub];
    __physicalReports_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__physicalReports_isset)
  {
    [encoder encodeObject: __physicalReports forKey: @"physicalReports"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __physicalReports_isset ? 2654435761 : 0;
  if (__physicalReports_isset)
  {
    hash = (hash * 31) ^ [__physicalReports hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPhysicalRptInfoResp class]]) {
    return NO;
  }
  NXTFPhysicalRptInfoResp *other = (NXTFPhysicalRptInfoResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__physicalReports_isset != other->__physicalReports_isset) ||
      (__physicalReports_isset && ((__physicalReports || other->__physicalReports) && ![__physicalReports isEqual:other->__physicalReports]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__physicalReports release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) physicalReports {
  return [[__physicalReports retain_stub] autorelease_stub];
}

- (void) setPhysicalReports: (NSMutableArray *) physicalReports {
  [physicalReports retain_stub];
  [__physicalReports release_stub];
  __physicalReports = physicalReports;
  __physicalReports_isset = YES;
}

- (BOOL) physicalReportsIsSet {
  return __physicalReports_isset;
}

- (void) unsetPhysicalReports {
  [__physicalReports release_stub];
  __physicalReports = nil;
  __physicalReports_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size307;
          [inProtocol readListBeginReturningElementType: NULL size: &_size307];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size307];
          int _i308;
          for (_i308 = 0; _i308 < _size307; ++_i308)
          {
            NXTFPhysicalReportInfo *_elem309 = [[NXTFPhysicalReportInfo alloc] init];
            [_elem309 read: inProtocol];
            [fieldValue addObject: _elem309];
            [_elem309 release_stub];
          }
          [inProtocol readListEnd];
          [self setPhysicalReports: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PhysicalRptInfoResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__physicalReports_isset) {
    if (__physicalReports != nil) {
      [outProtocol writeFieldBeginWithName: @"physicalReports" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__physicalReports count]];
        int idx311;
        for (idx311 = 0; idx311 < [__physicalReports count]; idx311++)
        {
          [[__physicalReports objectAtIndex: idx311] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPhysicalRptInfoResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",physicalReports:"];
  [ms appendFormat: @"%@", __physicalReports];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFPhysicalReportResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header physicalReportDetail: (NXTFPhysicalReportDetail *) physicalReportDetail
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __physicalReportDetail = [physicalReportDetail retain_stub];
  __physicalReportDetail_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"physicalReportDetail"])
  {
    __physicalReportDetail = [[decoder decodeObjectForKey: @"physicalReportDetail"] retain_stub];
    __physicalReportDetail_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__physicalReportDetail_isset)
  {
    [encoder encodeObject: __physicalReportDetail forKey: @"physicalReportDetail"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __physicalReportDetail_isset ? 2654435761 : 0;
  if (__physicalReportDetail_isset)
  {
    hash = (hash * 31) ^ [__physicalReportDetail hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFPhysicalReportResp class]]) {
    return NO;
  }
  NXTFPhysicalReportResp *other = (NXTFPhysicalReportResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__physicalReportDetail_isset != other->__physicalReportDetail_isset) ||
      (__physicalReportDetail_isset && ((__physicalReportDetail || other->__physicalReportDetail) && ![__physicalReportDetail isEqual:other->__physicalReportDetail]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__physicalReportDetail release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPhysicalReportDetail *) physicalReportDetail {
  return [[__physicalReportDetail retain_stub] autorelease_stub];
}

- (void) setPhysicalReportDetail: (NXTFPhysicalReportDetail *) physicalReportDetail {
  [physicalReportDetail retain_stub];
  [__physicalReportDetail release_stub];
  __physicalReportDetail = physicalReportDetail;
  __physicalReportDetail_isset = YES;
}

- (BOOL) physicalReportDetailIsSet {
  return __physicalReportDetail_isset;
}

- (void) unsetPhysicalReportDetail {
  [__physicalReportDetail release_stub];
  __physicalReportDetail = nil;
  __physicalReportDetail_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPhysicalReportDetail *fieldValue = [[NXTFPhysicalReportDetail alloc] init];
          [fieldValue read: inProtocol];
          [self setPhysicalReportDetail: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PhysicalReportResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__physicalReportDetail_isset) {
    if (__physicalReportDetail != nil) {
      [outProtocol writeFieldBeginWithName: @"physicalReportDetail" type: TType_STRUCT fieldID: 2];
      [__physicalReportDetail write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFPhysicalReportResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",physicalReportDetail:"];
  [ms appendFormat: @"%@", __physicalReportDetail];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetRecomOptsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.optDtos = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header optDtos: (NSMutableArray *) optDtos
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __optDtos = [optDtos retain_stub];
  __optDtos_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"optDtos"])
  {
    __optDtos = [[decoder decodeObjectForKey: @"optDtos"] retain_stub];
    __optDtos_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__optDtos_isset)
  {
    [encoder encodeObject: __optDtos forKey: @"optDtos"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __optDtos_isset ? 2654435761 : 0;
  if (__optDtos_isset)
  {
    hash = (hash * 31) ^ [__optDtos hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetRecomOptsResp class]]) {
    return NO;
  }
  NXTFGetRecomOptsResp *other = (NXTFGetRecomOptsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__optDtos_isset != other->__optDtos_isset) ||
      (__optDtos_isset && ((__optDtos || other->__optDtos) && ![__optDtos isEqual:other->__optDtos]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__optDtos release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) optDtos {
  return [[__optDtos retain_stub] autorelease_stub];
}

- (void) setOptDtos: (NSMutableArray *) optDtos {
  [optDtos retain_stub];
  [__optDtos release_stub];
  __optDtos = optDtos;
  __optDtos_isset = YES;
}

- (BOOL) optDtosIsSet {
  return __optDtos_isset;
}

- (void) unsetOptDtos {
  [__optDtos release_stub];
  __optDtos = nil;
  __optDtos_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size312;
          [inProtocol readListBeginReturningElementType: NULL size: &_size312];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size312];
          int _i313;
          for (_i313 = 0; _i313 < _size312; ++_i313)
          {
            NXTFOptDto *_elem314 = [[NXTFOptDto alloc] init];
            [_elem314 read: inProtocol];
            [fieldValue addObject: _elem314];
            [_elem314 release_stub];
          }
          [inProtocol readListEnd];
          [self setOptDtos: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRecomOptsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__optDtos_isset) {
    if (__optDtos != nil) {
      [outProtocol writeFieldBeginWithName: @"optDtos" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__optDtos count]];
        int idx316;
        for (idx316 = 0; idx316 < [__optDtos count]; idx316++)
        {
          [[__optDtos objectAtIndex: idx316] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetRecomOptsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",optDtos:"];
  [ms appendFormat: @"%@", __optDtos];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetInsInfosResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.incPkgs = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header page: (NXTFPage *) page comInfo: (NXTFInsCompanyDto *) comInfo incPkgs: (NSMutableArray *) incPkgs
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __comInfo = [comInfo retain_stub];
  __comInfo_isset = YES;
  __incPkgs = [incPkgs retain_stub];
  __incPkgs_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"comInfo"])
  {
    __comInfo = [[decoder decodeObjectForKey: @"comInfo"] retain_stub];
    __comInfo_isset = YES;
  }
  if ([decoder containsValueForKey: @"incPkgs"])
  {
    __incPkgs = [[decoder decodeObjectForKey: @"incPkgs"] retain_stub];
    __incPkgs_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__comInfo_isset)
  {
    [encoder encodeObject: __comInfo forKey: @"comInfo"];
  }
  if (__incPkgs_isset)
  {
    [encoder encodeObject: __incPkgs forKey: @"incPkgs"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __comInfo_isset ? 2654435761 : 0;
  if (__comInfo_isset)
  {
    hash = (hash * 31) ^ [__comInfo hash];
  }
  hash = (hash * 31) ^ __incPkgs_isset ? 2654435761 : 0;
  if (__incPkgs_isset)
  {
    hash = (hash * 31) ^ [__incPkgs hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetInsInfosResp class]]) {
    return NO;
  }
  NXTFGetInsInfosResp *other = (NXTFGetInsInfosResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__comInfo_isset != other->__comInfo_isset) ||
      (__comInfo_isset && ((__comInfo || other->__comInfo) && ![__comInfo isEqual:other->__comInfo]))) {
    return NO;
  }
  if ((__incPkgs_isset != other->__incPkgs_isset) ||
      (__incPkgs_isset && ((__incPkgs || other->__incPkgs) && ![__incPkgs isEqual:other->__incPkgs]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__comInfo release_stub];
  [__incPkgs release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NXTFInsCompanyDto *) comInfo {
  return [[__comInfo retain_stub] autorelease_stub];
}

- (void) setComInfo: (NXTFInsCompanyDto *) comInfo {
  [comInfo retain_stub];
  [__comInfo release_stub];
  __comInfo = comInfo;
  __comInfo_isset = YES;
}

- (BOOL) comInfoIsSet {
  return __comInfo_isset;
}

- (void) unsetComInfo {
  [__comInfo release_stub];
  __comInfo = nil;
  __comInfo_isset = NO;
}

- (NSMutableArray *) incPkgs {
  return [[__incPkgs retain_stub] autorelease_stub];
}

- (void) setIncPkgs: (NSMutableArray *) incPkgs {
  [incPkgs retain_stub];
  [__incPkgs release_stub];
  __incPkgs = incPkgs;
  __incPkgs_isset = YES;
}

- (BOOL) incPkgsIsSet {
  return __incPkgs_isset;
}

- (void) unsetIncPkgs {
  [__incPkgs release_stub];
  __incPkgs = nil;
  __incPkgs_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          NXTFInsCompanyDto *fieldValue = [[NXTFInsCompanyDto alloc] init];
          [fieldValue read: inProtocol];
          [self setComInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size317;
          [inProtocol readListBeginReturningElementType: NULL size: &_size317];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size317];
          int _i318;
          for (_i318 = 0; _i318 < _size317; ++_i318)
          {
            NXTFInsDto *_elem319 = [[NXTFInsDto alloc] init];
            [_elem319 read: inProtocol];
            [fieldValue addObject: _elem319];
            [_elem319 release_stub];
          }
          [inProtocol readListEnd];
          [self setIncPkgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetInsInfosResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__comInfo_isset) {
    if (__comInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"comInfo" type: TType_STRUCT fieldID: 3];
      [__comInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__incPkgs_isset) {
    if (__incPkgs != nil) {
      [outProtocol writeFieldBeginWithName: @"incPkgs" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__incPkgs count]];
        int idx321;
        for (idx321 = 0; idx321 < [__incPkgs count]; idx321++)
        {
          [[__incPkgs objectAtIndex: idx321] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetInsInfosResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",comInfo:"];
  [ms appendFormat: @"%@", __comInfo];
  [ms appendString: @",incPkgs:"];
  [ms appendFormat: @"%@", __incPkgs];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetInsPkgResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header comInfo: (NXTFInsCompanyDto *) comInfo incPkg: (NXTFInsPkgDto *) incPkg
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __comInfo = [comInfo retain_stub];
  __comInfo_isset = YES;
  __incPkg = [incPkg retain_stub];
  __incPkg_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"comInfo"])
  {
    __comInfo = [[decoder decodeObjectForKey: @"comInfo"] retain_stub];
    __comInfo_isset = YES;
  }
  if ([decoder containsValueForKey: @"incPkg"])
  {
    __incPkg = [[decoder decodeObjectForKey: @"incPkg"] retain_stub];
    __incPkg_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__comInfo_isset)
  {
    [encoder encodeObject: __comInfo forKey: @"comInfo"];
  }
  if (__incPkg_isset)
  {
    [encoder encodeObject: __incPkg forKey: @"incPkg"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __comInfo_isset ? 2654435761 : 0;
  if (__comInfo_isset)
  {
    hash = (hash * 31) ^ [__comInfo hash];
  }
  hash = (hash * 31) ^ __incPkg_isset ? 2654435761 : 0;
  if (__incPkg_isset)
  {
    hash = (hash * 31) ^ [__incPkg hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetInsPkgResp class]]) {
    return NO;
  }
  NXTFGetInsPkgResp *other = (NXTFGetInsPkgResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__comInfo_isset != other->__comInfo_isset) ||
      (__comInfo_isset && ((__comInfo || other->__comInfo) && ![__comInfo isEqual:other->__comInfo]))) {
    return NO;
  }
  if ((__incPkg_isset != other->__incPkg_isset) ||
      (__incPkg_isset && ((__incPkg || other->__incPkg) && ![__incPkg isEqual:other->__incPkg]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__comInfo release_stub];
  [__incPkg release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFInsCompanyDto *) comInfo {
  return [[__comInfo retain_stub] autorelease_stub];
}

- (void) setComInfo: (NXTFInsCompanyDto *) comInfo {
  [comInfo retain_stub];
  [__comInfo release_stub];
  __comInfo = comInfo;
  __comInfo_isset = YES;
}

- (BOOL) comInfoIsSet {
  return __comInfo_isset;
}

- (void) unsetComInfo {
  [__comInfo release_stub];
  __comInfo = nil;
  __comInfo_isset = NO;
}

- (NXTFInsPkgDto *) incPkg {
  return [[__incPkg retain_stub] autorelease_stub];
}

- (void) setIncPkg: (NXTFInsPkgDto *) incPkg {
  [incPkg retain_stub];
  [__incPkg release_stub];
  __incPkg = incPkg;
  __incPkg_isset = YES;
}

- (BOOL) incPkgIsSet {
  return __incPkg_isset;
}

- (void) unsetIncPkg {
  [__incPkg release_stub];
  __incPkg = nil;
  __incPkg_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFInsCompanyDto *fieldValue = [[NXTFInsCompanyDto alloc] init];
          [fieldValue read: inProtocol];
          [self setComInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          NXTFInsPkgDto *fieldValue = [[NXTFInsPkgDto alloc] init];
          [fieldValue read: inProtocol];
          [self setIncPkg: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetInsPkgResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__comInfo_isset) {
    if (__comInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"comInfo" type: TType_STRUCT fieldID: 2];
      [__comInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__incPkg_isset) {
    if (__incPkg != nil) {
      [outProtocol writeFieldBeginWithName: @"incPkg" type: TType_STRUCT fieldID: 3];
      [__incPkg write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetInsPkgResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",comInfo:"];
  [ms appendFormat: @"%@", __comInfo];
  [ms appendString: @",incPkg:"];
  [ms appendFormat: @"%@", __incPkg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetStInsCalResultResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header premium: (NSString *) premium amount: (NSString *) amount messageId: (NSString *) messageId patientId: (NSString *) patientId relationId: (NSString *) relationId contactNo: (NSString *) contactNo hospId: (NSString *) hospId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __premium = [premium retain_stub];
  __premium_isset = YES;
  __amount = [amount retain_stub];
  __amount_isset = YES;
  __messageId = [messageId retain_stub];
  __messageId_isset = YES;
  __patientId = [patientId retain_stub];
  __patientId_isset = YES;
  __relationId = [relationId retain_stub];
  __relationId_isset = YES;
  __contactNo = [contactNo retain_stub];
  __contactNo_isset = YES;
  __hospId = [hospId retain_stub];
  __hospId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"premium"])
  {
    __premium = [[decoder decodeObjectForKey: @"premium"] retain_stub];
    __premium_isset = YES;
  }
  if ([decoder containsValueForKey: @"amount"])
  {
    __amount = [[decoder decodeObjectForKey: @"amount"] retain_stub];
    __amount_isset = YES;
  }
  if ([decoder containsValueForKey: @"messageId"])
  {
    __messageId = [[decoder decodeObjectForKey: @"messageId"] retain_stub];
    __messageId_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [[decoder decodeObjectForKey: @"patientId"] retain_stub];
    __patientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"relationId"])
  {
    __relationId = [[decoder decodeObjectForKey: @"relationId"] retain_stub];
    __relationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"contactNo"])
  {
    __contactNo = [[decoder decodeObjectForKey: @"contactNo"] retain_stub];
    __contactNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [[decoder decodeObjectForKey: @"hospId"] retain_stub];
    __hospId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__premium_isset)
  {
    [encoder encodeObject: __premium forKey: @"premium"];
  }
  if (__amount_isset)
  {
    [encoder encodeObject: __amount forKey: @"amount"];
  }
  if (__messageId_isset)
  {
    [encoder encodeObject: __messageId forKey: @"messageId"];
  }
  if (__patientId_isset)
  {
    [encoder encodeObject: __patientId forKey: @"patientId"];
  }
  if (__relationId_isset)
  {
    [encoder encodeObject: __relationId forKey: @"relationId"];
  }
  if (__contactNo_isset)
  {
    [encoder encodeObject: __contactNo forKey: @"contactNo"];
  }
  if (__hospId_isset)
  {
    [encoder encodeObject: __hospId forKey: @"hospId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __premium_isset ? 2654435761 : 0;
  if (__premium_isset)
  {
    hash = (hash * 31) ^ [__premium hash];
  }
  hash = (hash * 31) ^ __amount_isset ? 2654435761 : 0;
  if (__amount_isset)
  {
    hash = (hash * 31) ^ [__amount hash];
  }
  hash = (hash * 31) ^ __messageId_isset ? 2654435761 : 0;
  if (__messageId_isset)
  {
    hash = (hash * 31) ^ [__messageId hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [__patientId hash];
  }
  hash = (hash * 31) ^ __relationId_isset ? 2654435761 : 0;
  if (__relationId_isset)
  {
    hash = (hash * 31) ^ [__relationId hash];
  }
  hash = (hash * 31) ^ __contactNo_isset ? 2654435761 : 0;
  if (__contactNo_isset)
  {
    hash = (hash * 31) ^ [__contactNo hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [__hospId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetStInsCalResultResp class]]) {
    return NO;
  }
  NXTFGetStInsCalResultResp *other = (NXTFGetStInsCalResultResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__premium_isset != other->__premium_isset) ||
      (__premium_isset && ((__premium || other->__premium) && ![__premium isEqual:other->__premium]))) {
    return NO;
  }
  if ((__amount_isset != other->__amount_isset) ||
      (__amount_isset && ((__amount || other->__amount) && ![__amount isEqual:other->__amount]))) {
    return NO;
  }
  if ((__messageId_isset != other->__messageId_isset) ||
      (__messageId_isset && ((__messageId || other->__messageId) && ![__messageId isEqual:other->__messageId]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && ((__patientId || other->__patientId) && ![__patientId isEqual:other->__patientId]))) {
    return NO;
  }
  if ((__relationId_isset != other->__relationId_isset) ||
      (__relationId_isset && ((__relationId || other->__relationId) && ![__relationId isEqual:other->__relationId]))) {
    return NO;
  }
  if ((__contactNo_isset != other->__contactNo_isset) ||
      (__contactNo_isset && ((__contactNo || other->__contactNo) && ![__contactNo isEqual:other->__contactNo]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && ((__hospId || other->__hospId) && ![__hospId isEqual:other->__hospId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__premium release_stub];
  [__amount release_stub];
  [__messageId release_stub];
  [__patientId release_stub];
  [__relationId release_stub];
  [__contactNo release_stub];
  [__hospId release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) premium {
  return [[__premium retain_stub] autorelease_stub];
}

- (void) setPremium: (NSString *) premium {
  [premium retain_stub];
  [__premium release_stub];
  __premium = premium;
  __premium_isset = YES;
}

- (BOOL) premiumIsSet {
  return __premium_isset;
}

- (void) unsetPremium {
  [__premium release_stub];
  __premium = nil;
  __premium_isset = NO;
}

- (NSString *) amount {
  return [[__amount retain_stub] autorelease_stub];
}

- (void) setAmount: (NSString *) amount {
  [amount retain_stub];
  [__amount release_stub];
  __amount = amount;
  __amount_isset = YES;
}

- (BOOL) amountIsSet {
  return __amount_isset;
}

- (void) unsetAmount {
  [__amount release_stub];
  __amount = nil;
  __amount_isset = NO;
}

- (NSString *) messageId {
  return [[__messageId retain_stub] autorelease_stub];
}

- (void) setMessageId: (NSString *) messageId {
  [messageId retain_stub];
  [__messageId release_stub];
  __messageId = messageId;
  __messageId_isset = YES;
}

- (BOOL) messageIdIsSet {
  return __messageId_isset;
}

- (void) unsetMessageId {
  [__messageId release_stub];
  __messageId = nil;
  __messageId_isset = NO;
}

- (NSString *) patientId {
  return [[__patientId retain_stub] autorelease_stub];
}

- (void) setPatientId: (NSString *) patientId {
  [patientId retain_stub];
  [__patientId release_stub];
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  [__patientId release_stub];
  __patientId = nil;
  __patientId_isset = NO;
}

- (NSString *) relationId {
  return [[__relationId retain_stub] autorelease_stub];
}

- (void) setRelationId: (NSString *) relationId {
  [relationId retain_stub];
  [__relationId release_stub];
  __relationId = relationId;
  __relationId_isset = YES;
}

- (BOOL) relationIdIsSet {
  return __relationId_isset;
}

- (void) unsetRelationId {
  [__relationId release_stub];
  __relationId = nil;
  __relationId_isset = NO;
}

- (NSString *) contactNo {
  return [[__contactNo retain_stub] autorelease_stub];
}

- (void) setContactNo: (NSString *) contactNo {
  [contactNo retain_stub];
  [__contactNo release_stub];
  __contactNo = contactNo;
  __contactNo_isset = YES;
}

- (BOOL) contactNoIsSet {
  return __contactNo_isset;
}

- (void) unsetContactNo {
  [__contactNo release_stub];
  __contactNo = nil;
  __contactNo_isset = NO;
}

- (NSString *) hospId {
  return [[__hospId retain_stub] autorelease_stub];
}

- (void) setHospId: (NSString *) hospId {
  [hospId retain_stub];
  [__hospId release_stub];
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  [__hospId release_stub];
  __hospId = nil;
  __hospId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPremium: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAmount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessageId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRelationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContactNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetStInsCalResultResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__premium_isset) {
    if (__premium != nil) {
      [outProtocol writeFieldBeginWithName: @"premium" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __premium];
      [outProtocol writeFieldEnd];
    }
  }
  if (__amount_isset) {
    if (__amount != nil) {
      [outProtocol writeFieldBeginWithName: @"amount" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __amount];
      [outProtocol writeFieldEnd];
    }
  }
  if (__messageId_isset) {
    if (__messageId != nil) {
      [outProtocol writeFieldBeginWithName: @"messageId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __messageId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    if (__patientId != nil) {
      [outProtocol writeFieldBeginWithName: @"patientId" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __patientId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__relationId_isset) {
    if (__relationId != nil) {
      [outProtocol writeFieldBeginWithName: @"relationId" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __relationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__contactNo_isset) {
    if (__contactNo != nil) {
      [outProtocol writeFieldBeginWithName: @"contactNo" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __contactNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    if (__hospId != nil) {
      [outProtocol writeFieldBeginWithName: @"hospId" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __hospId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetStInsCalResultResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",premium:"];
  [ms appendFormat: @"\"%@\"", __premium];
  [ms appendString: @",amount:"];
  [ms appendFormat: @"\"%@\"", __amount];
  [ms appendString: @",messageId:"];
  [ms appendFormat: @"\"%@\"", __messageId];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"\"%@\"", __patientId];
  [ms appendString: @",relationId:"];
  [ms appendFormat: @"\"%@\"", __relationId];
  [ms appendString: @",contactNo:"];
  [ms appendFormat: @"\"%@\"", __contactNo];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"\"%@\"", __hospId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFOrderStInsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.payWays = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header proposalNo: (NSString *) proposalNo premium: (NSString *) premium payWays: (NSMutableArray *) payWays
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __proposalNo = [proposalNo retain_stub];
  __proposalNo_isset = YES;
  __premium = [premium retain_stub];
  __premium_isset = YES;
  __payWays = [payWays retain_stub];
  __payWays_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"proposalNo"])
  {
    __proposalNo = [[decoder decodeObjectForKey: @"proposalNo"] retain_stub];
    __proposalNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"premium"])
  {
    __premium = [[decoder decodeObjectForKey: @"premium"] retain_stub];
    __premium_isset = YES;
  }
  if ([decoder containsValueForKey: @"payWays"])
  {
    __payWays = [[decoder decodeObjectForKey: @"payWays"] retain_stub];
    __payWays_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__proposalNo_isset)
  {
    [encoder encodeObject: __proposalNo forKey: @"proposalNo"];
  }
  if (__premium_isset)
  {
    [encoder encodeObject: __premium forKey: @"premium"];
  }
  if (__payWays_isset)
  {
    [encoder encodeObject: __payWays forKey: @"payWays"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __proposalNo_isset ? 2654435761 : 0;
  if (__proposalNo_isset)
  {
    hash = (hash * 31) ^ [__proposalNo hash];
  }
  hash = (hash * 31) ^ __premium_isset ? 2654435761 : 0;
  if (__premium_isset)
  {
    hash = (hash * 31) ^ [__premium hash];
  }
  hash = (hash * 31) ^ __payWays_isset ? 2654435761 : 0;
  if (__payWays_isset)
  {
    hash = (hash * 31) ^ [__payWays hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFOrderStInsResp class]]) {
    return NO;
  }
  NXTFOrderStInsResp *other = (NXTFOrderStInsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__proposalNo_isset != other->__proposalNo_isset) ||
      (__proposalNo_isset && ((__proposalNo || other->__proposalNo) && ![__proposalNo isEqual:other->__proposalNo]))) {
    return NO;
  }
  if ((__premium_isset != other->__premium_isset) ||
      (__premium_isset && ((__premium || other->__premium) && ![__premium isEqual:other->__premium]))) {
    return NO;
  }
  if ((__payWays_isset != other->__payWays_isset) ||
      (__payWays_isset && ((__payWays || other->__payWays) && ![__payWays isEqual:other->__payWays]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__proposalNo release_stub];
  [__premium release_stub];
  [__payWays release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) proposalNo {
  return [[__proposalNo retain_stub] autorelease_stub];
}

- (void) setProposalNo: (NSString *) proposalNo {
  [proposalNo retain_stub];
  [__proposalNo release_stub];
  __proposalNo = proposalNo;
  __proposalNo_isset = YES;
}

- (BOOL) proposalNoIsSet {
  return __proposalNo_isset;
}

- (void) unsetProposalNo {
  [__proposalNo release_stub];
  __proposalNo = nil;
  __proposalNo_isset = NO;
}

- (NSString *) premium {
  return [[__premium retain_stub] autorelease_stub];
}

- (void) setPremium: (NSString *) premium {
  [premium retain_stub];
  [__premium release_stub];
  __premium = premium;
  __premium_isset = YES;
}

- (BOOL) premiumIsSet {
  return __premium_isset;
}

- (void) unsetPremium {
  [__premium release_stub];
  __premium = nil;
  __premium_isset = NO;
}

- (NSMutableArray *) payWays {
  return [[__payWays retain_stub] autorelease_stub];
}

- (void) setPayWays: (NSMutableArray *) payWays {
  [payWays retain_stub];
  [__payWays release_stub];
  __payWays = payWays;
  __payWays_isset = YES;
}

- (BOOL) payWaysIsSet {
  return __payWays_isset;
}

- (void) unsetPayWays {
  [__payWays release_stub];
  __payWays = nil;
  __payWays_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProposalNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPremium: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size322;
          [inProtocol readListBeginReturningElementType: NULL size: &_size322];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size322];
          int _i323;
          for (_i323 = 0; _i323 < _size322; ++_i323)
          {
            NXTFPayWayDto *_elem324 = [[NXTFPayWayDto alloc] init];
            [_elem324 read: inProtocol];
            [fieldValue addObject: _elem324];
            [_elem324 release_stub];
          }
          [inProtocol readListEnd];
          [self setPayWays: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OrderStInsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__proposalNo_isset) {
    if (__proposalNo != nil) {
      [outProtocol writeFieldBeginWithName: @"proposalNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __proposalNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__premium_isset) {
    if (__premium != nil) {
      [outProtocol writeFieldBeginWithName: @"premium" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __premium];
      [outProtocol writeFieldEnd];
    }
  }
  if (__payWays_isset) {
    if (__payWays != nil) {
      [outProtocol writeFieldBeginWithName: @"payWays" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__payWays count]];
        int idx326;
        for (idx326 = 0; idx326 < [__payWays count]; idx326++)
        {
          [[__payWays objectAtIndex: idx326] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFOrderStInsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",proposalNo:"];
  [ms appendFormat: @"\"%@\"", __proposalNo];
  [ms appendString: @",premium:"];
  [ms appendFormat: @"\"%@\"", __premium];
  [ms appendString: @",payWays:"];
  [ms appendFormat: @"%@", __payWays];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetStInsPayInfoResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header orderId: (NSString *) orderId payurl: (NSString *) payurl premium: (NSString *) premium
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __orderId = [orderId retain_stub];
  __orderId_isset = YES;
  __payurl = [payurl retain_stub];
  __payurl_isset = YES;
  __premium = [premium retain_stub];
  __premium_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderId"])
  {
    __orderId = [[decoder decodeObjectForKey: @"orderId"] retain_stub];
    __orderId_isset = YES;
  }
  if ([decoder containsValueForKey: @"payurl"])
  {
    __payurl = [[decoder decodeObjectForKey: @"payurl"] retain_stub];
    __payurl_isset = YES;
  }
  if ([decoder containsValueForKey: @"premium"])
  {
    __premium = [[decoder decodeObjectForKey: @"premium"] retain_stub];
    __premium_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__orderId_isset)
  {
    [encoder encodeObject: __orderId forKey: @"orderId"];
  }
  if (__payurl_isset)
  {
    [encoder encodeObject: __payurl forKey: @"payurl"];
  }
  if (__premium_isset)
  {
    [encoder encodeObject: __premium forKey: @"premium"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __orderId_isset ? 2654435761 : 0;
  if (__orderId_isset)
  {
    hash = (hash * 31) ^ [__orderId hash];
  }
  hash = (hash * 31) ^ __payurl_isset ? 2654435761 : 0;
  if (__payurl_isset)
  {
    hash = (hash * 31) ^ [__payurl hash];
  }
  hash = (hash * 31) ^ __premium_isset ? 2654435761 : 0;
  if (__premium_isset)
  {
    hash = (hash * 31) ^ [__premium hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetStInsPayInfoResp class]]) {
    return NO;
  }
  NXTFGetStInsPayInfoResp *other = (NXTFGetStInsPayInfoResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__orderId_isset != other->__orderId_isset) ||
      (__orderId_isset && ((__orderId || other->__orderId) && ![__orderId isEqual:other->__orderId]))) {
    return NO;
  }
  if ((__payurl_isset != other->__payurl_isset) ||
      (__payurl_isset && ((__payurl || other->__payurl) && ![__payurl isEqual:other->__payurl]))) {
    return NO;
  }
  if ((__premium_isset != other->__premium_isset) ||
      (__premium_isset && ((__premium || other->__premium) && ![__premium isEqual:other->__premium]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__orderId release_stub];
  [__payurl release_stub];
  [__premium release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) orderId {
  return [[__orderId retain_stub] autorelease_stub];
}

- (void) setOrderId: (NSString *) orderId {
  [orderId retain_stub];
  [__orderId release_stub];
  __orderId = orderId;
  __orderId_isset = YES;
}

- (BOOL) orderIdIsSet {
  return __orderId_isset;
}

- (void) unsetOrderId {
  [__orderId release_stub];
  __orderId = nil;
  __orderId_isset = NO;
}

- (NSString *) payurl {
  return [[__payurl retain_stub] autorelease_stub];
}

- (void) setPayurl: (NSString *) payurl {
  [payurl retain_stub];
  [__payurl release_stub];
  __payurl = payurl;
  __payurl_isset = YES;
}

- (BOOL) payurlIsSet {
  return __payurl_isset;
}

- (void) unsetPayurl {
  [__payurl release_stub];
  __payurl = nil;
  __payurl_isset = NO;
}

- (NSString *) premium {
  return [[__premium retain_stub] autorelease_stub];
}

- (void) setPremium: (NSString *) premium {
  [premium retain_stub];
  [__premium release_stub];
  __premium = premium;
  __premium_isset = YES;
}

- (BOOL) premiumIsSet {
  return __premium_isset;
}

- (void) unsetPremium {
  [__premium release_stub];
  __premium = nil;
  __premium_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrderId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPayurl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPremium: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetStInsPayInfoResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderId_isset) {
    if (__orderId != nil) {
      [outProtocol writeFieldBeginWithName: @"orderId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __orderId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__payurl_isset) {
    if (__payurl != nil) {
      [outProtocol writeFieldBeginWithName: @"payurl" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __payurl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__premium_isset) {
    if (__premium != nil) {
      [outProtocol writeFieldBeginWithName: @"premium" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __premium];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetStInsPayInfoResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",orderId:"];
  [ms appendFormat: @"\"%@\"", __orderId];
  [ms appendString: @",payurl:"];
  [ms appendFormat: @"\"%@\"", __payurl];
  [ms appendString: @",premium:"];
  [ms appendFormat: @"\"%@\"", __premium];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetStInsDetailResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header policyNo: (NSString *) policyNo status: (NSString *) status insurant: (NSString *) insurant insured: (NSString *) insured premium: (NSString *) premium amount: (NSString *) amount startDate: (NSString *) startDate endDate: (NSString *) endDate patientId: (NSString *) patientId
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __policyNo = [policyNo retain_stub];
  __policyNo_isset = YES;
  __status = [status retain_stub];
  __status_isset = YES;
  __insurant = [insurant retain_stub];
  __insurant_isset = YES;
  __insured = [insured retain_stub];
  __insured_isset = YES;
  __premium = [premium retain_stub];
  __premium_isset = YES;
  __amount = [amount retain_stub];
  __amount_isset = YES;
  __startDate = [startDate retain_stub];
  __startDate_isset = YES;
  __endDate = [endDate retain_stub];
  __endDate_isset = YES;
  __patientId = [patientId retain_stub];
  __patientId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"policyNo"])
  {
    __policyNo = [[decoder decodeObjectForKey: @"policyNo"] retain_stub];
    __policyNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [[decoder decodeObjectForKey: @"status"] retain_stub];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"insurant"])
  {
    __insurant = [[decoder decodeObjectForKey: @"insurant"] retain_stub];
    __insurant_isset = YES;
  }
  if ([decoder containsValueForKey: @"insured"])
  {
    __insured = [[decoder decodeObjectForKey: @"insured"] retain_stub];
    __insured_isset = YES;
  }
  if ([decoder containsValueForKey: @"premium"])
  {
    __premium = [[decoder decodeObjectForKey: @"premium"] retain_stub];
    __premium_isset = YES;
  }
  if ([decoder containsValueForKey: @"amount"])
  {
    __amount = [[decoder decodeObjectForKey: @"amount"] retain_stub];
    __amount_isset = YES;
  }
  if ([decoder containsValueForKey: @"startDate"])
  {
    __startDate = [[decoder decodeObjectForKey: @"startDate"] retain_stub];
    __startDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"endDate"])
  {
    __endDate = [[decoder decodeObjectForKey: @"endDate"] retain_stub];
    __endDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientId"])
  {
    __patientId = [[decoder decodeObjectForKey: @"patientId"] retain_stub];
    __patientId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__policyNo_isset)
  {
    [encoder encodeObject: __policyNo forKey: @"policyNo"];
  }
  if (__status_isset)
  {
    [encoder encodeObject: __status forKey: @"status"];
  }
  if (__insurant_isset)
  {
    [encoder encodeObject: __insurant forKey: @"insurant"];
  }
  if (__insured_isset)
  {
    [encoder encodeObject: __insured forKey: @"insured"];
  }
  if (__premium_isset)
  {
    [encoder encodeObject: __premium forKey: @"premium"];
  }
  if (__amount_isset)
  {
    [encoder encodeObject: __amount forKey: @"amount"];
  }
  if (__startDate_isset)
  {
    [encoder encodeObject: __startDate forKey: @"startDate"];
  }
  if (__endDate_isset)
  {
    [encoder encodeObject: __endDate forKey: @"endDate"];
  }
  if (__patientId_isset)
  {
    [encoder encodeObject: __patientId forKey: @"patientId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __policyNo_isset ? 2654435761 : 0;
  if (__policyNo_isset)
  {
    hash = (hash * 31) ^ [__policyNo hash];
  }
  hash = (hash * 31) ^ __status_isset ? 2654435761 : 0;
  if (__status_isset)
  {
    hash = (hash * 31) ^ [__status hash];
  }
  hash = (hash * 31) ^ __insurant_isset ? 2654435761 : 0;
  if (__insurant_isset)
  {
    hash = (hash * 31) ^ [__insurant hash];
  }
  hash = (hash * 31) ^ __insured_isset ? 2654435761 : 0;
  if (__insured_isset)
  {
    hash = (hash * 31) ^ [__insured hash];
  }
  hash = (hash * 31) ^ __premium_isset ? 2654435761 : 0;
  if (__premium_isset)
  {
    hash = (hash * 31) ^ [__premium hash];
  }
  hash = (hash * 31) ^ __amount_isset ? 2654435761 : 0;
  if (__amount_isset)
  {
    hash = (hash * 31) ^ [__amount hash];
  }
  hash = (hash * 31) ^ __startDate_isset ? 2654435761 : 0;
  if (__startDate_isset)
  {
    hash = (hash * 31) ^ [__startDate hash];
  }
  hash = (hash * 31) ^ __endDate_isset ? 2654435761 : 0;
  if (__endDate_isset)
  {
    hash = (hash * 31) ^ [__endDate hash];
  }
  hash = (hash * 31) ^ __patientId_isset ? 2654435761 : 0;
  if (__patientId_isset)
  {
    hash = (hash * 31) ^ [__patientId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetStInsDetailResp class]]) {
    return NO;
  }
  NXTFGetStInsDetailResp *other = (NXTFGetStInsDetailResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__policyNo_isset != other->__policyNo_isset) ||
      (__policyNo_isset && ((__policyNo || other->__policyNo) && ![__policyNo isEqual:other->__policyNo]))) {
    return NO;
  }
  if ((__status_isset != other->__status_isset) ||
      (__status_isset && ((__status || other->__status) && ![__status isEqual:other->__status]))) {
    return NO;
  }
  if ((__insurant_isset != other->__insurant_isset) ||
      (__insurant_isset && ((__insurant || other->__insurant) && ![__insurant isEqual:other->__insurant]))) {
    return NO;
  }
  if ((__insured_isset != other->__insured_isset) ||
      (__insured_isset && ((__insured || other->__insured) && ![__insured isEqual:other->__insured]))) {
    return NO;
  }
  if ((__premium_isset != other->__premium_isset) ||
      (__premium_isset && ((__premium || other->__premium) && ![__premium isEqual:other->__premium]))) {
    return NO;
  }
  if ((__amount_isset != other->__amount_isset) ||
      (__amount_isset && ((__amount || other->__amount) && ![__amount isEqual:other->__amount]))) {
    return NO;
  }
  if ((__startDate_isset != other->__startDate_isset) ||
      (__startDate_isset && ((__startDate || other->__startDate) && ![__startDate isEqual:other->__startDate]))) {
    return NO;
  }
  if ((__endDate_isset != other->__endDate_isset) ||
      (__endDate_isset && ((__endDate || other->__endDate) && ![__endDate isEqual:other->__endDate]))) {
    return NO;
  }
  if ((__patientId_isset != other->__patientId_isset) ||
      (__patientId_isset && ((__patientId || other->__patientId) && ![__patientId isEqual:other->__patientId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__policyNo release_stub];
  [__status release_stub];
  [__insurant release_stub];
  [__insured release_stub];
  [__premium release_stub];
  [__amount release_stub];
  [__startDate release_stub];
  [__endDate release_stub];
  [__patientId release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) policyNo {
  return [[__policyNo retain_stub] autorelease_stub];
}

- (void) setPolicyNo: (NSString *) policyNo {
  [policyNo retain_stub];
  [__policyNo release_stub];
  __policyNo = policyNo;
  __policyNo_isset = YES;
}

- (BOOL) policyNoIsSet {
  return __policyNo_isset;
}

- (void) unsetPolicyNo {
  [__policyNo release_stub];
  __policyNo = nil;
  __policyNo_isset = NO;
}

- (NSString *) status {
  return [[__status retain_stub] autorelease_stub];
}

- (void) setStatus: (NSString *) status {
  [status retain_stub];
  [__status release_stub];
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  [__status release_stub];
  __status = nil;
  __status_isset = NO;
}

- (NSString *) insurant {
  return [[__insurant retain_stub] autorelease_stub];
}

- (void) setInsurant: (NSString *) insurant {
  [insurant retain_stub];
  [__insurant release_stub];
  __insurant = insurant;
  __insurant_isset = YES;
}

- (BOOL) insurantIsSet {
  return __insurant_isset;
}

- (void) unsetInsurant {
  [__insurant release_stub];
  __insurant = nil;
  __insurant_isset = NO;
}

- (NSString *) insured {
  return [[__insured retain_stub] autorelease_stub];
}

- (void) setInsured: (NSString *) insured {
  [insured retain_stub];
  [__insured release_stub];
  __insured = insured;
  __insured_isset = YES;
}

- (BOOL) insuredIsSet {
  return __insured_isset;
}

- (void) unsetInsured {
  [__insured release_stub];
  __insured = nil;
  __insured_isset = NO;
}

- (NSString *) premium {
  return [[__premium retain_stub] autorelease_stub];
}

- (void) setPremium: (NSString *) premium {
  [premium retain_stub];
  [__premium release_stub];
  __premium = premium;
  __premium_isset = YES;
}

- (BOOL) premiumIsSet {
  return __premium_isset;
}

- (void) unsetPremium {
  [__premium release_stub];
  __premium = nil;
  __premium_isset = NO;
}

- (NSString *) amount {
  return [[__amount retain_stub] autorelease_stub];
}

- (void) setAmount: (NSString *) amount {
  [amount retain_stub];
  [__amount release_stub];
  __amount = amount;
  __amount_isset = YES;
}

- (BOOL) amountIsSet {
  return __amount_isset;
}

- (void) unsetAmount {
  [__amount release_stub];
  __amount = nil;
  __amount_isset = NO;
}

- (NSString *) startDate {
  return [[__startDate retain_stub] autorelease_stub];
}

- (void) setStartDate: (NSString *) startDate {
  [startDate retain_stub];
  [__startDate release_stub];
  __startDate = startDate;
  __startDate_isset = YES;
}

- (BOOL) startDateIsSet {
  return __startDate_isset;
}

- (void) unsetStartDate {
  [__startDate release_stub];
  __startDate = nil;
  __startDate_isset = NO;
}

- (NSString *) endDate {
  return [[__endDate retain_stub] autorelease_stub];
}

- (void) setEndDate: (NSString *) endDate {
  [endDate retain_stub];
  [__endDate release_stub];
  __endDate = endDate;
  __endDate_isset = YES;
}

- (BOOL) endDateIsSet {
  return __endDate_isset;
}

- (void) unsetEndDate {
  [__endDate release_stub];
  __endDate = nil;
  __endDate_isset = NO;
}

- (NSString *) patientId {
  return [[__patientId retain_stub] autorelease_stub];
}

- (void) setPatientId: (NSString *) patientId {
  [patientId retain_stub];
  [__patientId release_stub];
  __patientId = patientId;
  __patientId_isset = YES;
}

- (BOOL) patientIdIsSet {
  return __patientId_isset;
}

- (void) unsetPatientId {
  [__patientId release_stub];
  __patientId = nil;
  __patientId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPolicyNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInsurant: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInsured: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPremium: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAmount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStartDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEndDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetStInsDetailResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__policyNo_isset) {
    if (__policyNo != nil) {
      [outProtocol writeFieldBeginWithName: @"policyNo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __policyNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__status_isset) {
    if (__status != nil) {
      [outProtocol writeFieldBeginWithName: @"status" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __status];
      [outProtocol writeFieldEnd];
    }
  }
  if (__insurant_isset) {
    if (__insurant != nil) {
      [outProtocol writeFieldBeginWithName: @"insurant" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __insurant];
      [outProtocol writeFieldEnd];
    }
  }
  if (__insured_isset) {
    if (__insured != nil) {
      [outProtocol writeFieldBeginWithName: @"insured" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __insured];
      [outProtocol writeFieldEnd];
    }
  }
  if (__premium_isset) {
    if (__premium != nil) {
      [outProtocol writeFieldBeginWithName: @"premium" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __premium];
      [outProtocol writeFieldEnd];
    }
  }
  if (__amount_isset) {
    if (__amount != nil) {
      [outProtocol writeFieldBeginWithName: @"amount" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __amount];
      [outProtocol writeFieldEnd];
    }
  }
  if (__startDate_isset) {
    if (__startDate != nil) {
      [outProtocol writeFieldBeginWithName: @"startDate" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __startDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__endDate_isset) {
    if (__endDate != nil) {
      [outProtocol writeFieldBeginWithName: @"endDate" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __endDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientId_isset) {
    if (__patientId != nil) {
      [outProtocol writeFieldBeginWithName: @"patientId" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __patientId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetStInsDetailResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",policyNo:"];
  [ms appendFormat: @"\"%@\"", __policyNo];
  [ms appendString: @",status:"];
  [ms appendFormat: @"\"%@\"", __status];
  [ms appendString: @",insurant:"];
  [ms appendFormat: @"\"%@\"", __insurant];
  [ms appendString: @",insured:"];
  [ms appendFormat: @"\"%@\"", __insured];
  [ms appendString: @",premium:"];
  [ms appendFormat: @"\"%@\"", __premium];
  [ms appendString: @",amount:"];
  [ms appendFormat: @"\"%@\"", __amount];
  [ms appendString: @",startDate:"];
  [ms appendFormat: @"\"%@\"", __startDate];
  [ms appendString: @",endDate:"];
  [ms appendFormat: @"\"%@\"", __endDate];
  [ms appendString: @",patientId:"];
  [ms appendFormat: @"\"%@\"", __patientId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetStInsBanksResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.banks = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header banks: (NSMutableArray *) banks
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __banks = [banks retain_stub];
  __banks_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"banks"])
  {
    __banks = [[decoder decodeObjectForKey: @"banks"] retain_stub];
    __banks_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__banks_isset)
  {
    [encoder encodeObject: __banks forKey: @"banks"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __banks_isset ? 2654435761 : 0;
  if (__banks_isset)
  {
    hash = (hash * 31) ^ [__banks hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetStInsBanksResp class]]) {
    return NO;
  }
  NXTFGetStInsBanksResp *other = (NXTFGetStInsBanksResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__banks_isset != other->__banks_isset) ||
      (__banks_isset && ((__banks || other->__banks) && ![__banks isEqual:other->__banks]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__banks release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) banks {
  return [[__banks retain_stub] autorelease_stub];
}

- (void) setBanks: (NSMutableArray *) banks {
  [banks retain_stub];
  [__banks release_stub];
  __banks = banks;
  __banks_isset = YES;
}

- (BOOL) banksIsSet {
  return __banks_isset;
}

- (void) unsetBanks {
  [__banks release_stub];
  __banks = nil;
  __banks_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size327;
          [inProtocol readListBeginReturningElementType: NULL size: &_size327];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size327];
          int _i328;
          for (_i328 = 0; _i328 < _size327; ++_i328)
          {
            NXTFBankDto *_elem329 = [[NXTFBankDto alloc] init];
            [_elem329 read: inProtocol];
            [fieldValue addObject: _elem329];
            [_elem329 release_stub];
          }
          [inProtocol readListEnd];
          [self setBanks: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetStInsBanksResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__banks_isset) {
    if (__banks != nil) {
      [outProtocol writeFieldBeginWithName: @"banks" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__banks count]];
        int idx331;
        for (idx331 = 0; idx331 < [__banks count]; idx331++)
        {
          [[__banks objectAtIndex: idx331] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetStInsBanksResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",banks:"];
  [ms appendFormat: @"%@", __banks];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetMyPayInfosResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.myPayInfos = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header myPayInfos: (NSMutableArray *) myPayInfos
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __myPayInfos = [myPayInfos retain_stub];
  __myPayInfos_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"myPayInfos"])
  {
    __myPayInfos = [[decoder decodeObjectForKey: @"myPayInfos"] retain_stub];
    __myPayInfos_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__myPayInfos_isset)
  {
    [encoder encodeObject: __myPayInfos forKey: @"myPayInfos"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __myPayInfos_isset ? 2654435761 : 0;
  if (__myPayInfos_isset)
  {
    hash = (hash * 31) ^ [__myPayInfos hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetMyPayInfosResp class]]) {
    return NO;
  }
  NXTFGetMyPayInfosResp *other = (NXTFGetMyPayInfosResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__myPayInfos_isset != other->__myPayInfos_isset) ||
      (__myPayInfos_isset && ((__myPayInfos || other->__myPayInfos) && ![__myPayInfos isEqual:other->__myPayInfos]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__myPayInfos release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) myPayInfos {
  return [[__myPayInfos retain_stub] autorelease_stub];
}

- (void) setMyPayInfos: (NSMutableArray *) myPayInfos {
  [myPayInfos retain_stub];
  [__myPayInfos release_stub];
  __myPayInfos = myPayInfos;
  __myPayInfos_isset = YES;
}

- (BOOL) myPayInfosIsSet {
  return __myPayInfos_isset;
}

- (void) unsetMyPayInfos {
  [__myPayInfos release_stub];
  __myPayInfos = nil;
  __myPayInfos_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size332;
          [inProtocol readListBeginReturningElementType: NULL size: &_size332];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size332];
          int _i333;
          for (_i333 = 0; _i333 < _size332; ++_i333)
          {
            NXTFMyPayDto *_elem334 = [[NXTFMyPayDto alloc] init];
            [_elem334 read: inProtocol];
            [fieldValue addObject: _elem334];
            [_elem334 release_stub];
          }
          [inProtocol readListEnd];
          [self setMyPayInfos: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMyPayInfosResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__myPayInfos_isset) {
    if (__myPayInfos != nil) {
      [outProtocol writeFieldBeginWithName: @"myPayInfos" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__myPayInfos count]];
        int idx336;
        for (idx336 = 0; idx336 < [__myPayInfos count]; idx336++)
        {
          [[__myPayInfos objectAtIndex: idx336] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetMyPayInfosResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",myPayInfos:"];
  [ms appendFormat: @"%@", __myPayInfos];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFReqStInsClaimResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header registerRslt: (NSString *) registerRslt
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __registerRslt = [registerRslt retain_stub];
  __registerRslt_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"registerRslt"])
  {
    __registerRslt = [[decoder decodeObjectForKey: @"registerRslt"] retain_stub];
    __registerRslt_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__registerRslt_isset)
  {
    [encoder encodeObject: __registerRslt forKey: @"registerRslt"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __registerRslt_isset ? 2654435761 : 0;
  if (__registerRslt_isset)
  {
    hash = (hash * 31) ^ [__registerRslt hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFReqStInsClaimResp class]]) {
    return NO;
  }
  NXTFReqStInsClaimResp *other = (NXTFReqStInsClaimResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__registerRslt_isset != other->__registerRslt_isset) ||
      (__registerRslt_isset && ((__registerRslt || other->__registerRslt) && ![__registerRslt isEqual:other->__registerRslt]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__registerRslt release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) registerRslt {
  return [[__registerRslt retain_stub] autorelease_stub];
}

- (void) setRegisterRslt: (NSString *) registerRslt {
  [registerRslt retain_stub];
  [__registerRslt release_stub];
  __registerRslt = registerRslt;
  __registerRslt_isset = YES;
}

- (BOOL) registerRsltIsSet {
  return __registerRslt_isset;
}

- (void) unsetRegisterRslt {
  [__registerRslt release_stub];
  __registerRslt = nil;
  __registerRslt_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegisterRslt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReqStInsClaimResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__registerRslt_isset) {
    if (__registerRslt != nil) {
      [outProtocol writeFieldBeginWithName: @"registerRslt" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __registerRslt];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFReqStInsClaimResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",registerRslt:"];
  [ms appendFormat: @"\"%@\"", __registerRslt];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetLastestActResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header actId: (NSString *) actId title: (NSString *) title drName: (NSString *) drName bgPic: (NSString *) bgPic
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __actId = [actId retain_stub];
  __actId_isset = YES;
  __title = [title retain_stub];
  __title_isset = YES;
  __drName = [drName retain_stub];
  __drName_isset = YES;
  __bgPic = [bgPic retain_stub];
  __bgPic_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"actId"])
  {
    __actId = [[decoder decodeObjectForKey: @"actId"] retain_stub];
    __actId_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"drName"])
  {
    __drName = [[decoder decodeObjectForKey: @"drName"] retain_stub];
    __drName_isset = YES;
  }
  if ([decoder containsValueForKey: @"bgPic"])
  {
    __bgPic = [[decoder decodeObjectForKey: @"bgPic"] retain_stub];
    __bgPic_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__actId_isset)
  {
    [encoder encodeObject: __actId forKey: @"actId"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__drName_isset)
  {
    [encoder encodeObject: __drName forKey: @"drName"];
  }
  if (__bgPic_isset)
  {
    [encoder encodeObject: __bgPic forKey: @"bgPic"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __actId_isset ? 2654435761 : 0;
  if (__actId_isset)
  {
    hash = (hash * 31) ^ [__actId hash];
  }
  hash = (hash * 31) ^ __title_isset ? 2654435761 : 0;
  if (__title_isset)
  {
    hash = (hash * 31) ^ [__title hash];
  }
  hash = (hash * 31) ^ __drName_isset ? 2654435761 : 0;
  if (__drName_isset)
  {
    hash = (hash * 31) ^ [__drName hash];
  }
  hash = (hash * 31) ^ __bgPic_isset ? 2654435761 : 0;
  if (__bgPic_isset)
  {
    hash = (hash * 31) ^ [__bgPic hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetLastestActResp class]]) {
    return NO;
  }
  NXTFGetLastestActResp *other = (NXTFGetLastestActResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__actId_isset != other->__actId_isset) ||
      (__actId_isset && ((__actId || other->__actId) && ![__actId isEqual:other->__actId]))) {
    return NO;
  }
  if ((__title_isset != other->__title_isset) ||
      (__title_isset && ((__title || other->__title) && ![__title isEqual:other->__title]))) {
    return NO;
  }
  if ((__drName_isset != other->__drName_isset) ||
      (__drName_isset && ((__drName || other->__drName) && ![__drName isEqual:other->__drName]))) {
    return NO;
  }
  if ((__bgPic_isset != other->__bgPic_isset) ||
      (__bgPic_isset && ((__bgPic || other->__bgPic) && ![__bgPic isEqual:other->__bgPic]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__actId release_stub];
  [__title release_stub];
  [__drName release_stub];
  [__bgPic release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) actId {
  return [[__actId retain_stub] autorelease_stub];
}

- (void) setActId: (NSString *) actId {
  [actId retain_stub];
  [__actId release_stub];
  __actId = actId;
  __actId_isset = YES;
}

- (BOOL) actIdIsSet {
  return __actId_isset;
}

- (void) unsetActId {
  [__actId release_stub];
  __actId = nil;
  __actId_isset = NO;
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) drName {
  return [[__drName retain_stub] autorelease_stub];
}

- (void) setDrName: (NSString *) drName {
  [drName retain_stub];
  [__drName release_stub];
  __drName = drName;
  __drName_isset = YES;
}

- (BOOL) drNameIsSet {
  return __drName_isset;
}

- (void) unsetDrName {
  [__drName release_stub];
  __drName = nil;
  __drName_isset = NO;
}

- (NSString *) bgPic {
  return [[__bgPic retain_stub] autorelease_stub];
}

- (void) setBgPic: (NSString *) bgPic {
  [bgPic retain_stub];
  [__bgPic release_stub];
  __bgPic = bgPic;
  __bgPic_isset = YES;
}

- (BOOL) bgPicIsSet {
  return __bgPic_isset;
}

- (void) unsetBgPic {
  [__bgPic release_stub];
  __bgPic = nil;
  __bgPic_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setActId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBgPic: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetLastestActResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__actId_isset) {
    if (__actId != nil) {
      [outProtocol writeFieldBeginWithName: @"actId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __actId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drName_isset) {
    if (__drName != nil) {
      [outProtocol writeFieldBeginWithName: @"drName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __drName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bgPic_isset) {
    if (__bgPic != nil) {
      [outProtocol writeFieldBeginWithName: @"bgPic" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __bgPic];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetLastestActResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",actId:"];
  [ms appendFormat: @"\"%@\"", __actId];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",drName:"];
  [ms appendFormat: @"\"%@\"", __drName];
  [ms appendString: @",bgPic:"];
  [ms appendFormat: @"\"%@\"", __bgPic];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetActsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.actThumbnailDto = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header page: (NXTFPage *) page actThumbnailDto: (NSMutableArray *) actThumbnailDto
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __actThumbnailDto = [actThumbnailDto retain_stub];
  __actThumbnailDto_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"actThumbnailDto"])
  {
    __actThumbnailDto = [[decoder decodeObjectForKey: @"actThumbnailDto"] retain_stub];
    __actThumbnailDto_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__actThumbnailDto_isset)
  {
    [encoder encodeObject: __actThumbnailDto forKey: @"actThumbnailDto"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __actThumbnailDto_isset ? 2654435761 : 0;
  if (__actThumbnailDto_isset)
  {
    hash = (hash * 31) ^ [__actThumbnailDto hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetActsResp class]]) {
    return NO;
  }
  NXTFGetActsResp *other = (NXTFGetActsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__actThumbnailDto_isset != other->__actThumbnailDto_isset) ||
      (__actThumbnailDto_isset && ((__actThumbnailDto || other->__actThumbnailDto) && ![__actThumbnailDto isEqual:other->__actThumbnailDto]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__page release_stub];
  [__actThumbnailDto release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (NSMutableArray *) actThumbnailDto {
  return [[__actThumbnailDto retain_stub] autorelease_stub];
}

- (void) setActThumbnailDto: (NSMutableArray *) actThumbnailDto {
  [actThumbnailDto retain_stub];
  [__actThumbnailDto release_stub];
  __actThumbnailDto = actThumbnailDto;
  __actThumbnailDto_isset = YES;
}

- (BOOL) actThumbnailDtoIsSet {
  return __actThumbnailDto_isset;
}

- (void) unsetActThumbnailDto {
  [__actThumbnailDto release_stub];
  __actThumbnailDto = nil;
  __actThumbnailDto_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size337;
          [inProtocol readListBeginReturningElementType: NULL size: &_size337];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size337];
          int _i338;
          for (_i338 = 0; _i338 < _size337; ++_i338)
          {
            NXTFActThumbnailDto *_elem339 = [[NXTFActThumbnailDto alloc] init];
            [_elem339 read: inProtocol];
            [fieldValue addObject: _elem339];
            [_elem339 release_stub];
          }
          [inProtocol readListEnd];
          [self setActThumbnailDto: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetActsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 2];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__actThumbnailDto_isset) {
    if (__actThumbnailDto != nil) {
      [outProtocol writeFieldBeginWithName: @"actThumbnailDto" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__actThumbnailDto count]];
        int idx341;
        for (idx341 = 0; idx341 < [__actThumbnailDto count]; idx341++)
        {
          [[__actThumbnailDto objectAtIndex: idx341] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetActsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",actThumbnailDto:"];
  [ms appendFormat: @"%@", __actThumbnailDto];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetActDetailResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header activityDto: (NXTFActivityDto *) activityDto regStatus: (BOOL) regStatus status: (int32_t) status userNum: (int32_t) userNum
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __activityDto = [activityDto retain_stub];
  __activityDto_isset = YES;
  __regStatus = regStatus;
  __regStatus_isset = YES;
  __status = status;
  __status_isset = YES;
  __userNum = userNum;
  __userNum_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"activityDto"])
  {
    __activityDto = [[decoder decodeObjectForKey: @"activityDto"] retain_stub];
    __activityDto_isset = YES;
  }
  if ([decoder containsValueForKey: @"regStatus"])
  {
    __regStatus = [decoder decodeBoolForKey: @"regStatus"];
    __regStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeInt32ForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"userNum"])
  {
    __userNum = [decoder decodeInt32ForKey: @"userNum"];
    __userNum_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__activityDto_isset)
  {
    [encoder encodeObject: __activityDto forKey: @"activityDto"];
  }
  if (__regStatus_isset)
  {
    [encoder encodeBool: __regStatus forKey: @"regStatus"];
  }
  if (__status_isset)
  {
    [encoder encodeInt32: __status forKey: @"status"];
  }
  if (__userNum_isset)
  {
    [encoder encodeInt32: __userNum forKey: @"userNum"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __activityDto_isset ? 2654435761 : 0;
  if (__activityDto_isset)
  {
    hash = (hash * 31) ^ [__activityDto hash];
  }
  hash = (hash * 31) ^ __regStatus_isset ? 2654435761 : 0;
  if (__regStatus_isset)
  {
    hash = (hash * 31) ^ [@(__regStatus) hash];
  }
  hash = (hash * 31) ^ __status_isset ? 2654435761 : 0;
  if (__status_isset)
  {
    hash = (hash * 31) ^ [@(__status) hash];
  }
  hash = (hash * 31) ^ __userNum_isset ? 2654435761 : 0;
  if (__userNum_isset)
  {
    hash = (hash * 31) ^ [@(__userNum) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetActDetailResp class]]) {
    return NO;
  }
  NXTFGetActDetailResp *other = (NXTFGetActDetailResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__activityDto_isset != other->__activityDto_isset) ||
      (__activityDto_isset && ((__activityDto || other->__activityDto) && ![__activityDto isEqual:other->__activityDto]))) {
    return NO;
  }
  if ((__regStatus_isset != other->__regStatus_isset) ||
      (__regStatus_isset && (__regStatus != other->__regStatus))) {
    return NO;
  }
  if ((__status_isset != other->__status_isset) ||
      (__status_isset && (__status != other->__status))) {
    return NO;
  }
  if ((__userNum_isset != other->__userNum_isset) ||
      (__userNum_isset && (__userNum != other->__userNum))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__activityDto release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFActivityDto *) activityDto {
  return [[__activityDto retain_stub] autorelease_stub];
}

- (void) setActivityDto: (NXTFActivityDto *) activityDto {
  [activityDto retain_stub];
  [__activityDto release_stub];
  __activityDto = activityDto;
  __activityDto_isset = YES;
}

- (BOOL) activityDtoIsSet {
  return __activityDto_isset;
}

- (void) unsetActivityDto {
  [__activityDto release_stub];
  __activityDto = nil;
  __activityDto_isset = NO;
}

- (BOOL) regStatus {
  return __regStatus;
}

- (void) setRegStatus: (BOOL) regStatus {
  __regStatus = regStatus;
  __regStatus_isset = YES;
}

- (BOOL) regStatusIsSet {
  return __regStatus_isset;
}

- (void) unsetRegStatus {
  __regStatus_isset = NO;
}

- (int32_t) status {
  return __status;
}

- (void) setStatus: (int32_t) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (int32_t) userNum {
  return __userNum;
}

- (void) setUserNum: (int32_t) userNum {
  __userNum = userNum;
  __userNum_isset = YES;
}

- (BOOL) userNumIsSet {
  return __userNum_isset;
}

- (void) unsetUserNum {
  __userNum_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFActivityDto *fieldValue = [[NXTFActivityDto alloc] init];
          [fieldValue read: inProtocol];
          [self setActivityDto: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRegStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUserNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetActDetailResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__activityDto_isset) {
    if (__activityDto != nil) {
      [outProtocol writeFieldBeginWithName: @"activityDto" type: TType_STRUCT fieldID: 2];
      [__activityDto write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"regStatus" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __regStatus];
    [outProtocol writeFieldEnd];
  }
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__userNum_isset) {
    [outProtocol writeFieldBeginWithName: @"userNum" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __userNum];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetActDetailResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",activityDto:"];
  [ms appendFormat: @"%@", __activityDto];
  [ms appendString: @",regStatus:"];
  [ms appendFormat: @"%i", __regStatus];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",userNum:"];
  [ms appendFormat: @"%i", __userNum];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFRegLiveResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header regStatus: (BOOL) regStatus
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __regStatus = regStatus;
  __regStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"regStatus"])
  {
    __regStatus = [decoder decodeBoolForKey: @"regStatus"];
    __regStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__regStatus_isset)
  {
    [encoder encodeBool: __regStatus forKey: @"regStatus"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __regStatus_isset ? 2654435761 : 0;
  if (__regStatus_isset)
  {
    hash = (hash * 31) ^ [@(__regStatus) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFRegLiveResp class]]) {
    return NO;
  }
  NXTFRegLiveResp *other = (NXTFRegLiveResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__regStatus_isset != other->__regStatus_isset) ||
      (__regStatus_isset && (__regStatus != other->__regStatus))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (BOOL) regStatus {
  return __regStatus;
}

- (void) setRegStatus: (BOOL) regStatus {
  __regStatus = regStatus;
  __regStatus_isset = YES;
}

- (BOOL) regStatusIsSet {
  return __regStatus_isset;
}

- (void) unsetRegStatus {
  __regStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRegStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegLiveResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"regStatus" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __regStatus];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFRegLiveResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",regStatus:"];
  [ms appendFormat: @"%i", __regStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetBannersResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.bannerDtos = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header bannerDtos: (NSMutableArray *) bannerDtos
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __bannerDtos = [bannerDtos retain_stub];
  __bannerDtos_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"bannerDtos"])
  {
    __bannerDtos = [[decoder decodeObjectForKey: @"bannerDtos"] retain_stub];
    __bannerDtos_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__bannerDtos_isset)
  {
    [encoder encodeObject: __bannerDtos forKey: @"bannerDtos"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __bannerDtos_isset ? 2654435761 : 0;
  if (__bannerDtos_isset)
  {
    hash = (hash * 31) ^ [__bannerDtos hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetBannersResp class]]) {
    return NO;
  }
  NXTFGetBannersResp *other = (NXTFGetBannersResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__bannerDtos_isset != other->__bannerDtos_isset) ||
      (__bannerDtos_isset && ((__bannerDtos || other->__bannerDtos) && ![__bannerDtos isEqual:other->__bannerDtos]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__bannerDtos release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) bannerDtos {
  return [[__bannerDtos retain_stub] autorelease_stub];
}

- (void) setBannerDtos: (NSMutableArray *) bannerDtos {
  [bannerDtos retain_stub];
  [__bannerDtos release_stub];
  __bannerDtos = bannerDtos;
  __bannerDtos_isset = YES;
}

- (BOOL) bannerDtosIsSet {
  return __bannerDtos_isset;
}

- (void) unsetBannerDtos {
  [__bannerDtos release_stub];
  __bannerDtos = nil;
  __bannerDtos_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size342;
          [inProtocol readListBeginReturningElementType: NULL size: &_size342];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size342];
          int _i343;
          for (_i343 = 0; _i343 < _size342; ++_i343)
          {
            NXTFBannerDto *_elem344 = [[NXTFBannerDto alloc] init];
            [_elem344 read: inProtocol];
            [fieldValue addObject: _elem344];
            [_elem344 release_stub];
          }
          [inProtocol readListEnd];
          [self setBannerDtos: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetBannersResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bannerDtos_isset) {
    if (__bannerDtos != nil) {
      [outProtocol writeFieldBeginWithName: @"bannerDtos" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__bannerDtos count]];
        int idx346;
        for (idx346 = 0; idx346 < [__bannerDtos count]; idx346++)
        {
          [[__bannerDtos objectAtIndex: idx346] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetBannersResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",bannerDtos:"];
  [ms appendFormat: @"%@", __bannerDtos];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFTerminateConsultationResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header consultStatus: (NSString *) consultStatus
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __consultStatus = [consultStatus retain_stub];
  __consultStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"consultStatus"])
  {
    __consultStatus = [[decoder decodeObjectForKey: @"consultStatus"] retain_stub];
    __consultStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__consultStatus_isset)
  {
    [encoder encodeObject: __consultStatus forKey: @"consultStatus"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __consultStatus_isset ? 2654435761 : 0;
  if (__consultStatus_isset)
  {
    hash = (hash * 31) ^ [__consultStatus hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFTerminateConsultationResp class]]) {
    return NO;
  }
  NXTFTerminateConsultationResp *other = (NXTFTerminateConsultationResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__consultStatus_isset != other->__consultStatus_isset) ||
      (__consultStatus_isset && ((__consultStatus || other->__consultStatus) && ![__consultStatus isEqual:other->__consultStatus]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__consultStatus release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) consultStatus {
  return [[__consultStatus retain_stub] autorelease_stub];
}

- (void) setConsultStatus: (NSString *) consultStatus {
  [consultStatus retain_stub];
  [__consultStatus release_stub];
  __consultStatus = consultStatus;
  __consultStatus_isset = YES;
}

- (BOOL) consultStatusIsSet {
  return __consultStatus_isset;
}

- (void) unsetConsultStatus {
  [__consultStatus release_stub];
  __consultStatus = nil;
  __consultStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setConsultStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TerminateConsultationResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__consultStatus_isset) {
    if (__consultStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"consultStatus" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __consultStatus];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFTerminateConsultationResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",consultStatus:"];
  [ms appendFormat: @"\"%@\"", __consultStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetHealthProfileResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header name: (NSString *) name gender: (NSString *) gender age: (NSString *) age patientHead: (NSString *) patientHead bornDate: (NSString *) bornDate nation: (NSString *) nation contactNo: (NSString *) contactNo bloodType: (NSString *) bloodType marriage: (NSString *) marriage payType: (NSString *) payType corpName: (NSString *) corpName address: (NSString *) address disability: (NSString *) disability familyHistory: (NSString *) familyHistory allergicHistory: (NSString *) allergicHistory linkB: (NSString *) linkB linkD: (NSString *) linkD code: (NSString *) code hospId: (NSString *) hospId version: (int32_t) version
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __gender = [gender retain_stub];
  __gender_isset = YES;
  __age = [age retain_stub];
  __age_isset = YES;
  __patientHead = [patientHead retain_stub];
  __patientHead_isset = YES;
  __bornDate = [bornDate retain_stub];
  __bornDate_isset = YES;
  __nation = [nation retain_stub];
  __nation_isset = YES;
  __contactNo = [contactNo retain_stub];
  __contactNo_isset = YES;
  __bloodType = [bloodType retain_stub];
  __bloodType_isset = YES;
  __marriage = [marriage retain_stub];
  __marriage_isset = YES;
  __payType = [payType retain_stub];
  __payType_isset = YES;
  __corpName = [corpName retain_stub];
  __corpName_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __disability = [disability retain_stub];
  __disability_isset = YES;
  __familyHistory = [familyHistory retain_stub];
  __familyHistory_isset = YES;
  __allergicHistory = [allergicHistory retain_stub];
  __allergicHistory_isset = YES;
  __linkB = [linkB retain_stub];
  __linkB_isset = YES;
  __linkD = [linkD retain_stub];
  __linkD_isset = YES;
  __code = [code retain_stub];
  __code_isset = YES;
  __hospId = [hospId retain_stub];
  __hospId_isset = YES;
  __version = version;
  __version_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [[decoder decodeObjectForKey: @"gender"] retain_stub];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"age"])
  {
    __age = [[decoder decodeObjectForKey: @"age"] retain_stub];
    __age_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientHead"])
  {
    __patientHead = [[decoder decodeObjectForKey: @"patientHead"] retain_stub];
    __patientHead_isset = YES;
  }
  if ([decoder containsValueForKey: @"bornDate"])
  {
    __bornDate = [[decoder decodeObjectForKey: @"bornDate"] retain_stub];
    __bornDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"nation"])
  {
    __nation = [[decoder decodeObjectForKey: @"nation"] retain_stub];
    __nation_isset = YES;
  }
  if ([decoder containsValueForKey: @"contactNo"])
  {
    __contactNo = [[decoder decodeObjectForKey: @"contactNo"] retain_stub];
    __contactNo_isset = YES;
  }
  if ([decoder containsValueForKey: @"bloodType"])
  {
    __bloodType = [[decoder decodeObjectForKey: @"bloodType"] retain_stub];
    __bloodType_isset = YES;
  }
  if ([decoder containsValueForKey: @"marriage"])
  {
    __marriage = [[decoder decodeObjectForKey: @"marriage"] retain_stub];
    __marriage_isset = YES;
  }
  if ([decoder containsValueForKey: @"payType"])
  {
    __payType = [[decoder decodeObjectForKey: @"payType"] retain_stub];
    __payType_isset = YES;
  }
  if ([decoder containsValueForKey: @"corpName"])
  {
    __corpName = [[decoder decodeObjectForKey: @"corpName"] retain_stub];
    __corpName_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"disability"])
  {
    __disability = [[decoder decodeObjectForKey: @"disability"] retain_stub];
    __disability_isset = YES;
  }
  if ([decoder containsValueForKey: @"familyHistory"])
  {
    __familyHistory = [[decoder decodeObjectForKey: @"familyHistory"] retain_stub];
    __familyHistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"allergicHistory"])
  {
    __allergicHistory = [[decoder decodeObjectForKey: @"allergicHistory"] retain_stub];
    __allergicHistory_isset = YES;
  }
  if ([decoder containsValueForKey: @"linkB"])
  {
    __linkB = [[decoder decodeObjectForKey: @"linkB"] retain_stub];
    __linkB_isset = YES;
  }
  if ([decoder containsValueForKey: @"linkD"])
  {
    __linkD = [[decoder decodeObjectForKey: @"linkD"] retain_stub];
    __linkD_isset = YES;
  }
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [[decoder decodeObjectForKey: @"code"] retain_stub];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"hospId"])
  {
    __hospId = [[decoder decodeObjectForKey: @"hospId"] retain_stub];
    __hospId_isset = YES;
  }
  if ([decoder containsValueForKey: @"version"])
  {
    __version = [decoder decodeInt32ForKey: @"version"];
    __version_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__gender_isset)
  {
    [encoder encodeObject: __gender forKey: @"gender"];
  }
  if (__age_isset)
  {
    [encoder encodeObject: __age forKey: @"age"];
  }
  if (__patientHead_isset)
  {
    [encoder encodeObject: __patientHead forKey: @"patientHead"];
  }
  if (__bornDate_isset)
  {
    [encoder encodeObject: __bornDate forKey: @"bornDate"];
  }
  if (__nation_isset)
  {
    [encoder encodeObject: __nation forKey: @"nation"];
  }
  if (__contactNo_isset)
  {
    [encoder encodeObject: __contactNo forKey: @"contactNo"];
  }
  if (__bloodType_isset)
  {
    [encoder encodeObject: __bloodType forKey: @"bloodType"];
  }
  if (__marriage_isset)
  {
    [encoder encodeObject: __marriage forKey: @"marriage"];
  }
  if (__payType_isset)
  {
    [encoder encodeObject: __payType forKey: @"payType"];
  }
  if (__corpName_isset)
  {
    [encoder encodeObject: __corpName forKey: @"corpName"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__disability_isset)
  {
    [encoder encodeObject: __disability forKey: @"disability"];
  }
  if (__familyHistory_isset)
  {
    [encoder encodeObject: __familyHistory forKey: @"familyHistory"];
  }
  if (__allergicHistory_isset)
  {
    [encoder encodeObject: __allergicHistory forKey: @"allergicHistory"];
  }
  if (__linkB_isset)
  {
    [encoder encodeObject: __linkB forKey: @"linkB"];
  }
  if (__linkD_isset)
  {
    [encoder encodeObject: __linkD forKey: @"linkD"];
  }
  if (__code_isset)
  {
    [encoder encodeObject: __code forKey: @"code"];
  }
  if (__hospId_isset)
  {
    [encoder encodeObject: __hospId forKey: @"hospId"];
  }
  if (__version_isset)
  {
    [encoder encodeInt32: __version forKey: @"version"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [__gender hash];
  }
  hash = (hash * 31) ^ __age_isset ? 2654435761 : 0;
  if (__age_isset)
  {
    hash = (hash * 31) ^ [__age hash];
  }
  hash = (hash * 31) ^ __patientHead_isset ? 2654435761 : 0;
  if (__patientHead_isset)
  {
    hash = (hash * 31) ^ [__patientHead hash];
  }
  hash = (hash * 31) ^ __bornDate_isset ? 2654435761 : 0;
  if (__bornDate_isset)
  {
    hash = (hash * 31) ^ [__bornDate hash];
  }
  hash = (hash * 31) ^ __nation_isset ? 2654435761 : 0;
  if (__nation_isset)
  {
    hash = (hash * 31) ^ [__nation hash];
  }
  hash = (hash * 31) ^ __contactNo_isset ? 2654435761 : 0;
  if (__contactNo_isset)
  {
    hash = (hash * 31) ^ [__contactNo hash];
  }
  hash = (hash * 31) ^ __bloodType_isset ? 2654435761 : 0;
  if (__bloodType_isset)
  {
    hash = (hash * 31) ^ [__bloodType hash];
  }
  hash = (hash * 31) ^ __marriage_isset ? 2654435761 : 0;
  if (__marriage_isset)
  {
    hash = (hash * 31) ^ [__marriage hash];
  }
  hash = (hash * 31) ^ __payType_isset ? 2654435761 : 0;
  if (__payType_isset)
  {
    hash = (hash * 31) ^ [__payType hash];
  }
  hash = (hash * 31) ^ __corpName_isset ? 2654435761 : 0;
  if (__corpName_isset)
  {
    hash = (hash * 31) ^ [__corpName hash];
  }
  hash = (hash * 31) ^ __address_isset ? 2654435761 : 0;
  if (__address_isset)
  {
    hash = (hash * 31) ^ [__address hash];
  }
  hash = (hash * 31) ^ __disability_isset ? 2654435761 : 0;
  if (__disability_isset)
  {
    hash = (hash * 31) ^ [__disability hash];
  }
  hash = (hash * 31) ^ __familyHistory_isset ? 2654435761 : 0;
  if (__familyHistory_isset)
  {
    hash = (hash * 31) ^ [__familyHistory hash];
  }
  hash = (hash * 31) ^ __allergicHistory_isset ? 2654435761 : 0;
  if (__allergicHistory_isset)
  {
    hash = (hash * 31) ^ [__allergicHistory hash];
  }
  hash = (hash * 31) ^ __linkB_isset ? 2654435761 : 0;
  if (__linkB_isset)
  {
    hash = (hash * 31) ^ [__linkB hash];
  }
  hash = (hash * 31) ^ __linkD_isset ? 2654435761 : 0;
  if (__linkD_isset)
  {
    hash = (hash * 31) ^ [__linkD hash];
  }
  hash = (hash * 31) ^ __code_isset ? 2654435761 : 0;
  if (__code_isset)
  {
    hash = (hash * 31) ^ [__code hash];
  }
  hash = (hash * 31) ^ __hospId_isset ? 2654435761 : 0;
  if (__hospId_isset)
  {
    hash = (hash * 31) ^ [__hospId hash];
  }
  hash = (hash * 31) ^ __version_isset ? 2654435761 : 0;
  if (__version_isset)
  {
    hash = (hash * 31) ^ [@(__version) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetHealthProfileResp class]]) {
    return NO;
  }
  NXTFGetHealthProfileResp *other = (NXTFGetHealthProfileResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && ((__gender || other->__gender) && ![__gender isEqual:other->__gender]))) {
    return NO;
  }
  if ((__age_isset != other->__age_isset) ||
      (__age_isset && ((__age || other->__age) && ![__age isEqual:other->__age]))) {
    return NO;
  }
  if ((__patientHead_isset != other->__patientHead_isset) ||
      (__patientHead_isset && ((__patientHead || other->__patientHead) && ![__patientHead isEqual:other->__patientHead]))) {
    return NO;
  }
  if ((__bornDate_isset != other->__bornDate_isset) ||
      (__bornDate_isset && ((__bornDate || other->__bornDate) && ![__bornDate isEqual:other->__bornDate]))) {
    return NO;
  }
  if ((__nation_isset != other->__nation_isset) ||
      (__nation_isset && ((__nation || other->__nation) && ![__nation isEqual:other->__nation]))) {
    return NO;
  }
  if ((__contactNo_isset != other->__contactNo_isset) ||
      (__contactNo_isset && ((__contactNo || other->__contactNo) && ![__contactNo isEqual:other->__contactNo]))) {
    return NO;
  }
  if ((__bloodType_isset != other->__bloodType_isset) ||
      (__bloodType_isset && ((__bloodType || other->__bloodType) && ![__bloodType isEqual:other->__bloodType]))) {
    return NO;
  }
  if ((__marriage_isset != other->__marriage_isset) ||
      (__marriage_isset && ((__marriage || other->__marriage) && ![__marriage isEqual:other->__marriage]))) {
    return NO;
  }
  if ((__payType_isset != other->__payType_isset) ||
      (__payType_isset && ((__payType || other->__payType) && ![__payType isEqual:other->__payType]))) {
    return NO;
  }
  if ((__corpName_isset != other->__corpName_isset) ||
      (__corpName_isset && ((__corpName || other->__corpName) && ![__corpName isEqual:other->__corpName]))) {
    return NO;
  }
  if ((__address_isset != other->__address_isset) ||
      (__address_isset && ((__address || other->__address) && ![__address isEqual:other->__address]))) {
    return NO;
  }
  if ((__disability_isset != other->__disability_isset) ||
      (__disability_isset && ((__disability || other->__disability) && ![__disability isEqual:other->__disability]))) {
    return NO;
  }
  if ((__familyHistory_isset != other->__familyHistory_isset) ||
      (__familyHistory_isset && ((__familyHistory || other->__familyHistory) && ![__familyHistory isEqual:other->__familyHistory]))) {
    return NO;
  }
  if ((__allergicHistory_isset != other->__allergicHistory_isset) ||
      (__allergicHistory_isset && ((__allergicHistory || other->__allergicHistory) && ![__allergicHistory isEqual:other->__allergicHistory]))) {
    return NO;
  }
  if ((__linkB_isset != other->__linkB_isset) ||
      (__linkB_isset && ((__linkB || other->__linkB) && ![__linkB isEqual:other->__linkB]))) {
    return NO;
  }
  if ((__linkD_isset != other->__linkD_isset) ||
      (__linkD_isset && ((__linkD || other->__linkD) && ![__linkD isEqual:other->__linkD]))) {
    return NO;
  }
  if ((__code_isset != other->__code_isset) ||
      (__code_isset && ((__code || other->__code) && ![__code isEqual:other->__code]))) {
    return NO;
  }
  if ((__hospId_isset != other->__hospId_isset) ||
      (__hospId_isset && ((__hospId || other->__hospId) && ![__hospId isEqual:other->__hospId]))) {
    return NO;
  }
  if ((__version_isset != other->__version_isset) ||
      (__version_isset && (__version != other->__version))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__name release_stub];
  [__gender release_stub];
  [__age release_stub];
  [__patientHead release_stub];
  [__bornDate release_stub];
  [__nation release_stub];
  [__contactNo release_stub];
  [__bloodType release_stub];
  [__marriage release_stub];
  [__payType release_stub];
  [__corpName release_stub];
  [__address release_stub];
  [__disability release_stub];
  [__familyHistory release_stub];
  [__allergicHistory release_stub];
  [__linkB release_stub];
  [__linkD release_stub];
  [__code release_stub];
  [__hospId release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) gender {
  return [[__gender retain_stub] autorelease_stub];
}

- (void) setGender: (NSString *) gender {
  [gender retain_stub];
  [__gender release_stub];
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  [__gender release_stub];
  __gender = nil;
  __gender_isset = NO;
}

- (NSString *) age {
  return [[__age retain_stub] autorelease_stub];
}

- (void) setAge: (NSString *) age {
  [age retain_stub];
  [__age release_stub];
  __age = age;
  __age_isset = YES;
}

- (BOOL) ageIsSet {
  return __age_isset;
}

- (void) unsetAge {
  [__age release_stub];
  __age = nil;
  __age_isset = NO;
}

- (NSString *) patientHead {
  return [[__patientHead retain_stub] autorelease_stub];
}

- (void) setPatientHead: (NSString *) patientHead {
  [patientHead retain_stub];
  [__patientHead release_stub];
  __patientHead = patientHead;
  __patientHead_isset = YES;
}

- (BOOL) patientHeadIsSet {
  return __patientHead_isset;
}

- (void) unsetPatientHead {
  [__patientHead release_stub];
  __patientHead = nil;
  __patientHead_isset = NO;
}

- (NSString *) bornDate {
  return [[__bornDate retain_stub] autorelease_stub];
}

- (void) setBornDate: (NSString *) bornDate {
  [bornDate retain_stub];
  [__bornDate release_stub];
  __bornDate = bornDate;
  __bornDate_isset = YES;
}

- (BOOL) bornDateIsSet {
  return __bornDate_isset;
}

- (void) unsetBornDate {
  [__bornDate release_stub];
  __bornDate = nil;
  __bornDate_isset = NO;
}

- (NSString *) nation {
  return [[__nation retain_stub] autorelease_stub];
}

- (void) setNation: (NSString *) nation {
  [nation retain_stub];
  [__nation release_stub];
  __nation = nation;
  __nation_isset = YES;
}

- (BOOL) nationIsSet {
  return __nation_isset;
}

- (void) unsetNation {
  [__nation release_stub];
  __nation = nil;
  __nation_isset = NO;
}

- (NSString *) contactNo {
  return [[__contactNo retain_stub] autorelease_stub];
}

- (void) setContactNo: (NSString *) contactNo {
  [contactNo retain_stub];
  [__contactNo release_stub];
  __contactNo = contactNo;
  __contactNo_isset = YES;
}

- (BOOL) contactNoIsSet {
  return __contactNo_isset;
}

- (void) unsetContactNo {
  [__contactNo release_stub];
  __contactNo = nil;
  __contactNo_isset = NO;
}

- (NSString *) bloodType {
  return [[__bloodType retain_stub] autorelease_stub];
}

- (void) setBloodType: (NSString *) bloodType {
  [bloodType retain_stub];
  [__bloodType release_stub];
  __bloodType = bloodType;
  __bloodType_isset = YES;
}

- (BOOL) bloodTypeIsSet {
  return __bloodType_isset;
}

- (void) unsetBloodType {
  [__bloodType release_stub];
  __bloodType = nil;
  __bloodType_isset = NO;
}

- (NSString *) marriage {
  return [[__marriage retain_stub] autorelease_stub];
}

- (void) setMarriage: (NSString *) marriage {
  [marriage retain_stub];
  [__marriage release_stub];
  __marriage = marriage;
  __marriage_isset = YES;
}

- (BOOL) marriageIsSet {
  return __marriage_isset;
}

- (void) unsetMarriage {
  [__marriage release_stub];
  __marriage = nil;
  __marriage_isset = NO;
}

- (NSString *) payType {
  return [[__payType retain_stub] autorelease_stub];
}

- (void) setPayType: (NSString *) payType {
  [payType retain_stub];
  [__payType release_stub];
  __payType = payType;
  __payType_isset = YES;
}

- (BOOL) payTypeIsSet {
  return __payType_isset;
}

- (void) unsetPayType {
  [__payType release_stub];
  __payType = nil;
  __payType_isset = NO;
}

- (NSString *) corpName {
  return [[__corpName retain_stub] autorelease_stub];
}

- (void) setCorpName: (NSString *) corpName {
  [corpName retain_stub];
  [__corpName release_stub];
  __corpName = corpName;
  __corpName_isset = YES;
}

- (BOOL) corpNameIsSet {
  return __corpName_isset;
}

- (void) unsetCorpName {
  [__corpName release_stub];
  __corpName = nil;
  __corpName_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (NSString *) disability {
  return [[__disability retain_stub] autorelease_stub];
}

- (void) setDisability: (NSString *) disability {
  [disability retain_stub];
  [__disability release_stub];
  __disability = disability;
  __disability_isset = YES;
}

- (BOOL) disabilityIsSet {
  return __disability_isset;
}

- (void) unsetDisability {
  [__disability release_stub];
  __disability = nil;
  __disability_isset = NO;
}

- (NSString *) familyHistory {
  return [[__familyHistory retain_stub] autorelease_stub];
}

- (void) setFamilyHistory: (NSString *) familyHistory {
  [familyHistory retain_stub];
  [__familyHistory release_stub];
  __familyHistory = familyHistory;
  __familyHistory_isset = YES;
}

- (BOOL) familyHistoryIsSet {
  return __familyHistory_isset;
}

- (void) unsetFamilyHistory {
  [__familyHistory release_stub];
  __familyHistory = nil;
  __familyHistory_isset = NO;
}

- (NSString *) allergicHistory {
  return [[__allergicHistory retain_stub] autorelease_stub];
}

- (void) setAllergicHistory: (NSString *) allergicHistory {
  [allergicHistory retain_stub];
  [__allergicHistory release_stub];
  __allergicHistory = allergicHistory;
  __allergicHistory_isset = YES;
}

- (BOOL) allergicHistoryIsSet {
  return __allergicHistory_isset;
}

- (void) unsetAllergicHistory {
  [__allergicHistory release_stub];
  __allergicHistory = nil;
  __allergicHistory_isset = NO;
}

- (NSString *) linkB {
  return [[__linkB retain_stub] autorelease_stub];
}

- (void) setLinkB: (NSString *) linkB {
  [linkB retain_stub];
  [__linkB release_stub];
  __linkB = linkB;
  __linkB_isset = YES;
}

- (BOOL) linkBIsSet {
  return __linkB_isset;
}

- (void) unsetLinkB {
  [__linkB release_stub];
  __linkB = nil;
  __linkB_isset = NO;
}

- (NSString *) linkD {
  return [[__linkD retain_stub] autorelease_stub];
}

- (void) setLinkD: (NSString *) linkD {
  [linkD retain_stub];
  [__linkD release_stub];
  __linkD = linkD;
  __linkD_isset = YES;
}

- (BOOL) linkDIsSet {
  return __linkD_isset;
}

- (void) unsetLinkD {
  [__linkD release_stub];
  __linkD = nil;
  __linkD_isset = NO;
}

- (NSString *) code {
  return [[__code retain_stub] autorelease_stub];
}

- (void) setCode: (NSString *) code {
  [code retain_stub];
  [__code release_stub];
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  [__code release_stub];
  __code = nil;
  __code_isset = NO;
}

- (NSString *) hospId {
  return [[__hospId retain_stub] autorelease_stub];
}

- (void) setHospId: (NSString *) hospId {
  [hospId retain_stub];
  [__hospId release_stub];
  __hospId = hospId;
  __hospId_isset = YES;
}

- (BOOL) hospIdIsSet {
  return __hospId_isset;
}

- (void) unsetHospId {
  [__hospId release_stub];
  __hospId = nil;
  __hospId_isset = NO;
}

- (int32_t) version {
  return __version;
}

- (void) setVersion: (int32_t) version {
  __version = version;
  __version_isset = YES;
}

- (BOOL) versionIsSet {
  return __version_isset;
}

- (void) unsetVersion {
  __version_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAge: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientHead: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBornDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContactNo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBloodType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMarriage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPayType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCorpName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDisability: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFamilyHistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAllergicHistory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLinkB: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLinkD: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHospId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetHealthProfileResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    if (__gender != nil) {
      [outProtocol writeFieldBeginWithName: @"gender" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __gender];
      [outProtocol writeFieldEnd];
    }
  }
  if (__age_isset) {
    if (__age != nil) {
      [outProtocol writeFieldBeginWithName: @"age" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __age];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientHead_isset) {
    if (__patientHead != nil) {
      [outProtocol writeFieldBeginWithName: @"patientHead" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __patientHead];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bornDate_isset) {
    if (__bornDate != nil) {
      [outProtocol writeFieldBeginWithName: @"bornDate" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __bornDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__nation_isset) {
    if (__nation != nil) {
      [outProtocol writeFieldBeginWithName: @"nation" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __nation];
      [outProtocol writeFieldEnd];
    }
  }
  if (__contactNo_isset) {
    if (__contactNo != nil) {
      [outProtocol writeFieldBeginWithName: @"contactNo" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __contactNo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bloodType_isset) {
    if (__bloodType != nil) {
      [outProtocol writeFieldBeginWithName: @"bloodType" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __bloodType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__marriage_isset) {
    if (__marriage != nil) {
      [outProtocol writeFieldBeginWithName: @"marriage" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __marriage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__payType_isset) {
    if (__payType != nil) {
      [outProtocol writeFieldBeginWithName: @"payType" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __payType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__corpName_isset) {
    if (__corpName != nil) {
      [outProtocol writeFieldBeginWithName: @"corpName" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __corpName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__disability_isset) {
    if (__disability != nil) {
      [outProtocol writeFieldBeginWithName: @"disability" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __disability];
      [outProtocol writeFieldEnd];
    }
  }
  if (__familyHistory_isset) {
    if (__familyHistory != nil) {
      [outProtocol writeFieldBeginWithName: @"familyHistory" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __familyHistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__allergicHistory_isset) {
    if (__allergicHistory != nil) {
      [outProtocol writeFieldBeginWithName: @"allergicHistory" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __allergicHistory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__linkB_isset) {
    if (__linkB != nil) {
      [outProtocol writeFieldBeginWithName: @"linkB" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __linkB];
      [outProtocol writeFieldEnd];
    }
  }
  if (__linkD_isset) {
    if (__linkD != nil) {
      [outProtocol writeFieldBeginWithName: @"linkD" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __linkD];
      [outProtocol writeFieldEnd];
    }
  }
  if (__code_isset) {
    if (__code != nil) {
      [outProtocol writeFieldBeginWithName: @"code" type: TType_STRING fieldID: 19];
      [outProtocol writeString: __code];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hospId_isset) {
    if (__hospId != nil) {
      [outProtocol writeFieldBeginWithName: @"hospId" type: TType_STRING fieldID: 20];
      [outProtocol writeString: __hospId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__version_isset) {
    [outProtocol writeFieldBeginWithName: @"version" type: TType_I32 fieldID: 21];
    [outProtocol writeI32: __version];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetHealthProfileResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"\"%@\"", __gender];
  [ms appendString: @",age:"];
  [ms appendFormat: @"\"%@\"", __age];
  [ms appendString: @",patientHead:"];
  [ms appendFormat: @"\"%@\"", __patientHead];
  [ms appendString: @",bornDate:"];
  [ms appendFormat: @"\"%@\"", __bornDate];
  [ms appendString: @",nation:"];
  [ms appendFormat: @"\"%@\"", __nation];
  [ms appendString: @",contactNo:"];
  [ms appendFormat: @"\"%@\"", __contactNo];
  [ms appendString: @",bloodType:"];
  [ms appendFormat: @"\"%@\"", __bloodType];
  [ms appendString: @",marriage:"];
  [ms appendFormat: @"\"%@\"", __marriage];
  [ms appendString: @",payType:"];
  [ms appendFormat: @"\"%@\"", __payType];
  [ms appendString: @",corpName:"];
  [ms appendFormat: @"\"%@\"", __corpName];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",disability:"];
  [ms appendFormat: @"\"%@\"", __disability];
  [ms appendString: @",familyHistory:"];
  [ms appendFormat: @"\"%@\"", __familyHistory];
  [ms appendString: @",allergicHistory:"];
  [ms appendFormat: @"\"%@\"", __allergicHistory];
  [ms appendString: @",linkB:"];
  [ms appendFormat: @"\"%@\"", __linkB];
  [ms appendString: @",linkD:"];
  [ms appendFormat: @"\"%@\"", __linkD];
  [ms appendString: @",code:"];
  [ms appendFormat: @"\"%@\"", __code];
  [ms appendString: @",hospId:"];
  [ms appendFormat: @"\"%@\"", __hospId];
  [ms appendString: @",version:"];
  [ms appendFormat: @"%i", __version];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetVisitListResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.visitRecords = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header visitRecords: (NSMutableArray *) visitRecords page: (NXTFPage *) page version: (int32_t) version
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __visitRecords = [visitRecords retain_stub];
  __visitRecords_isset = YES;
  __page = [page retain_stub];
  __page_isset = YES;
  __version = version;
  __version_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitRecords"])
  {
    __visitRecords = [[decoder decodeObjectForKey: @"visitRecords"] retain_stub];
    __visitRecords_isset = YES;
  }
  if ([decoder containsValueForKey: @"page"])
  {
    __page = [[decoder decodeObjectForKey: @"page"] retain_stub];
    __page_isset = YES;
  }
  if ([decoder containsValueForKey: @"version"])
  {
    __version = [decoder decodeInt32ForKey: @"version"];
    __version_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__visitRecords_isset)
  {
    [encoder encodeObject: __visitRecords forKey: @"visitRecords"];
  }
  if (__page_isset)
  {
    [encoder encodeObject: __page forKey: @"page"];
  }
  if (__version_isset)
  {
    [encoder encodeInt32: __version forKey: @"version"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __visitRecords_isset ? 2654435761 : 0;
  if (__visitRecords_isset)
  {
    hash = (hash * 31) ^ [__visitRecords hash];
  }
  hash = (hash * 31) ^ __page_isset ? 2654435761 : 0;
  if (__page_isset)
  {
    hash = (hash * 31) ^ [__page hash];
  }
  hash = (hash * 31) ^ __version_isset ? 2654435761 : 0;
  if (__version_isset)
  {
    hash = (hash * 31) ^ [@(__version) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetVisitListResp class]]) {
    return NO;
  }
  NXTFGetVisitListResp *other = (NXTFGetVisitListResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__visitRecords_isset != other->__visitRecords_isset) ||
      (__visitRecords_isset && ((__visitRecords || other->__visitRecords) && ![__visitRecords isEqual:other->__visitRecords]))) {
    return NO;
  }
  if ((__page_isset != other->__page_isset) ||
      (__page_isset && ((__page || other->__page) && ![__page isEqual:other->__page]))) {
    return NO;
  }
  if ((__version_isset != other->__version_isset) ||
      (__version_isset && (__version != other->__version))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__visitRecords release_stub];
  [__page release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) visitRecords {
  return [[__visitRecords retain_stub] autorelease_stub];
}

- (void) setVisitRecords: (NSMutableArray *) visitRecords {
  [visitRecords retain_stub];
  [__visitRecords release_stub];
  __visitRecords = visitRecords;
  __visitRecords_isset = YES;
}

- (BOOL) visitRecordsIsSet {
  return __visitRecords_isset;
}

- (void) unsetVisitRecords {
  [__visitRecords release_stub];
  __visitRecords = nil;
  __visitRecords_isset = NO;
}

- (NXTFPage *) page {
  return [[__page retain_stub] autorelease_stub];
}

- (void) setPage: (NXTFPage *) page {
  [page retain_stub];
  [__page release_stub];
  __page = page;
  __page_isset = YES;
}

- (BOOL) pageIsSet {
  return __page_isset;
}

- (void) unsetPage {
  [__page release_stub];
  __page = nil;
  __page_isset = NO;
}

- (int32_t) version {
  return __version;
}

- (void) setVersion: (int32_t) version {
  __version = version;
  __version_isset = YES;
}

- (BOOL) versionIsSet {
  return __version_isset;
}

- (void) unsetVersion {
  __version_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size347;
          [inProtocol readListBeginReturningElementType: NULL size: &_size347];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size347];
          int _i348;
          for (_i348 = 0; _i348 < _size347; ++_i348)
          {
            NXTFVisitRecordDto *_elem349 = [[NXTFVisitRecordDto alloc] init];
            [_elem349 read: inProtocol];
            [fieldValue addObject: _elem349];
            [_elem349 release_stub];
          }
          [inProtocol readListEnd];
          [self setVisitRecords: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          NXTFPage *fieldValue = [[NXTFPage alloc] init];
          [fieldValue read: inProtocol];
          [self setPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetVisitListResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__visitRecords_isset) {
    if (__visitRecords != nil) {
      [outProtocol writeFieldBeginWithName: @"visitRecords" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__visitRecords count]];
        int idx351;
        for (idx351 = 0; idx351 < [__visitRecords count]; idx351++)
        {
          [[__visitRecords objectAtIndex: idx351] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_isset) {
    if (__page != nil) {
      [outProtocol writeFieldBeginWithName: @"page" type: TType_STRUCT fieldID: 3];
      [__page write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__version_isset) {
    [outProtocol writeFieldBeginWithName: @"version" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __version];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetVisitListResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",visitRecords:"];
  [ms appendFormat: @"%@", __visitRecords];
  [ms appendString: @",page:"];
  [ms appendFormat: @"%@", __page];
  [ms appendString: @",version:"];
  [ms appendFormat: @"%i", __version];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetVisitDetailResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header name: (NSString *) name gender: (NSString *) gender age: (NSString *) age patientHead: (NSString *) patientHead visitType: (int32_t) visitType fHBVisit: (NXTFFHBVisitDto *) fHBVisit fHDVisit: (NXTFFHDVisitDto *) fHDVisit
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __gender = [gender retain_stub];
  __gender_isset = YES;
  __age = [age retain_stub];
  __age_isset = YES;
  __patientHead = [patientHead retain_stub];
  __patientHead_isset = YES;
  __visitType = visitType;
  __visitType_isset = YES;
  __fHBVisit = [fHBVisit retain_stub];
  __fHBVisit_isset = YES;
  __fHDVisit = [fHDVisit retain_stub];
  __fHDVisit_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [[decoder decodeObjectForKey: @"gender"] retain_stub];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"age"])
  {
    __age = [[decoder decodeObjectForKey: @"age"] retain_stub];
    __age_isset = YES;
  }
  if ([decoder containsValueForKey: @"patientHead"])
  {
    __patientHead = [[decoder decodeObjectForKey: @"patientHead"] retain_stub];
    __patientHead_isset = YES;
  }
  if ([decoder containsValueForKey: @"visitType"])
  {
    __visitType = [decoder decodeInt32ForKey: @"visitType"];
    __visitType_isset = YES;
  }
  if ([decoder containsValueForKey: @"fHBVisit"])
  {
    __fHBVisit = [[decoder decodeObjectForKey: @"fHBVisit"] retain_stub];
    __fHBVisit_isset = YES;
  }
  if ([decoder containsValueForKey: @"fHDVisit"])
  {
    __fHDVisit = [[decoder decodeObjectForKey: @"fHDVisit"] retain_stub];
    __fHDVisit_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__gender_isset)
  {
    [encoder encodeObject: __gender forKey: @"gender"];
  }
  if (__age_isset)
  {
    [encoder encodeObject: __age forKey: @"age"];
  }
  if (__patientHead_isset)
  {
    [encoder encodeObject: __patientHead forKey: @"patientHead"];
  }
  if (__visitType_isset)
  {
    [encoder encodeInt32: __visitType forKey: @"visitType"];
  }
  if (__fHBVisit_isset)
  {
    [encoder encodeObject: __fHBVisit forKey: @"fHBVisit"];
  }
  if (__fHDVisit_isset)
  {
    [encoder encodeObject: __fHDVisit forKey: @"fHDVisit"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [__gender hash];
  }
  hash = (hash * 31) ^ __age_isset ? 2654435761 : 0;
  if (__age_isset)
  {
    hash = (hash * 31) ^ [__age hash];
  }
  hash = (hash * 31) ^ __patientHead_isset ? 2654435761 : 0;
  if (__patientHead_isset)
  {
    hash = (hash * 31) ^ [__patientHead hash];
  }
  hash = (hash * 31) ^ __visitType_isset ? 2654435761 : 0;
  if (__visitType_isset)
  {
    hash = (hash * 31) ^ [@(__visitType) hash];
  }
  hash = (hash * 31) ^ __fHBVisit_isset ? 2654435761 : 0;
  if (__fHBVisit_isset)
  {
    hash = (hash * 31) ^ [__fHBVisit hash];
  }
  hash = (hash * 31) ^ __fHDVisit_isset ? 2654435761 : 0;
  if (__fHDVisit_isset)
  {
    hash = (hash * 31) ^ [__fHDVisit hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetVisitDetailResp class]]) {
    return NO;
  }
  NXTFGetVisitDetailResp *other = (NXTFGetVisitDetailResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && ((__gender || other->__gender) && ![__gender isEqual:other->__gender]))) {
    return NO;
  }
  if ((__age_isset != other->__age_isset) ||
      (__age_isset && ((__age || other->__age) && ![__age isEqual:other->__age]))) {
    return NO;
  }
  if ((__patientHead_isset != other->__patientHead_isset) ||
      (__patientHead_isset && ((__patientHead || other->__patientHead) && ![__patientHead isEqual:other->__patientHead]))) {
    return NO;
  }
  if ((__visitType_isset != other->__visitType_isset) ||
      (__visitType_isset && (__visitType != other->__visitType))) {
    return NO;
  }
  if ((__fHBVisit_isset != other->__fHBVisit_isset) ||
      (__fHBVisit_isset && ((__fHBVisit || other->__fHBVisit) && ![__fHBVisit isEqual:other->__fHBVisit]))) {
    return NO;
  }
  if ((__fHDVisit_isset != other->__fHDVisit_isset) ||
      (__fHDVisit_isset && ((__fHDVisit || other->__fHDVisit) && ![__fHDVisit isEqual:other->__fHDVisit]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__name release_stub];
  [__gender release_stub];
  [__age release_stub];
  [__patientHead release_stub];
  [__fHBVisit release_stub];
  [__fHDVisit release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) gender {
  return [[__gender retain_stub] autorelease_stub];
}

- (void) setGender: (NSString *) gender {
  [gender retain_stub];
  [__gender release_stub];
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  [__gender release_stub];
  __gender = nil;
  __gender_isset = NO;
}

- (NSString *) age {
  return [[__age retain_stub] autorelease_stub];
}

- (void) setAge: (NSString *) age {
  [age retain_stub];
  [__age release_stub];
  __age = age;
  __age_isset = YES;
}

- (BOOL) ageIsSet {
  return __age_isset;
}

- (void) unsetAge {
  [__age release_stub];
  __age = nil;
  __age_isset = NO;
}

- (NSString *) patientHead {
  return [[__patientHead retain_stub] autorelease_stub];
}

- (void) setPatientHead: (NSString *) patientHead {
  [patientHead retain_stub];
  [__patientHead release_stub];
  __patientHead = patientHead;
  __patientHead_isset = YES;
}

- (BOOL) patientHeadIsSet {
  return __patientHead_isset;
}

- (void) unsetPatientHead {
  [__patientHead release_stub];
  __patientHead = nil;
  __patientHead_isset = NO;
}

- (int32_t) visitType {
  return __visitType;
}

- (void) setVisitType: (int32_t) visitType {
  __visitType = visitType;
  __visitType_isset = YES;
}

- (BOOL) visitTypeIsSet {
  return __visitType_isset;
}

- (void) unsetVisitType {
  __visitType_isset = NO;
}

- (NXTFFHBVisitDto *) fHBVisit {
  return [[__fHBVisit retain_stub] autorelease_stub];
}

- (void) setFHBVisit: (NXTFFHBVisitDto *) fHBVisit {
  [fHBVisit retain_stub];
  [__fHBVisit release_stub];
  __fHBVisit = fHBVisit;
  __fHBVisit_isset = YES;
}

- (BOOL) fHBVisitIsSet {
  return __fHBVisit_isset;
}

- (void) unsetFHBVisit {
  [__fHBVisit release_stub];
  __fHBVisit = nil;
  __fHBVisit_isset = NO;
}

- (NXTFFHDVisitDto *) fHDVisit {
  return [[__fHDVisit retain_stub] autorelease_stub];
}

- (void) setFHDVisit: (NXTFFHDVisitDto *) fHDVisit {
  [fHDVisit retain_stub];
  [__fHDVisit release_stub];
  __fHDVisit = fHDVisit;
  __fHDVisit_isset = YES;
}

- (BOOL) fHDVisitIsSet {
  return __fHDVisit_isset;
}

- (void) unsetFHDVisit {
  [__fHDVisit release_stub];
  __fHDVisit = nil;
  __fHDVisit_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAge: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPatientHead: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setVisitType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          NXTFFHBVisitDto *fieldValue = [[NXTFFHBVisitDto alloc] init];
          [fieldValue read: inProtocol];
          [self setFHBVisit: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRUCT) {
          NXTFFHDVisitDto *fieldValue = [[NXTFFHDVisitDto alloc] init];
          [fieldValue read: inProtocol];
          [self setFHDVisit: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetVisitDetailResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    if (__gender != nil) {
      [outProtocol writeFieldBeginWithName: @"gender" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __gender];
      [outProtocol writeFieldEnd];
    }
  }
  if (__age_isset) {
    if (__age != nil) {
      [outProtocol writeFieldBeginWithName: @"age" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __age];
      [outProtocol writeFieldEnd];
    }
  }
  if (__patientHead_isset) {
    if (__patientHead != nil) {
      [outProtocol writeFieldBeginWithName: @"patientHead" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __patientHead];
      [outProtocol writeFieldEnd];
    }
  }
  if (__visitType_isset) {
    [outProtocol writeFieldBeginWithName: @"visitType" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __visitType];
    [outProtocol writeFieldEnd];
  }
  if (__fHBVisit_isset) {
    if (__fHBVisit != nil) {
      [outProtocol writeFieldBeginWithName: @"fHBVisit" type: TType_STRUCT fieldID: 7];
      [__fHBVisit write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fHDVisit_isset) {
    if (__fHDVisit != nil) {
      [outProtocol writeFieldBeginWithName: @"fHDVisit" type: TType_STRUCT fieldID: 8];
      [__fHDVisit write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetVisitDetailResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"\"%@\"", __gender];
  [ms appendString: @",age:"];
  [ms appendFormat: @"\"%@\"", __age];
  [ms appendString: @",patientHead:"];
  [ms appendFormat: @"\"%@\"", __patientHead];
  [ms appendString: @",visitType:"];
  [ms appendFormat: @"%i", __visitType];
  [ms appendString: @",fHBVisit:"];
  [ms appendFormat: @"%@", __fHBVisit];
  [ms appendString: @",fHDVisit:"];
  [ms appendFormat: @"%@", __fHDVisit];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetConsultationResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header consultations: (NXTFConsultationDto *) consultations
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __consultations = [consultations retain_stub];
  __consultations_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"consultations"])
  {
    __consultations = [[decoder decodeObjectForKey: @"consultations"] retain_stub];
    __consultations_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__consultations_isset)
  {
    [encoder encodeObject: __consultations forKey: @"consultations"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __consultations_isset ? 2654435761 : 0;
  if (__consultations_isset)
  {
    hash = (hash * 31) ^ [__consultations hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetConsultationResp class]]) {
    return NO;
  }
  NXTFGetConsultationResp *other = (NXTFGetConsultationResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__consultations_isset != other->__consultations_isset) ||
      (__consultations_isset && ((__consultations || other->__consultations) && ![__consultations isEqual:other->__consultations]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__consultations release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NXTFConsultationDto *) consultations {
  return [[__consultations retain_stub] autorelease_stub];
}

- (void) setConsultations: (NXTFConsultationDto *) consultations {
  [consultations retain_stub];
  [__consultations release_stub];
  __consultations = consultations;
  __consultations_isset = YES;
}

- (BOOL) consultationsIsSet {
  return __consultations_isset;
}

- (void) unsetConsultations {
  [__consultations release_stub];
  __consultations = nil;
  __consultations_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          NXTFConsultationDto *fieldValue = [[NXTFConsultationDto alloc] init];
          [fieldValue read: inProtocol];
          [self setConsultations: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetConsultationResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__consultations_isset) {
    if (__consultations != nil) {
      [outProtocol writeFieldBeginWithName: @"consultations" type: TType_STRUCT fieldID: 2];
      [__consultations write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetConsultationResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",consultations:"];
  [ms appendFormat: @"%@", __consultations];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetChargeBalanceResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header balance: (NSString *) balance limits: (NSString *) limits createTime: (NSString *) createTime pwdStatus: (NSString *) pwdStatus
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __balance = [balance retain_stub];
  __balance_isset = YES;
  __limits = [limits retain_stub];
  __limits_isset = YES;
  __createTime = [createTime retain_stub];
  __createTime_isset = YES;
  __pwdStatus = [pwdStatus retain_stub];
  __pwdStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"balance"])
  {
    __balance = [[decoder decodeObjectForKey: @"balance"] retain_stub];
    __balance_isset = YES;
  }
  if ([decoder containsValueForKey: @"limits"])
  {
    __limits = [[decoder decodeObjectForKey: @"limits"] retain_stub];
    __limits_isset = YES;
  }
  if ([decoder containsValueForKey: @"createTime"])
  {
    __createTime = [[decoder decodeObjectForKey: @"createTime"] retain_stub];
    __createTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"pwdStatus"])
  {
    __pwdStatus = [[decoder decodeObjectForKey: @"pwdStatus"] retain_stub];
    __pwdStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__balance_isset)
  {
    [encoder encodeObject: __balance forKey: @"balance"];
  }
  if (__limits_isset)
  {
    [encoder encodeObject: __limits forKey: @"limits"];
  }
  if (__createTime_isset)
  {
    [encoder encodeObject: __createTime forKey: @"createTime"];
  }
  if (__pwdStatus_isset)
  {
    [encoder encodeObject: __pwdStatus forKey: @"pwdStatus"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __balance_isset ? 2654435761 : 0;
  if (__balance_isset)
  {
    hash = (hash * 31) ^ [__balance hash];
  }
  hash = (hash * 31) ^ __limits_isset ? 2654435761 : 0;
  if (__limits_isset)
  {
    hash = (hash * 31) ^ [__limits hash];
  }
  hash = (hash * 31) ^ __createTime_isset ? 2654435761 : 0;
  if (__createTime_isset)
  {
    hash = (hash * 31) ^ [__createTime hash];
  }
  hash = (hash * 31) ^ __pwdStatus_isset ? 2654435761 : 0;
  if (__pwdStatus_isset)
  {
    hash = (hash * 31) ^ [__pwdStatus hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetChargeBalanceResp class]]) {
    return NO;
  }
  NXTFGetChargeBalanceResp *other = (NXTFGetChargeBalanceResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__balance_isset != other->__balance_isset) ||
      (__balance_isset && ((__balance || other->__balance) && ![__balance isEqual:other->__balance]))) {
    return NO;
  }
  if ((__limits_isset != other->__limits_isset) ||
      (__limits_isset && ((__limits || other->__limits) && ![__limits isEqual:other->__limits]))) {
    return NO;
  }
  if ((__createTime_isset != other->__createTime_isset) ||
      (__createTime_isset && ((__createTime || other->__createTime) && ![__createTime isEqual:other->__createTime]))) {
    return NO;
  }
  if ((__pwdStatus_isset != other->__pwdStatus_isset) ||
      (__pwdStatus_isset && ((__pwdStatus || other->__pwdStatus) && ![__pwdStatus isEqual:other->__pwdStatus]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__balance release_stub];
  [__limits release_stub];
  [__createTime release_stub];
  [__pwdStatus release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) balance {
  return [[__balance retain_stub] autorelease_stub];
}

- (void) setBalance: (NSString *) balance {
  [balance retain_stub];
  [__balance release_stub];
  __balance = balance;
  __balance_isset = YES;
}

- (BOOL) balanceIsSet {
  return __balance_isset;
}

- (void) unsetBalance {
  [__balance release_stub];
  __balance = nil;
  __balance_isset = NO;
}

- (NSString *) limits {
  return [[__limits retain_stub] autorelease_stub];
}

- (void) setLimits: (NSString *) limits {
  [limits retain_stub];
  [__limits release_stub];
  __limits = limits;
  __limits_isset = YES;
}

- (BOOL) limitsIsSet {
  return __limits_isset;
}

- (void) unsetLimits {
  [__limits release_stub];
  __limits = nil;
  __limits_isset = NO;
}

- (NSString *) createTime {
  return [[__createTime retain_stub] autorelease_stub];
}

- (void) setCreateTime: (NSString *) createTime {
  [createTime retain_stub];
  [__createTime release_stub];
  __createTime = createTime;
  __createTime_isset = YES;
}

- (BOOL) createTimeIsSet {
  return __createTime_isset;
}

- (void) unsetCreateTime {
  [__createTime release_stub];
  __createTime = nil;
  __createTime_isset = NO;
}

- (NSString *) pwdStatus {
  return [[__pwdStatus retain_stub] autorelease_stub];
}

- (void) setPwdStatus: (NSString *) pwdStatus {
  [pwdStatus retain_stub];
  [__pwdStatus release_stub];
  __pwdStatus = pwdStatus;
  __pwdStatus_isset = YES;
}

- (BOOL) pwdStatusIsSet {
  return __pwdStatus_isset;
}

- (void) unsetPwdStatus {
  [__pwdStatus release_stub];
  __pwdStatus = nil;
  __pwdStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBalance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLimits: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreateTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPwdStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetChargeBalanceResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__balance_isset) {
    if (__balance != nil) {
      [outProtocol writeFieldBeginWithName: @"balance" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __balance];
      [outProtocol writeFieldEnd];
    }
  }
  if (__limits_isset) {
    if (__limits != nil) {
      [outProtocol writeFieldBeginWithName: @"limits" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __limits];
      [outProtocol writeFieldEnd];
    }
  }
  if (__createTime_isset) {
    if (__createTime != nil) {
      [outProtocol writeFieldBeginWithName: @"createTime" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __createTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pwdStatus_isset) {
    if (__pwdStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"pwdStatus" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __pwdStatus];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetChargeBalanceResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",balance:"];
  [ms appendFormat: @"\"%@\"", __balance];
  [ms appendString: @",limits:"];
  [ms appendFormat: @"\"%@\"", __limits];
  [ms appendString: @",createTime:"];
  [ms appendFormat: @"\"%@\"", __createTime];
  [ms appendString: @",pwdStatus:"];
  [ms appendFormat: @"\"%@\"", __pwdStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFAuthPmrResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFAuthPmrResp class]]) {
    return NO;
  }
  NXTFAuthPmrResp *other = (NXTFAuthPmrResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthPmrResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFAuthPmrResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFUpLoadTreatPicResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFUpLoadTreatPicResp class]]) {
    return NO;
  }
  NXTFUpLoadTreatPicResp *other = (NXTFUpLoadTreatPicResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UpLoadTreatPicResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFUpLoadTreatPicResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetQueInfoResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.queues = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header queues: (NSMutableArray *) queues
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __queues = [queues retain_stub];
  __queues_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"queues"])
  {
    __queues = [[decoder decodeObjectForKey: @"queues"] retain_stub];
    __queues_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__queues_isset)
  {
    [encoder encodeObject: __queues forKey: @"queues"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __queues_isset ? 2654435761 : 0;
  if (__queues_isset)
  {
    hash = (hash * 31) ^ [__queues hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetQueInfoResp class]]) {
    return NO;
  }
  NXTFGetQueInfoResp *other = (NXTFGetQueInfoResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__queues_isset != other->__queues_isset) ||
      (__queues_isset && ((__queues || other->__queues) && ![__queues isEqual:other->__queues]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__queues release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) queues {
  return [[__queues retain_stub] autorelease_stub];
}

- (void) setQueues: (NSMutableArray *) queues {
  [queues retain_stub];
  [__queues release_stub];
  __queues = queues;
  __queues_isset = YES;
}

- (BOOL) queuesIsSet {
  return __queues_isset;
}

- (void) unsetQueues {
  [__queues release_stub];
  __queues = nil;
  __queues_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size352;
          [inProtocol readListBeginReturningElementType: NULL size: &_size352];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size352];
          int _i353;
          for (_i353 = 0; _i353 < _size352; ++_i353)
          {
            NXTFQueueDto *_elem354 = [[NXTFQueueDto alloc] init];
            [_elem354 read: inProtocol];
            [fieldValue addObject: _elem354];
            [_elem354 release_stub];
          }
          [inProtocol readListEnd];
          [self setQueues: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetQueInfoResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__queues_isset) {
    if (__queues != nil) {
      [outProtocol writeFieldBeginWithName: @"queues" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__queues count]];
        int idx356;
        for (idx356 = 0; idx356 < [__queues count]; idx356++)
        {
          [[__queues objectAtIndex: idx356] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetQueInfoResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",queues:"];
  [ms appendFormat: @"%@", __queues];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFStatDataResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFStatDataResp class]]) {
    return NO;
  }
  NXTFStatDataResp *other = (NXTFStatDataResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"StatDataResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFStatDataResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFSignContractResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header result: (NSString *) result
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __result = [result retain_stub];
  __result_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFSignContractResp class]]) {
    return NO;
  }
  NXTFSignContractResp *other = (NXTFSignContractResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__result release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSString *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (NSString *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setResult: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignContractResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __result];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFSignContractResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",result:"];
  [ms appendFormat: @"\"%@\"", __result];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetPackageInfosResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.packageInfos = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header packageInfos: (NSMutableArray *) packageInfos
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __packageInfos = [packageInfos retain_stub];
  __packageInfos_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"packageInfos"])
  {
    __packageInfos = [[decoder decodeObjectForKey: @"packageInfos"] retain_stub];
    __packageInfos_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__packageInfos_isset)
  {
    [encoder encodeObject: __packageInfos forKey: @"packageInfos"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __packageInfos_isset ? 2654435761 : 0;
  if (__packageInfos_isset)
  {
    hash = (hash * 31) ^ [__packageInfos hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetPackageInfosResp class]]) {
    return NO;
  }
  NXTFGetPackageInfosResp *other = (NXTFGetPackageInfosResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__packageInfos_isset != other->__packageInfos_isset) ||
      (__packageInfos_isset && ((__packageInfos || other->__packageInfos) && ![__packageInfos isEqual:other->__packageInfos]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__packageInfos release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) packageInfos {
  return [[__packageInfos retain_stub] autorelease_stub];
}

- (void) setPackageInfos: (NSMutableArray *) packageInfos {
  [packageInfos retain_stub];
  [__packageInfos release_stub];
  __packageInfos = packageInfos;
  __packageInfos_isset = YES;
}

- (BOOL) packageInfosIsSet {
  return __packageInfos_isset;
}

- (void) unsetPackageInfos {
  [__packageInfos release_stub];
  __packageInfos = nil;
  __packageInfos_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size357;
          [inProtocol readListBeginReturningElementType: NULL size: &_size357];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size357];
          int _i358;
          for (_i358 = 0; _i358 < _size357; ++_i358)
          {
            NXTFPackageInfoDto *_elem359 = [[NXTFPackageInfoDto alloc] init];
            [_elem359 read: inProtocol];
            [fieldValue addObject: _elem359];
            [_elem359 release_stub];
          }
          [inProtocol readListEnd];
          [self setPackageInfos: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPackageInfosResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__packageInfos_isset) {
    if (__packageInfos != nil) {
      [outProtocol writeFieldBeginWithName: @"packageInfos" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__packageInfos count]];
        int idx361;
        for (idx361 = 0; idx361 < [__packageInfos count]; idx361++)
        {
          [[__packageInfos objectAtIndex: idx361] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetPackageInfosResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",packageInfos:"];
  [ms appendFormat: @"%@", __packageInfos];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetMyDoctorResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header contractInfos: (NSMutableArray *) contractInfos
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __contractInfos = [contractInfos retain_stub];
  __contractInfos_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"contractInfos"])
  {
    __contractInfos = [[decoder decodeObjectForKey: @"contractInfos"] retain_stub];
    __contractInfos_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__contractInfos_isset)
  {
    [encoder encodeObject: __contractInfos forKey: @"contractInfos"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __contractInfos_isset ? 2654435761 : 0;
  if (__contractInfos_isset)
  {
    hash = (hash * 31) ^ [__contractInfos hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetMyDoctorResp class]]) {
    return NO;
  }
  NXTFGetMyDoctorResp *other = (NXTFGetMyDoctorResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__contractInfos_isset != other->__contractInfos_isset) ||
      (__contractInfos_isset && ((__contractInfos || other->__contractInfos) && ![__contractInfos isEqual:other->__contractInfos]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__contractInfos release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) contractInfos {
  return [[__contractInfos retain_stub] autorelease_stub];
}

- (void) setContractInfos: (NSMutableArray *) contractInfos {
  [contractInfos retain_stub];
  [__contractInfos release_stub];
  __contractInfos = contractInfos;
  __contractInfos_isset = YES;
}

- (BOOL) contractInfosIsSet {
  return __contractInfos_isset;
}

- (void) unsetContractInfos {
  [__contractInfos release_stub];
  __contractInfos = nil;
  __contractInfos_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size362;
          [inProtocol readListBeginReturningElementType: NULL size: &_size362];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size362];
          int _i363;
          for (_i363 = 0; _i363 < _size362; ++_i363)
          {
            NXTFContractInfo *_elem364 = [[NXTFContractInfo alloc] init];
            [_elem364 read: inProtocol];
            [fieldValue addObject: _elem364];
            [_elem364 release_stub];
          }
          [inProtocol readListEnd];
          [self setContractInfos: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMyDoctorResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__contractInfos_isset) {
    if (__contractInfos != nil) {
      [outProtocol writeFieldBeginWithName: @"contractInfos" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__contractInfos count]];
        int idx366;
        for (idx366 = 0; idx366 < [__contractInfos count]; idx366++)
        {
          [[__contractInfos objectAtIndex: idx366] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetMyDoctorResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",contractInfos:"];
  [ms appendFormat: @"%@", __contractInfos];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFLinkPatResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFLinkPatResp class]]) {
    return NO;
  }
  NXTFLinkPatResp *other = (NXTFLinkPatResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LinkPatResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFLinkPatResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFGetRegistedDeptResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

  self.depts = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header depts: (NSMutableArray *) depts
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __depts = [depts retain_stub];
  __depts_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"depts"])
  {
    __depts = [[decoder decodeObjectForKey: @"depts"] retain_stub];
    __depts_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__depts_isset)
  {
    [encoder encodeObject: __depts forKey: @"depts"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __depts_isset ? 2654435761 : 0;
  if (__depts_isset)
  {
    hash = (hash * 31) ^ [__depts hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFGetRegistedDeptResp class]]) {
    return NO;
  }
  NXTFGetRegistedDeptResp *other = (NXTFGetRegistedDeptResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__depts_isset != other->__depts_isset) ||
      (__depts_isset && ((__depts || other->__depts) && ![__depts isEqual:other->__depts]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__depts release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) depts {
  return [[__depts retain_stub] autorelease_stub];
}

- (void) setDepts: (NSMutableArray *) depts {
  [depts retain_stub];
  [__depts release_stub];
  __depts = depts;
  __depts_isset = YES;
}

- (BOOL) deptsIsSet {
  return __depts_isset;
}

- (void) unsetDepts {
  [__depts release_stub];
  __depts = nil;
  __depts_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size367;
          [inProtocol readListBeginReturningElementType: NULL size: &_size367];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size367];
          int _i368;
          for (_i368 = 0; _i368 < _size367; ++_i368)
          {
            NXTFDept *_elem369 = [[NXTFDept alloc] init];
            [_elem369 read: inProtocol];
            [fieldValue addObject: _elem369];
            [_elem369 release_stub];
          }
          [inProtocol readListEnd];
          [self setDepts: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRegistedDeptResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__depts_isset) {
    if (__depts != nil) {
      [outProtocol writeFieldBeginWithName: @"depts" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__depts count]];
        int idx371;
        for (idx371 = 0; idx371 < [__depts count]; idx371++)
        {
          [[__depts objectAtIndex: idx371] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFGetRegistedDeptResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",depts:"];
  [ms appendFormat: @"%@", __depts];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NXTFDeptDocsResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.header = [[[NXTFRespHeader alloc] init] autorelease_stub];

#endif
  return self;
}

- (id) initWithHeader: (NXTFRespHeader *) header findDoctorOutputs: (NSMutableArray *) findDoctorOutputs desc: (NSString *) desc
{
  self = [super init];
  __header = [header retain_stub];
  __header_isset = YES;
  __findDoctorOutputs = [findDoctorOutputs retain_stub];
  __findDoctorOutputs_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"header"])
  {
    __header = [[decoder decodeObjectForKey: @"header"] retain_stub];
    __header_isset = YES;
  }
  if ([decoder containsValueForKey: @"findDoctorOutputs"])
  {
    __findDoctorOutputs = [[decoder decodeObjectForKey: @"findDoctorOutputs"] retain_stub];
    __findDoctorOutputs_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__header_isset)
  {
    [encoder encodeObject: __header forKey: @"header"];
  }
  if (__findDoctorOutputs_isset)
  {
    [encoder encodeObject: __findDoctorOutputs forKey: @"findDoctorOutputs"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __header_isset ? 2654435761 : 0;
  if (__header_isset)
  {
    hash = (hash * 31) ^ [__header hash];
  }
  hash = (hash * 31) ^ __findDoctorOutputs_isset ? 2654435761 : 0;
  if (__findDoctorOutputs_isset)
  {
    hash = (hash * 31) ^ [__findDoctorOutputs hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NXTFDeptDocsResp class]]) {
    return NO;
  }
  NXTFDeptDocsResp *other = (NXTFDeptDocsResp *)anObject;
  if ((__header_isset != other->__header_isset) ||
      (__header_isset && ((__header || other->__header) && ![__header isEqual:other->__header]))) {
    return NO;
  }
  if ((__findDoctorOutputs_isset != other->__findDoctorOutputs_isset) ||
      (__findDoctorOutputs_isset && ((__findDoctorOutputs || other->__findDoctorOutputs) && ![__findDoctorOutputs isEqual:other->__findDoctorOutputs]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__header release_stub];
  [__findDoctorOutputs release_stub];
  [__desc release_stub];
  [super dealloc_stub];
}

- (NXTFRespHeader *) header {
  return [[__header retain_stub] autorelease_stub];
}

- (void) setHeader: (NXTFRespHeader *) header {
  [header retain_stub];
  [__header release_stub];
  __header = header;
  __header_isset = YES;
}

- (BOOL) headerIsSet {
  return __header_isset;
}

- (void) unsetHeader {
  [__header release_stub];
  __header = nil;
  __header_isset = NO;
}

- (NSMutableArray *) findDoctorOutputs {
  return [[__findDoctorOutputs retain_stub] autorelease_stub];
}

- (void) setFindDoctorOutputs: (NSMutableArray *) findDoctorOutputs {
  [findDoctorOutputs retain_stub];
  [__findDoctorOutputs release_stub];
  __findDoctorOutputs = findDoctorOutputs;
  __findDoctorOutputs_isset = YES;
}

- (BOOL) findDoctorOutputsIsSet {
  return __findDoctorOutputs_isset;
}

- (void) unsetFindDoctorOutputs {
  [__findDoctorOutputs release_stub];
  __findDoctorOutputs = nil;
  __findDoctorOutputs_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NXTFRespHeader *fieldValue = [[NXTFRespHeader alloc] init];
          [fieldValue read: inProtocol];
          [self setHeader: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size372;
          [inProtocol readListBeginReturningElementType: NULL size: &_size372];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size372];
          int _i373;
          for (_i373 = 0; _i373 < _size372; ++_i373)
          {
            NXTFFindDoctorOutput *_elem374 = [[NXTFFindDoctorOutput alloc] init];
            [_elem374 read: inProtocol];
            [fieldValue addObject: _elem374];
            [_elem374 release_stub];
          }
          [inProtocol readListEnd];
          [self setFindDoctorOutputs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeptDocsResp"];
  if (__header_isset) {
    if (__header != nil) {
      [outProtocol writeFieldBeginWithName: @"header" type: TType_STRUCT fieldID: 1];
      [__header write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__findDoctorOutputs_isset) {
    if (__findDoctorOutputs != nil) {
      [outProtocol writeFieldBeginWithName: @"findDoctorOutputs" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__findDoctorOutputs count]];
        int idx376;
        for (idx376 = 0; idx376 < [__findDoctorOutputs count]; idx376++)
        {
          [[__findDoctorOutputs objectAtIndex: idx376] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NXTFDeptDocsResp("];
  [ms appendString: @"header:"];
  [ms appendFormat: @"%@", __header];
  [ms appendString: @",findDoctorOutputs:"];
  [ms appendFormat: @"%@", __findDoctorOutputs];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation NXTFRespConstants
+ (void) initialize {
}
@end

